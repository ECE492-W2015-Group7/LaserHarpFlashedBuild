#include <stdio.h>
#include "includes.h"
#include "altera_avalon_fifo_util.h"
#include "altera_avalon_fifo_regs.h"
#include "altera_avalon_fifo.h"
#include "altera_up_avalon_audio.h"
#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

/* Definition of Task Stacks */
#define   TASK_STACKSIZE 	12000
#define   BUFFER_SIZE    	128

OS_STK    audioTaskStack[TASK_STACKSIZE];
OS_STK    laserInputTaskStack[TASK_STACKSIZE];

/* Definition of Task Priorities */
#define LASER_INPUT_TASK_PRIORITY  	1
#define AUDIO_TASK_PRIORITY      	2

void handler(){

}

/* Prints "Hello World" and sleeps for three seconds */
void audioTask(void* pdata){
	INT8U err;
    alt_up_audio_dev * audio_dev;
    alt_up_av_config_dev * audio_config_dev;
	unsigned int level;
    unsigned int buffer[BUFFER_SIZE];
    int i = 0;

    audio_config_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");
    if ( audio_config_dev == NULL)
        printf("Error: could not open audio config device \n");
    else
        printf("Opened audio config device \n");

    /* Open Devices */
    audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
    if ( audio_dev == NULL)
        printf("Error: could not open audio device \n");
    else
        printf("Opened audio device \n");

    /* Configure WM8731 */
    alt_up_av_config_reset(audio_config_dev);
    alt_up_audio_reset_audio_core(audio_dev);

    /* Write to configuration registers in the audio codec; see datasheet for what these values mean */
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x0, 0x17);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x1, 0x17);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x2, 0x58);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x3, 0x58);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x4, 0x15);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x5, 0x06);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x6, 0x00);
	int dataAudio[6400];
	altera_avalon_fifo_init(FIFO_0_OUT_CSR_BASE, 0x0, 10, FIFO_0_OUT_CSR_FIFO_DEPTH-10);
	altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE);
	int dataAudio[6400];
	while (1){
		level =  altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE);
		if (level>0){
			for (i=0;i<level;i++){
				buffer[i]= ((altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE)>>16) + 0x7fff)/2;
			}
		}
        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_RIGHT);
        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_LEFT);
	}
}

/* Prints "Hello World" and sleeps for three seconds */
void laserInputTask(void* pdata){
	int * voiceAddr =SYNTHESIZER_0_BASE;
	while (1){
		*voiceAddr = 1000;
		OSTimeDlyHMSM(0, 0, 1, 0);
		*voiceAddr = 0;
		OSTimeDlyHMSM(0, 0, 1, 0);
	}
}

/* The main function creates two task and starts multi-tasking */
int main(void){

  OSTaskCreateExt(audioTask,
                  NULL,
                  (void *)&audioTaskStack[TASK_STACKSIZE-1],
                  AUDIO_TASK_PRIORITY,
                  AUDIO_TASK_PRIORITY,
                  audioTaskStack,
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(laserInputTask,
                  NULL,
                  (void *)&laserInputTaskStack[TASK_STACKSIZE-1],
                  LASER_INPUT_TASK_PRIORITY,
                  LASER_INPUT_TASK_PRIORITY,
                  laserInputTaskStack,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
  return 0;
}
