/*************************************************************************
 * Copyright (c) 2004 Altera Corporation, San Jose, California, USA.      *
 * All rights reserved. All use of this software and documentation is     *
 * subject to the License Agreement located at the end of this file below.*
 **************************************************************************
 * Description:                                                           *
 * The following is a simple hello world program running MicroC/OS-II.The *
 * purpose of the design is to be a very simple application that just     *
 * demonstrates MicroC/OS-II running on NIOS II.The design doesn't account*
 * for issues such as checking system call return codes. etc.             *
 *                                                                        *
 * Requirements:                                                          *
 *   -Supported Example Hardware Platforms                                *
 *     Standard                                                           *
 *     Full Featured                                                      *
 *     Low Cost                                                           *
 *   -Supported Development Boards                                        *
 *     Nios II Development Board, Stratix II Edition                      *
 *     Nios Development Board, Stratix Professional Edition               *
 *     Nios Development Board, Stratix Edition                            *
 *     Nios Development Board, Cyclone Edition                            *
 *   -System Library Settings                                             *
 *     RTOS Type - MicroC/OS-II                                           *
 *     Periodic System Timer                                              *
 *   -Know Issues                                                         *
 *     If this design is run on the ISS, terminal output will take several*
 *     minutes per iteration.
 *
 *
 *     http://www.phy.mtu.edu/~suits/notefreqs.html
 *     newt.phys.unsw.edu.au/jw/notes.html                              *
 **************************************************************************/
#include "altera_avalon_jtag_uart_regs.h"
#include <stdio.h>
#include "altera_up_avalon_audio_and_video_config.h"
#include <math.h>
#include "system.h"
#include "alt_types.h"
#include <unistd.h>



/*Defines the buffer size */
#define     BUFFER_SIZE    128

//total number of lasers (voices)
#define 	TOTAL_VOICES	1

//this is the size of our LUT
#define		 NUMBER_OF_POINTS_IN_WAVE_LUT		4096

//MIDI Signals received == 3 bytes
//Byte 1: Note status
//This defines the note statuses
#define		NOTE_ON			1
#define		NOTE_OFF		0

//Byte 2: Pitch (Note)
//this defines the notes frequencies
#define		FREQ_EMPTY_NOTE		0.0
#define 	FREQ_BASE			8.1757989156
#define		SAMPLE_RATE			32000
#define		BITSHIFT_COMPENSATION 16

#define		EMPTY_NOTE			0

//Byte 3: Velocity
//this defines the velocities
#define		OFF_VELOCITY	0



// each voice has a status, pitch (note), and velocity
struct voice {
	int status;
	int note;
};

//static int currentNote =0;

//we need a list of 8 voices
static struct voice VOICE_TABLE[TOTAL_VOICES];

/**
 * This will calculate the frequency of the midi note
 */
float midiNote2midiFreq(double midiNote) {
	return (FREQ_BASE * pow(2, (midiNote / 12)));
}

/**
 * This will calculate the sampling frequency used to sample the SINE LUT
 */
float midiFreq2sampleFreq(float midiFreq) {

	float sampleFreq = (midiFreq / SAMPLE_RATE) * NUMBER_OF_POINTS_IN_WAVE_LUT * BITSHIFT_COMPENSATION;

	return sampleFreq;

}

/**Tested!*/
void startVoice(int voiceNum, int sampleRate){
	int * voiceAddr;
	switch (voiceNum) {
	case 0:
		voiceAddr = SYNTHESIZER_0_BASE;
		break;
	default:
		//return;
		break;
	}
	*voiceAddr = sampleRate;

}


/**Tested!*/
void endVoice(int voiceNum){
	int * voiceAddr;
	switch (voiceNum) {
	case 0:
		voiceAddr = SYNTHESIZER_0_BASE;
		break;
	default:
		//return;
		break;
	}
	*voiceAddr = 0;

}



/**
 * This Iterate through the voice/note table and look for an empty voice
 * If it finds an unused (off) note, it will use that voice
 * If all the voices are used, it does nothing
 *
 * it returns the index
 */
void turnOnVoice(int noteNum) {

	int index = 0;
	float midiFreq= 0;
	float sampleFreq = 0;
	int dispatcherFull = 1;

	for (index = 0; index < TOTAL_VOICES; index++) {
		if (NOTE_OFF == VOICE_TABLE[index].status) {
			VOICE_TABLE[index].note = noteNum;
			VOICE_TABLE[index].status = NOTE_ON;

			//endVoice(0);
			midiFreq = midiNote2midiFreq(noteNum);
			sampleFreq = midiFreq2sampleFreq(midiFreq);
			startVoice(index, (int) roundf(sampleFreq));

			dispatcherFull = 0;
		}
	}

	if (dispatcherFull ==1 ){
		VOICE_TABLE[0].note = noteNum;
		VOICE_TABLE[0].status = NOTE_ON;

		//endVoice(0);
		midiFreq = midiNote2midiFreq(noteNum);
		sampleFreq = midiFreq2sampleFreq(midiFreq);
		startVoice(0, (int) roundf(sampleFreq));
	}

/*
	if (currentNote != 0){
	endVoice(currentNote);
	}
	currentNote = noteNum;
	midiFreq = midiNote2midiFreq(noteNum);
	sampleFreq = midiFreq2sampleFreq(midiFreq);
	startVoice(index, (int) roundf(sampleFreq));
*/
}

/**
 * This Iterate through the voice/note table and look for a note to turn off
 * If it finds a specific note, it will reset the note to an off state
 * If it doesn't find it, it does nothing
 */
void turnOffVoice(int noteNum) {

	int index = 0;

	for (index = 0; index < TOTAL_VOICES; index++) {
		if (noteNum == VOICE_TABLE[index].note) {
			VOICE_TABLE[index].note = EMPTY_NOTE;
			VOICE_TABLE[index].status = NOTE_OFF;
			endVoice(index);
		}
	}

	//endVoice(0);
}



/*This is the API for the midiDriver*
 * It requires the status of the note
 * the pitch (midi note numbeR)
 * and the velocity (velocity of 0 will result in note off
 */
void sendNoteSynthesizer(int noteNum,int noteType) {
	if(noteType==NOTE_ON){
		turnOnVoice(noteNum);
	}else{
		turnOffVoice(noteNum);
	}
}


/******************************************************************************
 *                                                                             *
 * License Agreement                                                           *
 *                                                                             *
 * Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *
 * All rights reserved.                                                        *
 *                                                                             *
 * Permission is hereby granted, free of charge, to any person obtaining a     *
 * copy of this software and associated documentation files (the "Software"),  *
 * to deal in the Software without restriction, including without limitation   *
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
 * and/or sell copies of the Software, and to permit persons to whom the       *
 * Software is furnished to do so, subject to the following conditions:        *
 *                                                                             *
 * The above copyright notice and this permission notice shall be included in  *
 * all copies or substantial portions of the Software.                         *
 *                                                                             *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
 * DEALINGS IN THE SOFTWARE.                                                   *
 *                                                                             *
 * This agreement shall be governed in all respects by the laws of the State   *
 * of California and by the laws of the United States of America.              *
 * Altera does not recommend, suggest or require that this reference design    *
 * file be used in conjunction or combination with any other product.          *
 ******************************************************************************/
