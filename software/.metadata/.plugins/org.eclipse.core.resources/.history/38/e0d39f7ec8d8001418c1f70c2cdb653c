#include <stdio.h>
#include "includes.h"
#include "altera_avalon_fifo_util.h"
#include "altera_avalon_fifo_regs.h"
#include "altera_avalon_fifo.h"
#include "altera_up_avalon_character_lcd.h"
#include "altera_up_avalon_audio.h"
#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

/* Definition of Task Stacks */
#define   TASK_STACKSIZE       2048
#define     BUFFER_SIZE    128

OS_STK    audioTaskStack[TASK_STACKSIZE];
OS_STK    laserInputTaskStack[TASK_STACKSIZE];
OS_STK    uiTaskStack[TASK_STACKSIZE];

/* Definition of Task Priorities */
#define AUDIO_TASK_PRIORITY      	3
#define LASER_INPUT_TASK_PRIORITY  	1
#define UI_TASK_PRIORITY  	2

/* Prints "Hello World" and sleeps for three seconds */
void audioTask(void* pdata){
	INT8U err;
    alt_up_audio_dev * audio_dev;
    alt_up_av_config_dev * audio_config_dev;
	unsigned int level;
    unsigned int buffer[BUFFER_SIZE];
    int i = 0;

    audio_config_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");
    if ( audio_config_dev == NULL)
        printf("Error: could not open audio config device \n");
    else
        printf("Opened audio config device \n");

    /* Open Devices */
    audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
    if ( audio_dev == NULL)
        printf("Error: could not open audio device \n");
    else
        printf("Opened audio device \n");

    /* Configure WM8731 */
    alt_up_av_config_reset(audio_config_dev);
    alt_up_audio_reset_audio_core(audio_dev);

    /* Write to configuration registers in the audio codec; see datasheet for what these values mean */
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x0, 0x17);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x1, 0x17);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x2, 0x58);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x3, 0x58);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x4, 0x15);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x5, 0x06);
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x6, 0x00);

	altera_avalon_fifo_init(FIFO_0_OUT_CSR_BASE, 0x0, 10, FIFO_0_OUT_CSR_FIFO_DEPTH-10);
	altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE);
	while (1){
		level =  altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE);
		if (level>0){
			for (i=0;i<level;i++){
				buffer[i]= ((altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE)>>16) + 0x7fff)/2;
			}
		}
        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_RIGHT);
        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_LEFT);
	}
}


/* Prints "Hello World" and sleeps for three seconds */
void laserInputTask(void* pdata){
	int * voiceAddr =SYNTHESIZER_0_BASE;


  while (1){
	  printf("hello");
	*voiceAddr = 1000;
	OSTimeDlyHMSM(0, 0, 1, 0);
	*voiceAddr = 0;
	OSTimeDlyHMSM(0, 0, 1, 0);
  }
}

void uiTask(void* pdata){

	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
	if ( char_lcd_dev == NULL){
		alt_printf ("Error: could not open character LCD device\n");
	}
	else{
		alt_printf ("Opened character LCD device\n");
	}
	alt_up_character_lcd_init (char_lcd_dev);
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
	alt_up_character_lcd_string(char_lcd_dev, "Laser Harp");
	while (1){
		OSTimeDlyHMSM(0, 0, 0, 10);

	}
}

static void laserStatusChangeInterrupt( void * context) {
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH_BASE, 0x1);
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{


  OSTaskCreateExt(audioTask,
                  NULL,
                  (void *)&audioTaskStack[TASK_STACKSIZE-1],
                  AUDIO_TASK_PRIORITY,
                  AUDIO_TASK_PRIORITY,
                  audioTaskStack,
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(laserInputTask,
                  NULL,
                  (void *)&laserInputTaskStack[TASK_STACKSIZE-1],
                  LASER_INPUT_TASK_PRIORITY,
                  LASER_INPUT_TASK_PRIORITY,
                  laserInputTaskStack,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(uiTask,
                  NULL,
                  (void *)&uiTaskStack[TASK_STACKSIZE-1],
                  UI_TASK_PRIORITY,
                  UI_TASK_PRIORITY,
                  uiTaskStack,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH_BASE,0x1);
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH_BASE, 0x0);
  alt_ic_isr_register(SWITCH_IRQ_INTERRUPT_CONTROLLER_ID, //alt_u32 ic_id
		  	  	  	  SWITCH_IRQ, //alt_u32 irq
		  	  	  	  laserStatusChangeInterrupt, //alt_isr_func isr
					  NULL,
					  NULL);

  OSStart();
  return 0;
}

/******************************************************************************
*                                                                             *
* License Agreement                                                           *
*                                                                             *
* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *
* All rights reserved.                                                        *
*                                                                             *
* Permission is hereby granted, free of charge, to any person obtaining a     *
* copy of this software and associated documentation files (the "Software"),  *
* to deal in the Software without restriction, including without limitation   *
* the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
* and/or sell copies of the Software, and to permit persons to whom the       *
* Software is furnished to do so, subject to the following conditions:        *
*                                                                             *
* The above copyright notice and this permission notice shall be included in  *
* all copies or substantial portions of the Software.                         *
*                                                                             *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
* DEALINGS IN THE SOFTWARE.                                                   *
*                                                                             *
* This agreement shall be governed in all respects by the laws of the State   *
* of California and by the laws of the United States of America.              *
* Altera does not recommend, suggest or require that this reference design    *
* file be used in conjunction or combination with any other product.          *
******************************************************************************/
