
LaserHarpBuildClean.elf:     file format elf32-littlenios2
LaserHarpBuildClean.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00017050 memsz 0x00085c90 flags rwx
    LOAD off    0x00019000 vaddr 0x01400000 paddr 0x01400000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00019020 vaddr 0x01904020 paddr 0x01904020 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01400000  01400000  00019000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01904020  01904020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014fc8  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000528  00814fc8  00814fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b60  008154f0  008154f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0006ef1a  00817050  00817050  00018050  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000191bc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000fb0  00000000  00000000  000191e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002a20  00000000  00000000  0001a198  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000324ec  00000000  00000000  0001cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a261  00000000  00000000  0004f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c009  00000000  00000000  00059305  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002c08  00000000  00000000  00075310  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000025b5  00000000  00000000  00077f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000094c2  00000000  00000000  0007a4cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00083990  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000858  00000000  00000000  000839b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00089688  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  0008968e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00089695  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00089696  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00089697  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008969b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008969f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000896a3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000896ae  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000896b9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000896c4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000037  00000000  00000000  000896d1  2**0
                  CONTENTS, READONLY
 29 .jdi          00004de1  00000000  00000000  00089708  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000b161f  00000000  00000000  0008e4e9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01400000 l    d  .entry	00000000 .entry
01904020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
00814fc8 l    d  .rodata	00000000 .rodata
008154f0 l    d  .rwdata	00000000 .rwdata
00817050 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800044 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 MIDIGenerator.c
00814fc8 l     O .rodata	00000080 C.0.2168
00000000 l    df *ABS*	00000000 SynthesizerDriver.c
00817050 l     O .bss	00000008 VOICE_TABLE
00000000 l    df *ABS*	00000000 main.c
00800b00 l     F .text	00000040 laserChangeHandler
00800b40 l     F .text	0000005c button1Handler
00800b9c l     F .text	00000060 button2Handler
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
008151e4 l     O .rodata	00000010 bp
008151f4 l     O .rodata	00000010 dp_l
00815204 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
00815214 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00803074 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00803714 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
008154f0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00806b6c l     F .text	00000058 std
00806c78 l     F .text	00000008 __fp_lock
00806c80 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00807c40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00807ca0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00807da0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080818c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
008082dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
008087bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816fc8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00808a58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00816fcc l     O .rwdata	00000004 lockid
0081708c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00816fd0 l     O .rwdata	00000004 lockid
00817094 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080a490 l     F .text	00000044 OS_InitMisc
0080a4d4 l     F .text	0000006c OS_InitRdyList
0080a638 l     F .text	000000e0 OS_InitTCBList
0080a3b4 l     F .text	000000dc OS_InitEventList
0080a540 l     F .text	0000007c OS_InitTaskIdle
0080a5bc l     F .text	0000007c OS_InitTaskStat
0080a8ac l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0080c7cc l     F .text	00000110 OS_FlagTaskRdy
0080c524 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815ea0 l     O .rwdata	0000106c jtag_uart_0
00816f0c l     O .rwdata	00000030 audio_and_video_config_0
00816f3c l     O .rwdata	00000030 audio_0
00816f6c l     O .rwdata	0000002c character_lcd_0
00811124 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081193c l     F .text	000002c4 altera_avalon_jtag_uart_irq
00811c00 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00812418 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813be4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00813da0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00813edc l     F .text	000000dc alt_file_locked
00814140 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00814c58 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00814e0c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00814f58 l     F .text	00000040 alt_sim_halt
00812e78 g     F .text	00000038 alt_up_av_config_reset
00804f78 g     F .text	0000001c putchar
0081331c g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
0081701e g     O .rwdata	00000002 OSTaskNameSize
008079e4 g     F .text	00000070 _isatty_r
00812ee8 g     F .text	00000030 alt_up_av_config_disable_interrupt
0080833c g     F .text	000000c8 alt_main
00804f9c g     F .text	000000a0 _puts_r
008827dc g     O .bss	00000100 alt_irq
00802be4 g     F .text	00000018 fabs
00807a54 g     F .text	00000078 _lseek_r
0080d0c0 g     F .text	000000d0 OS_MemInit
00811414 g     F .text	00000060 altera_avalon_fifo_write_almostfull
00811000 g     F .text	00000064 OSTimeSet
00813528 g     F .text	00000034 alt_up_character_lcd_send_cmd
00804234 g     F .text	00000088 __eqdf2
0080900c g     F .text	000006b4 OSEventPendMulti
00812790 g     F .text	00000070 alt_up_audio_read_fifo_avail
00885c90 g       *ABS*	00000000 __alt_heap_start
00812fb8 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
00814748 g     F .text	00000020 OSTaskCreateHook
00816ff6 g     O .rwdata	00000002 OSMboxEn
00812800 g     F .text	00000070 alt_up_audio_record_r
00809714 g     F .text	0000007c OSIntEnter
00807620 g     F .text	00000068 __sseek
00806bd4 g     F .text	000000a4 __sinit
008066b4 g     F .text	00000130 __swbuf_r
00817006 g     O .rwdata	00000002 OSQEn
00806cd4 g     F .text	00000068 __sfmoreglue
00808cc8 g     F .text	000000d0 __malloc_unlock
008147a4 g     F .text	0000001c OSTaskStatHook
0081709c g     O .bss	00000001 OSLockNesting
0080350c g     F .text	00000174 __divsf3
00817044 g     O .rwdata	00000002 OSDataSize
0081709d g     O .bss	00000001 OSRunning
00812708 g     F .text	00000088 alt_up_audio_reset_audio_core
00805d84 g     F .text	000000e0 memmove
008147dc g     F .text	0000001c OSInitHookBegin
0081115c g     F .text	000000bc altera_avalon_fifo_init
0081703c g     O .rwdata	00000002 OSTmrSize
00806cc4 g     F .text	00000010 _cleanup
008114d4 g     F .text	00000064 altera_avalon_fifo_write_fifo
00803680 g     F .text	00000094 __fixsfsi
008170a0 g     O .bss	00000004 OSIdleCtr
00804344 g     F .text	00000088 __gtdf2
00814414 g       .text	00000000 OSStartTsk
00804ec8 g     F .text	00000010 __errno
008134ac g     F .text	0000007c get_DDRAM_addr
0080abe0 g     F .text	000002e0 OS_TCBInit
01400000 g     F .entry	00000000 __reset
00811694 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00817042 g     O .rwdata	00000002 OSTmrWheelTblSize
00816fe2 g     O .rwdata	00000002 OSEventSize
008170a4 g     O .bss	00000001 OSPrioHighRdy
00807970 g     F .text	00000074 _fstat_r
00814768 g     F .text	00000020 OSTaskDelHook
00817074 g     O .bss	00000004 errno
008143f4 g       .text	00000000 OSStartHighRdy
0080f7d4 g     F .text	00000200 OSTaskCreateExt
0080c040 g     F .text	00000068 OSFlagPendGetFlagsRdy
00817022 g     O .rwdata	00000002 OSTaskStatStkSize
008126cc g     F .text	0000003c alt_up_audio_write_interrupt_pending
00804988 g     F .text	0000002c __make_fp
0080b04c g     F .text	00000334 OSFlagAccept
0080d7f8 g     F .text	000000c8 OSQFlush
0080d190 g     F .text	00000154 OSQAccept
00817084 g     O .bss	00000004 alt_argv
0081ef98 g       *ABS*	00000000 _gp
00803258 g     F .text	00000070 __subsf3
0080f600 g     F .text	000001d4 OSTaskCreate
0080f08c g     F .text	00000574 OSTaskChangePrio
00817098 g     O .bss	00000004 alt_heapsem
0081134c g     F .text	00000068 altera_avalon_fifo_clear_event
0080aec0 g     F .text	0000018c OSDebugInit
0080f9d4 g     F .text	0000040c OSTaskDel
00815d20 g     O .rwdata	00000180 alt_fd_list
008828dc g     O .bss	00000370 OSFlagTbl
00804f94 g     F .text	00000008 _putchar_r
0080a190 g     F .text	000000b8 OS_EventTaskRemove
00813d0c g     F .text	00000094 alt_find_dev
00804ed8 g     F .text	000000a0 memcpy
0081700c g     O .rwdata	00000002 OSRdyTblSize
008136c0 g     F .text	0000004c alt_up_character_lcd_write_fd
00806cb8 g     F .text	0000000c _cleanup_r
008044dc g     F .text	000000f8 __floatsidf
00813e64 g     F .text	00000078 alt_io_redirect
0080050c g     F .text	00000204 audioTask
008043cc g     F .text	00000088 __ltdf2
00814fc8 g       *ABS*	00000000 __DTOR_END__
0080503c g     F .text	00000014 puts
00800048 g     F .text	00000068 getPitch
00808d98 g     F .text	00000130 OSEventNameGet
00816ff0 g     O .rwdata	00000002 OSFlagMax
00809790 g     F .text	00000100 OSIntExit
0081702a g     O .rwdata	00000002 OSTCBSize
00812c64 g     F .text	00000060 alt_up_audio_read_fifo_head
00800420 g     F .text	000000a0 turnOffVoice
008170a5 g     O .bss	00000001 OSPrioCur
00811e7c g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01904000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00814f48 g     F .text	00000008 __udivsi3
008010f8 g     F .text	0000009c roundf
008080cc g     F .text	000000c0 isatty
00817010 g     O .rwdata	00000002 OSStkWidth
00817004 g     O .rwdata	00000002 OSPtrSize
00816fe4 g     O .rwdata	00000002 OSEventTblSize
00814368 g       .text	00000000 OSCtxSw
00817068 g     O .bss	00000004 __malloc_top_pad
008170a8 g     O .bss	00000004 OSTCBList
00817078 g     O .bss	00000004 alt_fd_list_lock
00812dec g     F .text	0000008c alt_up_av_config_read_data
00817060 g     O .bss	00000004 laserStatusChanged
008050c4 g     F .text	0000049c __sfvwrite_r
00882c4c g     O .bss	00000c30 OSMemTbl
008170ac g     O .bss	00000001 OSTickStepState
00806644 g     F .text	00000070 _sbrk_r
00817008 g     O .rwdata	00000002 OSQMax
0088387c g     O .bss	00000800 OSTaskStatStk
0080cca8 g     F .text	0000010c OSMemNameGet
00816fe8 g     O .rwdata	00000002 OSFlagEn
00807acc g     F .text	00000078 _read_r
0081702e g     O .rwdata	00000002 OSTimeTickHookEn
0080dd5c g     F .text	00000180 OSQPost
0080c8dc g     F .text	000000ac OS_FlagUnlink
00816fbc g     O .rwdata	00000004 alt_max_fd
0080a76c g     F .text	0000006c OS_MemCopy
00812cc4 g     F .text	00000060 alt_up_audio_write_fifo_head
0080a7d8 g     F .text	000000d4 OS_Sched
00804cc8 g     F .text	00000138 __unpack_d
0080784c g     F .text	00000110 _fclose_r
0080cba4 g     F .text	00000104 OSMemGet
00810108 g     F .text	000001c4 OSTaskNameSet
00806b38 g     F .text	00000034 fflush
0081706c g     O .bss	00000004 __malloc_max_sbrked_mem
008170b0 g     O .bss	00000004 OSCtxSwCtr
008147c0 g     F .text	0000001c OSTimeTickHook
00816ff2 g     O .rwdata	00000002 OSFlagNameSize
0080a248 g     F .text	00000104 OS_EventTaskRemoveMulti
00803ba4 g     F .text	00000074 __adddf3
0080a03c g     F .text	00000154 OS_EventTaskWaitMulti
0081700a g     O .rwdata	00000002 OSQSize
008081ec g     F .text	000000f0 lseek
0080e938 g     F .text	0000027c OSSemPend
00816f98 g     O .rwdata	00000004 __fdlib_version
00816fa0 g     O .rwdata	00000004 _global_impure_ptr
00806050 g     F .text	000005f4 _realloc_r
00816ff4 g     O .rwdata	00000002 OSLowestPrio
00885c90 g       *ABS*	00000000 __bss_end
00807fd4 g     F .text	000000f8 alt_iic_isr_register
00814830 g     F .text	00000020 OSTCBInitHook
0081703a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00814238 g     F .text	00000110 alt_tick
00816fdc g     O .rwdata	00000002 OSEventEn
00817036 g     O .rwdata	00000002 OSTmrCfgNameSize
00812518 g     F .text	00000040 alt_up_audio_open_dev
00806ca0 g     F .text	00000018 __fp_lock_all
00807f8c g     F .text	00000048 alt_ic_irq_enabled
0080c6e8 g     F .text	000000e4 OS_FlagInit
00812954 g     F .text	00000070 alt_up_audio_play_r
008141a0 g     F .text	00000098 alt_alarm_stop
00817018 g     O .rwdata	00000002 OSTaskIdleStkSize
0081707c g     O .bss	00000004 alt_irq_active
0080e4c4 g     F .text	000000c0 OSSemAccept
0080ced4 g     F .text	000000f0 OSMemPut
0080c988 g     F .text	0000021c OSMemCreate
008170b4 g     O .bss	00000004 OSIdleCtrMax
019040ec g     F .exceptions	000000d0 alt_irq_handler
00815cf8 g     O .rwdata	00000028 alt_dev_null
0081702c g     O .rwdata	00000002 OSTicksPerSec
00802c60 g     F .text	00000210 rint
008048c0 g     F .text	000000c8 __unpack_f
008139a8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00814368 g       .text	00000000 OSIntCtxSw
008113b4 g     F .text	00000060 altera_avalon_fifo_write_ienable
008170b8 g     O .bss	00000004 OSTCBFreeList
0080ebb4 g     F .text	0000017c OSSemPendAbort
008112bc g     F .text	0000002c altera_avalon_fifo_read_almostempty
00816fb4 g     O .rwdata	00000008 alt_dev_list
00808938 g     F .text	00000120 write
00805f68 g     F .text	000000e8 _putc_r
00817030 g     O .rwdata	00000002 OSVersionNbr
008002bc g     F .text	00000164 turnOnVoice
00807ccc g     F .text	000000d4 fstat
00804454 g     F .text	00000088 __ledf2
00816fd8 g     O .rwdata	00000004 OSEndiannessTest
00814f50 g     F .text	00000008 __umodsi3
00816fea g     O .rwdata	00000002 OSFlagGrpSize
00885c90 g       *ABS*	00000000 end
00804760 g     F .text	00000160 __pack_f
00811804 g     F .text	00000138 altera_avalon_jtag_uart_init
0080aa50 g     F .text	000000c8 OS_TaskStat
008112e8 g     F .text	0000003c altera_avalon_fifo_read_event
00814fc4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00812488 g     F .text	00000090 alt_avalon_timer_sc_init
008046e0 g     F .text	00000080 __clzsi2
0081213c g     F .text	000002dc altera_avalon_jtag_uart_write
00806bc4 g     F .text	00000004 __sfp_lock_acquire
008115a8 g     F .text	00000058 altera_avalon_fifo_read_fifo
00805ca0 g     F .text	000000e4 memchr
0080a718 g     F .text	00000054 OS_MemClr
008135d0 g     F .text	00000078 alt_up_character_lcd_write
00814438 g     F .text	00000310 OSTaskStkInit
00806f58 g     F .text	00000314 _free_r
00808404 g     F .text	00000258 alt_printf
00809d98 g     F .text	00000194 OS_EventTaskRdy
00814c5c g     F .text	000001b0 __call_exitprocs
008170bc g     O .bss	00000001 OSCPUUsage
00816fa8 g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000048 _start
008170ec g     O .bss	00000004 _alt_tick_rate
0080d8c0 g     F .text	00000320 OSQPend
00810acc g     F .text	0000014c OSTimeDly
00812b38 g     F .text	0000012c alt_up_audio_write_fifo
00812d88 g     F .text	00000064 alt_up_av_config_write_data
008004c0 g     F .text	0000004c sendNoteSynthesizer
008170f0 g     O .bss	00000004 _alt_nticks
0080869c g     F .text	00000120 read
00811098 g     F .text	0000008c alt_sys_init
00813834 g     F .text	000000b0 alt_up_character_lcd_shift_display
00812a34 g     F .text	00000104 alt_up_audio_read_fifo
00814b24 g     F .text	00000134 __register_exitproc
008170bd g     O .bss	00000001 OSTaskCtr
00813448 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
00812640 g     F .text	00000050 alt_up_audio_disable_write_interrupt
00810c18 g     F .text	00000174 OSTimeDlyHMSM
008138e4 g     F .text	00000090 alt_up_character_lcd_erase_pos
0080161c g     F .text	00001300 __ieee754_pow
0081711c g     O .bss	00004e20 laserInputTaskStack
00811d14 g     F .text	00000074 altera_avalon_jtag_uart_close
00801194 g     F .text	00000488 pow
008170f4 g     O .bss	00000028 __malloc_current_mallinfo
00816fde g     O .rwdata	00000002 OSEventMax
0080ed30 g     F .text	00000128 OSSemPost
0080991c g     F .text	000000e4 OSSchedUnlock
008116bc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00814970 g     F .text	000000f4 alt_get_fd
008170c0 g     O .bss	00000004 OSMemFreeList
00809a70 g     F .text	000000ac OSStatInit
0080c450 g     F .text	000000d4 OSFlagQuery
00804e00 g     F .text	000000c8 __fpcmp_parts_d
00817014 g     O .rwdata	00000002 OSTaskCreateExtEn
008077dc g     F .text	00000070 _close_r
00817064 g     O .bss	00000004 settingChanged
008125f4 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00800278 g     F .text	00000044 endVoice
00814ab0 g     F .text	00000074 memcmp
00809d7c g     F .text	0000001c OS_Dummy
0081176c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00885c90 g       *ABS*	00000000 __alt_stack_base
008117b4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00806800 g     F .text	0000013c __swsetup_r
0088407c g     O .bss	000001e0 OSQTbl
00811218 g     F .text	0000003c altera_avalon_fifo_read_status
00803fdc g     F .text	00000258 __divdf3
008125a4 g     F .text	00000050 alt_up_audio_disable_read_interrupt
00806d3c g     F .text	000000f0 __sfp
008158f0 g     O .rwdata	00000408 __malloc_av_
00806bd0 g     F .text	00000004 __sinit_lock_release
008170c4 g     O .bss	00000004 OSTCBHighRdy
00803c18 g     F .text	000003c4 __muldf3
00807704 g     F .text	00000060 __sread
00815224 g     O .rodata	00000010 __thenan_sf
00811668 g     F .text	0000002c altera_avalon_fifo_read_other_info
008170c8 g     O .bss	00000004 OSQFreeList
00814850 g     F .text	00000120 alt_find_file
00813b30 g     F .text	000000b4 alt_dev_llist_insert
00808bc0 g     F .text	00000108 __malloc_lock
0080887c g     F .text	000000bc sbrk
0080022c g     F .text	0000004c startVoice
00808ec8 g     F .text	00000144 OSEventNameSet
0080693c g     F .text	000001fc _fflush_r
008170cc g     O .bss	00000001 OSRdyGrp
00817050 g       *ABS*	00000000 __bss_start
00807580 g     F .text	00000098 memset
00800bfc g     F .text	000004fc main
008128e0 g     F .text	00000074 alt_up_audio_write_fifo_space
00817088 g     O .bss	00000004 alt_envp
00817070 g     O .bss	00000004 __malloc_max_total_mem
00811714 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00811324 g     F .text	00000028 altera_avalon_fifo_read_level
008067e4 g     F .text	0000001c __swbuf
00815370 g     O .rodata	00000100 OSUnMapTbl
0081700e g     O .rwdata	00000002 OSSemEn
00813784 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080c0a8 g     F .text	000003a8 OSFlagPost
00817058 g     O .bss	00000004 scaleIndex
00807618 g     F .text	00000008 __sclose
00802c48 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0080795c g     F .text	00000014 fclose
00809f2c g     F .text	00000110 OS_EventTaskWait
008045d4 g     F .text	00000074 __truncdfsf2
0080ab18 g     F .text	000000c8 OS_TaskStatStkChk
00885b00 g     O .bss	00000190 _atexit0
0080fde0 g     F .text	00000170 OSTaskDelReq
00805560 g     F .text	00000740 _malloc_r
00816fc0 g     O .rwdata	00000004 alt_errno
00809a00 g     F .text	00000070 OSStart
00808b64 g     F .text	0000005c __env_unlock
00807334 g     F .text	000000b8 _fwalk
008102cc g     F .text	00000218 OSTaskResume
0080cfc4 g     F .text	000000fc OSMemQuery
00817020 g     O .rwdata	00000002 OSTaskStatEn
00816ffa g     O .rwdata	00000002 OSMemMax
0080dedc g     F .text	00000188 OSQPostFront
00805e64 g     F .text	00000104 putc
00814e88 g     F .text	00000060 __divsi3
008170cd g     O .bss	00000003 OSRdyTbl
00816fd4 g     O .rwdata	00000002 OSDebugEn
00815234 g     O .rodata	00000014 __thenan_df
00813590 g     F .text	00000040 alt_up_character_lcd_open_dev
00806e2c g     F .text	0000012c _malloc_trim_r
00814fc8 g       *ABS*	00000000 __CTOR_END__
0080332c g     F .text	000001e0 __mulsf3
00802bfc g     F .text	0000001c finite
008000b0 g     F .text	0000007c generateMidiData
00816fec g     O .rwdata	00000002 OSFlagNodeSize
00817034 g     O .rwdata	00000002 OSTmrCfgMax
0081355c g     F .text	00000034 alt_up_character_lcd_init
0080d2e4 g     F .text	00000214 OSQCreate
0080ff50 g     F .text	000001b8 OSTaskNameGet
0080e064 g     F .text	00000234 OSQPostOpt
00809b1c g     F .text	00000240 OSTimeTick
0081701c g     O .rwdata	00000002 OSTaskMax
00814fc8 g       *ABS*	00000000 __DTOR_LIST__
0080e584 g     F .text	00000114 OSSemCreate
00817040 g     O .rwdata	00000002 OSTmrWheelSize
00803050 g     F .text	00000024 copysign
008042bc g     F .text	00000088 __nedf2
00817016 g     O .rwdata	00000002 OSTaskDelEn
01880000 g       *ABS*	00000000 __alt_mem_sram_0
00812d24 g     F .text	00000064 alt_up_av_config_open_dev
0080ee58 g     F .text	00000130 OSSemQuery
0080d4f8 g     F .text	00000300 OSQDel
0080dbe0 g     F .text	0000017c OSQPendAbort
00811064 g     F .text	00000034 alt_irq_init
0080881c g     F .text	00000060 alt_release_fd
00813974 g     F .text	00000034 alt_up_character_lcd_cursor_off
00815248 g     O .rodata	00000100 __clz_tab
01400000 g       *ABS*	00000000 __alt_mem_generic_tristate_controller_0
00814a64 g     F .text	00000014 atexit
0080012c g     F .text	000000ac midiNote2midiFreq
00800710 g     F .text	0000015c laserInputTask
00807764 g     F .text	00000078 _write_r
00812f80 g     F .text	00000038 alt_up_av_config_read_ready
00809890 g     F .text	0000008c OSSchedLock
0080b380 g     F .text	0000013c OSFlagCreate
00816f9c g     O .rwdata	00000004 _impure_ptr
00817080 g     O .bss	00000004 alt_argc
00802e70 g     F .text	000001e0 scalbn
00813ca8 g     F .text	00000064 _do_dtors
00816fe6 g     O .rwdata	00000002 OSEventMultiEn
0080b4bc g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
008170d0 g     O .bss	00000004 OSEventFreeList
01904020 g       .exceptions	00000000 alt_irq_entry
0080b9fc g     F .text	00000644 OSFlagPend
00817032 g     O .rwdata	00000002 OSTmrEn
00806c88 g     F .text	00000018 __fp_unlock_all
00816fac g     O .rwdata	00000008 alt_fs_list
0080a91c g     F .text	00000080 OS_StrCopy
00812870 g     F .text	00000070 alt_up_audio_record_l
00816ffc g     O .rwdata	00000002 OSMemNameSize
00802c50 g     F .text	00000010 nan
008147f8 g     F .text	0000001c OSInitHookEnd
00817028 g     O .rwdata	00000002 OSTCBPrioTblMax
0080291c g     F .text	000002c8 __ieee754_sqrt
00817024 g     O .rwdata	00000002 OSTaskStatStkChkEn
00812eb0 g     F .text	00000038 alt_up_av_config_enable_interrupt
00811600 g     F .text	00000068 altera_avalon_fifo_write_other_info
00807e00 g     F .text	00000050 alt_ic_isr_register
00816ff8 g     O .rwdata	00000002 OSMemEn
00817002 g     O .rwdata	00000002 OSMutexEn
00812f18 g     F .text	00000068 alt_up_av_config_read_acknowledge
008132b8 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
00817050 g       *ABS*	00000000 _edata
00885c90 g       *ABS*	00000000 _end
008170d4 g     O .bss	00000001 OSIntNesting
00811d88 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00810d8c g     F .text	00000210 OSTimeDlyResume
0080b8a8 g     F .text	00000154 OSFlagNameSet
008129c4 g     F .text	00000070 alt_up_audio_play_l
008104e4 g     F .text	000001fc OSTaskStkChk
00807eec g     F .text	000000a0 alt_ic_irq_disable
00816ffe g     O .rwdata	00000002 OSMemSize
00807688 g     F .text	0000007c __swrite
00816fa4 g     O .rwdata	00000004 __malloc_trim_threshold
00814348 g     F .text	00000020 altera_nios2_qsys_irq_init
008170d8 g     O .bss	00000004 OSTCBCur
00814a78 g     F .text	00000038 exit
00817000 g     O .rwdata	00000002 OSMemTblSize
0080726c g     F .text	000000c8 _fwalk_reent
008133e4 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
0080086c g     F .text	00000294 uiTask
00814ee8 g     F .text	00000060 __modsi3
00811254 g     F .text	0000003c altera_avalon_fifo_read_ienable
01000000 g       *ABS*	00000000 __alt_data_end
01904020 g     F .exceptions	00000000 alt_exception
00806bc8 g     F .text	00000004 __sfp_lock_release
008096c0 g     F .text	00000054 OSInit
0081090c g     F .text	00000144 OSTaskQuery
00813648 g     F .text	00000078 alt_up_character_lcd_string
0080e418 g     F .text	000000ac OS_QInit
0080a99c g     F .text	00000058 OS_StrLen
0080cdb4 g     F .text	00000120 OSMemNameSet
0081701a g     O .rwdata	00000002 OSTaskProfileEn
008170dc g     O .bss	00000004 OSTime
0081705c g     O .bss	00000004 baseTranspose
0088425c g     O .bss	00000800 OSTaskIdleStk
00814f98 g     F .text	0000002c _exit
00802c18 g     F .text	00000030 __isnand
0081bf3c g     O .bss	00061a80 audioTaskStack
008139dc g     F .text	00000154 alt_alarm_start
0080b764 g     F .text	00000144 OSFlagNameGet
00810f9c g     F .text	00000064 OSTimeGet
00804648 g     F .text	00000098 __muldi3
00811290 g     F .text	0000002c altera_avalon_fifo_read_almostfull
008073ec g     F .text	00000194 __smakebuf_r
00805050 g     F .text	00000074 strlen
00814788 g     F .text	0000001c OSTaskSwHook
00813fb8 g     F .text	00000188 open
00884a5c g     O .bss	00000b40 OSEventTbl
00811538 g     F .text	00000070 altera_avalon_read_fifo
0080865c g     F .text	00000040 alt_putchar
0088559c g     O .bss	00000510 OSTCBTbl
0080ef88 g     F .text	00000104 OSSemSet
00813064 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
0087d9bc g     O .bss	00004e20 uiTaskStack
0081370c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00816fc4 g     O .rwdata	00000004 alt_priority_mask
008001d8 g     F .text	00000054 midiFreq2sampleFreq
0080e698 g     F .text	000002a0 OSSemDel
008170e0 g     O .bss	00000004 OSFlagFreeList
00807e50 g     F .text	0000009c alt_ic_irq_enable
00816fe0 g     O .rwdata	00000002 OSEventNameSize
008170e4 g     O .bss	00000001 OSStatRdy
00813380 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
00885aac g     O .bss	00000054 OSTCBPrioTbl
00808ab8 g     F .text	000000ac __env_lock
00817026 g     O .rwdata	00000002 OSTaskSwHookEn
00803b24 g     F .text	00000080 __subdf3
00811474 g     F .text	00000060 altera_avalon_fifo_write_almostempty
00817048 g     O .rwdata	00000008 alt_alarm_list
00816fee g     O .rwdata	00000002 OSFlagWidth
00813c44 g     F .text	00000064 _do_ctors
00807b44 g     F .text	000000fc close
008032c8 g     F .text	00000064 __addsf3
00817090 g     O .bss	00000004 alt_envsem
008170e8 g     O .bss	00000004 OSIdleCtrRun
00809d5c g     F .text	00000020 OSVersion
00817038 g     O .rwdata	00000002 OSTmrCfgWheelSize
00812558 g     F .text	0000004c alt_up_audio_enable_read_interrupt
00810a50 g     F .text	0000007c OS_TaskStkClr
0081315c g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
008049b4 g     F .text	00000314 __pack_d
00817012 g     O .rwdata	00000002 OSTaskCreateEn
0080a34c g     F .text	00000068 OS_EventWaitListInit
00814814 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00806bcc g     F .text	00000004 __sinit_lock_acquire
008106e0 g     F .text	0000022c OSTaskSuspend
00813254 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
0080a9f4 g     F .text	0000005c OS_TaskIdle
0081703e g     O .rwdata	00000002 OSTmrTblSize
00812690 g     F .text	0000003c alt_up_audio_read_interrupt_pending
0080e298 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

01904020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1904020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1904024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1904028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 190402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1904030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1904034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1904038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 190403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1904040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1904044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1904048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 190404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1904050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1904054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1904058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 190405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1904060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1904064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1904068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 190406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1904070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1904074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1904078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 190407c:	10000326 	beq	r2,zero,190408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1904080:	20000226 	beq	r4,zero,190408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1904084:	19040ec0 	call	19040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1904088:	00000306 	br	1904098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 190408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1904090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1904094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1904098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 190409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 19040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 19040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 19040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 19040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 19040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 19040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 19040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 19040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 19040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 19040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 19040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 19040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 19040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 19040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 19040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 19040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 19040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 19040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 19040e8:	ef80083a 	eret

019040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 19040ec:	defff904 	addi	sp,sp,-28
 19040f0:	dfc00615 	stw	ra,24(sp)
 19040f4:	df000515 	stw	fp,20(sp)
 19040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 19040fc:	08097140 	call	809714 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904100:	0005313a 	rdctl	r2,ipending
 1904104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1904108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 190410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1904110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1904114:	00800044 	movi	r2,1
 1904118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 190411c:	e0ffff17 	ldw	r3,-4(fp)
 1904120:	e0bffe17 	ldw	r2,-8(fp)
 1904124:	1884703a 	and	r2,r3,r2
 1904128:	1005003a 	cmpeq	r2,r2,zero
 190412c:	1000161e 	bne	r2,zero,1904188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1904130:	e0bffd17 	ldw	r2,-12(fp)
 1904134:	00c02234 	movhi	r3,136
 1904138:	18c9f704 	addi	r3,r3,10204
 190413c:	100490fa 	slli	r2,r2,3
 1904140:	10c5883a 	add	r2,r2,r3
 1904144:	11400017 	ldw	r5,0(r2)
 1904148:	e0bffd17 	ldw	r2,-12(fp)
 190414c:	00c02234 	movhi	r3,136
 1904150:	18c9f704 	addi	r3,r3,10204
 1904154:	100490fa 	slli	r2,r2,3
 1904158:	10c5883a 	add	r2,r2,r3
 190415c:	10800104 	addi	r2,r2,4
 1904160:	11000017 	ldw	r4,0(r2)
 1904164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904168:	0005313a 	rdctl	r2,ipending
 190416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1904170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1904174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1904178:	e0bfff17 	ldw	r2,-4(fp)
 190417c:	1004c03a 	cmpne	r2,r2,zero
 1904180:	103fe31e 	bne	r2,zero,1904110 <alt_irq_handler+0x24>
 1904184:	00000706 	br	19041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1904188:	e0bffe17 	ldw	r2,-8(fp)
 190418c:	1085883a 	add	r2,r2,r2
 1904190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1904194:	e0bffd17 	ldw	r2,-12(fp)
 1904198:	10800044 	addi	r2,r2,1
 190419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19041a0:	003fde06 	br	190411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 19041a4:	08097900 	call	809790 <OSIntExit>
}
 19041a8:	e037883a 	mov	sp,fp
 19041ac:	dfc00117 	ldw	ra,4(sp)
 19041b0:	df000017 	ldw	fp,0(sp)
 19041b4:	dec00204 	addi	sp,sp,8
 19041b8:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800004:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800010:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800014:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800018:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  80001c:	d6bbe614 	ori	gp,gp,61336
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800020:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800024:	109c1414 	ori	r2,r2,28752

    movhi r3, %hi(__bss_end)
  800028:	00c02234 	movhi	r3,136
    ori r3, r3, %lo(__bss_end)
  80002c:	18d72414 	ori	r3,r3,23696

    beq r2, r3, 1f
  800030:	10c00326 	beq	r2,r3,800040 <_start+0x40>

0:
    stw zero, (r2)
  800034:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800038:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80003c:	10fffd36 	bltu	r2,r3,800034 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800040:	080833c0 	call	80833c <alt_main>

00800044 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800044:	003fff06 	br	800044 <alt_after_alt_main>

00800048 <getPitch>:
 *
 *  Created on: 2015-04-03
 *      Author: qsjiang
 */

int getPitch(int musicScale,int laserIndex){
  800048:	deffdc04 	addi	sp,sp,-144
  80004c:	dfc02315 	stw	ra,140(sp)
  800050:	df002215 	stw	fp,136(sp)
  800054:	df002204 	addi	fp,sp,136
  800058:	e13ffe15 	stw	r4,-8(fp)
  80005c:	e17fff15 	stw	r5,-4(fp)
	int laserToPitchMappingTable[4][8]={
		{60,62,64,65,67,69,71,72},
		{60,62,63,65,67,68,70,72},
		{60,63,65,66,67,70,72,75},
		{60,62,63,65,67,69,70,72}
	};
  800060:	00802074 	movhi	r2,129
  800064:	1093f204 	addi	r2,r2,20424
  800068:	e13fde04 	addi	r4,fp,-136
  80006c:	100b883a 	mov	r5,r2
  800070:	01802004 	movi	r6,128
  800074:	0804ed80 	call	804ed8 <memcpy>
	return laserToPitchMappingTable[musicScale][laserIndex];
  800078:	e0bffe17 	ldw	r2,-8(fp)
  80007c:	e0ffff17 	ldw	r3,-4(fp)
  800080:	100490fa 	slli	r2,r2,3
  800084:	10c5883a 	add	r2,r2,r3
  800088:	1085883a 	add	r2,r2,r2
  80008c:	1085883a 	add	r2,r2,r2
  800090:	e0ffde04 	addi	r3,fp,-136
  800094:	10c5883a 	add	r2,r2,r3
  800098:	10800017 	ldw	r2,0(r2)
}
  80009c:	e037883a 	mov	sp,fp
  8000a0:	dfc00117 	ldw	ra,4(sp)
  8000a4:	df000017 	ldw	fp,0(sp)
  8000a8:	dec00204 	addi	sp,sp,8
  8000ac:	f800283a 	ret

008000b0 <generateMidiData>:


int generateMidiData(int pitch,int noteType){
  8000b0:	defffa04 	addi	sp,sp,-24
  8000b4:	df000515 	stw	fp,20(sp)
  8000b8:	df000504 	addi	fp,sp,20
  8000bc:	e13ffe15 	stw	r4,-8(fp)
  8000c0:	e17fff15 	stw	r5,-4(fp)
	int statusByte;
	int pitchByte;
	int velocityBtye;

	statusByte = 144; //10010000 Note On through midi channel 1
  8000c4:	00802404 	movi	r2,144
  8000c8:	e0bffd15 	stw	r2,-12(fp)
	pitchByte = pitch;
  8000cc:	e0bffe17 	ldw	r2,-8(fp)
  8000d0:	e0bffc15 	stw	r2,-16(fp)
	if (noteType==1){
  8000d4:	e0bfff17 	ldw	r2,-4(fp)
  8000d8:	10800058 	cmpnei	r2,r2,1
  8000dc:	1000031e 	bne	r2,zero,8000ec <generateMidiData+0x3c>
		//Defaults to 64 in the absence of velocity sensors
		velocityBtye = 64;
  8000e0:	00801004 	movi	r2,64
  8000e4:	e0bffb15 	stw	r2,-20(fp)
  8000e8:	00000106 	br	8000f0 <generateMidiData+0x40>
	}else{
		//when velocity is zero = Note Off
		velocityBtye = 0;
  8000ec:	e03ffb15 	stw	zero,-20(fp)
	}
	//formate: 	0 statusBtye 1	0 pitchByte 1	0 velocityByte 1
	return (statusByte<<21) + (1<<20) + (0<<19) + (pitchByte<<11) + (1<<10) + (0<<9) + (velocityBtye<<1) +(1<<0);
  8000f0:	e0bffd17 	ldw	r2,-12(fp)
  8000f4:	1006957a 	slli	r3,r2,21
  8000f8:	e0bffc17 	ldw	r2,-16(fp)
  8000fc:	100492fa 	slli	r2,r2,11
  800100:	1887883a 	add	r3,r3,r2
  800104:	e0bffb17 	ldw	r2,-20(fp)
  800108:	1085883a 	add	r2,r2,r2
  80010c:	1887883a 	add	r3,r3,r2
  800110:	00800434 	movhi	r2,16
  800114:	10810044 	addi	r2,r2,1025
  800118:	1885883a 	add	r2,r3,r2

}
  80011c:	e037883a 	mov	sp,fp
  800120:	df000017 	ldw	fp,0(sp)
  800124:	dec00104 	addi	sp,sp,4
  800128:	f800283a 	ret

0080012c <midiNote2midiFreq>:
static struct voice VOICE_TABLE[TOTAL_VOICES];

/**
 * This will calculate the frequency of the midi note
 */
float midiNote2midiFreq(double midiNote) {
  80012c:	defffc04 	addi	sp,sp,-16
  800130:	dfc00315 	stw	ra,12(sp)
  800134:	df000215 	stw	fp,8(sp)
  800138:	df000204 	addi	fp,sp,8
  80013c:	e13ffe15 	stw	r4,-8(fp)
  800140:	e17fff15 	stw	r5,-4(fp)
	return (FREQ_BASE * pow(2, (midiNote / 12)));
  800144:	e13ffe17 	ldw	r4,-8(fp)
  800148:	e17fff17 	ldw	r5,-4(fp)
  80014c:	000d883a 	mov	r6,zero
  800150:	01d00a34 	movhi	r7,16424
  800154:	0803fdc0 	call	803fdc <__divdf3>
  800158:	1009883a 	mov	r4,r2
  80015c:	180b883a 	mov	r5,r3
  800160:	2005883a 	mov	r2,r4
  800164:	2807883a 	mov	r3,r5
  800168:	0009883a 	mov	r4,zero
  80016c:	01500034 	movhi	r5,16384
  800170:	100d883a 	mov	r6,r2
  800174:	180f883a 	mov	r7,r3
  800178:	08011940 	call	801194 <pow>
  80017c:	1009883a 	mov	r4,r2
  800180:	180b883a 	mov	r5,r3
  800184:	2005883a 	mov	r2,r4
  800188:	2807883a 	mov	r3,r5
  80018c:	1009883a 	mov	r4,r2
  800190:	180b883a 	mov	r5,r3
  800194:	019430b4 	movhi	r6,20674
  800198:	31964e44 	addi	r6,r6,22841
  80019c:	01d00834 	movhi	r7,16416
  8001a0:	39d68084 	addi	r7,r7,23042
  8001a4:	0803c180 	call	803c18 <__muldf3>
  8001a8:	1009883a 	mov	r4,r2
  8001ac:	180b883a 	mov	r5,r3
  8001b0:	2005883a 	mov	r2,r4
  8001b4:	2807883a 	mov	r3,r5
  8001b8:	1009883a 	mov	r4,r2
  8001bc:	180b883a 	mov	r5,r3
  8001c0:	08045d40 	call	8045d4 <__truncdfsf2>
}
  8001c4:	e037883a 	mov	sp,fp
  8001c8:	dfc00117 	ldw	ra,4(sp)
  8001cc:	df000017 	ldw	fp,0(sp)
  8001d0:	dec00204 	addi	sp,sp,8
  8001d4:	f800283a 	ret

008001d8 <midiFreq2sampleFreq>:

/**
 * This will calculate the sampling frequency used to sample the SINE LUT
 */
float midiFreq2sampleFreq(float midiFreq) {
  8001d8:	defffc04 	addi	sp,sp,-16
  8001dc:	dfc00315 	stw	ra,12(sp)
  8001e0:	df000215 	stw	fp,8(sp)
  8001e4:	df000204 	addi	fp,sp,8
  8001e8:	e13fff15 	stw	r4,-4(fp)

	float sampleFreq = (midiFreq / SAMPLE_RATE) * NUMBER_OF_POINTS_IN_WAVE_LUT * BITSHIFT_COMPENSATION;
  8001ec:	e13fff17 	ldw	r4,-4(fp)
  8001f0:	0151beb4 	movhi	r5,18170
  8001f4:	080350c0 	call	80350c <__divsf3>
  8001f8:	1009883a 	mov	r4,r2
  8001fc:	01516034 	movhi	r5,17792
  800200:	080332c0 	call	80332c <__mulsf3>
  800204:	1009883a 	mov	r4,r2
  800208:	01506034 	movhi	r5,16768
  80020c:	080332c0 	call	80332c <__mulsf3>
  800210:	e0bffe15 	stw	r2,-8(fp)

	return sampleFreq;
  800214:	e0bffe17 	ldw	r2,-8(fp)

}
  800218:	e037883a 	mov	sp,fp
  80021c:	dfc00117 	ldw	ra,4(sp)
  800220:	df000017 	ldw	fp,0(sp)
  800224:	dec00204 	addi	sp,sp,8
  800228:	f800283a 	ret

0080022c <startVoice>:

/**Tested!*/
void startVoice(int voiceNum, int sampleRate){
  80022c:	defffc04 	addi	sp,sp,-16
  800230:	df000315 	stw	fp,12(sp)
  800234:	df000304 	addi	fp,sp,12
  800238:	e13ffe15 	stw	r4,-8(fp)
  80023c:	e17fff15 	stw	r5,-4(fp)
	int * voiceAddr;
	switch (voiceNum) {
  800240:	e0bffe17 	ldw	r2,-8(fp)
  800244:	1005003a 	cmpeq	r2,r2,zero
  800248:	1000011e 	bne	r2,zero,800250 <startVoice+0x24>
  80024c:	00000306 	br	80025c <startVoice+0x30>
	case 0:
		voiceAddr = SYNTHESIZER_0_BASE;
  800250:	00806474 	movhi	r2,401
  800254:	10ac2f04 	addi	r2,r2,-20292
  800258:	e0bffd15 	stw	r2,-12(fp)
		break;
	default:
		//return;
		break;
	}
	*voiceAddr = sampleRate;
  80025c:	e0fffd17 	ldw	r3,-12(fp)
  800260:	e0bfff17 	ldw	r2,-4(fp)
  800264:	18800015 	stw	r2,0(r3)

}
  800268:	e037883a 	mov	sp,fp
  80026c:	df000017 	ldw	fp,0(sp)
  800270:	dec00104 	addi	sp,sp,4
  800274:	f800283a 	ret

00800278 <endVoice>:


/**Tested!*/
void endVoice(int voiceNum){
  800278:	defffd04 	addi	sp,sp,-12
  80027c:	df000215 	stw	fp,8(sp)
  800280:	df000204 	addi	fp,sp,8
  800284:	e13fff15 	stw	r4,-4(fp)
	int * voiceAddr;
	switch (voiceNum) {
  800288:	e0bfff17 	ldw	r2,-4(fp)
  80028c:	1005003a 	cmpeq	r2,r2,zero
  800290:	1000011e 	bne	r2,zero,800298 <endVoice+0x20>
  800294:	00000306 	br	8002a4 <endVoice+0x2c>
	case 0:
		voiceAddr = SYNTHESIZER_0_BASE;
  800298:	00806474 	movhi	r2,401
  80029c:	10ac2f04 	addi	r2,r2,-20292
  8002a0:	e0bffe15 	stw	r2,-8(fp)
		break;
	default:
		//return;
		break;
	}
	*voiceAddr = 0;
  8002a4:	e0bffe17 	ldw	r2,-8(fp)
  8002a8:	10000015 	stw	zero,0(r2)

}
  8002ac:	e037883a 	mov	sp,fp
  8002b0:	df000017 	ldw	fp,0(sp)
  8002b4:	dec00104 	addi	sp,sp,4
  8002b8:	f800283a 	ret

008002bc <turnOnVoice>:
 * If it finds an unused (off) note, it will use that voice
 * If all the voices are used, it does nothing
 *
 * it returns the index
 */
void turnOnVoice(int noteNum) {
  8002bc:	defff904 	addi	sp,sp,-28
  8002c0:	dfc00615 	stw	ra,24(sp)
  8002c4:	df000515 	stw	fp,20(sp)
  8002c8:	df000504 	addi	fp,sp,20
  8002cc:	e13fff15 	stw	r4,-4(fp)

	int index = 0;
  8002d0:	e03ffe15 	stw	zero,-8(fp)
	float midiFreq= 0;
  8002d4:	e03ffd15 	stw	zero,-12(fp)
	float sampleFreq = 0;
  8002d8:	e03ffc15 	stw	zero,-16(fp)
	int dispatcherFull = 1;
  8002dc:	00800044 	movi	r2,1
  8002e0:	e0bffb15 	stw	r2,-20(fp)

	for (index = 0; index < TOTAL_VOICES; index++) {
  8002e4:	e03ffe15 	stw	zero,-8(fp)
  8002e8:	00002a06 	br	800394 <turnOnVoice+0xd8>
		if (NOTE_OFF == VOICE_TABLE[index].status) {
  8002ec:	e0bffe17 	ldw	r2,-8(fp)
  8002f0:	100690fa 	slli	r3,r2,3
  8002f4:	d0a02e04 	addi	r2,gp,-32584
  8002f8:	1885883a 	add	r2,r3,r2
  8002fc:	10800017 	ldw	r2,0(r2)
  800300:	1004c03a 	cmpne	r2,r2,zero
  800304:	1000201e 	bne	r2,zero,800388 <turnOnVoice+0xcc>
			VOICE_TABLE[index].note = noteNum;
  800308:	e0bffe17 	ldw	r2,-8(fp)
  80030c:	100690fa 	slli	r3,r2,3
  800310:	00802074 	movhi	r2,129
  800314:	109c1504 	addi	r2,r2,28756
  800318:	1887883a 	add	r3,r3,r2
  80031c:	e0bfff17 	ldw	r2,-4(fp)
  800320:	18800015 	stw	r2,0(r3)
			VOICE_TABLE[index].status = NOTE_ON;
  800324:	e0bffe17 	ldw	r2,-8(fp)
  800328:	100690fa 	slli	r3,r2,3
  80032c:	d0a02e04 	addi	r2,gp,-32584
  800330:	1887883a 	add	r3,r3,r2
  800334:	00800044 	movi	r2,1
  800338:	18800015 	stw	r2,0(r3)

			//endVoice(0);
			midiFreq = midiNote2midiFreq(noteNum);
  80033c:	e13fff17 	ldw	r4,-4(fp)
  800340:	08044dc0 	call	8044dc <__floatsidf>
  800344:	100b883a 	mov	r5,r2
  800348:	180d883a 	mov	r6,r3
  80034c:	2809883a 	mov	r4,r5
  800350:	300b883a 	mov	r5,r6
  800354:	080012c0 	call	80012c <midiNote2midiFreq>
  800358:	e0bffd15 	stw	r2,-12(fp)
			sampleFreq = midiFreq2sampleFreq(midiFreq);
  80035c:	e13ffd17 	ldw	r4,-12(fp)
  800360:	08001d80 	call	8001d8 <midiFreq2sampleFreq>
  800364:	e0bffc15 	stw	r2,-16(fp)
			startVoice(index, (int) roundf(sampleFreq));
  800368:	e13ffc17 	ldw	r4,-16(fp)
  80036c:	08010f80 	call	8010f8 <roundf>
  800370:	1009883a 	mov	r4,r2
  800374:	08036800 	call	803680 <__fixsfsi>
  800378:	100b883a 	mov	r5,r2
  80037c:	e13ffe17 	ldw	r4,-8(fp)
  800380:	080022c0 	call	80022c <startVoice>

			dispatcherFull = 0;
  800384:	e03ffb15 	stw	zero,-20(fp)
	int index = 0;
	float midiFreq= 0;
	float sampleFreq = 0;
	int dispatcherFull = 1;

	for (index = 0; index < TOTAL_VOICES; index++) {
  800388:	e0bffe17 	ldw	r2,-8(fp)
  80038c:	10800044 	addi	r2,r2,1
  800390:	e0bffe15 	stw	r2,-8(fp)
  800394:	e0bffe17 	ldw	r2,-8(fp)
  800398:	10800050 	cmplti	r2,r2,1
  80039c:	103fd31e 	bne	r2,zero,8002ec <turnOnVoice+0x30>

			dispatcherFull = 0;
		}
	}

	if (dispatcherFull ==1 ){
  8003a0:	e0bffb17 	ldw	r2,-20(fp)
  8003a4:	10800058 	cmpnei	r2,r2,1
  8003a8:	1000181e 	bne	r2,zero,80040c <turnOnVoice+0x150>
		VOICE_TABLE[0].note = noteNum;
  8003ac:	00c02074 	movhi	r3,129
  8003b0:	18dc1504 	addi	r3,r3,28756
  8003b4:	e0bfff17 	ldw	r2,-4(fp)
  8003b8:	18800015 	stw	r2,0(r3)
		VOICE_TABLE[0].status = NOTE_ON;
  8003bc:	00800044 	movi	r2,1
  8003c0:	d0a02e15 	stw	r2,-32584(gp)

		//endVoice(0);
		midiFreq = midiNote2midiFreq(noteNum);
  8003c4:	e13fff17 	ldw	r4,-4(fp)
  8003c8:	08044dc0 	call	8044dc <__floatsidf>
  8003cc:	100b883a 	mov	r5,r2
  8003d0:	180d883a 	mov	r6,r3
  8003d4:	2809883a 	mov	r4,r5
  8003d8:	300b883a 	mov	r5,r6
  8003dc:	080012c0 	call	80012c <midiNote2midiFreq>
  8003e0:	e0bffd15 	stw	r2,-12(fp)
		sampleFreq = midiFreq2sampleFreq(midiFreq);
  8003e4:	e13ffd17 	ldw	r4,-12(fp)
  8003e8:	08001d80 	call	8001d8 <midiFreq2sampleFreq>
  8003ec:	e0bffc15 	stw	r2,-16(fp)
		startVoice(0, (int) roundf(sampleFreq));
  8003f0:	e13ffc17 	ldw	r4,-16(fp)
  8003f4:	08010f80 	call	8010f8 <roundf>
  8003f8:	1009883a 	mov	r4,r2
  8003fc:	08036800 	call	803680 <__fixsfsi>
  800400:	100b883a 	mov	r5,r2
  800404:	0009883a 	mov	r4,zero
  800408:	080022c0 	call	80022c <startVoice>
	currentNote = noteNum;
	midiFreq = midiNote2midiFreq(noteNum);
	sampleFreq = midiFreq2sampleFreq(midiFreq);
	startVoice(index, (int) roundf(sampleFreq));
*/
}
  80040c:	e037883a 	mov	sp,fp
  800410:	dfc00117 	ldw	ra,4(sp)
  800414:	df000017 	ldw	fp,0(sp)
  800418:	dec00204 	addi	sp,sp,8
  80041c:	f800283a 	ret

00800420 <turnOffVoice>:
/**
 * This Iterate through the voice/note table and look for a note to turn off
 * If it finds a specific note, it will reset the note to an off state
 * If it doesn't find it, it does nothing
 */
void turnOffVoice(int noteNum) {
  800420:	defffc04 	addi	sp,sp,-16
  800424:	dfc00315 	stw	ra,12(sp)
  800428:	df000215 	stw	fp,8(sp)
  80042c:	df000204 	addi	fp,sp,8
  800430:	e13fff15 	stw	r4,-4(fp)

	int index = 0;
  800434:	e03ffe15 	stw	zero,-8(fp)

	for (index = 0; index < TOTAL_VOICES; index++) {
  800438:	e03ffe15 	stw	zero,-8(fp)
  80043c:	00001806 	br	8004a0 <turnOffVoice+0x80>
		if (noteNum == VOICE_TABLE[index].note) {
  800440:	e0bffe17 	ldw	r2,-8(fp)
  800444:	100690fa 	slli	r3,r2,3
  800448:	00802074 	movhi	r2,129
  80044c:	109c1504 	addi	r2,r2,28756
  800450:	1885883a 	add	r2,r3,r2
  800454:	10c00017 	ldw	r3,0(r2)
  800458:	e0bfff17 	ldw	r2,-4(fp)
  80045c:	18800d1e 	bne	r3,r2,800494 <turnOffVoice+0x74>
			VOICE_TABLE[index].note = EMPTY_NOTE;
  800460:	e0bffe17 	ldw	r2,-8(fp)
  800464:	100690fa 	slli	r3,r2,3
  800468:	00802074 	movhi	r2,129
  80046c:	109c1504 	addi	r2,r2,28756
  800470:	1885883a 	add	r2,r3,r2
  800474:	10000015 	stw	zero,0(r2)
			VOICE_TABLE[index].status = NOTE_OFF;
  800478:	e0bffe17 	ldw	r2,-8(fp)
  80047c:	100690fa 	slli	r3,r2,3
  800480:	d0a02e04 	addi	r2,gp,-32584
  800484:	1885883a 	add	r2,r3,r2
  800488:	10000015 	stw	zero,0(r2)
			endVoice(index);
  80048c:	e13ffe17 	ldw	r4,-8(fp)
  800490:	08002780 	call	800278 <endVoice>
 */
void turnOffVoice(int noteNum) {

	int index = 0;

	for (index = 0; index < TOTAL_VOICES; index++) {
  800494:	e0bffe17 	ldw	r2,-8(fp)
  800498:	10800044 	addi	r2,r2,1
  80049c:	e0bffe15 	stw	r2,-8(fp)
  8004a0:	e0bffe17 	ldw	r2,-8(fp)
  8004a4:	10800050 	cmplti	r2,r2,1
  8004a8:	103fe51e 	bne	r2,zero,800440 <turnOffVoice+0x20>
			endVoice(index);
		}
	}

	//endVoice(0);
}
  8004ac:	e037883a 	mov	sp,fp
  8004b0:	dfc00117 	ldw	ra,4(sp)
  8004b4:	df000017 	ldw	fp,0(sp)
  8004b8:	dec00204 	addi	sp,sp,8
  8004bc:	f800283a 	ret

008004c0 <sendNoteSynthesizer>:


void sendNoteSynthesizer(int noteNum,int noteType) {
  8004c0:	defffc04 	addi	sp,sp,-16
  8004c4:	dfc00315 	stw	ra,12(sp)
  8004c8:	df000215 	stw	fp,8(sp)
  8004cc:	df000204 	addi	fp,sp,8
  8004d0:	e13ffe15 	stw	r4,-8(fp)
  8004d4:	e17fff15 	stw	r5,-4(fp)
	if(noteType==NOTE_ON){
  8004d8:	e0bfff17 	ldw	r2,-4(fp)
  8004dc:	10800058 	cmpnei	r2,r2,1
  8004e0:	1000031e 	bne	r2,zero,8004f0 <sendNoteSynthesizer+0x30>
		turnOnVoice(noteNum);
  8004e4:	e13ffe17 	ldw	r4,-8(fp)
  8004e8:	08002bc0 	call	8002bc <turnOnVoice>
  8004ec:	00000206 	br	8004f8 <sendNoteSynthesizer+0x38>
	}else{
		turnOffVoice(noteNum);
  8004f0:	e13ffe17 	ldw	r4,-8(fp)
  8004f4:	08004200 	call	800420 <turnOffVoice>
	}
}
  8004f8:	e037883a 	mov	sp,fp
  8004fc:	dfc00117 	ldw	ra,4(sp)
  800500:	df000017 	ldw	fp,0(sp)
  800504:	dec00204 	addi	sp,sp,8
  800508:	f800283a 	ret

0080050c <audioTask>:
OS_EVENT * settingChanged;

int scaleIndex = 0;
int baseTranspose = 0;
/* Prints "Hello World" and sleeps for three seconds */
void audioTask(void* pdata){
  80050c:	deff7704 	addi	sp,sp,-548
  800510:	dfc08815 	stw	ra,544(sp)
  800514:	df008715 	stw	fp,540(sp)
  800518:	dc008615 	stw	r16,536(sp)
  80051c:	df008604 	addi	fp,sp,536
  800520:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
    alt_up_audio_dev * audio_dev;
    alt_up_av_config_dev * audio_config_dev;
    volatile unsigned int level;
    unsigned int buffer[BUFFER_SIZE];
    int i = 0;
  800524:	e03f7a15 	stw	zero,-536(fp)

    audio_config_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");
  800528:	01002074 	movhi	r4,129
  80052c:	21141204 	addi	r4,r4,20552
  800530:	0812d240 	call	812d24 <alt_up_av_config_open_dev>
  800534:	e0bf7b15 	stw	r2,-532(fp)
    if ( audio_config_dev == NULL)
  800538:	e0bf7b17 	ldw	r2,-532(fp)
  80053c:	1004c03a 	cmpne	r2,r2,zero
  800540:	1000041e 	bne	r2,zero,800554 <audioTask+0x48>
        printf("Error: could not open audio config device \n");
  800544:	01002074 	movhi	r4,129
  800548:	21141a04 	addi	r4,r4,20584
  80054c:	080503c0 	call	80503c <puts>
  800550:	00000306 	br	800560 <audioTask+0x54>
    else
        printf("Opened audio config device \n");
  800554:	01002074 	movhi	r4,129
  800558:	21142504 	addi	r4,r4,20628
  80055c:	080503c0 	call	80503c <puts>

    /* Open Devices */
    audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
  800560:	01002074 	movhi	r4,129
  800564:	21142c04 	addi	r4,r4,20656
  800568:	08125180 	call	812518 <alt_up_audio_open_dev>
  80056c:	e0bf7c15 	stw	r2,-528(fp)
    if ( audio_dev == NULL)
  800570:	e0bf7c17 	ldw	r2,-528(fp)
  800574:	1004c03a 	cmpne	r2,r2,zero
  800578:	1000041e 	bne	r2,zero,80058c <audioTask+0x80>
        printf("Error: could not open audio device \n");
  80057c:	01002074 	movhi	r4,129
  800580:	21143004 	addi	r4,r4,20672
  800584:	080503c0 	call	80503c <puts>
  800588:	00000306 	br	800598 <audioTask+0x8c>
    else
        printf("Opened audio device \n");
  80058c:	01002074 	movhi	r4,129
  800590:	21143904 	addi	r4,r4,20708
  800594:	080503c0 	call	80503c <puts>

    /* Configure WM8731 */
    alt_up_av_config_reset(audio_config_dev);
  800598:	e13f7b17 	ldw	r4,-532(fp)
  80059c:	0812e780 	call	812e78 <alt_up_av_config_reset>
    alt_up_audio_reset_audio_core(audio_dev);
  8005a0:	e13f7c17 	ldw	r4,-528(fp)
  8005a4:	08127080 	call	812708 <alt_up_audio_reset_audio_core>

    /* Write to configuration registers in the audio codec; see datasheet for what these values mean */
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x0, 0x17);
  8005a8:	e13f7b17 	ldw	r4,-532(fp)
  8005ac:	000b883a 	mov	r5,zero
  8005b0:	018005c4 	movi	r6,23
  8005b4:	0812fb80 	call	812fb8 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x1, 0x17);
  8005b8:	e13f7b17 	ldw	r4,-532(fp)
  8005bc:	01400044 	movi	r5,1
  8005c0:	018005c4 	movi	r6,23
  8005c4:	0812fb80 	call	812fb8 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x2, 0x68);
  8005c8:	e13f7b17 	ldw	r4,-532(fp)
  8005cc:	01400084 	movi	r5,2
  8005d0:	01801a04 	movi	r6,104
  8005d4:	0812fb80 	call	812fb8 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x3, 0x68);
  8005d8:	e13f7b17 	ldw	r4,-532(fp)
  8005dc:	014000c4 	movi	r5,3
  8005e0:	01801a04 	movi	r6,104
  8005e4:	0812fb80 	call	812fb8 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x4, 0x15);
  8005e8:	e13f7b17 	ldw	r4,-532(fp)
  8005ec:	01400104 	movi	r5,4
  8005f0:	01800544 	movi	r6,21
  8005f4:	0812fb80 	call	812fb8 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x5, 0x06);
  8005f8:	e13f7b17 	ldw	r4,-532(fp)
  8005fc:	01400144 	movi	r5,5
  800600:	01800184 	movi	r6,6
  800604:	0812fb80 	call	812fb8 <alt_up_av_config_write_audio_cfg_register>
    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x6, 0x00);
  800608:	e13f7b17 	ldw	r4,-532(fp)
  80060c:	01400184 	movi	r5,6
  800610:	000d883a 	mov	r6,zero
  800614:	0812fb80 	call	812fb8 <alt_up_av_config_write_audio_cfg_register>
	altera_avalon_fifo_init(FIFO_0_OUT_CSR_BASE, 0x0, 10, FIFO_0_OUT_CSR_FIFO_DEPTH-10);
  800618:	01006474 	movhi	r4,401
  80061c:	21240804 	addi	r4,r4,-28640
  800620:	000b883a 	mov	r5,zero
  800624:	01800284 	movi	r6,10
  800628:	01c01d84 	movi	r7,118
  80062c:	081115c0 	call	81115c <altera_avalon_fifo_init>
	altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE);
  800630:	01006474 	movhi	r4,401
  800634:	21243804 	addi	r4,r4,-28448
  800638:	01406474 	movhi	r5,401
  80063c:	29640804 	addi	r5,r5,-28640
  800640:	08115a80 	call	8115a8 <altera_avalon_fifo_read_fifo>

	while (1){
		level =  altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE);
  800644:	01006474 	movhi	r4,401
  800648:	21240804 	addi	r4,r4,-28640
  80064c:	08113240 	call	811324 <altera_avalon_fifo_read_level>
  800650:	e0bf7e15 	stw	r2,-520(fp)
		if (level>0){
  800654:	e0bf7e17 	ldw	r2,-520(fp)
  800658:	1005003a 	cmpeq	r2,r2,zero
  80065c:	10001a1e 	bne	r2,zero,8006c8 <audioTask+0x1bc>
			for (i=0;i<level;i++){
  800660:	e03f7a15 	stw	zero,-536(fp)
  800664:	00001506 	br	8006bc <audioTask+0x1b0>
				buffer[i]= ((altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE)>>16) + 0x7fff)/2;
  800668:	e43f7a17 	ldw	r16,-536(fp)
  80066c:	01006474 	movhi	r4,401
  800670:	21243804 	addi	r4,r4,-28448
  800674:	01406474 	movhi	r5,401
  800678:	29640804 	addi	r5,r5,-28640
  80067c:	08115a80 	call	8115a8 <altera_avalon_fifo_read_fifo>
  800680:	1005d43a 	srai	r2,r2,16
  800684:	10dfffc4 	addi	r3,r2,32767
  800688:	1804d7fa 	srli	r2,r3,31
  80068c:	10c5883a 	add	r2,r2,r3
  800690:	1005d07a 	srai	r2,r2,1
  800694:	1007883a 	mov	r3,r2
  800698:	8405883a 	add	r2,r16,r16
  80069c:	1085883a 	add	r2,r2,r2
  8006a0:	e13f7a04 	addi	r4,fp,-536
  8006a4:	1105883a 	add	r2,r2,r4
  8006a8:	10800504 	addi	r2,r2,20
  8006ac:	10c00015 	stw	r3,0(r2)
	altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE);

	while (1){
		level =  altera_avalon_fifo_read_level(FIFO_0_OUT_CSR_BASE);
		if (level>0){
			for (i=0;i<level;i++){
  8006b0:	e0bf7a17 	ldw	r2,-536(fp)
  8006b4:	10800044 	addi	r2,r2,1
  8006b8:	e0bf7a15 	stw	r2,-536(fp)
  8006bc:	e0ff7a17 	ldw	r3,-536(fp)
  8006c0:	e0bf7e17 	ldw	r2,-520(fp)
  8006c4:	18bfe836 	bltu	r3,r2,800668 <audioTask+0x15c>
				buffer[i]= ((altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE)>>16) + 0x7fff)/2;
			}
		}
        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_RIGHT);
  8006c8:	e0bf7e17 	ldw	r2,-520(fp)
  8006cc:	100d883a 	mov	r6,r2
  8006d0:	e17f7f04 	addi	r5,fp,-516
  8006d4:	e13f7c17 	ldw	r4,-528(fp)
  8006d8:	01c00044 	movi	r7,1
  8006dc:	0812b380 	call	812b38 <alt_up_audio_write_fifo>
        alt_up_audio_write_fifo (audio_dev, buffer, level, ALT_UP_AUDIO_LEFT);
  8006e0:	e0bf7e17 	ldw	r2,-520(fp)
  8006e4:	100d883a 	mov	r6,r2
  8006e8:	e17f7f04 	addi	r5,fp,-516
  8006ec:	e13f7c17 	ldw	r4,-528(fp)
  8006f0:	000f883a 	mov	r7,zero
  8006f4:	0812b380 	call	812b38 <alt_up_audio_write_fifo>
		OSTimeDlyHMSM(0, 0, 0, 1);
  8006f8:	0009883a 	mov	r4,zero
  8006fc:	000b883a 	mov	r5,zero
  800700:	000d883a 	mov	r6,zero
  800704:	01c00044 	movi	r7,1
  800708:	0810c180 	call	810c18 <OSTimeDlyHMSM>
	}
  80070c:	003fcd06 	br	800644 <audioTask+0x138>

00800710 <laserInputTask>:

}

/* Prints "Hello World" and sleeps for three seconds */
void laserInputTask(void* pdata){
  800710:	defff404 	addi	sp,sp,-48
  800714:	dfc00b15 	stw	ra,44(sp)
  800718:	df000a15 	stw	fp,40(sp)
  80071c:	df000a04 	addi	fp,sp,40
  800720:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	alt_u32* laserStatusPointer =(alt_u32* )SWITCH_BASE;
  800724:	00806474 	movhi	r2,401
  800728:	10a42804 	addi	r2,r2,-28512
  80072c:	e0bffd15 	stw	r2,-12(fp)
	alt_u32* midiOutPointer = (alt_u32*) MIDIOUT_0_BASE;
  800730:	00806474 	movhi	r2,401
  800734:	10a82e04 	addi	r2,r2,-24392
  800738:	e0bffc15 	stw	r2,-16(fp)
	alt_u32* voiceAddr =SYNTHESIZER_0_BASE;
  80073c:	00806474 	movhi	r2,401
  800740:	10ac2f04 	addi	r2,r2,-20292
  800744:	e0bffb15 	stw	r2,-20(fp)

	alt_u32 laserStatus = 0;
  800748:	e03ffa15 	stw	zero,-24(fp)
	alt_u32 previousLaserStatus = 0;
  80074c:	e03ff915 	stw	zero,-28(fp)
	alt_u32 differentBits = 0;
  800750:	e03ff815 	stw	zero,-32(fp)
	int noteType;
	int laserIndex=0;
  800754:	e03ff615 	stw	zero,-40(fp)

	while (1){
		OSSemPend(laserStatusChanged, 0, &err);
  800758:	d1203217 	ldw	r4,-32568(gp)
  80075c:	e1bffe04 	addi	r6,fp,-8
  800760:	000b883a 	mov	r5,zero
  800764:	080e9380 	call	80e938 <OSSemPend>
		previousLaserStatus = laserStatus;						// save previous laserstatus
  800768:	e0bffa17 	ldw	r2,-24(fp)
  80076c:	e0bff915 	stw	r2,-28(fp)
		laserStatus = 255 - *laserStatusPointer; 				// inverse 8bits input
  800770:	e0bffd17 	ldw	r2,-12(fp)
  800774:	10c00017 	ldw	r3,0(r2)
  800778:	00803fc4 	movi	r2,255
  80077c:	10c5c83a 	sub	r2,r2,r3
  800780:	e0bffa15 	stw	r2,-24(fp)
		differentBits = previousLaserStatus^laserStatus;		// XOR: 100 ^ 110 = 010
  800784:	e0fff917 	ldw	r3,-28(fp)
  800788:	e0bffa17 	ldw	r2,-24(fp)
  80078c:	1884f03a 	xor	r2,r3,r2
  800790:	e0bff815 	stw	r2,-32(fp)

		for (laserIndex=0;laserIndex<8;laserIndex++){
  800794:	e03ff615 	stw	zero,-40(fp)
  800798:	00003006 	br	80085c <laserInputTask+0x14c>
			//if laser i is changed
			if( ((1 << laserIndex) & (differentBits)) == (1 << laserIndex) ){
  80079c:	00c00044 	movi	r3,1
  8007a0:	e0bff617 	ldw	r2,-40(fp)
  8007a4:	1884983a 	sll	r2,r3,r2
  8007a8:	1007883a 	mov	r3,r2
  8007ac:	e0bff817 	ldw	r2,-32(fp)
  8007b0:	1888703a 	and	r4,r3,r2
  8007b4:	00c00044 	movi	r3,1
  8007b8:	e0bff617 	ldw	r2,-40(fp)
  8007bc:	1884983a 	sll	r2,r3,r2
  8007c0:	2080231e 	bne	r4,r2,800850 <laserInputTask+0x140>
				//get notetype 1 on   0 off
				noteType = ((laserStatus &  (1 << laserIndex)) ==  (1 << laserIndex)) ?  1: 0;
  8007c4:	00c00044 	movi	r3,1
  8007c8:	e0bff617 	ldw	r2,-40(fp)
  8007cc:	1884983a 	sll	r2,r3,r2
  8007d0:	1007883a 	mov	r3,r2
  8007d4:	e0bffa17 	ldw	r2,-24(fp)
  8007d8:	1888703a 	and	r4,r3,r2
  8007dc:	00c00044 	movi	r3,1
  8007e0:	e0bff617 	ldw	r2,-40(fp)
  8007e4:	1884983a 	sll	r2,r3,r2
  8007e8:	2085003a 	cmpeq	r2,r4,r2
  8007ec:	e0bff715 	stw	r2,-36(fp)
				//write to midi out
				*midiOutPointer = generateMidiData(getPitch(scaleIndex,laserIndex)+baseTranspose,noteType);
  8007f0:	d1203017 	ldw	r4,-32576(gp)
  8007f4:	e17ff617 	ldw	r5,-40(fp)
  8007f8:	08000480 	call	800048 <getPitch>
  8007fc:	1007883a 	mov	r3,r2
  800800:	d0a03117 	ldw	r2,-32572(gp)
  800804:	1889883a 	add	r4,r3,r2
  800808:	e17ff717 	ldw	r5,-36(fp)
  80080c:	08000b00 	call	8000b0 <generateMidiData>
  800810:	1007883a 	mov	r3,r2
  800814:	e0bffc17 	ldw	r2,-16(fp)
  800818:	10c00015 	stw	r3,0(r2)
				//write to on board synth
				sendNoteSynthesizer(getPitch(scaleIndex,laserIndex)+baseTranspose,noteType);
  80081c:	d1203017 	ldw	r4,-32576(gp)
  800820:	e17ff617 	ldw	r5,-40(fp)
  800824:	08000480 	call	800048 <getPitch>
  800828:	1007883a 	mov	r3,r2
  80082c:	d0a03117 	ldw	r2,-32572(gp)
  800830:	1889883a 	add	r4,r3,r2
  800834:	e17ff717 	ldw	r5,-36(fp)
  800838:	08004c00 	call	8004c0 <sendNoteSynthesizer>
				OSTimeDlyHMSM(0, 0, 0, 2);
  80083c:	0009883a 	mov	r4,zero
  800840:	000b883a 	mov	r5,zero
  800844:	000d883a 	mov	r6,zero
  800848:	01c00084 	movi	r7,2
  80084c:	0810c180 	call	810c18 <OSTimeDlyHMSM>
		OSSemPend(laserStatusChanged, 0, &err);
		previousLaserStatus = laserStatus;						// save previous laserstatus
		laserStatus = 255 - *laserStatusPointer; 				// inverse 8bits input
		differentBits = previousLaserStatus^laserStatus;		// XOR: 100 ^ 110 = 010

		for (laserIndex=0;laserIndex<8;laserIndex++){
  800850:	e0bff617 	ldw	r2,-40(fp)
  800854:	10800044 	addi	r2,r2,1
  800858:	e0bff615 	stw	r2,-40(fp)
  80085c:	e0bff617 	ldw	r2,-40(fp)
  800860:	10800210 	cmplti	r2,r2,8
  800864:	103fcd1e 	bne	r2,zero,80079c <laserInputTask+0x8c>
				sendNoteSynthesizer(getPitch(scaleIndex,laserIndex)+baseTranspose,noteType);
				OSTimeDlyHMSM(0, 0, 0, 2);

			}
		}
	}
  800868:	003fbb06 	br	800758 <laserInputTask+0x48>

0080086c <uiTask>:
}

void uiTask(void* pdata){
  80086c:	defff904 	addi	sp,sp,-28
  800870:	dfc00615 	stw	ra,24(sp)
  800874:	df000515 	stw	fp,20(sp)
  800878:	df000504 	addi	fp,sp,20
  80087c:	e13ffd15 	stw	r4,-12(fp)
	INT8U err;
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
  800880:	01002074 	movhi	r4,129
  800884:	21143f04 	addi	r4,r4,20732
  800888:	08135900 	call	813590 <alt_up_character_lcd_open_dev>
  80088c:	e0bffb15 	stw	r2,-20(fp)
	if ( char_lcd_dev == NULL){
  800890:	e0bffb17 	ldw	r2,-20(fp)
  800894:	1004c03a 	cmpne	r2,r2,zero
  800898:	1000041e 	bne	r2,zero,8008ac <uiTask+0x40>
		alt_printf ("Error: could not open character LCD device\n");
  80089c:	01002074 	movhi	r4,129
  8008a0:	21144504 	addi	r4,r4,20756
  8008a4:	08084040 	call	808404 <alt_printf>
  8008a8:	00000306 	br	8008b8 <uiTask+0x4c>
	}
	else{
		alt_printf ("Opened character LCD device\n");
  8008ac:	01002074 	movhi	r4,129
  8008b0:	21145004 	addi	r4,r4,20800
  8008b4:	08084040 	call	808404 <alt_printf>
	}
	alt_up_character_lcd_init (char_lcd_dev);
  8008b8:	e13ffb17 	ldw	r4,-20(fp)
  8008bc:	081355c0 	call	81355c <alt_up_character_lcd_init>
	alt_up_character_lcd_cursor_off(char_lcd_dev);
  8008c0:	e13ffb17 	ldw	r4,-20(fp)
  8008c4:	08139740 	call	813974 <alt_up_character_lcd_cursor_off>

	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
  8008c8:	e13ffb17 	ldw	r4,-20(fp)
  8008cc:	000b883a 	mov	r5,zero
  8008d0:	000d883a 	mov	r6,zero
  8008d4:	081370c0 	call	81370c <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, "Laser Harp");
  8008d8:	e13ffb17 	ldw	r4,-20(fp)
  8008dc:	01402074 	movhi	r5,129
  8008e0:	29545804 	addi	r5,r5,20832
  8008e4:	08136480 	call	813648 <alt_up_character_lcd_string>
  8008e8:	00000006 	br	8008ec <uiTask+0x80>

	while(1){
		OSSemPend(settingChanged, 0, &err);
  8008ec:	d1203317 	ldw	r4,-32564(gp)
  8008f0:	e1bffc04 	addi	r6,fp,-16
  8008f4:	000b883a 	mov	r5,zero
  8008f8:	080e9380 	call	80e938 <OSSemPend>
		alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
  8008fc:	e13ffb17 	ldw	r4,-20(fp)
  800900:	000b883a 	mov	r5,zero
  800904:	01800044 	movi	r6,1
  800908:	081370c0 	call	81370c <alt_up_character_lcd_set_cursor_pos>
        switch(baseTranspose){
  80090c:	d0a03117 	ldw	r2,-32572(gp)
  800910:	10800144 	addi	r2,r2,5
  800914:	e0bfff15 	stw	r2,-4(fp)
  800918:	e0ffff17 	ldw	r3,-4(fp)
  80091c:	18800328 	cmpgeui	r2,r3,12
  800920:	1000501e 	bne	r2,zero,800a64 <uiTask+0x1f8>
  800924:	e13fff17 	ldw	r4,-4(fp)
  800928:	e13fff17 	ldw	r4,-4(fp)
  80092c:	2105883a 	add	r2,r4,r4
  800930:	1087883a 	add	r3,r2,r2
  800934:	00802034 	movhi	r2,128
  800938:	10825204 	addi	r2,r2,2376
  80093c:	1885883a 	add	r2,r3,r2
  800940:	10800017 	ldw	r2,0(r2)
  800944:	1000683a 	jmp	r2
  800948:	00800978 	rdprs	r2,zero,37
  80094c:	0080098c 	andi	r2,zero,38
  800950:	008009a0 	cmpeqi	r2,zero,38
  800954:	008009b4 	movhi	r2,38
  800958:	008009c8 	cmpgei	r2,zero,39
  80095c:	008009dc 	xori	r2,zero,39
  800960:	008009f0 	cmpltui	r2,zero,39
  800964:	00800a04 	movi	r2,40
  800968:	00800a18 	cmpnei	r2,zero,40
  80096c:	00800a2c 	andhi	r2,zero,40
  800970:	00800a40 	call	800a4 <OSCtxSw_SWITCH_PC+0x80064>
  800974:	00800a54 	movui	r2,41
        	case -5:
    			alt_up_character_lcd_string(char_lcd_dev, "G  ");
  800978:	e13ffb17 	ldw	r4,-20(fp)
  80097c:	01402074 	movhi	r5,129
  800980:	29545b04 	addi	r5,r5,20844
  800984:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  800988:	00003606 	br	800a64 <uiTask+0x1f8>
        	case -4:
    			alt_up_character_lcd_string(char_lcd_dev, "Ab ");
  80098c:	e13ffb17 	ldw	r4,-20(fp)
  800990:	01402074 	movhi	r5,129
  800994:	29545c04 	addi	r5,r5,20848
  800998:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  80099c:	00003106 	br	800a64 <uiTask+0x1f8>
        	case -3:
    			alt_up_character_lcd_string(char_lcd_dev, "A  ");
  8009a0:	e13ffb17 	ldw	r4,-20(fp)
  8009a4:	01402074 	movhi	r5,129
  8009a8:	29545d04 	addi	r5,r5,20852
  8009ac:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  8009b0:	00002c06 	br	800a64 <uiTask+0x1f8>
        	case -2:
    			alt_up_character_lcd_string(char_lcd_dev, "Bb ");
  8009b4:	e13ffb17 	ldw	r4,-20(fp)
  8009b8:	01402074 	movhi	r5,129
  8009bc:	29545e04 	addi	r5,r5,20856
  8009c0:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  8009c4:	00002706 	br	800a64 <uiTask+0x1f8>
        	case -1:
    			alt_up_character_lcd_string(char_lcd_dev, "B  ");
  8009c8:	e13ffb17 	ldw	r4,-20(fp)
  8009cc:	01402074 	movhi	r5,129
  8009d0:	29545f04 	addi	r5,r5,20860
  8009d4:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  8009d8:	00002206 	br	800a64 <uiTask+0x1f8>
        	case 0:
    			alt_up_character_lcd_string(char_lcd_dev, "C  ");
  8009dc:	e13ffb17 	ldw	r4,-20(fp)
  8009e0:	01402074 	movhi	r5,129
  8009e4:	29546004 	addi	r5,r5,20864
  8009e8:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  8009ec:	00001d06 	br	800a64 <uiTask+0x1f8>
        	case 1:
    			alt_up_character_lcd_string(char_lcd_dev, "C# ");
  8009f0:	e13ffb17 	ldw	r4,-20(fp)
  8009f4:	01402074 	movhi	r5,129
  8009f8:	29546104 	addi	r5,r5,20868
  8009fc:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  800a00:	00001806 	br	800a64 <uiTask+0x1f8>
        	case 2:
    			alt_up_character_lcd_string(char_lcd_dev, "D  ");
  800a04:	e13ffb17 	ldw	r4,-20(fp)
  800a08:	01402074 	movhi	r5,129
  800a0c:	29546204 	addi	r5,r5,20872
  800a10:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  800a14:	00001306 	br	800a64 <uiTask+0x1f8>
        	case 3:
    			alt_up_character_lcd_string(char_lcd_dev, "Eb ");
  800a18:	e13ffb17 	ldw	r4,-20(fp)
  800a1c:	01402074 	movhi	r5,129
  800a20:	29546304 	addi	r5,r5,20876
  800a24:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  800a28:	00000e06 	br	800a64 <uiTask+0x1f8>
        	case 4:
    			alt_up_character_lcd_string(char_lcd_dev, "E  ");
  800a2c:	e13ffb17 	ldw	r4,-20(fp)
  800a30:	01402074 	movhi	r5,129
  800a34:	29546404 	addi	r5,r5,20880
  800a38:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  800a3c:	00000906 	br	800a64 <uiTask+0x1f8>
        	case 5:
    			alt_up_character_lcd_string(char_lcd_dev, "F  ");
  800a40:	e13ffb17 	ldw	r4,-20(fp)
  800a44:	01402074 	movhi	r5,129
  800a48:	29546504 	addi	r5,r5,20884
  800a4c:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  800a50:	00000406 	br	800a64 <uiTask+0x1f8>
        	case 6:
    			alt_up_character_lcd_string(char_lcd_dev, "F# ");
  800a54:	e13ffb17 	ldw	r4,-20(fp)
  800a58:	01402074 	movhi	r5,129
  800a5c:	29546604 	addi	r5,r5,20888
  800a60:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
        }


        switch(scaleIndex){
  800a64:	d0a03017 	ldw	r2,-32576(gp)
  800a68:	e0bffe15 	stw	r2,-8(fp)
  800a6c:	e0fffe17 	ldw	r3,-8(fp)
  800a70:	18800060 	cmpeqi	r2,r3,1
  800a74:	1000131e 	bne	r2,zero,800ac4 <uiTask+0x258>
  800a78:	e13ffe17 	ldw	r4,-8(fp)
  800a7c:	20800088 	cmpgei	r2,r4,2
  800a80:	1000041e 	bne	r2,zero,800a94 <uiTask+0x228>
  800a84:	e0fffe17 	ldw	r3,-8(fp)
  800a88:	1805003a 	cmpeq	r2,r3,zero
  800a8c:	1000081e 	bne	r2,zero,800ab0 <uiTask+0x244>
  800a90:	003f9606 	br	8008ec <uiTask+0x80>
  800a94:	e13ffe17 	ldw	r4,-8(fp)
  800a98:	208000a0 	cmpeqi	r2,r4,2
  800a9c:	10000e1e 	bne	r2,zero,800ad8 <uiTask+0x26c>
  800aa0:	e0fffe17 	ldw	r3,-8(fp)
  800aa4:	188000e0 	cmpeqi	r2,r3,3
  800aa8:	1000101e 	bne	r2,zero,800aec <uiTask+0x280>
  800aac:	003f8f06 	br	8008ec <uiTask+0x80>
        	case 0:
    			alt_up_character_lcd_string(char_lcd_dev, "Major Scale ");
  800ab0:	e13ffb17 	ldw	r4,-20(fp)
  800ab4:	01402074 	movhi	r5,129
  800ab8:	29546704 	addi	r5,r5,20892
  800abc:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  800ac0:	003f8a06 	br	8008ec <uiTask+0x80>
        	case 1:
    			alt_up_character_lcd_string(char_lcd_dev, "Minor Scale ");
  800ac4:	e13ffb17 	ldw	r4,-20(fp)
  800ac8:	01402074 	movhi	r5,129
  800acc:	29546b04 	addi	r5,r5,20908
  800ad0:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  800ad4:	003f8506 	br	8008ec <uiTask+0x80>
        	case 2:
    			alt_up_character_lcd_string(char_lcd_dev, "Blue Scale  ");
  800ad8:	e13ffb17 	ldw	r4,-20(fp)
  800adc:	01402074 	movhi	r5,129
  800ae0:	29546f04 	addi	r5,r5,20924
  800ae4:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
  800ae8:	003f8006 	br	8008ec <uiTask+0x80>
        	case 3:
    			alt_up_character_lcd_string(char_lcd_dev, "Doran Scale ");
  800aec:	e13ffb17 	ldw	r4,-20(fp)
  800af0:	01402074 	movhi	r5,129
  800af4:	29547304 	addi	r5,r5,20940
  800af8:	08136480 	call	813648 <alt_up_character_lcd_string>
    			break;
        }

	}
  800afc:	003f7b06 	br	8008ec <uiTask+0x80>

00800b00 <laserChangeHandler>:
}

static void laserChangeHandler( void * context){
  800b00:	defffd04 	addi	sp,sp,-12
  800b04:	dfc00215 	stw	ra,8(sp)
  800b08:	df000115 	stw	fp,4(sp)
  800b0c:	df000104 	addi	fp,sp,4
  800b10:	e13fff15 	stw	r4,-4(fp)
	OSSemPost(laserStatusChanged);
  800b14:	d1203217 	ldw	r4,-32568(gp)
  800b18:	080ed300 	call	80ed30 <OSSemPost>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH_BASE, 0xff);
  800b1c:	00c06474 	movhi	r3,401
  800b20:	18e42b04 	addi	r3,r3,-28500
  800b24:	00803fc4 	movi	r2,255
  800b28:	18800035 	stwio	r2,0(r3)
}
  800b2c:	e037883a 	mov	sp,fp
  800b30:	dfc00117 	ldw	ra,4(sp)
  800b34:	df000017 	ldw	fp,0(sp)
  800b38:	dec00204 	addi	sp,sp,8
  800b3c:	f800283a 	ret

00800b40 <button1Handler>:

static void button1Handler(void * context){
  800b40:	defffd04 	addi	sp,sp,-12
  800b44:	dfc00215 	stw	ra,8(sp)
  800b48:	df000115 	stw	fp,4(sp)
  800b4c:	df000104 	addi	fp,sp,4
  800b50:	e13fff15 	stw	r4,-4(fp)
	scaleIndex ++;
  800b54:	d0a03017 	ldw	r2,-32576(gp)
  800b58:	10800044 	addi	r2,r2,1
  800b5c:	d0a03015 	stw	r2,-32576(gp)
	if (scaleIndex>3){
  800b60:	d0a03017 	ldw	r2,-32576(gp)
  800b64:	10800110 	cmplti	r2,r2,4
  800b68:	1000011e 	bne	r2,zero,800b70 <button1Handler+0x30>
		scaleIndex = 0;
  800b6c:	d0203015 	stw	zero,-32576(gp)
	}
	OSSemPost(settingChanged);
  800b70:	d1203317 	ldw	r4,-32564(gp)
  800b74:	080ed300 	call	80ed30 <OSSemPost>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_1_BASE, 0x1);
  800b78:	00c06474 	movhi	r3,401
  800b7c:	18e42704 	addi	r3,r3,-28516
  800b80:	00800044 	movi	r2,1
  800b84:	18800035 	stwio	r2,0(r3)
}
  800b88:	e037883a 	mov	sp,fp
  800b8c:	dfc00117 	ldw	ra,4(sp)
  800b90:	df000017 	ldw	fp,0(sp)
  800b94:	dec00204 	addi	sp,sp,8
  800b98:	f800283a 	ret

00800b9c <button2Handler>:
static void button2Handler(void * context){
  800b9c:	defffd04 	addi	sp,sp,-12
  800ba0:	dfc00215 	stw	ra,8(sp)
  800ba4:	df000115 	stw	fp,4(sp)
  800ba8:	df000104 	addi	fp,sp,4
  800bac:	e13fff15 	stw	r4,-4(fp)
	baseTranspose ++;
  800bb0:	d0a03117 	ldw	r2,-32572(gp)
  800bb4:	10800044 	addi	r2,r2,1
  800bb8:	d0a03115 	stw	r2,-32572(gp)
	if (baseTranspose>6){
  800bbc:	d0a03117 	ldw	r2,-32572(gp)
  800bc0:	108001d0 	cmplti	r2,r2,7
  800bc4:	1000021e 	bne	r2,zero,800bd0 <button2Handler+0x34>
		baseTranspose = -5;
  800bc8:	00bffec4 	movi	r2,-5
  800bcc:	d0a03115 	stw	r2,-32572(gp)
	}
	OSSemPost(settingChanged);
  800bd0:	d1203317 	ldw	r4,-32564(gp)
  800bd4:	080ed300 	call	80ed30 <OSSemPost>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_2_BASE, 0x1);
  800bd8:	00c06474 	movhi	r3,401
  800bdc:	18e42304 	addi	r3,r3,-28532
  800be0:	00800044 	movi	r2,1
  800be4:	18800035 	stwio	r2,0(r3)
}
  800be8:	e037883a 	mov	sp,fp
  800bec:	dfc00117 	ldw	ra,4(sp)
  800bf0:	df000017 	ldw	fp,0(sp)
  800bf4:	dec00204 	addi	sp,sp,8
  800bf8:	f800283a 	ret

00800bfc <main>:

/* The main function creates two task and starts multi-tasking */
int main(void){
  800bfc:	defff904 	addi	sp,sp,-28
  800c00:	dfc00615 	stw	ra,24(sp)
  800c04:	df000515 	stw	fp,20(sp)
  800c08:	df000504 	addi	fp,sp,20
	laserStatusChanged = OSSemCreate(0);
  800c0c:	0009883a 	mov	r4,zero
  800c10:	080e5840 	call	80e584 <OSSemCreate>
  800c14:	d0a03215 	stw	r2,-32568(gp)
	settingChanged = OSSemCreate(1);
  800c18:	01000044 	movi	r4,1
  800c1c:	080e5840 	call	80e584 <OSSemCreate>
  800c20:	d0a03315 	stw	r2,-32564(gp)
	alt_ic_isr_register(SWITCH_IRQ_INTERRUPT_CONTROLLER_ID, //alt_u32 ic_id
  800c24:	d8000015 	stw	zero,0(sp)
  800c28:	0009883a 	mov	r4,zero
  800c2c:	014000c4 	movi	r5,3
  800c30:	01802034 	movhi	r6,128
  800c34:	3182c004 	addi	r6,r6,2816
  800c38:	000f883a 	mov	r7,zero
  800c3c:	0807e000 	call	807e00 <alt_ic_isr_register>
						SWITCH_IRQ, //alt_u32 irq
						laserChangeHandler, //alt_isr_func isr
						NULL,
						NULL);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH_BASE,0xff);
  800c40:	00c06474 	movhi	r3,401
  800c44:	18e42a04 	addi	r3,r3,-28504
  800c48:	00803fc4 	movi	r2,255
  800c4c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH_BASE, 0xff);
  800c50:	00c06474 	movhi	r3,401
  800c54:	18e42b04 	addi	r3,r3,-28500
  800c58:	00803fc4 	movi	r2,255
  800c5c:	18800035 	stwio	r2,0(r3)

	alt_ic_isr_register(BUTTON_1_IRQ_INTERRUPT_CONTROLLER_ID, //alt_u32 ic_id
  800c60:	d8000015 	stw	zero,0(sp)
  800c64:	0009883a 	mov	r4,zero
  800c68:	01400104 	movi	r5,4
  800c6c:	01802034 	movhi	r6,128
  800c70:	3182d004 	addi	r6,r6,2880
  800c74:	000f883a 	mov	r7,zero
  800c78:	0807e000 	call	807e00 <alt_ic_isr_register>
						BUTTON_1_IRQ, //alt_u32 irq
						button1Handler, //alt_isr_func isr
						NULL,
						NULL);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_1_BASE,0x1);
  800c7c:	00c06474 	movhi	r3,401
  800c80:	18e42604 	addi	r3,r3,-28520
  800c84:	00800044 	movi	r2,1
  800c88:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_1_BASE, 0x1);
  800c8c:	00c06474 	movhi	r3,401
  800c90:	18e42704 	addi	r3,r3,-28516
  800c94:	00800044 	movi	r2,1
  800c98:	18800035 	stwio	r2,0(r3)

	alt_ic_isr_register(BUTTON_2_IRQ_INTERRUPT_CONTROLLER_ID, //alt_u32 ic_id
  800c9c:	d8000015 	stw	zero,0(sp)
  800ca0:	0009883a 	mov	r4,zero
  800ca4:	01400144 	movi	r5,5
  800ca8:	01802034 	movhi	r6,128
  800cac:	3182e704 	addi	r6,r6,2972
  800cb0:	000f883a 	mov	r7,zero
  800cb4:	0807e000 	call	807e00 <alt_ic_isr_register>
						BUTTON_2_IRQ, //alt_u32 irq
						button2Handler, //alt_isr_func isr
						NULL,
						NULL);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_2_BASE,0x1);
  800cb8:	00c06474 	movhi	r3,401
  800cbc:	18e42204 	addi	r3,r3,-28536
  800cc0:	00800044 	movi	r2,1
  800cc4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_2_BASE, 0x1);
  800cc8:	00c06474 	movhi	r3,401
  800ccc:	18e42304 	addi	r3,r3,-28532
  800cd0:	00800044 	movi	r2,1
  800cd4:	18800035 	stwio	r2,0(r3)

	OSTaskCreateExt(audioTask,
  800cd8:	01802234 	movhi	r6,136
  800cdc:	31b66e04 	addi	r6,r6,-9800
  800ce0:	008000c4 	movi	r2,3
  800ce4:	d8800015 	stw	r2,0(sp)
  800ce8:	008020b4 	movhi	r2,130
  800cec:	10afcf04 	addi	r2,r2,-16580
  800cf0:	d8800115 	stw	r2,4(sp)
  800cf4:	008000b4 	movhi	r2,2
  800cf8:	10a1a804 	addi	r2,r2,-31072
  800cfc:	d8800215 	stw	r2,8(sp)
  800d00:	d8000315 	stw	zero,12(sp)
  800d04:	d8000415 	stw	zero,16(sp)
  800d08:	01002034 	movhi	r4,128
  800d0c:	21014304 	addi	r4,r4,1292
  800d10:	000b883a 	mov	r5,zero
  800d14:	01c000c4 	movi	r7,3
  800d18:	080f7d40 	call	80f7d4 <OSTaskCreateExt>
				  audioTaskStack,
				  AUDIO_TASK_STACKSIZE,
				  NULL,
				  0);

	OSTaskCreateExt(laserInputTask,
  800d1c:	018020b4 	movhi	r6,130
  800d20:	31afce04 	addi	r6,r6,-16584
  800d24:	00800044 	movi	r2,1
  800d28:	d8800015 	stw	r2,0(sp)
  800d2c:	00802074 	movhi	r2,129
  800d30:	109c4704 	addi	r2,r2,28956
  800d34:	d8800115 	stw	r2,4(sp)
  800d38:	0084e204 	movi	r2,5000
  800d3c:	d8800215 	stw	r2,8(sp)
  800d40:	d8000315 	stw	zero,12(sp)
  800d44:	d8000415 	stw	zero,16(sp)
  800d48:	01002034 	movhi	r4,128
  800d4c:	2101c404 	addi	r4,r4,1808
  800d50:	000b883a 	mov	r5,zero
  800d54:	01c00044 	movi	r7,1
  800d58:	080f7d40 	call	80f7d4 <OSTaskCreateExt>
				  laserInputTaskStack,
				  LASER_INPUT_TASK_STACKSIZE,
				  NULL,
				  0);

	OSTaskCreateExt(uiTask,
  800d5c:	01802234 	movhi	r6,136
  800d60:	3189f604 	addi	r6,r6,10200
  800d64:	00800084 	movi	r2,2
  800d68:	d8800015 	stw	r2,0(sp)
  800d6c:	00802234 	movhi	r2,136
  800d70:	10b66f04 	addi	r2,r2,-9796
  800d74:	d8800115 	stw	r2,4(sp)
  800d78:	0084e204 	movi	r2,5000
  800d7c:	d8800215 	stw	r2,8(sp)
  800d80:	d8000315 	stw	zero,12(sp)
  800d84:	d8000415 	stw	zero,16(sp)
  800d88:	01002034 	movhi	r4,128
  800d8c:	21021b04 	addi	r4,r4,2156
  800d90:	000b883a 	mov	r5,zero
  800d94:	01c00084 	movi	r7,2
  800d98:	080f7d40 	call	80f7d4 <OSTaskCreateExt>
				  uiTaskStack,
				  UI_TASK_STACKSIZE,
				  NULL,
				  0);

	OSStart();
  800d9c:	0809a000 	call	809a00 <OSStart>
	printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");
  800da0:	01000b84 	movi	r4,46
  800da4:	0804f780 	call	804f78 <putchar>
  800da8:	01000b84 	movi	r4,46
  800dac:	0804f780 	call	804f78 <putchar>
  800db0:	01000b84 	movi	r4,46
  800db4:	0804f780 	call	804f78 <putchar>
  800db8:	01000b84 	movi	r4,46
  800dbc:	0804f780 	call	804f78 <putchar>
  800dc0:	01000b84 	movi	r4,46
  800dc4:	0804f780 	call	804f78 <putchar>
  800dc8:	01000b84 	movi	r4,46
  800dcc:	0804f780 	call	804f78 <putchar>
  800dd0:	01000b84 	movi	r4,46
  800dd4:	0804f780 	call	804f78 <putchar>
  800dd8:	01000b84 	movi	r4,46
  800ddc:	0804f780 	call	804f78 <putchar>
  800de0:	01000b84 	movi	r4,46
  800de4:	0804f780 	call	804f78 <putchar>
  800de8:	01000b84 	movi	r4,46
  800dec:	0804f780 	call	804f78 <putchar>
  800df0:	01000b84 	movi	r4,46
  800df4:	0804f780 	call	804f78 <putchar>
  800df8:	01000b84 	movi	r4,46
  800dfc:	0804f780 	call	804f78 <putchar>
  800e00:	01000b84 	movi	r4,46
  800e04:	0804f780 	call	804f78 <putchar>
	printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");
  800e08:	01000b84 	movi	r4,46
  800e0c:	0804f780 	call	804f78 <putchar>
  800e10:	01000b84 	movi	r4,46
  800e14:	0804f780 	call	804f78 <putchar>
  800e18:	01000b84 	movi	r4,46
  800e1c:	0804f780 	call	804f78 <putchar>
  800e20:	01000b84 	movi	r4,46
  800e24:	0804f780 	call	804f78 <putchar>
  800e28:	01000b84 	movi	r4,46
  800e2c:	0804f780 	call	804f78 <putchar>
  800e30:	01000b84 	movi	r4,46
  800e34:	0804f780 	call	804f78 <putchar>
  800e38:	01000b84 	movi	r4,46
  800e3c:	0804f780 	call	804f78 <putchar>
  800e40:	01000b84 	movi	r4,46
  800e44:	0804f780 	call	804f78 <putchar>
  800e48:	01000b84 	movi	r4,46
  800e4c:	0804f780 	call	804f78 <putchar>
  800e50:	01000b84 	movi	r4,46
  800e54:	0804f780 	call	804f78 <putchar>
  800e58:	01000b84 	movi	r4,46
  800e5c:	0804f780 	call	804f78 <putchar>
  800e60:	01000b84 	movi	r4,46
  800e64:	0804f780 	call	804f78 <putchar>
  800e68:	01000b84 	movi	r4,46
  800e6c:	0804f780 	call	804f78 <putchar>
	printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");
  800e70:	01000b84 	movi	r4,46
  800e74:	0804f780 	call	804f78 <putchar>
  800e78:	01000b84 	movi	r4,46
  800e7c:	0804f780 	call	804f78 <putchar>
  800e80:	01000b84 	movi	r4,46
  800e84:	0804f780 	call	804f78 <putchar>
  800e88:	01000b84 	movi	r4,46
  800e8c:	0804f780 	call	804f78 <putchar>
  800e90:	01000b84 	movi	r4,46
  800e94:	0804f780 	call	804f78 <putchar>
  800e98:	01000b84 	movi	r4,46
  800e9c:	0804f780 	call	804f78 <putchar>
  800ea0:	01000b84 	movi	r4,46
  800ea4:	0804f780 	call	804f78 <putchar>
  800ea8:	01000b84 	movi	r4,46
  800eac:	0804f780 	call	804f78 <putchar>
  800eb0:	01000b84 	movi	r4,46
  800eb4:	0804f780 	call	804f78 <putchar>
  800eb8:	01000b84 	movi	r4,46
  800ebc:	0804f780 	call	804f78 <putchar>
  800ec0:	01000b84 	movi	r4,46
  800ec4:	0804f780 	call	804f78 <putchar>
  800ec8:	01000b84 	movi	r4,46
  800ecc:	0804f780 	call	804f78 <putchar>
  800ed0:	01000b84 	movi	r4,46
  800ed4:	0804f780 	call	804f78 <putchar>
	printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");
  800ed8:	01000b84 	movi	r4,46
  800edc:	0804f780 	call	804f78 <putchar>
  800ee0:	01000b84 	movi	r4,46
  800ee4:	0804f780 	call	804f78 <putchar>
  800ee8:	01000b84 	movi	r4,46
  800eec:	0804f780 	call	804f78 <putchar>
  800ef0:	01000b84 	movi	r4,46
  800ef4:	0804f780 	call	804f78 <putchar>
  800ef8:	01000b84 	movi	r4,46
  800efc:	0804f780 	call	804f78 <putchar>
  800f00:	01000b84 	movi	r4,46
  800f04:	0804f780 	call	804f78 <putchar>
  800f08:	01000b84 	movi	r4,46
  800f0c:	0804f780 	call	804f78 <putchar>
  800f10:	01000b84 	movi	r4,46
  800f14:	0804f780 	call	804f78 <putchar>
  800f18:	01000b84 	movi	r4,46
  800f1c:	0804f780 	call	804f78 <putchar>
  800f20:	01000b84 	movi	r4,46
  800f24:	0804f780 	call	804f78 <putchar>
  800f28:	01000b84 	movi	r4,46
  800f2c:	0804f780 	call	804f78 <putchar>
  800f30:	01000b84 	movi	r4,46
  800f34:	0804f780 	call	804f78 <putchar>
  800f38:	01000b84 	movi	r4,46
  800f3c:	0804f780 	call	804f78 <putchar>
	printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");
  800f40:	01000b84 	movi	r4,46
  800f44:	0804f780 	call	804f78 <putchar>
  800f48:	01000b84 	movi	r4,46
  800f4c:	0804f780 	call	804f78 <putchar>
  800f50:	01000b84 	movi	r4,46
  800f54:	0804f780 	call	804f78 <putchar>
  800f58:	01000b84 	movi	r4,46
  800f5c:	0804f780 	call	804f78 <putchar>
  800f60:	01000b84 	movi	r4,46
  800f64:	0804f780 	call	804f78 <putchar>
  800f68:	01000b84 	movi	r4,46
  800f6c:	0804f780 	call	804f78 <putchar>
  800f70:	01000b84 	movi	r4,46
  800f74:	0804f780 	call	804f78 <putchar>
  800f78:	01000b84 	movi	r4,46
  800f7c:	0804f780 	call	804f78 <putchar>
  800f80:	01000b84 	movi	r4,46
  800f84:	0804f780 	call	804f78 <putchar>
  800f88:	01000b84 	movi	r4,46
  800f8c:	0804f780 	call	804f78 <putchar>
  800f90:	01000b84 	movi	r4,46
  800f94:	0804f780 	call	804f78 <putchar>
  800f98:	01000b84 	movi	r4,46
  800f9c:	0804f780 	call	804f78 <putchar>
  800fa0:	01000b84 	movi	r4,46
  800fa4:	0804f780 	call	804f78 <putchar>
	printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");
  800fa8:	01000b84 	movi	r4,46
  800fac:	0804f780 	call	804f78 <putchar>
  800fb0:	01000b84 	movi	r4,46
  800fb4:	0804f780 	call	804f78 <putchar>
  800fb8:	01000b84 	movi	r4,46
  800fbc:	0804f780 	call	804f78 <putchar>
  800fc0:	01000b84 	movi	r4,46
  800fc4:	0804f780 	call	804f78 <putchar>
  800fc8:	01000b84 	movi	r4,46
  800fcc:	0804f780 	call	804f78 <putchar>
  800fd0:	01000b84 	movi	r4,46
  800fd4:	0804f780 	call	804f78 <putchar>
  800fd8:	01000b84 	movi	r4,46
  800fdc:	0804f780 	call	804f78 <putchar>
  800fe0:	01000b84 	movi	r4,46
  800fe4:	0804f780 	call	804f78 <putchar>
  800fe8:	01000b84 	movi	r4,46
  800fec:	0804f780 	call	804f78 <putchar>
  800ff0:	01000b84 	movi	r4,46
  800ff4:	0804f780 	call	804f78 <putchar>
  800ff8:	01000b84 	movi	r4,46
  800ffc:	0804f780 	call	804f78 <putchar>
  801000:	01000b84 	movi	r4,46
  801004:	0804f780 	call	804f78 <putchar>
  801008:	01000b84 	movi	r4,46
  80100c:	0804f780 	call	804f78 <putchar>
	printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");
  801010:	01000b84 	movi	r4,46
  801014:	0804f780 	call	804f78 <putchar>
  801018:	01000b84 	movi	r4,46
  80101c:	0804f780 	call	804f78 <putchar>
  801020:	01000b84 	movi	r4,46
  801024:	0804f780 	call	804f78 <putchar>
  801028:	01000b84 	movi	r4,46
  80102c:	0804f780 	call	804f78 <putchar>
  801030:	01000b84 	movi	r4,46
  801034:	0804f780 	call	804f78 <putchar>
  801038:	01000b84 	movi	r4,46
  80103c:	0804f780 	call	804f78 <putchar>
  801040:	01000b84 	movi	r4,46
  801044:	0804f780 	call	804f78 <putchar>
  801048:	01000b84 	movi	r4,46
  80104c:	0804f780 	call	804f78 <putchar>
  801050:	01000b84 	movi	r4,46
  801054:	0804f780 	call	804f78 <putchar>
  801058:	01000b84 	movi	r4,46
  80105c:	0804f780 	call	804f78 <putchar>
  801060:	01000b84 	movi	r4,46
  801064:	0804f780 	call	804f78 <putchar>
  801068:	01000b84 	movi	r4,46
  80106c:	0804f780 	call	804f78 <putchar>
  801070:	01000b84 	movi	r4,46
  801074:	0804f780 	call	804f78 <putchar>
	printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");printf(".");
  801078:	01000b84 	movi	r4,46
  80107c:	0804f780 	call	804f78 <putchar>
  801080:	01000b84 	movi	r4,46
  801084:	0804f780 	call	804f78 <putchar>
  801088:	01000b84 	movi	r4,46
  80108c:	0804f780 	call	804f78 <putchar>
  801090:	01000b84 	movi	r4,46
  801094:	0804f780 	call	804f78 <putchar>
  801098:	01000b84 	movi	r4,46
  80109c:	0804f780 	call	804f78 <putchar>
  8010a0:	01000b84 	movi	r4,46
  8010a4:	0804f780 	call	804f78 <putchar>
  8010a8:	01000b84 	movi	r4,46
  8010ac:	0804f780 	call	804f78 <putchar>
  8010b0:	01000b84 	movi	r4,46
  8010b4:	0804f780 	call	804f78 <putchar>
  8010b8:	01000b84 	movi	r4,46
  8010bc:	0804f780 	call	804f78 <putchar>
  8010c0:	01000b84 	movi	r4,46
  8010c4:	0804f780 	call	804f78 <putchar>
  8010c8:	01000b84 	movi	r4,46
  8010cc:	0804f780 	call	804f78 <putchar>
  8010d0:	01000b84 	movi	r4,46
  8010d4:	0804f780 	call	804f78 <putchar>
  8010d8:	01000b84 	movi	r4,46
  8010dc:	0804f780 	call	804f78 <putchar>

	return 0;
  8010e0:	0005883a 	mov	r2,zero
}
  8010e4:	e037883a 	mov	sp,fp
  8010e8:	dfc00117 	ldw	ra,4(sp)
  8010ec:	df000017 	ldw	fp,0(sp)
  8010f0:	dec00204 	addi	sp,sp,8
  8010f4:	f800283a 	ret

008010f8 <roundf>:
  8010f8:	209fe02c 	andhi	r2,r4,32640
  8010fc:	1004d5fa 	srli	r2,r2,23
  801100:	deffff04 	addi	sp,sp,-4
  801104:	00c00584 	movi	r3,22
  801108:	11bfe044 	addi	r6,r2,-127
  80110c:	dfc00015 	stw	ra,0(sp)
  801110:	200f883a 	mov	r7,r4
  801114:	19801016 	blt	r3,r6,801158 <roundf+0x60>
  801118:	00802034 	movhi	r2,128
  80111c:	10bfffc4 	addi	r2,r2,-1
  801120:	1189d83a 	sra	r4,r2,r6
  801124:	30001516 	blt	r6,zero,80117c <roundf+0x84>
  801128:	00801034 	movhi	r2,64
  80112c:	1185d83a 	sra	r2,r2,r6
  801130:	0106303a 	nor	r3,zero,r4
  801134:	3908703a 	and	r4,r7,r4
  801138:	3885883a 	add	r2,r7,r2
  80113c:	10c6703a 	and	r3,r2,r3
  801140:	20000126 	beq	r4,zero,801148 <roundf+0x50>
  801144:	180f883a 	mov	r7,r3
  801148:	3805883a 	mov	r2,r7
  80114c:	dfc00017 	ldw	ra,0(sp)
  801150:	dec00104 	addi	sp,sp,4
  801154:	f800283a 	ret
  801158:	00802004 	movi	r2,128
  80115c:	200b883a 	mov	r5,r4
  801160:	30bff91e 	bne	r6,r2,801148 <roundf+0x50>
  801164:	08032c80 	call	8032c8 <__addsf3>
  801168:	100f883a 	mov	r7,r2
  80116c:	3805883a 	mov	r2,r7
  801170:	dfc00017 	ldw	ra,0(sp)
  801174:	dec00104 	addi	sp,sp,4
  801178:	f800283a 	ret
  80117c:	00bfffc4 	movi	r2,-1
  801180:	38e0002c 	andhi	r3,r7,32768
  801184:	30bfef1e 	bne	r6,r2,801144 <roundf+0x4c>
  801188:	18cfe034 	orhi	r3,r3,16256
  80118c:	180f883a 	mov	r7,r3
  801190:	003fed06 	br	801148 <roundf+0x50>

00801194 <pow>:
  801194:	deffee04 	addi	sp,sp,-72
  801198:	ddc01015 	stw	r23,64(sp)
  80119c:	05c02074 	movhi	r23,129
  8011a0:	bddbe604 	addi	r23,r23,28568
  8011a4:	dd800f15 	stw	r22,60(sp)
  8011a8:	dd400e15 	stw	r21,56(sp)
  8011ac:	dd000d15 	stw	r20,52(sp)
  8011b0:	dcc00c15 	stw	r19,48(sp)
  8011b4:	dc800b15 	stw	r18,44(sp)
  8011b8:	dc400a15 	stw	r17,40(sp)
  8011bc:	dc000915 	stw	r16,36(sp)
  8011c0:	2029883a 	mov	r20,r4
  8011c4:	dfc01115 	stw	ra,68(sp)
  8011c8:	3025883a 	mov	r18,r6
  8011cc:	282b883a 	mov	r21,r5
  8011d0:	3827883a 	mov	r19,r7
  8011d4:	080161c0 	call	80161c <__ieee754_pow>
  8011d8:	b9000017 	ldw	r4,0(r23)
  8011dc:	05bfffc4 	movi	r22,-1
  8011e0:	1021883a 	mov	r16,r2
  8011e4:	1823883a 	mov	r17,r3
  8011e8:	25800426 	beq	r4,r22,8011fc <pow+0x68>
  8011ec:	9009883a 	mov	r4,r18
  8011f0:	980b883a 	mov	r5,r19
  8011f4:	0802c180 	call	802c18 <__isnand>
  8011f8:	10000d26 	beq	r2,zero,801230 <pow+0x9c>
  8011fc:	8005883a 	mov	r2,r16
  801200:	8807883a 	mov	r3,r17
  801204:	dfc01117 	ldw	ra,68(sp)
  801208:	ddc01017 	ldw	r23,64(sp)
  80120c:	dd800f17 	ldw	r22,60(sp)
  801210:	dd400e17 	ldw	r21,56(sp)
  801214:	dd000d17 	ldw	r20,52(sp)
  801218:	dcc00c17 	ldw	r19,48(sp)
  80121c:	dc800b17 	ldw	r18,44(sp)
  801220:	dc400a17 	ldw	r17,40(sp)
  801224:	dc000917 	ldw	r16,36(sp)
  801228:	dec01204 	addi	sp,sp,72
  80122c:	f800283a 	ret
  801230:	a009883a 	mov	r4,r20
  801234:	a80b883a 	mov	r5,r21
  801238:	0802c180 	call	802c18 <__isnand>
  80123c:	1000151e 	bne	r2,zero,801294 <pow+0x100>
  801240:	000d883a 	mov	r6,zero
  801244:	000f883a 	mov	r7,zero
  801248:	a009883a 	mov	r4,r20
  80124c:	a80b883a 	mov	r5,r21
  801250:	08042340 	call	804234 <__eqdf2>
  801254:	1000541e 	bne	r2,zero,8013a8 <pow+0x214>
  801258:	000d883a 	mov	r6,zero
  80125c:	000f883a 	mov	r7,zero
  801260:	9009883a 	mov	r4,r18
  801264:	980b883a 	mov	r5,r19
  801268:	08042340 	call	804234 <__eqdf2>
  80126c:	10002c1e 	bne	r2,zero,801320 <pow+0x18c>
  801270:	b8800017 	ldw	r2,0(r23)
  801274:	d8000615 	stw	zero,24(sp)
  801278:	d8000715 	stw	zero,28(sp)
  80127c:	10001226 	beq	r2,zero,8012c8 <pow+0x134>
  801280:	008ffc34 	movhi	r2,16368
  801284:	d8800715 	stw	r2,28(sp)
  801288:	dc000617 	ldw	r16,24(sp)
  80128c:	dc400717 	ldw	r17,28(sp)
  801290:	003fda06 	br	8011fc <pow+0x68>
  801294:	000d883a 	mov	r6,zero
  801298:	000f883a 	mov	r7,zero
  80129c:	9009883a 	mov	r4,r18
  8012a0:	980b883a 	mov	r5,r19
  8012a4:	08042340 	call	804234 <__eqdf2>
  8012a8:	103fd41e 	bne	r2,zero,8011fc <pow+0x68>
  8012ac:	b8c00017 	ldw	r3,0(r23)
  8012b0:	010ffc34 	movhi	r4,16368
  8012b4:	d8000615 	stw	zero,24(sp)
  8012b8:	d9000715 	stw	r4,28(sp)
  8012bc:	1d801526 	beq	r3,r22,801314 <pow+0x180>
  8012c0:	00800084 	movi	r2,2
  8012c4:	18801326 	beq	r3,r2,801314 <pow+0x180>
  8012c8:	00802074 	movhi	r2,129
  8012cc:	10947704 	addi	r2,r2,20956
  8012d0:	00c00044 	movi	r3,1
  8012d4:	d809883a 	mov	r4,sp
  8012d8:	dcc00515 	stw	r19,20(sp)
  8012dc:	dd400315 	stw	r21,12(sp)
  8012e0:	d8800115 	stw	r2,4(sp)
  8012e4:	d8c00015 	stw	r3,0(sp)
  8012e8:	dc800415 	stw	r18,16(sp)
  8012ec:	dd000215 	stw	r20,8(sp)
  8012f0:	d8000815 	stw	zero,32(sp)
  8012f4:	0802c480 	call	802c48 <matherr>
  8012f8:	10002726 	beq	r2,zero,801398 <pow+0x204>
  8012fc:	d8800817 	ldw	r2,32(sp)
  801300:	103fe126 	beq	r2,zero,801288 <pow+0xf4>
  801304:	0804ec80 	call	804ec8 <__errno>
  801308:	d8c00817 	ldw	r3,32(sp)
  80130c:	10c00015 	stw	r3,0(r2)
  801310:	003fdd06 	br	801288 <pow+0xf4>
  801314:	d9000715 	stw	r4,28(sp)
  801318:	d8000615 	stw	zero,24(sp)
  80131c:	003fda06 	br	801288 <pow+0xf4>
  801320:	9009883a 	mov	r4,r18
  801324:	980b883a 	mov	r5,r19
  801328:	0802bfc0 	call	802bfc <finite>
  80132c:	103fb326 	beq	r2,zero,8011fc <pow+0x68>
  801330:	000d883a 	mov	r6,zero
  801334:	000f883a 	mov	r7,zero
  801338:	9009883a 	mov	r4,r18
  80133c:	980b883a 	mov	r5,r19
  801340:	08043cc0 	call	8043cc <__ltdf2>
  801344:	103fad0e 	bge	r2,zero,8011fc <pow+0x68>
  801348:	b9000017 	ldw	r4,0(r23)
  80134c:	00800044 	movi	r2,1
  801350:	00c02074 	movhi	r3,129
  801354:	18d47704 	addi	r3,r3,20956
  801358:	d8800015 	stw	r2,0(sp)
  80135c:	d8c00115 	stw	r3,4(sp)
  801360:	dd400315 	stw	r21,12(sp)
  801364:	dcc00515 	stw	r19,20(sp)
  801368:	d8000815 	stw	zero,32(sp)
  80136c:	dd000215 	stw	r20,8(sp)
  801370:	dc800415 	stw	r18,16(sp)
  801374:	20005626 	beq	r4,zero,8014d0 <pow+0x33c>
  801378:	00bffc34 	movhi	r2,65520
  80137c:	d8800715 	stw	r2,28(sp)
  801380:	00800084 	movi	r2,2
  801384:	d8000615 	stw	zero,24(sp)
  801388:	20800326 	beq	r4,r2,801398 <pow+0x204>
  80138c:	d809883a 	mov	r4,sp
  801390:	0802c480 	call	802c48 <matherr>
  801394:	103fd91e 	bne	r2,zero,8012fc <pow+0x168>
  801398:	0804ec80 	call	804ec8 <__errno>
  80139c:	00c00844 	movi	r3,33
  8013a0:	10c00015 	stw	r3,0(r2)
  8013a4:	003fd506 	br	8012fc <pow+0x168>
  8013a8:	8009883a 	mov	r4,r16
  8013ac:	880b883a 	mov	r5,r17
  8013b0:	0802bfc0 	call	802bfc <finite>
  8013b4:	10002426 	beq	r2,zero,801448 <pow+0x2b4>
  8013b8:	000d883a 	mov	r6,zero
  8013bc:	000f883a 	mov	r7,zero
  8013c0:	8009883a 	mov	r4,r16
  8013c4:	880b883a 	mov	r5,r17
  8013c8:	08042340 	call	804234 <__eqdf2>
  8013cc:	103f8b1e 	bne	r2,zero,8011fc <pow+0x68>
  8013d0:	a009883a 	mov	r4,r20
  8013d4:	a80b883a 	mov	r5,r21
  8013d8:	0802bfc0 	call	802bfc <finite>
  8013dc:	103f8726 	beq	r2,zero,8011fc <pow+0x68>
  8013e0:	9009883a 	mov	r4,r18
  8013e4:	980b883a 	mov	r5,r19
  8013e8:	0802bfc0 	call	802bfc <finite>
  8013ec:	103f8326 	beq	r2,zero,8011fc <pow+0x68>
  8013f0:	b9000017 	ldw	r4,0(r23)
  8013f4:	00800104 	movi	r2,4
  8013f8:	d8800015 	stw	r2,0(sp)
  8013fc:	00c02074 	movhi	r3,129
  801400:	18d47704 	addi	r3,r3,20956
  801404:	00800084 	movi	r2,2
  801408:	d8c00115 	stw	r3,4(sp)
  80140c:	dd400315 	stw	r21,12(sp)
  801410:	dcc00515 	stw	r19,20(sp)
  801414:	d8000815 	stw	zero,32(sp)
  801418:	dd000215 	stw	r20,8(sp)
  80141c:	dc800415 	stw	r18,16(sp)
  801420:	d8000615 	stw	zero,24(sp)
  801424:	d8000715 	stw	zero,28(sp)
  801428:	20800326 	beq	r4,r2,801438 <pow+0x2a4>
  80142c:	d809883a 	mov	r4,sp
  801430:	0802c480 	call	802c48 <matherr>
  801434:	103fb11e 	bne	r2,zero,8012fc <pow+0x168>
  801438:	0804ec80 	call	804ec8 <__errno>
  80143c:	00c00884 	movi	r3,34
  801440:	10c00015 	stw	r3,0(r2)
  801444:	003fad06 	br	8012fc <pow+0x168>
  801448:	a009883a 	mov	r4,r20
  80144c:	a80b883a 	mov	r5,r21
  801450:	0802bfc0 	call	802bfc <finite>
  801454:	103fd826 	beq	r2,zero,8013b8 <pow+0x224>
  801458:	9009883a 	mov	r4,r18
  80145c:	980b883a 	mov	r5,r19
  801460:	0802bfc0 	call	802bfc <finite>
  801464:	103fd426 	beq	r2,zero,8013b8 <pow+0x224>
  801468:	880b883a 	mov	r5,r17
  80146c:	8009883a 	mov	r4,r16
  801470:	0802c180 	call	802c18 <__isnand>
  801474:	10001926 	beq	r2,zero,8014dc <pow+0x348>
  801478:	bc000017 	ldw	r16,0(r23)
  80147c:	00800044 	movi	r2,1
  801480:	00c02074 	movhi	r3,129
  801484:	18d47704 	addi	r3,r3,20956
  801488:	d8800015 	stw	r2,0(sp)
  80148c:	d8c00115 	stw	r3,4(sp)
  801490:	dd400315 	stw	r21,12(sp)
  801494:	dcc00515 	stw	r19,20(sp)
  801498:	d8000815 	stw	zero,32(sp)
  80149c:	dd000215 	stw	r20,8(sp)
  8014a0:	dc800415 	stw	r18,16(sp)
  8014a4:	80000a26 	beq	r16,zero,8014d0 <pow+0x33c>
  8014a8:	0009883a 	mov	r4,zero
  8014ac:	000d883a 	mov	r6,zero
  8014b0:	000b883a 	mov	r5,zero
  8014b4:	000f883a 	mov	r7,zero
  8014b8:	0803fdc0 	call	803fdc <__divdf3>
  8014bc:	d8800615 	stw	r2,24(sp)
  8014c0:	00800084 	movi	r2,2
  8014c4:	d8c00715 	stw	r3,28(sp)
  8014c8:	80bfb01e 	bne	r16,r2,80138c <pow+0x1f8>
  8014cc:	003fb206 	br	801398 <pow+0x204>
  8014d0:	d8000615 	stw	zero,24(sp)
  8014d4:	d8000715 	stw	zero,28(sp)
  8014d8:	003fac06 	br	80138c <pow+0x1f8>
  8014dc:	b8800017 	ldw	r2,0(r23)
  8014e0:	00c000c4 	movi	r3,3
  8014e4:	01002074 	movhi	r4,129
  8014e8:	21147704 	addi	r4,r4,20956
  8014ec:	d8c00015 	stw	r3,0(sp)
  8014f0:	d9000115 	stw	r4,4(sp)
  8014f4:	d8000815 	stw	zero,32(sp)
  8014f8:	dd000215 	stw	r20,8(sp)
  8014fc:	dd400315 	stw	r21,12(sp)
  801500:	dc800415 	stw	r18,16(sp)
  801504:	dcc00515 	stw	r19,20(sp)
  801508:	1000251e 	bne	r2,zero,8015a0 <pow+0x40c>
  80150c:	05b80034 	movhi	r22,57344
  801510:	0091fc34 	movhi	r2,18416
  801514:	10bfffc4 	addi	r2,r2,-1
  801518:	000d883a 	mov	r6,zero
  80151c:	000f883a 	mov	r7,zero
  801520:	a80b883a 	mov	r5,r21
  801524:	a009883a 	mov	r4,r20
  801528:	d8800715 	stw	r2,28(sp)
  80152c:	dd800615 	stw	r22,24(sp)
  801530:	08043cc0 	call	8043cc <__ltdf2>
  801534:	103fbd0e 	bge	r2,zero,80142c <pow+0x298>
  801538:	0005883a 	mov	r2,zero
  80153c:	00cff834 	movhi	r3,16352
  801540:	180f883a 	mov	r7,r3
  801544:	100d883a 	mov	r6,r2
  801548:	980b883a 	mov	r5,r19
  80154c:	9009883a 	mov	r4,r18
  801550:	0803c180 	call	803c18 <__muldf3>
  801554:	1009883a 	mov	r4,r2
  801558:	180b883a 	mov	r5,r3
  80155c:	1021883a 	mov	r16,r2
  801560:	1823883a 	mov	r17,r3
  801564:	0802c600 	call	802c60 <rint>
  801568:	180f883a 	mov	r7,r3
  80156c:	8009883a 	mov	r4,r16
  801570:	880b883a 	mov	r5,r17
  801574:	100d883a 	mov	r6,r2
  801578:	08042bc0 	call	8042bc <__nedf2>
  80157c:	10000426 	beq	r2,zero,801590 <pow+0x3fc>
  801580:	00b1fc34 	movhi	r2,51184
  801584:	10bfffc4 	addi	r2,r2,-1
  801588:	dd800615 	stw	r22,24(sp)
  80158c:	d8800715 	stw	r2,28(sp)
  801590:	b8c00017 	ldw	r3,0(r23)
  801594:	00800084 	movi	r2,2
  801598:	18bfa41e 	bne	r3,r2,80142c <pow+0x298>
  80159c:	003fa606 	br	801438 <pow+0x2a4>
  8015a0:	009ffc34 	movhi	r2,32752
  8015a4:	000d883a 	mov	r6,zero
  8015a8:	000f883a 	mov	r7,zero
  8015ac:	a80b883a 	mov	r5,r21
  8015b0:	a009883a 	mov	r4,r20
  8015b4:	d8800715 	stw	r2,28(sp)
  8015b8:	d8000615 	stw	zero,24(sp)
  8015bc:	08043cc0 	call	8043cc <__ltdf2>
  8015c0:	103ff30e 	bge	r2,zero,801590 <pow+0x3fc>
  8015c4:	0005883a 	mov	r2,zero
  8015c8:	00cff834 	movhi	r3,16352
  8015cc:	180f883a 	mov	r7,r3
  8015d0:	100d883a 	mov	r6,r2
  8015d4:	980b883a 	mov	r5,r19
  8015d8:	9009883a 	mov	r4,r18
  8015dc:	0803c180 	call	803c18 <__muldf3>
  8015e0:	1009883a 	mov	r4,r2
  8015e4:	180b883a 	mov	r5,r3
  8015e8:	1021883a 	mov	r16,r2
  8015ec:	1823883a 	mov	r17,r3
  8015f0:	0802c600 	call	802c60 <rint>
  8015f4:	180f883a 	mov	r7,r3
  8015f8:	8009883a 	mov	r4,r16
  8015fc:	880b883a 	mov	r5,r17
  801600:	100d883a 	mov	r6,r2
  801604:	08042bc0 	call	8042bc <__nedf2>
  801608:	103fe126 	beq	r2,zero,801590 <pow+0x3fc>
  80160c:	00bffc34 	movhi	r2,65520
  801610:	d8800715 	stw	r2,28(sp)
  801614:	d8000615 	stw	zero,24(sp)
  801618:	003fdd06 	br	801590 <pow+0x3fc>

0080161c <__ieee754_pow>:
  80161c:	deffbb04 	addi	sp,sp,-276
  801620:	3005883a 	mov	r2,r6
  801624:	dd404015 	stw	r21,256(sp)
  801628:	dd003f15 	stw	r20,252(sp)
  80162c:	d9802815 	stw	r6,160(sp)
  801630:	2029883a 	mov	r20,r4
  801634:	282b883a 	mov	r21,r5
  801638:	3009883a 	mov	r4,r6
  80163c:	380b883a 	mov	r5,r7
  801640:	01a00034 	movhi	r6,32768
  801644:	31bfffc4 	addi	r6,r6,-1
  801648:	dc003b15 	stw	r16,236(sp)
  80164c:	29a0703a 	and	r16,r5,r6
  801650:	1404b03a 	or	r2,r2,r16
  801654:	dd804115 	stw	r22,260(sp)
  801658:	dc403c15 	stw	r17,240(sp)
  80165c:	d9c02915 	stw	r7,164(sp)
  801660:	382d883a 	mov	r22,r7
  801664:	dfc04415 	stw	ra,272(sp)
  801668:	200f883a 	mov	r7,r4
  80166c:	df004315 	stw	fp,268(sp)
  801670:	ddc04215 	stw	r23,264(sp)
  801674:	dcc03e15 	stw	r19,248(sp)
  801678:	dc803d15 	stw	r18,244(sp)
  80167c:	a023883a 	mov	r17,r20
  801680:	2809883a 	mov	r4,r5
  801684:	10000826 	beq	r2,zero,8016a8 <__ieee754_pow+0x8c>
  801688:	a9a4703a 	and	r18,r21,r6
  80168c:	009ffc34 	movhi	r2,32752
  801690:	a827883a 	mov	r19,r21
  801694:	1480180e 	bge	r2,r18,8016f8 <__ieee754_pow+0xdc>
  801698:	00b00434 	movhi	r2,49168
  80169c:	9085883a 	add	r2,r18,r2
  8016a0:	8884b03a 	or	r2,r17,r2
  8016a4:	1000321e 	bne	r2,zero,801770 <__ieee754_pow+0x154>
  8016a8:	0009883a 	mov	r4,zero
  8016ac:	014ffc34 	movhi	r5,16368
  8016b0:	d9002815 	stw	r4,160(sp)
  8016b4:	d9402915 	stw	r5,164(sp)
  8016b8:	d9002817 	ldw	r4,160(sp)
  8016bc:	d9402917 	ldw	r5,164(sp)
  8016c0:	2005883a 	mov	r2,r4
  8016c4:	2807883a 	mov	r3,r5
  8016c8:	dfc04417 	ldw	ra,272(sp)
  8016cc:	df004317 	ldw	fp,268(sp)
  8016d0:	ddc04217 	ldw	r23,264(sp)
  8016d4:	dd804117 	ldw	r22,260(sp)
  8016d8:	dd404017 	ldw	r21,256(sp)
  8016dc:	dd003f17 	ldw	r20,252(sp)
  8016e0:	dcc03e17 	ldw	r19,248(sp)
  8016e4:	dc803d17 	ldw	r18,244(sp)
  8016e8:	dc403c17 	ldw	r17,240(sp)
  8016ec:	dc003b17 	ldw	r16,236(sp)
  8016f0:	dec04504 	addi	sp,sp,276
  8016f4:	f800283a 	ret
  8016f8:	90802b26 	beq	r18,r2,8017a8 <__ieee754_pow+0x18c>
  8016fc:	143fe616 	blt	r2,r16,801698 <__ieee754_pow+0x7c>
  801700:	80806126 	beq	r16,r2,801888 <__ieee754_pow+0x26c>
  801704:	982e403a 	cmpge	r23,r19,zero
  801708:	b8004e26 	beq	r23,zero,801844 <__ieee754_pow+0x228>
  80170c:	0039883a 	mov	fp,zero
  801710:	3800281e 	bne	r7,zero,8017b4 <__ieee754_pow+0x198>
  801714:	009ffc34 	movhi	r2,32752
  801718:	80804f26 	beq	r16,r2,801858 <__ieee754_pow+0x23c>
  80171c:	008ffc34 	movhi	r2,16368
  801720:	80808226 	beq	r16,r2,80192c <__ieee754_pow+0x310>
  801724:	00900034 	movhi	r2,16384
  801728:	20828426 	beq	r4,r2,80213c <__ieee754_pow+0xb20>
  80172c:	008ff834 	movhi	r2,16352
  801730:	2080201e 	bne	r4,r2,8017b4 <__ieee754_pow+0x198>
  801734:	98001f16 	blt	r19,zero,8017b4 <__ieee754_pow+0x198>
  801738:	a80b883a 	mov	r5,r21
  80173c:	a009883a 	mov	r4,r20
  801740:	dfc04417 	ldw	ra,272(sp)
  801744:	df004317 	ldw	fp,268(sp)
  801748:	ddc04217 	ldw	r23,264(sp)
  80174c:	dd804117 	ldw	r22,260(sp)
  801750:	dd404017 	ldw	r21,256(sp)
  801754:	dd003f17 	ldw	r20,252(sp)
  801758:	dcc03e17 	ldw	r19,248(sp)
  80175c:	dc803d17 	ldw	r18,244(sp)
  801760:	dc403c17 	ldw	r17,240(sp)
  801764:	dc003b17 	ldw	r16,236(sp)
  801768:	dec04504 	addi	sp,sp,276
  80176c:	080291c1 	jmpi	80291c <__ieee754_sqrt>
  801770:	01002074 	movhi	r4,129
  801774:	21147804 	addi	r4,r4,20960
  801778:	dfc04417 	ldw	ra,272(sp)
  80177c:	df004317 	ldw	fp,268(sp)
  801780:	ddc04217 	ldw	r23,264(sp)
  801784:	dd804117 	ldw	r22,260(sp)
  801788:	dd404017 	ldw	r21,256(sp)
  80178c:	dd003f17 	ldw	r20,252(sp)
  801790:	dcc03e17 	ldw	r19,248(sp)
  801794:	dc803d17 	ldw	r18,244(sp)
  801798:	dc403c17 	ldw	r17,240(sp)
  80179c:	dc003b17 	ldw	r16,236(sp)
  8017a0:	dec04504 	addi	sp,sp,276
  8017a4:	0802c501 	jmpi	802c50 <nan>
  8017a8:	a03fbb1e 	bne	r20,zero,801698 <__ieee754_pow+0x7c>
  8017ac:	003fd306 	br	8016fc <__ieee754_pow+0xe0>
  8017b0:	0039883a 	mov	fp,zero
  8017b4:	a009883a 	mov	r4,r20
  8017b8:	a80b883a 	mov	r5,r21
  8017bc:	0802be40 	call	802be4 <fabs>
  8017c0:	1015883a 	mov	r10,r2
  8017c4:	1817883a 	mov	r11,r3
  8017c8:	88001226 	beq	r17,zero,801814 <__ieee754_pow+0x1f8>
  8017cc:	9804d7fa 	srli	r2,r19,31
  8017d0:	10bfffc4 	addi	r2,r2,-1
  8017d4:	1706b03a 	or	r3,r2,fp
  8017d8:	d8802515 	stw	r2,148(sp)
  8017dc:	18002c1e 	bne	r3,zero,801890 <__ieee754_pow+0x274>
  8017e0:	a80f883a 	mov	r7,r21
  8017e4:	a009883a 	mov	r4,r20
  8017e8:	a80b883a 	mov	r5,r21
  8017ec:	a00d883a 	mov	r6,r20
  8017f0:	0803b240 	call	803b24 <__subdf3>
  8017f4:	1009883a 	mov	r4,r2
  8017f8:	180b883a 	mov	r5,r3
  8017fc:	100d883a 	mov	r6,r2
  801800:	180f883a 	mov	r7,r3
  801804:	0803fdc0 	call	803fdc <__divdf3>
  801808:	d8802815 	stw	r2,160(sp)
  80180c:	d8c02915 	stw	r3,164(sp)
  801810:	003fa906 	br	8016b8 <__ieee754_pow+0x9c>
  801814:	009ffc34 	movhi	r2,32752
  801818:	90800326 	beq	r18,r2,801828 <__ieee754_pow+0x20c>
  80181c:	90000226 	beq	r18,zero,801828 <__ieee754_pow+0x20c>
  801820:	008ffc34 	movhi	r2,16368
  801824:	90bfe91e 	bne	r18,r2,8017cc <__ieee754_pow+0x1b0>
  801828:	b0026316 	blt	r22,zero,8021b8 <__ieee754_pow+0xb9c>
  80182c:	5011883a 	mov	r8,r10
  801830:	5813883a 	mov	r9,r11
  801834:	b8023126 	beq	r23,zero,8020fc <__ieee754_pow+0xae0>
  801838:	da002815 	stw	r8,160(sp)
  80183c:	da402915 	stw	r9,164(sp)
  801840:	003f9d06 	br	8016b8 <__ieee754_pow+0x9c>
  801844:	0090d034 	movhi	r2,17216
  801848:	10bfffc4 	addi	r2,r2,-1
  80184c:	1400270e 	bge	r2,r16,8018ec <__ieee754_pow+0x2d0>
  801850:	07000084 	movi	fp,2
  801854:	003fae06 	br	801710 <__ieee754_pow+0xf4>
  801858:	00b00434 	movhi	r2,49168
  80185c:	9085883a 	add	r2,r18,r2
  801860:	8884b03a 	or	r2,r17,r2
  801864:	103f9026 	beq	r2,zero,8016a8 <__ieee754_pow+0x8c>
  801868:	008ffc34 	movhi	r2,16368
  80186c:	10bfffc4 	addi	r2,r2,-1
  801870:	1482d00e 	bge	r2,r18,8023b4 <__ieee754_pow+0xd98>
  801874:	b03f900e 	bge	r22,zero,8016b8 <__ieee754_pow+0x9c>
  801878:	0005883a 	mov	r2,zero
  80187c:	d8802815 	stw	r2,160(sp)
  801880:	d8802915 	stw	r2,164(sp)
  801884:	003f8c06 	br	8016b8 <__ieee754_pow+0x9c>
  801888:	383f9e26 	beq	r7,zero,801704 <__ieee754_pow+0xe8>
  80188c:	003f8206 	br	801698 <__ieee754_pow+0x7c>
  801890:	00907834 	movhi	r2,16864
  801894:	1400290e 	bge	r2,r16,80193c <__ieee754_pow+0x320>
  801898:	0090fc34 	movhi	r2,17392
  80189c:	1402500e 	bge	r2,r16,8021e0 <__ieee754_pow+0xbc4>
  8018a0:	008ffc34 	movhi	r2,16368
  8018a4:	10bfffc4 	addi	r2,r2,-1
  8018a8:	14800b0e 	bge	r2,r18,8018d8 <__ieee754_pow+0x2bc>
  8018ac:	05800b0e 	bge	zero,r22,8018dc <__ieee754_pow+0x2c0>
  8018b0:	00a20034 	movhi	r2,34816
  8018b4:	109d6704 	addi	r2,r2,30108
  8018b8:	00df8e34 	movhi	r3,32312
  8018bc:	18f90f04 	addi	r3,r3,-7108
  8018c0:	100d883a 	mov	r6,r2
  8018c4:	180f883a 	mov	r7,r3
  8018c8:	1009883a 	mov	r4,r2
  8018cc:	180b883a 	mov	r5,r3
  8018d0:	0803c180 	call	803c18 <__muldf3>
  8018d4:	003fcc06 	br	801808 <__ieee754_pow+0x1ec>
  8018d8:	b03ff516 	blt	r22,zero,8018b0 <__ieee754_pow+0x294>
  8018dc:	0007883a 	mov	r3,zero
  8018e0:	d8c02815 	stw	r3,160(sp)
  8018e4:	d8c02915 	stw	r3,164(sp)
  8018e8:	003f7306 	br	8016b8 <__ieee754_pow+0x9c>
  8018ec:	008ffc34 	movhi	r2,16368
  8018f0:	10bfffc4 	addi	r2,r2,-1
  8018f4:	143f850e 	bge	r2,r16,80170c <__ieee754_pow+0xf0>
  8018f8:	8005d53a 	srai	r2,r16,20
  8018fc:	01400504 	movi	r5,20
  801900:	10ff0044 	addi	r3,r2,-1023
  801904:	28c3e10e 	bge	r5,r3,80288c <__ieee754_pow+0x1270>
  801908:	00800d04 	movi	r2,52
  80190c:	10c5c83a 	sub	r2,r2,r3
  801910:	3886d83a 	srl	r3,r7,r2
  801914:	1884983a 	sll	r2,r3,r2
  801918:	38bf7c1e 	bne	r7,r2,80170c <__ieee754_pow+0xf0>
  80191c:	18c0004c 	andi	r3,r3,1
  801920:	00800084 	movi	r2,2
  801924:	10f9c83a 	sub	fp,r2,r3
  801928:	003f7906 	br	801710 <__ieee754_pow+0xf4>
  80192c:	b0038516 	blt	r22,zero,802744 <__ieee754_pow+0x1128>
  801930:	dd002815 	stw	r20,160(sp)
  801934:	dd402915 	stw	r21,164(sp)
  801938:	003f5f06 	br	8016b8 <__ieee754_pow+0x9c>
  80193c:	00800434 	movhi	r2,16
  801940:	10bfffc4 	addi	r2,r2,-1
  801944:	1482900e 	bge	r2,r18,802388 <__ieee754_pow+0xd6c>
  801948:	000b883a 	mov	r5,zero
  80194c:	9005d53a 	srai	r2,r18,20
  801950:	00c00434 	movhi	r3,16
  801954:	18ffffc4 	addi	r3,r3,-1
  801958:	90c8703a 	and	r4,r18,r3
  80195c:	2887883a 	add	r3,r5,r2
  801960:	18bf0044 	addi	r2,r3,-1023
  801964:	d8800015 	stw	r2,0(sp)
  801968:	00800134 	movhi	r2,4
  80196c:	10a62384 	addi	r2,r2,-26482
  801970:	250ffc34 	orhi	r20,r4,16368
  801974:	1101ee0e 	bge	r2,r4,802130 <__ieee754_pow+0xb14>
  801978:	00800334 	movhi	r2,12
  80197c:	10ad9e44 	addi	r2,r2,-18823
  801980:	1101e716 	blt	r2,r4,802120 <__ieee754_pow+0xb04>
  801984:	01000044 	movi	r4,1
  801988:	04000334 	movhi	r16,12
  80198c:	200890fa 	slli	r4,r4,3
  801990:	da800115 	stw	r10,4(sp)
  801994:	dd000215 	stw	r20,8(sp)
  801998:	d9002c15 	stw	r4,176(sp)
  80199c:	d9402c17 	ldw	r5,176(sp)
  8019a0:	01002074 	movhi	r4,129
  8019a4:	21147904 	addi	r4,r4,20964
  8019a8:	a02bd07a 	srai	r21,r20,1
  8019ac:	2909883a 	add	r4,r5,r4
  8019b0:	25800017 	ldw	r22,0(r4)
  8019b4:	25c00117 	ldw	r23,4(r4)
  8019b8:	a00b883a 	mov	r5,r20
  8019bc:	5009883a 	mov	r4,r10
  8019c0:	b00d883a 	mov	r6,r22
  8019c4:	b80f883a 	mov	r7,r23
  8019c8:	0803b240 	call	803b24 <__subdf3>
  8019cc:	d9000117 	ldw	r4,4(sp)
  8019d0:	a00b883a 	mov	r5,r20
  8019d4:	b00d883a 	mov	r6,r22
  8019d8:	b80f883a 	mov	r7,r23
  8019dc:	1025883a 	mov	r18,r2
  8019e0:	1827883a 	mov	r19,r3
  8019e4:	0803ba40 	call	803ba4 <__adddf3>
  8019e8:	0011883a 	mov	r8,zero
  8019ec:	024ffc34 	movhi	r9,16368
  8019f0:	480b883a 	mov	r5,r9
  8019f4:	4009883a 	mov	r4,r8
  8019f8:	180f883a 	mov	r7,r3
  8019fc:	100d883a 	mov	r6,r2
  801a00:	0803fdc0 	call	803fdc <__divdf3>
  801a04:	d8c02e15 	stw	r3,184(sp)
  801a08:	d8800f15 	stw	r2,60(sp)
  801a0c:	d8802d15 	stw	r2,180(sp)
  801a10:	d8802e17 	ldw	r2,184(sp)
  801a14:	d9800f17 	ldw	r6,60(sp)
  801a18:	9009883a 	mov	r4,r18
  801a1c:	980b883a 	mov	r5,r19
  801a20:	100f883a 	mov	r7,r2
  801a24:	dc800b15 	stw	r18,44(sp)
  801a28:	dcc00c15 	stw	r19,48(sp)
  801a2c:	d8801015 	stw	r2,64(sp)
  801a30:	0803c180 	call	803c18 <__muldf3>
  801a34:	d8c03015 	stw	r3,192(sp)
  801a38:	d9003017 	ldw	r4,192(sp)
  801a3c:	d8802f15 	stw	r2,188(sp)
  801a40:	d8800315 	stw	r2,12(sp)
  801a44:	ad480034 	orhi	r21,r21,8192
  801a48:	0005883a 	mov	r2,zero
  801a4c:	ac2b883a 	add	r21,r21,r16
  801a50:	000b883a 	mov	r5,zero
  801a54:	1021883a 	mov	r16,r2
  801a58:	2005883a 	mov	r2,r4
  801a5c:	800d883a 	mov	r6,r16
  801a60:	a80f883a 	mov	r7,r21
  801a64:	d9000415 	stw	r4,16(sp)
  801a68:	d9002715 	stw	r4,156(sp)
  801a6c:	d9402615 	stw	r5,152(sp)
  801a70:	d9401615 	stw	r5,88(sp)
  801a74:	d9001715 	stw	r4,92(sp)
  801a78:	100b883a 	mov	r5,r2
  801a7c:	0009883a 	mov	r4,zero
  801a80:	0803c180 	call	803c18 <__muldf3>
  801a84:	d9000b17 	ldw	r4,44(sp)
  801a88:	980b883a 	mov	r5,r19
  801a8c:	180f883a 	mov	r7,r3
  801a90:	100d883a 	mov	r6,r2
  801a94:	0803b240 	call	803b24 <__subdf3>
  801a98:	8009883a 	mov	r4,r16
  801a9c:	a80b883a 	mov	r5,r21
  801aa0:	b80f883a 	mov	r7,r23
  801aa4:	b00d883a 	mov	r6,r22
  801aa8:	1021883a 	mov	r16,r2
  801aac:	1823883a 	mov	r17,r3
  801ab0:	0803b240 	call	803b24 <__subdf3>
  801ab4:	d9000117 	ldw	r4,4(sp)
  801ab8:	a00b883a 	mov	r5,r20
  801abc:	180f883a 	mov	r7,r3
  801ac0:	100d883a 	mov	r6,r2
  801ac4:	0803b240 	call	803b24 <__subdf3>
  801ac8:	d9001617 	ldw	r4,88(sp)
  801acc:	d9402717 	ldw	r5,156(sp)
  801ad0:	180f883a 	mov	r7,r3
  801ad4:	100d883a 	mov	r6,r2
  801ad8:	0803c180 	call	803c18 <__muldf3>
  801adc:	180f883a 	mov	r7,r3
  801ae0:	880b883a 	mov	r5,r17
  801ae4:	8009883a 	mov	r4,r16
  801ae8:	100d883a 	mov	r6,r2
  801aec:	0803b240 	call	803b24 <__subdf3>
  801af0:	d9000f17 	ldw	r4,60(sp)
  801af4:	d9402e17 	ldw	r5,184(sp)
  801af8:	180f883a 	mov	r7,r3
  801afc:	100d883a 	mov	r6,r2
  801b00:	0803c180 	call	803c18 <__muldf3>
  801b04:	d9000317 	ldw	r4,12(sp)
  801b08:	d9403017 	ldw	r5,192(sp)
  801b0c:	d8803115 	stw	r2,196(sp)
  801b10:	200d883a 	mov	r6,r4
  801b14:	280f883a 	mov	r7,r5
  801b18:	d8c03215 	stw	r3,200(sp)
  801b1c:	0803c180 	call	803c18 <__muldf3>
  801b20:	1009883a 	mov	r4,r2
  801b24:	180b883a 	mov	r5,r3
  801b28:	100d883a 	mov	r6,r2
  801b2c:	180f883a 	mov	r7,r3
  801b30:	1021883a 	mov	r16,r2
  801b34:	1823883a 	mov	r17,r3
  801b38:	0803c180 	call	803c18 <__muldf3>
  801b3c:	02129174 	movhi	r8,19013
  801b40:	4213bbc4 	addi	r8,r8,20207
  801b44:	024ff2b4 	movhi	r9,16330
  801b48:	4a5f8a04 	addi	r9,r9,32296
  801b4c:	480f883a 	mov	r7,r9
  801b50:	8009883a 	mov	r4,r16
  801b54:	880b883a 	mov	r5,r17
  801b58:	400d883a 	mov	r6,r8
  801b5c:	1029883a 	mov	r20,r2
  801b60:	182b883a 	mov	r21,r3
  801b64:	0803c180 	call	803c18 <__muldf3>
  801b68:	0224f2b4 	movhi	r8,37834
  801b6c:	4236d944 	addi	r8,r8,-9371
  801b70:	024ff3b4 	movhi	r9,16334
  801b74:	4a619284 	addi	r9,r9,-31158
  801b78:	480f883a 	mov	r7,r9
  801b7c:	400d883a 	mov	r6,r8
  801b80:	180b883a 	mov	r5,r3
  801b84:	1009883a 	mov	r4,r2
  801b88:	0803ba40 	call	803ba4 <__adddf3>
  801b8c:	180f883a 	mov	r7,r3
  801b90:	8009883a 	mov	r4,r16
  801b94:	880b883a 	mov	r5,r17
  801b98:	100d883a 	mov	r6,r2
  801b9c:	0803c180 	call	803c18 <__muldf3>
  801ba0:	022a4774 	movhi	r8,43293
  801ba4:	42104044 	addi	r8,r8,16641
  801ba8:	024ff474 	movhi	r9,16337
  801bac:	4a5d1804 	addi	r9,r9,29792
  801bb0:	480f883a 	mov	r7,r9
  801bb4:	400d883a 	mov	r6,r8
  801bb8:	180b883a 	mov	r5,r3
  801bbc:	1009883a 	mov	r4,r2
  801bc0:	0803ba40 	call	803ba4 <__adddf3>
  801bc4:	180f883a 	mov	r7,r3
  801bc8:	8009883a 	mov	r4,r16
  801bcc:	880b883a 	mov	r5,r17
  801bd0:	100d883a 	mov	r6,r2
  801bd4:	0803c180 	call	803c18 <__muldf3>
  801bd8:	021463f4 	movhi	r8,20879
  801bdc:	42099344 	addi	r8,r8,9805
  801be0:	024ff574 	movhi	r9,16341
  801be4:	4a555544 	addi	r9,r9,21845
  801be8:	480f883a 	mov	r7,r9
  801bec:	400d883a 	mov	r6,r8
  801bf0:	180b883a 	mov	r5,r3
  801bf4:	1009883a 	mov	r4,r2
  801bf8:	0803ba40 	call	803ba4 <__adddf3>
  801bfc:	180f883a 	mov	r7,r3
  801c00:	8009883a 	mov	r4,r16
  801c04:	880b883a 	mov	r5,r17
  801c08:	100d883a 	mov	r6,r2
  801c0c:	0803c180 	call	803c18 <__muldf3>
  801c10:	0236dc34 	movhi	r8,56176
  801c14:	422affc4 	addi	r8,r8,-21505
  801c18:	024ff6f4 	movhi	r9,16347
  801c1c:	4a5b6d84 	addi	r9,r9,28086
  801c20:	480f883a 	mov	r7,r9
  801c24:	400d883a 	mov	r6,r8
  801c28:	180b883a 	mov	r5,r3
  801c2c:	1009883a 	mov	r4,r2
  801c30:	0803ba40 	call	803ba4 <__adddf3>
  801c34:	180f883a 	mov	r7,r3
  801c38:	8009883a 	mov	r4,r16
  801c3c:	880b883a 	mov	r5,r17
  801c40:	100d883a 	mov	r6,r2
  801c44:	0803c180 	call	803c18 <__muldf3>
  801c48:	020cccf4 	movhi	r8,13107
  801c4c:	420cc0c4 	addi	r8,r8,13059
  801c50:	024ff8f4 	movhi	r9,16355
  801c54:	4a4cccc4 	addi	r9,r9,13107
  801c58:	480f883a 	mov	r7,r9
  801c5c:	400d883a 	mov	r6,r8
  801c60:	180b883a 	mov	r5,r3
  801c64:	1009883a 	mov	r4,r2
  801c68:	0803ba40 	call	803ba4 <__adddf3>
  801c6c:	180f883a 	mov	r7,r3
  801c70:	a80b883a 	mov	r5,r21
  801c74:	a009883a 	mov	r4,r20
  801c78:	100d883a 	mov	r6,r2
  801c7c:	0803c180 	call	803c18 <__muldf3>
  801c80:	d9000317 	ldw	r4,12(sp)
  801c84:	d9403017 	ldw	r5,192(sp)
  801c88:	d9801617 	ldw	r6,88(sp)
  801c8c:	d9c02717 	ldw	r7,156(sp)
  801c90:	1021883a 	mov	r16,r2
  801c94:	1823883a 	mov	r17,r3
  801c98:	0803ba40 	call	803ba4 <__adddf3>
  801c9c:	d9003117 	ldw	r4,196(sp)
  801ca0:	d9403217 	ldw	r5,200(sp)
  801ca4:	180f883a 	mov	r7,r3
  801ca8:	100d883a 	mov	r6,r2
  801cac:	d9001415 	stw	r4,80(sp)
  801cb0:	d9401515 	stw	r5,84(sp)
  801cb4:	0803c180 	call	803c18 <__muldf3>
  801cb8:	180f883a 	mov	r7,r3
  801cbc:	8009883a 	mov	r4,r16
  801cc0:	880b883a 	mov	r5,r17
  801cc4:	100d883a 	mov	r6,r2
  801cc8:	0803ba40 	call	803ba4 <__adddf3>
  801ccc:	d9001617 	ldw	r4,88(sp)
  801cd0:	d9402717 	ldw	r5,156(sp)
  801cd4:	d8803315 	stw	r2,204(sp)
  801cd8:	200d883a 	mov	r6,r4
  801cdc:	280f883a 	mov	r7,r5
  801ce0:	d8c03415 	stw	r3,208(sp)
  801ce4:	0803c180 	call	803c18 <__muldf3>
  801ce8:	182f883a 	mov	r23,r3
  801cec:	05500234 	movhi	r21,16392
  801cf0:	0029883a 	mov	r20,zero
  801cf4:	b80b883a 	mov	r5,r23
  801cf8:	a00d883a 	mov	r6,r20
  801cfc:	a80f883a 	mov	r7,r21
  801d00:	1009883a 	mov	r4,r2
  801d04:	d8800715 	stw	r2,28(sp)
  801d08:	d8c00815 	stw	r3,32(sp)
  801d0c:	0803ba40 	call	803ba4 <__adddf3>
  801d10:	d9003317 	ldw	r4,204(sp)
  801d14:	d9403417 	ldw	r5,208(sp)
  801d18:	180f883a 	mov	r7,r3
  801d1c:	100d883a 	mov	r6,r2
  801d20:	d9000515 	stw	r4,20(sp)
  801d24:	d9400615 	stw	r5,24(sp)
  801d28:	0803ba40 	call	803ba4 <__adddf3>
  801d2c:	d9001617 	ldw	r4,88(sp)
  801d30:	d9402717 	ldw	r5,156(sp)
  801d34:	0025883a 	mov	r18,zero
  801d38:	900d883a 	mov	r6,r18
  801d3c:	180f883a 	mov	r7,r3
  801d40:	1823883a 	mov	r17,r3
  801d44:	0803c180 	call	803c18 <__muldf3>
  801d48:	d9001417 	ldw	r4,80(sp)
  801d4c:	d9403217 	ldw	r5,200(sp)
  801d50:	880f883a 	mov	r7,r17
  801d54:	900d883a 	mov	r6,r18
  801d58:	d8803515 	stw	r2,212(sp)
  801d5c:	d8c03615 	stw	r3,216(sp)
  801d60:	0803c180 	call	803c18 <__muldf3>
  801d64:	a80f883a 	mov	r7,r21
  801d68:	880b883a 	mov	r5,r17
  801d6c:	000d883a 	mov	r6,zero
  801d70:	9009883a 	mov	r4,r18
  801d74:	1021883a 	mov	r16,r2
  801d78:	1823883a 	mov	r17,r3
  801d7c:	0803b240 	call	803b24 <__subdf3>
  801d80:	d9800717 	ldw	r6,28(sp)
  801d84:	b80f883a 	mov	r7,r23
  801d88:	180b883a 	mov	r5,r3
  801d8c:	1009883a 	mov	r4,r2
  801d90:	0803b240 	call	803b24 <__subdf3>
  801d94:	d9000517 	ldw	r4,20(sp)
  801d98:	d9403417 	ldw	r5,208(sp)
  801d9c:	180f883a 	mov	r7,r3
  801da0:	100d883a 	mov	r6,r2
  801da4:	0803b240 	call	803b24 <__subdf3>
  801da8:	d9000317 	ldw	r4,12(sp)
  801dac:	d9403017 	ldw	r5,192(sp)
  801db0:	180f883a 	mov	r7,r3
  801db4:	100d883a 	mov	r6,r2
  801db8:	0803c180 	call	803c18 <__muldf3>
  801dbc:	180f883a 	mov	r7,r3
  801dc0:	880b883a 	mov	r5,r17
  801dc4:	8009883a 	mov	r4,r16
  801dc8:	100d883a 	mov	r6,r2
  801dcc:	0803ba40 	call	803ba4 <__adddf3>
  801dd0:	102d883a 	mov	r22,r2
  801dd4:	d9003617 	ldw	r4,216(sp)
  801dd8:	d8803517 	ldw	r2,212(sp)
  801ddc:	d9403617 	ldw	r5,216(sp)
  801de0:	182f883a 	mov	r23,r3
  801de4:	b00d883a 	mov	r6,r22
  801de8:	b80f883a 	mov	r7,r23
  801dec:	d9000a15 	stw	r4,40(sp)
  801df0:	1009883a 	mov	r4,r2
  801df4:	054ffbf4 	movhi	r21,16367
  801df8:	ad71c244 	addi	r21,r21,-14583
  801dfc:	dd800d15 	stw	r22,52(sp)
  801e00:	ddc00e15 	stw	r23,56(sp)
  801e04:	05380034 	movhi	r20,57344
  801e08:	d8800915 	stw	r2,36(sp)
  801e0c:	0803ba40 	call	803ba4 <__adddf3>
  801e10:	180b883a 	mov	r5,r3
  801e14:	a00d883a 	mov	r6,r20
  801e18:	a80f883a 	mov	r7,r21
  801e1c:	9009883a 	mov	r4,r18
  801e20:	1823883a 	mov	r17,r3
  801e24:	0803c180 	call	803c18 <__muldf3>
  801e28:	020516f4 	movhi	r8,5211
  801e2c:	42007d44 	addi	r8,r8,501
  801e30:	026f8fb4 	movhi	r9,48702
  801e34:	4a4bf804 	addi	r9,r9,12256
  801e38:	480f883a 	mov	r7,r9
  801e3c:	400d883a 	mov	r6,r8
  801e40:	880b883a 	mov	r5,r17
  801e44:	9009883a 	mov	r4,r18
  801e48:	d8803715 	stw	r2,220(sp)
  801e4c:	d8c03815 	stw	r3,224(sp)
  801e50:	0803c180 	call	803c18 <__muldf3>
  801e54:	d9800917 	ldw	r6,36(sp)
  801e58:	d9c03617 	ldw	r7,216(sp)
  801e5c:	880b883a 	mov	r5,r17
  801e60:	9009883a 	mov	r4,r18
  801e64:	1021883a 	mov	r16,r2
  801e68:	1823883a 	mov	r17,r3
  801e6c:	0803b240 	call	803b24 <__subdf3>
  801e70:	d9000d17 	ldw	r4,52(sp)
  801e74:	b80b883a 	mov	r5,r23
  801e78:	180f883a 	mov	r7,r3
  801e7c:	100d883a 	mov	r6,r2
  801e80:	0803b240 	call	803b24 <__subdf3>
  801e84:	180b883a 	mov	r5,r3
  801e88:	a80f883a 	mov	r7,r21
  801e8c:	01b70eb4 	movhi	r6,56378
  801e90:	3180ff44 	addi	r6,r6,1021
  801e94:	1009883a 	mov	r4,r2
  801e98:	0803c180 	call	803c18 <__muldf3>
  801e9c:	180f883a 	mov	r7,r3
  801ea0:	880b883a 	mov	r5,r17
  801ea4:	8009883a 	mov	r4,r16
  801ea8:	100d883a 	mov	r6,r2
  801eac:	0803ba40 	call	803ba4 <__adddf3>
  801eb0:	d9402c17 	ldw	r5,176(sp)
  801eb4:	01002074 	movhi	r4,129
  801eb8:	21147d04 	addi	r4,r4,20980
  801ebc:	2909883a 	add	r4,r5,r4
  801ec0:	22400117 	ldw	r9,4(r4)
  801ec4:	22000017 	ldw	r8,0(r4)
  801ec8:	180b883a 	mov	r5,r3
  801ecc:	480f883a 	mov	r7,r9
  801ed0:	400d883a 	mov	r6,r8
  801ed4:	1009883a 	mov	r4,r2
  801ed8:	0803ba40 	call	803ba4 <__adddf3>
  801edc:	d9000017 	ldw	r4,0(sp)
  801ee0:	182f883a 	mov	r23,r3
  801ee4:	102d883a 	mov	r22,r2
  801ee8:	08044dc0 	call	8044dc <__floatsidf>
  801eec:	d9402c17 	ldw	r5,176(sp)
  801ef0:	01002074 	movhi	r4,129
  801ef4:	21148104 	addi	r4,r4,20996
  801ef8:	b00d883a 	mov	r6,r22
  801efc:	2911883a 	add	r8,r5,r4
  801f00:	d9003717 	ldw	r4,220(sp)
  801f04:	d9403817 	ldw	r5,224(sp)
  801f08:	45000017 	ldw	r20,0(r8)
  801f0c:	d9002315 	stw	r4,140(sp)
  801f10:	d9003817 	ldw	r4,224(sp)
  801f14:	45400117 	ldw	r21,4(r8)
  801f18:	b80f883a 	mov	r7,r23
  801f1c:	d9002415 	stw	r4,144(sp)
  801f20:	d9002317 	ldw	r4,140(sp)
  801f24:	1021883a 	mov	r16,r2
  801f28:	1823883a 	mov	r17,r3
  801f2c:	dd802115 	stw	r22,132(sp)
  801f30:	ddc02215 	stw	r23,136(sp)
  801f34:	0803ba40 	call	803ba4 <__adddf3>
  801f38:	180b883a 	mov	r5,r3
  801f3c:	1009883a 	mov	r4,r2
  801f40:	a00d883a 	mov	r6,r20
  801f44:	a80f883a 	mov	r7,r21
  801f48:	0803ba40 	call	803ba4 <__adddf3>
  801f4c:	180f883a 	mov	r7,r3
  801f50:	8009883a 	mov	r4,r16
  801f54:	880b883a 	mov	r5,r17
  801f58:	100d883a 	mov	r6,r2
  801f5c:	0803ba40 	call	803ba4 <__adddf3>
  801f60:	180b883a 	mov	r5,r3
  801f64:	0009883a 	mov	r4,zero
  801f68:	800d883a 	mov	r6,r16
  801f6c:	880f883a 	mov	r7,r17
  801f70:	d9001b15 	stw	r4,108(sp)
  801f74:	d8c01c15 	stw	r3,112(sp)
  801f78:	0803b240 	call	803b24 <__subdf3>
  801f7c:	180b883a 	mov	r5,r3
  801f80:	a80f883a 	mov	r7,r21
  801f84:	1009883a 	mov	r4,r2
  801f88:	a00d883a 	mov	r6,r20
  801f8c:	0803b240 	call	803b24 <__subdf3>
  801f90:	d9802317 	ldw	r6,140(sp)
  801f94:	d9c03817 	ldw	r7,224(sp)
  801f98:	180b883a 	mov	r5,r3
  801f9c:	1009883a 	mov	r4,r2
  801fa0:	0803b240 	call	803b24 <__subdf3>
  801fa4:	d9002117 	ldw	r4,132(sp)
  801fa8:	1011883a 	mov	r8,r2
  801fac:	1813883a 	mov	r9,r3
  801fb0:	b80b883a 	mov	r5,r23
  801fb4:	480f883a 	mov	r7,r9
  801fb8:	400d883a 	mov	r6,r8
  801fbc:	0803b240 	call	803b24 <__subdf3>
  801fc0:	1823883a 	mov	r17,r3
  801fc4:	d8c02517 	ldw	r3,148(sp)
  801fc8:	1021883a 	mov	r16,r2
  801fcc:	e0bfffc4 	addi	r2,fp,-1
  801fd0:	1884b03a 	or	r2,r3,r2
  801fd4:	1000731e 	bne	r2,zero,8021a4 <__ieee754_pow+0xb88>
  801fd8:	0009883a 	mov	r4,zero
  801fdc:	016ffc34 	movhi	r5,49136
  801fe0:	d9001915 	stw	r4,100(sp)
  801fe4:	d9401a15 	stw	r5,104(sp)
  801fe8:	d9402917 	ldw	r5,164(sp)
  801fec:	d9002817 	ldw	r4,160(sp)
  801ff0:	0029883a 	mov	r20,zero
  801ff4:	a00d883a 	mov	r6,r20
  801ff8:	280f883a 	mov	r7,r5
  801ffc:	2827883a 	mov	r19,r5
  802000:	0803b240 	call	803b24 <__subdf3>
  802004:	d9001b17 	ldw	r4,108(sp)
  802008:	d9401c17 	ldw	r5,112(sp)
  80200c:	180f883a 	mov	r7,r3
  802010:	100d883a 	mov	r6,r2
  802014:	0803c180 	call	803c18 <__muldf3>
  802018:	d9c02917 	ldw	r7,164(sp)
  80201c:	d9802817 	ldw	r6,160(sp)
  802020:	880b883a 	mov	r5,r17
  802024:	8009883a 	mov	r4,r16
  802028:	1823883a 	mov	r17,r3
  80202c:	1021883a 	mov	r16,r2
  802030:	0803c180 	call	803c18 <__muldf3>
  802034:	180f883a 	mov	r7,r3
  802038:	880b883a 	mov	r5,r17
  80203c:	8009883a 	mov	r4,r16
  802040:	100d883a 	mov	r6,r2
  802044:	0803ba40 	call	803ba4 <__adddf3>
  802048:	d9401c17 	ldw	r5,112(sp)
  80204c:	d9001b17 	ldw	r4,108(sp)
  802050:	a00d883a 	mov	r6,r20
  802054:	980f883a 	mov	r7,r19
  802058:	1029883a 	mov	r20,r2
  80205c:	182b883a 	mov	r21,r3
  802060:	0803c180 	call	803c18 <__muldf3>
  802064:	1025883a 	mov	r18,r2
  802068:	1827883a 	mov	r19,r3
  80206c:	a009883a 	mov	r4,r20
  802070:	a80b883a 	mov	r5,r21
  802074:	900d883a 	mov	r6,r18
  802078:	980f883a 	mov	r7,r19
  80207c:	dd001d15 	stw	r20,116(sp)
  802080:	dc801f15 	stw	r18,124(sp)
  802084:	dd401e15 	stw	r21,120(sp)
  802088:	dcc02015 	stw	r19,128(sp)
  80208c:	0803ba40 	call	803ba4 <__adddf3>
  802090:	1823883a 	mov	r17,r3
  802094:	01102434 	movhi	r4,16528
  802098:	213fffc4 	addi	r4,r4,-1
  80209c:	1021883a 	mov	r16,r2
  8020a0:	182f883a 	mov	r23,r3
  8020a4:	dc401815 	stw	r17,96(sp)
  8020a8:	100b883a 	mov	r5,r2
  8020ac:	20c02c0e 	bge	r4,r3,802160 <__ieee754_pow+0xb44>
  8020b0:	00afdc34 	movhi	r2,49008
  8020b4:	1885883a 	add	r2,r3,r2
  8020b8:	2884b03a 	or	r2,r5,r2
  8020bc:	1001a626 	beq	r2,zero,802758 <__ieee754_pow+0x113c>
  8020c0:	04220034 	movhi	r16,34816
  8020c4:	841d6704 	addi	r16,r16,30108
  8020c8:	045f8e34 	movhi	r17,32312
  8020cc:	8c790f04 	addi	r17,r17,-7108
  8020d0:	d9401a17 	ldw	r5,104(sp)
  8020d4:	d9001917 	ldw	r4,100(sp)
  8020d8:	800d883a 	mov	r6,r16
  8020dc:	880f883a 	mov	r7,r17
  8020e0:	0803c180 	call	803c18 <__muldf3>
  8020e4:	180b883a 	mov	r5,r3
  8020e8:	800d883a 	mov	r6,r16
  8020ec:	880f883a 	mov	r7,r17
  8020f0:	1009883a 	mov	r4,r2
  8020f4:	0803c180 	call	803c18 <__muldf3>
  8020f8:	003dc306 	br	801808 <__ieee754_pow+0x1ec>
  8020fc:	00b00434 	movhi	r2,49168
  802100:	9085883a 	add	r2,r18,r2
  802104:	e084b03a 	or	r2,fp,r2
  802108:	1000af1e 	bne	r2,zero,8023c8 <__ieee754_pow+0xdac>
  80210c:	480f883a 	mov	r7,r9
  802110:	4009883a 	mov	r4,r8
  802114:	480b883a 	mov	r5,r9
  802118:	400d883a 	mov	r6,r8
  80211c:	003db406 	br	8017f0 <__ieee754_pow+0x1d4>
  802120:	00bffc34 	movhi	r2,65520
  802124:	18ff0084 	addi	r3,r3,-1022
  802128:	a0a9883a 	add	r20,r20,r2
  80212c:	d8c00015 	stw	r3,0(sp)
  802130:	0009883a 	mov	r4,zero
  802134:	04000234 	movhi	r16,8
  802138:	003e1406 	br	80198c <__ieee754_pow+0x370>
  80213c:	a80f883a 	mov	r7,r21
  802140:	a009883a 	mov	r4,r20
  802144:	a80b883a 	mov	r5,r21
  802148:	a00d883a 	mov	r6,r20
  80214c:	0803c180 	call	803c18 <__muldf3>
  802150:	180b883a 	mov	r5,r3
  802154:	d8802815 	stw	r2,160(sp)
  802158:	d9402915 	stw	r5,164(sp)
  80215c:	003d5606 	br	8016b8 <__ieee754_pow+0x9c>
  802160:	d9001817 	ldw	r4,96(sp)
  802164:	00a00034 	movhi	r2,32768
  802168:	10bfffc4 	addi	r2,r2,-1
  80216c:	00d02474 	movhi	r3,16529
  802170:	18f2ffc4 	addi	r3,r3,-13313
  802174:	20b8703a 	and	fp,r4,r2
  802178:	1f009d0e 	bge	r3,fp,8023f0 <__ieee754_pow+0xdd4>
  80217c:	008fdbf4 	movhi	r2,16239
  802180:	108d0004 	addi	r2,r2,13312
  802184:	2085883a 	add	r2,r4,r2
  802188:	1144b03a 	or	r2,r2,r5
  80218c:	1001c626 	beq	r2,zero,8028a8 <__ieee754_pow+0x128c>
  802190:	0430be74 	movhi	r16,49913
  802194:	843cd644 	addi	r16,r16,-3239
  802198:	04406974 	movhi	r17,421
  80219c:	8c5b87c4 	addi	r17,r17,28191
  8021a0:	003fcb06 	br	8020d0 <__ieee754_pow+0xab4>
  8021a4:	0005883a 	mov	r2,zero
  8021a8:	00cffc34 	movhi	r3,16368
  8021ac:	d8801915 	stw	r2,100(sp)
  8021b0:	d8c01a15 	stw	r3,104(sp)
  8021b4:	003f8c06 	br	801fe8 <__ieee754_pow+0x9cc>
  8021b8:	0005883a 	mov	r2,zero
  8021bc:	00cffc34 	movhi	r3,16368
  8021c0:	180b883a 	mov	r5,r3
  8021c4:	580f883a 	mov	r7,r11
  8021c8:	1009883a 	mov	r4,r2
  8021cc:	500d883a 	mov	r6,r10
  8021d0:	0803fdc0 	call	803fdc <__divdf3>
  8021d4:	1011883a 	mov	r8,r2
  8021d8:	1813883a 	mov	r9,r3
  8021dc:	003d9506 	br	801834 <__ieee754_pow+0x218>
  8021e0:	008ffc34 	movhi	r2,16368
  8021e4:	10bfff84 	addi	r2,r2,-2
  8021e8:	14bdbb0e 	bge	r2,r18,8018d8 <__ieee754_pow+0x2bc>
  8021ec:	008ffc34 	movhi	r2,16368
  8021f0:	14bdae16 	blt	r2,r18,8018ac <__ieee754_pow+0x290>
  8021f4:	580b883a 	mov	r5,r11
  8021f8:	5009883a 	mov	r4,r10
  8021fc:	000d883a 	mov	r6,zero
  802200:	100f883a 	mov	r7,r2
  802204:	0803b240 	call	803b24 <__subdf3>
  802208:	1021883a 	mov	r16,r2
  80220c:	1823883a 	mov	r17,r3
  802210:	00980034 	movhi	r2,24576
  802214:	00cffdf4 	movhi	r3,16375
  802218:	18c551c4 	addi	r3,r3,5447
  80221c:	8009883a 	mov	r4,r16
  802220:	880b883a 	mov	r5,r17
  802224:	180f883a 	mov	r7,r3
  802228:	100d883a 	mov	r6,r2
  80222c:	0803c180 	call	803c18 <__muldf3>
  802230:	023e17b4 	movhi	r8,63582
  802234:	4237d104 	addi	r8,r8,-8380
  802238:	024f9574 	movhi	r9,15957
  80223c:	4a6b82c4 	addi	r9,r9,-20981
  802240:	480f883a 	mov	r7,r9
  802244:	400d883a 	mov	r6,r8
  802248:	8009883a 	mov	r4,r16
  80224c:	880b883a 	mov	r5,r17
  802250:	102d883a 	mov	r22,r2
  802254:	182f883a 	mov	r23,r3
  802258:	0803c180 	call	803c18 <__muldf3>
  80225c:	8009883a 	mov	r4,r16
  802260:	880b883a 	mov	r5,r17
  802264:	800d883a 	mov	r6,r16
  802268:	880f883a 	mov	r7,r17
  80226c:	d8802a15 	stw	r2,168(sp)
  802270:	d8c02b15 	stw	r3,172(sp)
  802274:	0803c180 	call	803c18 <__muldf3>
  802278:	0011883a 	mov	r8,zero
  80227c:	026ff434 	movhi	r9,49104
  802280:	480f883a 	mov	r7,r9
  802284:	8009883a 	mov	r4,r16
  802288:	880b883a 	mov	r5,r17
  80228c:	400d883a 	mov	r6,r8
  802290:	1029883a 	mov	r20,r2
  802294:	182b883a 	mov	r21,r3
  802298:	0803c180 	call	803c18 <__muldf3>
  80229c:	02155574 	movhi	r8,21845
  8022a0:	42155544 	addi	r8,r8,21845
  8022a4:	024ff574 	movhi	r9,16341
  8022a8:	4a555544 	addi	r9,r9,21845
  8022ac:	480f883a 	mov	r7,r9
  8022b0:	400d883a 	mov	r6,r8
  8022b4:	180b883a 	mov	r5,r3
  8022b8:	1009883a 	mov	r4,r2
  8022bc:	0803ba40 	call	803ba4 <__adddf3>
  8022c0:	180f883a 	mov	r7,r3
  8022c4:	8009883a 	mov	r4,r16
  8022c8:	880b883a 	mov	r5,r17
  8022cc:	100d883a 	mov	r6,r2
  8022d0:	0803c180 	call	803c18 <__muldf3>
  8022d4:	0011883a 	mov	r8,zero
  8022d8:	024ff834 	movhi	r9,16352
  8022dc:	480b883a 	mov	r5,r9
  8022e0:	4009883a 	mov	r4,r8
  8022e4:	180f883a 	mov	r7,r3
  8022e8:	100d883a 	mov	r6,r2
  8022ec:	0803b240 	call	803b24 <__subdf3>
  8022f0:	180f883a 	mov	r7,r3
  8022f4:	a80b883a 	mov	r5,r21
  8022f8:	a009883a 	mov	r4,r20
  8022fc:	100d883a 	mov	r6,r2
  802300:	0803c180 	call	803c18 <__muldf3>
  802304:	02194b34 	movhi	r8,25900
  802308:	4220bf84 	addi	r8,r8,-32002
  80230c:	026ffdf4 	movhi	r9,49143
  802310:	4a4551c4 	addi	r9,r9,5447
  802314:	480f883a 	mov	r7,r9
  802318:	400d883a 	mov	r6,r8
  80231c:	180b883a 	mov	r5,r3
  802320:	1009883a 	mov	r4,r2
  802324:	0803c180 	call	803c18 <__muldf3>
  802328:	d9402b17 	ldw	r5,172(sp)
  80232c:	d9002a17 	ldw	r4,168(sp)
  802330:	180f883a 	mov	r7,r3
  802334:	100d883a 	mov	r6,r2
  802338:	0803ba40 	call	803ba4 <__adddf3>
  80233c:	100d883a 	mov	r6,r2
  802340:	b009883a 	mov	r4,r22
  802344:	b80b883a 	mov	r5,r23
  802348:	180f883a 	mov	r7,r3
  80234c:	1021883a 	mov	r16,r2
  802350:	1823883a 	mov	r17,r3
  802354:	0803ba40 	call	803ba4 <__adddf3>
  802358:	180b883a 	mov	r5,r3
  80235c:	0009883a 	mov	r4,zero
  802360:	b00d883a 	mov	r6,r22
  802364:	b80f883a 	mov	r7,r23
  802368:	d9001b15 	stw	r4,108(sp)
  80236c:	d8c01c15 	stw	r3,112(sp)
  802370:	0803b240 	call	803b24 <__subdf3>
  802374:	1011883a 	mov	r8,r2
  802378:	1813883a 	mov	r9,r3
  80237c:	8009883a 	mov	r4,r16
  802380:	880b883a 	mov	r5,r17
  802384:	003f0b06 	br	801fb4 <__ieee754_pow+0x998>
  802388:	0005883a 	mov	r2,zero
  80238c:	00d0d034 	movhi	r3,17216
  802390:	580b883a 	mov	r5,r11
  802394:	5009883a 	mov	r4,r10
  802398:	180f883a 	mov	r7,r3
  80239c:	100d883a 	mov	r6,r2
  8023a0:	0803c180 	call	803c18 <__muldf3>
  8023a4:	1015883a 	mov	r10,r2
  8023a8:	1825883a 	mov	r18,r3
  8023ac:	017ff2c4 	movi	r5,-53
  8023b0:	003d6606 	br	80194c <__ieee754_pow+0x330>
  8023b4:	b03d300e 	bge	r22,zero,801878 <__ieee754_pow+0x25c>
  8023b8:	d9402917 	ldw	r5,164(sp)
  8023bc:	28e0003c 	xorhi	r3,r5,32768
  8023c0:	d8c02915 	stw	r3,164(sp)
  8023c4:	003cbc06 	br	8016b8 <__ieee754_pow+0x9c>
  8023c8:	00800044 	movi	r2,1
  8023cc:	e0bd1a1e 	bne	fp,r2,801838 <__ieee754_pow+0x21c>
  8023d0:	48e0003c 	xorhi	r3,r9,32768
  8023d4:	da002815 	stw	r8,160(sp)
  8023d8:	d8c02915 	stw	r3,164(sp)
  8023dc:	003cb606 	br	8016b8 <__ieee754_pow+0x9c>
  8023e0:	d9001817 	ldw	r4,96(sp)
  8023e4:	00a00034 	movhi	r2,32768
  8023e8:	10bfffc4 	addi	r2,r2,-1
  8023ec:	20b8703a 	and	fp,r4,r2
  8023f0:	008ff834 	movhi	r2,16352
  8023f4:	1700fc16 	blt	r2,fp,8027e8 <__ieee754_pow+0x11cc>
  8023f8:	0039883a 	mov	fp,zero
  8023fc:	d8001315 	stw	zero,76(sp)
  802400:	0025883a 	mov	r18,zero
  802404:	0005883a 	mov	r2,zero
  802408:	00cff9b4 	movhi	r3,16358
  80240c:	18cb90c4 	addi	r3,r3,11843
  802410:	9009883a 	mov	r4,r18
  802414:	b80b883a 	mov	r5,r23
  802418:	180f883a 	mov	r7,r3
  80241c:	100d883a 	mov	r6,r2
  802420:	0803c180 	call	803c18 <__muldf3>
  802424:	d9c02017 	ldw	r7,128(sp)
  802428:	d9801f17 	ldw	r6,124(sp)
  80242c:	9009883a 	mov	r4,r18
  802430:	b80b883a 	mov	r5,r23
  802434:	b823883a 	mov	r17,r23
  802438:	102d883a 	mov	r22,r2
  80243c:	182f883a 	mov	r23,r3
  802440:	0803b240 	call	803b24 <__subdf3>
  802444:	d9401e17 	ldw	r5,120(sp)
  802448:	d9001d17 	ldw	r4,116(sp)
  80244c:	180f883a 	mov	r7,r3
  802450:	100d883a 	mov	r6,r2
  802454:	0803b240 	call	803b24 <__subdf3>
  802458:	023fbeb4 	movhi	r8,65274
  80245c:	420e7bc4 	addi	r8,r8,14831
  802460:	024ff9b4 	movhi	r9,16358
  802464:	4a4b9084 	addi	r9,r9,11842
  802468:	480f883a 	mov	r7,r9
  80246c:	400d883a 	mov	r6,r8
  802470:	180b883a 	mov	r5,r3
  802474:	1009883a 	mov	r4,r2
  802478:	0803c180 	call	803c18 <__muldf3>
  80247c:	02032a34 	movhi	r8,3240
  802480:	421b0e44 	addi	r8,r8,27705
  802484:	026f8834 	movhi	r9,48672
  802488:	4a571844 	addi	r9,r9,23649
  80248c:	480f883a 	mov	r7,r9
  802490:	400d883a 	mov	r6,r8
  802494:	9009883a 	mov	r4,r18
  802498:	880b883a 	mov	r5,r17
  80249c:	1021883a 	mov	r16,r2
  8024a0:	1823883a 	mov	r17,r3
  8024a4:	0803c180 	call	803c18 <__muldf3>
  8024a8:	180f883a 	mov	r7,r3
  8024ac:	880b883a 	mov	r5,r17
  8024b0:	8009883a 	mov	r4,r16
  8024b4:	100d883a 	mov	r6,r2
  8024b8:	0803ba40 	call	803ba4 <__adddf3>
  8024bc:	100d883a 	mov	r6,r2
  8024c0:	b009883a 	mov	r4,r22
  8024c4:	b80b883a 	mov	r5,r23
  8024c8:	180f883a 	mov	r7,r3
  8024cc:	1021883a 	mov	r16,r2
  8024d0:	1823883a 	mov	r17,r3
  8024d4:	0803ba40 	call	803ba4 <__adddf3>
  8024d8:	1009883a 	mov	r4,r2
  8024dc:	180b883a 	mov	r5,r3
  8024e0:	b00d883a 	mov	r6,r22
  8024e4:	b80f883a 	mov	r7,r23
  8024e8:	d8803915 	stw	r2,228(sp)
  8024ec:	d8c03a15 	stw	r3,232(sp)
  8024f0:	d8801115 	stw	r2,68(sp)
  8024f4:	d8c01215 	stw	r3,72(sp)
  8024f8:	0803b240 	call	803b24 <__subdf3>
  8024fc:	180f883a 	mov	r7,r3
  802500:	8009883a 	mov	r4,r16
  802504:	880b883a 	mov	r5,r17
  802508:	100d883a 	mov	r6,r2
  80250c:	0803b240 	call	803b24 <__subdf3>
  802510:	d9001117 	ldw	r4,68(sp)
  802514:	d9403a17 	ldw	r5,232(sp)
  802518:	1029883a 	mov	r20,r2
  80251c:	200d883a 	mov	r6,r4
  802520:	280f883a 	mov	r7,r5
  802524:	182b883a 	mov	r21,r3
  802528:	0803c180 	call	803c18 <__muldf3>
  80252c:	1021883a 	mov	r16,r2
  802530:	1823883a 	mov	r17,r3
  802534:	009caff4 	movhi	r2,29375
  802538:	10a93404 	addi	r2,r2,-23344
  80253c:	00cf99b4 	movhi	r3,15974
  802540:	18cdda44 	addi	r3,r3,14185
  802544:	8009883a 	mov	r4,r16
  802548:	880b883a 	mov	r5,r17
  80254c:	180f883a 	mov	r7,r3
  802550:	100d883a 	mov	r6,r2
  802554:	0803c180 	call	803c18 <__muldf3>
  802558:	023174b4 	movhi	r8,50642
  80255c:	421afc44 	addi	r8,r8,27633
  802560:	024faf34 	movhi	r9,16060
  802564:	4a6f5044 	addi	r9,r9,-17087
  802568:	480f883a 	mov	r7,r9
  80256c:	400d883a 	mov	r6,r8
  802570:	180b883a 	mov	r5,r3
  802574:	1009883a 	mov	r4,r2
  802578:	0803b240 	call	803b24 <__subdf3>
  80257c:	180f883a 	mov	r7,r3
  802580:	8009883a 	mov	r4,r16
  802584:	880b883a 	mov	r5,r17
  802588:	100d883a 	mov	r6,r2
  80258c:	0803c180 	call	803c18 <__muldf3>
  802590:	022bc9b4 	movhi	r8,44838
  802594:	42378b04 	addi	r8,r8,-8660
  802598:	024fc474 	movhi	r9,16145
  80259c:	4a559a84 	addi	r9,r9,22122
  8025a0:	480f883a 	mov	r7,r9
  8025a4:	400d883a 	mov	r6,r8
  8025a8:	180b883a 	mov	r5,r3
  8025ac:	1009883a 	mov	r4,r2
  8025b0:	0803ba40 	call	803ba4 <__adddf3>
  8025b4:	180f883a 	mov	r7,r3
  8025b8:	8009883a 	mov	r4,r16
  8025bc:	880b883a 	mov	r5,r17
  8025c0:	100d883a 	mov	r6,r2
  8025c4:	0803c180 	call	803c18 <__muldf3>
  8025c8:	0205aff4 	movhi	r8,5823
  8025cc:	422f64c4 	addi	r8,r8,-17005
  8025d0:	024fd9f4 	movhi	r9,16231
  8025d4:	4a705b04 	addi	r9,r9,-16020
  8025d8:	480f883a 	mov	r7,r9
  8025dc:	400d883a 	mov	r6,r8
  8025e0:	180b883a 	mov	r5,r3
  8025e4:	1009883a 	mov	r4,r2
  8025e8:	0803b240 	call	803b24 <__subdf3>
  8025ec:	180f883a 	mov	r7,r3
  8025f0:	8009883a 	mov	r4,r16
  8025f4:	880b883a 	mov	r5,r17
  8025f8:	100d883a 	mov	r6,r2
  8025fc:	0803c180 	call	803c18 <__muldf3>
  802600:	02155574 	movhi	r8,21845
  802604:	42154f84 	addi	r8,r8,21822
  802608:	024ff174 	movhi	r9,16325
  80260c:	4a555544 	addi	r9,r9,21845
  802610:	480f883a 	mov	r7,r9
  802614:	400d883a 	mov	r6,r8
  802618:	180b883a 	mov	r5,r3
  80261c:	1009883a 	mov	r4,r2
  802620:	0803ba40 	call	803ba4 <__adddf3>
  802624:	180f883a 	mov	r7,r3
  802628:	8009883a 	mov	r4,r16
  80262c:	880b883a 	mov	r5,r17
  802630:	100d883a 	mov	r6,r2
  802634:	0803c180 	call	803c18 <__muldf3>
  802638:	d9001117 	ldw	r4,68(sp)
  80263c:	d9403a17 	ldw	r5,232(sp)
  802640:	180f883a 	mov	r7,r3
  802644:	100d883a 	mov	r6,r2
  802648:	0803b240 	call	803b24 <__subdf3>
  80264c:	d9001117 	ldw	r4,68(sp)
  802650:	d9403a17 	ldw	r5,232(sp)
  802654:	100d883a 	mov	r6,r2
  802658:	180f883a 	mov	r7,r3
  80265c:	1021883a 	mov	r16,r2
  802660:	1823883a 	mov	r17,r3
  802664:	0803c180 	call	803c18 <__muldf3>
  802668:	0011883a 	mov	r8,zero
  80266c:	02500034 	movhi	r9,16384
  802670:	480f883a 	mov	r7,r9
  802674:	400d883a 	mov	r6,r8
  802678:	8009883a 	mov	r4,r16
  80267c:	880b883a 	mov	r5,r17
  802680:	1021883a 	mov	r16,r2
  802684:	1823883a 	mov	r17,r3
  802688:	0803b240 	call	803b24 <__subdf3>
  80268c:	180f883a 	mov	r7,r3
  802690:	880b883a 	mov	r5,r17
  802694:	8009883a 	mov	r4,r16
  802698:	100d883a 	mov	r6,r2
  80269c:	0803fdc0 	call	803fdc <__divdf3>
  8026a0:	d9001117 	ldw	r4,68(sp)
  8026a4:	d9403a17 	ldw	r5,232(sp)
  8026a8:	a00d883a 	mov	r6,r20
  8026ac:	a80f883a 	mov	r7,r21
  8026b0:	1025883a 	mov	r18,r2
  8026b4:	1827883a 	mov	r19,r3
  8026b8:	0803c180 	call	803c18 <__muldf3>
  8026bc:	180f883a 	mov	r7,r3
  8026c0:	a009883a 	mov	r4,r20
  8026c4:	a80b883a 	mov	r5,r21
  8026c8:	100d883a 	mov	r6,r2
  8026cc:	0803ba40 	call	803ba4 <__adddf3>
  8026d0:	180f883a 	mov	r7,r3
  8026d4:	980b883a 	mov	r5,r19
  8026d8:	9009883a 	mov	r4,r18
  8026dc:	100d883a 	mov	r6,r2
  8026e0:	0803b240 	call	803b24 <__subdf3>
  8026e4:	d9801117 	ldw	r6,68(sp)
  8026e8:	d9c03a17 	ldw	r7,232(sp)
  8026ec:	180b883a 	mov	r5,r3
  8026f0:	1009883a 	mov	r4,r2
  8026f4:	0803b240 	call	803b24 <__subdf3>
  8026f8:	0011883a 	mov	r8,zero
  8026fc:	024ffc34 	movhi	r9,16368
  802700:	480b883a 	mov	r5,r9
  802704:	180f883a 	mov	r7,r3
  802708:	4009883a 	mov	r4,r8
  80270c:	100d883a 	mov	r6,r2
  802710:	0803b240 	call	803b24 <__subdf3>
  802714:	100b883a 	mov	r5,r2
  802718:	d8801317 	ldw	r2,76(sp)
  80271c:	10d5883a 	add	r10,r2,r3
  802720:	5005d53a 	srai	r2,r10,20
  802724:	0080720e 	bge	zero,r2,8028f0 <__ieee754_pow+0x12d4>
  802728:	2811883a 	mov	r8,r5
  80272c:	5013883a 	mov	r9,r10
  802730:	d9c01a17 	ldw	r7,104(sp)
  802734:	d9801917 	ldw	r6,100(sp)
  802738:	480b883a 	mov	r5,r9
  80273c:	4009883a 	mov	r4,r8
  802740:	003e8206 	br	80214c <__ieee754_pow+0xb30>
  802744:	0009883a 	mov	r4,zero
  802748:	800b883a 	mov	r5,r16
  80274c:	a80f883a 	mov	r7,r21
  802750:	a00d883a 	mov	r6,r20
  802754:	003c2b06 	br	801804 <__ieee754_pow+0x1e8>
  802758:	d9001d17 	ldw	r4,116(sp)
  80275c:	00994b34 	movhi	r2,25900
  802760:	10a0bf84 	addi	r2,r2,-32002
  802764:	00cf25f4 	movhi	r3,15511
  802768:	18c551c4 	addi	r3,r3,5447
  80276c:	a80b883a 	mov	r5,r21
  802770:	180f883a 	mov	r7,r3
  802774:	100d883a 	mov	r6,r2
  802778:	0803ba40 	call	803ba4 <__adddf3>
  80277c:	d9801f17 	ldw	r6,124(sp)
  802780:	880b883a 	mov	r5,r17
  802784:	8009883a 	mov	r4,r16
  802788:	980f883a 	mov	r7,r19
  80278c:	1021883a 	mov	r16,r2
  802790:	1823883a 	mov	r17,r3
  802794:	0803b240 	call	803b24 <__subdf3>
  802798:	180f883a 	mov	r7,r3
  80279c:	880b883a 	mov	r5,r17
  8027a0:	8009883a 	mov	r4,r16
  8027a4:	100d883a 	mov	r6,r2
  8027a8:	08043440 	call	804344 <__gtdf2>
  8027ac:	00bf0c0e 	bge	zero,r2,8023e0 <__ieee754_pow+0xdc4>
  8027b0:	04220034 	movhi	r16,34816
  8027b4:	841d6704 	addi	r16,r16,30108
  8027b8:	045f8e34 	movhi	r17,32312
  8027bc:	8c790f04 	addi	r17,r17,-7108
  8027c0:	d9401a17 	ldw	r5,104(sp)
  8027c4:	d9001917 	ldw	r4,100(sp)
  8027c8:	800d883a 	mov	r6,r16
  8027cc:	880f883a 	mov	r7,r17
  8027d0:	0803c180 	call	803c18 <__muldf3>
  8027d4:	180b883a 	mov	r5,r3
  8027d8:	800d883a 	mov	r6,r16
  8027dc:	880f883a 	mov	r7,r17
  8027e0:	1009883a 	mov	r4,r2
  8027e4:	003e5906 	br	80214c <__ieee754_pow+0xb30>
  8027e8:	e005d53a 	srai	r2,fp,20
  8027ec:	01800434 	movhi	r6,16
  8027f0:	d9401817 	ldw	r5,96(sp)
  8027f4:	10bf0084 	addi	r2,r2,-1022
  8027f8:	308dd83a 	sra	r6,r6,r2
  8027fc:	02000434 	movhi	r8,16
  802800:	423fffc4 	addi	r8,r8,-1
  802804:	0005883a 	mov	r2,zero
  802808:	298d883a 	add	r6,r5,r6
  80280c:	318b883a 	add	r5,r6,r6
  802810:	320e703a 	and	r7,r6,r8
  802814:	1013883a 	mov	r9,r2
  802818:	280ad57a 	srli	r5,r5,21
  80281c:	d8801817 	ldw	r2,96(sp)
  802820:	01000504 	movi	r4,20
  802824:	297f0044 	addi	r5,r5,-1023
  802828:	4151d83a 	sra	r8,r8,r5
  80282c:	39c00434 	orhi	r7,r7,16
  802830:	2149c83a 	sub	r4,r4,r5
  802834:	0210303a 	nor	r8,zero,r8
  802838:	3939d83a 	sra	fp,r7,r4
  80283c:	320e703a 	and	r7,r6,r8
  802840:	10002916 	blt	r2,zero,8028e8 <__ieee754_pow+0x12cc>
  802844:	d9402017 	ldw	r5,128(sp)
  802848:	d9001f17 	ldw	r4,124(sp)
  80284c:	480d883a 	mov	r6,r9
  802850:	0803b240 	call	803b24 <__subdf3>
  802854:	180b883a 	mov	r5,r3
  802858:	d9402015 	stw	r5,128(sp)
  80285c:	280f883a 	mov	r7,r5
  802860:	d9001d17 	ldw	r4,116(sp)
  802864:	d9401e17 	ldw	r5,120(sp)
  802868:	1007883a 	mov	r3,r2
  80286c:	180d883a 	mov	r6,r3
  802870:	d8801f15 	stw	r2,124(sp)
  802874:	0803ba40 	call	803ba4 <__adddf3>
  802878:	180b883a 	mov	r5,r3
  80287c:	e006953a 	slli	r3,fp,20
  802880:	282f883a 	mov	r23,r5
  802884:	d8c01315 	stw	r3,76(sp)
  802888:	003edd06 	br	802400 <__ieee754_pow+0xde4>
  80288c:	383bc81e 	bne	r7,zero,8017b0 <__ieee754_pow+0x194>
  802890:	28c5c83a 	sub	r2,r5,r3
  802894:	8087d83a 	sra	r3,r16,r2
  802898:	1884983a 	sll	r2,r3,r2
  80289c:	80801b26 	beq	r16,r2,80290c <__ieee754_pow+0x12f0>
  8028a0:	0039883a 	mov	fp,zero
  8028a4:	003b9d06 	br	80171c <__ieee754_pow+0x100>
  8028a8:	d9801f17 	ldw	r6,124(sp)
  8028ac:	8009883a 	mov	r4,r16
  8028b0:	880b883a 	mov	r5,r17
  8028b4:	980f883a 	mov	r7,r19
  8028b8:	0803b240 	call	803b24 <__subdf3>
  8028bc:	d9001d17 	ldw	r4,116(sp)
  8028c0:	a80b883a 	mov	r5,r21
  8028c4:	180f883a 	mov	r7,r3
  8028c8:	100d883a 	mov	r6,r2
  8028cc:	08044540 	call	804454 <__ledf2>
  8028d0:	00bfc516 	blt	zero,r2,8027e8 <__ieee754_pow+0x11cc>
  8028d4:	0430be74 	movhi	r16,49913
  8028d8:	843cd644 	addi	r16,r16,-3239
  8028dc:	04406974 	movhi	r17,421
  8028e0:	8c5b87c4 	addi	r17,r17,28191
  8028e4:	003fb606 	br	8027c0 <__ieee754_pow+0x11a4>
  8028e8:	0739c83a 	sub	fp,zero,fp
  8028ec:	003fd506 	br	802844 <__ieee754_pow+0x1228>
  8028f0:	2809883a 	mov	r4,r5
  8028f4:	e00d883a 	mov	r6,fp
  8028f8:	180b883a 	mov	r5,r3
  8028fc:	0802e700 	call	802e70 <scalbn>
  802900:	1011883a 	mov	r8,r2
  802904:	1813883a 	mov	r9,r3
  802908:	003f8906 	br	802730 <__ieee754_pow+0x1114>
  80290c:	18c0004c 	andi	r3,r3,1
  802910:	00800084 	movi	r2,2
  802914:	10f9c83a 	sub	fp,r2,r3
  802918:	003b8006 	br	80171c <__ieee754_pow+0x100>

0080291c <__ieee754_sqrt>:
  80291c:	defffd04 	addi	sp,sp,-12
  802920:	dc000015 	stw	r16,0(sp)
  802924:	009ffc34 	movhi	r2,32752
  802928:	2021883a 	mov	r16,r4
  80292c:	291ffc2c 	andhi	r4,r5,32752
  802930:	dc400115 	stw	r17,4(sp)
  802934:	dfc00215 	stw	ra,8(sp)
  802938:	2823883a 	mov	r17,r5
  80293c:	280f883a 	mov	r7,r5
  802940:	2807883a 	mov	r3,r5
  802944:	8011883a 	mov	r8,r16
  802948:	20807d26 	beq	r4,r2,802b40 <__ieee754_sqrt+0x224>
  80294c:	01408d0e 	bge	zero,r5,802b84 <__ieee754_sqrt+0x268>
  802950:	380dd53a 	srai	r6,r7,20
  802954:	3000131e 	bne	r6,zero,8029a4 <__ieee754_sqrt+0x88>
  802958:	1800041e 	bne	r3,zero,80296c <__ieee754_sqrt+0x50>
  80295c:	400ed2fa 	srli	r7,r8,11
  802960:	31bffac4 	addi	r6,r6,-21
  802964:	4010957a 	slli	r8,r8,21
  802968:	383ffc26 	beq	r7,zero,80295c <__ieee754_sqrt+0x40>
  80296c:	3880042c 	andhi	r2,r7,16
  802970:	1000991e 	bne	r2,zero,802bd8 <__ieee754_sqrt+0x2bc>
  802974:	0009883a 	mov	r4,zero
  802978:	39cf883a 	add	r7,r7,r7
  80297c:	3880042c 	andhi	r2,r7,16
  802980:	21000044 	addi	r4,r4,1
  802984:	103ffc26 	beq	r2,zero,802978 <__ieee754_sqrt+0x5c>
  802988:	00800804 	movi	r2,32
  80298c:	1105c83a 	sub	r2,r2,r4
  802990:	4086d83a 	srl	r3,r8,r2
  802994:	4110983a 	sll	r8,r8,r4
  802998:	3105c83a 	sub	r2,r6,r4
  80299c:	38ceb03a 	or	r7,r7,r3
  8029a0:	11800044 	addi	r6,r2,1
  8029a4:	31bf0044 	addi	r6,r6,-1023
  8029a8:	30c0004c 	andi	r3,r6,1
  8029ac:	00800434 	movhi	r2,16
  8029b0:	10bfffc4 	addi	r2,r2,-1
  8029b4:	3884703a 	and	r2,r7,r2
  8029b8:	1807003a 	cmpeq	r3,r3,zero
  8029bc:	11000434 	orhi	r4,r2,16
  8029c0:	18005426 	beq	r3,zero,802b14 <__ieee754_sqrt+0x1f8>
  8029c4:	4004d7fa 	srli	r2,r8,31
  8029c8:	4207883a 	add	r3,r8,r8
  8029cc:	02800834 	movhi	r10,32
  8029d0:	1105883a 	add	r2,r2,r4
  8029d4:	2089883a 	add	r4,r4,r2
  8029d8:	0011883a 	mov	r8,zero
  8029dc:	000b883a 	mov	r5,zero
  8029e0:	0013883a 	mov	r9,zero
  8029e4:	02c00584 	movi	r11,22
  8029e8:	520f883a 	add	r7,r10,r8
  8029ec:	1804d7fa 	srli	r2,r3,31
  8029f0:	4a400044 	addi	r9,r9,1
  8029f4:	18c7883a 	add	r3,r3,r3
  8029f8:	21c00316 	blt	r4,r7,802a08 <__ieee754_sqrt+0xec>
  8029fc:	21c9c83a 	sub	r4,r4,r7
  802a00:	2a8b883a 	add	r5,r5,r10
  802a04:	51d1883a 	add	r8,r10,r7
  802a08:	1105883a 	add	r2,r2,r4
  802a0c:	5014d07a 	srli	r10,r10,1
  802a10:	2089883a 	add	r4,r4,r2
  802a14:	4afff41e 	bne	r9,r11,8029e8 <__ieee754_sqrt+0xcc>
  802a18:	02600034 	movhi	r9,32768
  802a1c:	0017883a 	mov	r11,zero
  802a20:	0019883a 	mov	r12,zero
  802a24:	0015883a 	mov	r10,zero
  802a28:	4821883a 	mov	r16,r9
  802a2c:	03c00804 	movi	r15,32
  802a30:	00000806 	br	802a54 <__ieee754_sqrt+0x138>
  802a34:	22003426 	beq	r4,r8,802b08 <__ieee754_sqrt+0x1ec>
  802a38:	1804d7fa 	srli	r2,r3,31
  802a3c:	52800044 	addi	r10,r10,1
  802a40:	18c7883a 	add	r3,r3,r3
  802a44:	1105883a 	add	r2,r2,r4
  802a48:	2089883a 	add	r4,r4,r2
  802a4c:	4812d07a 	srli	r9,r9,1
  802a50:	53c01326 	beq	r10,r15,802aa0 <__ieee754_sqrt+0x184>
  802a54:	4acf883a 	add	r7,r9,r11
  802a58:	413ff60e 	bge	r8,r4,802a34 <__ieee754_sqrt+0x118>
  802a5c:	38a0002c 	andhi	r2,r7,32768
  802a60:	3a57883a 	add	r11,r7,r9
  802a64:	14002426 	beq	r2,r16,802af8 <__ieee754_sqrt+0x1dc>
  802a68:	4005883a 	mov	r2,r8
  802a6c:	2209c83a 	sub	r4,r4,r8
  802a70:	19c0012e 	bgeu	r3,r7,802a78 <__ieee754_sqrt+0x15c>
  802a74:	213fffc4 	addi	r4,r4,-1
  802a78:	19c7c83a 	sub	r3,r3,r7
  802a7c:	1011883a 	mov	r8,r2
  802a80:	1804d7fa 	srli	r2,r3,31
  802a84:	52800044 	addi	r10,r10,1
  802a88:	6259883a 	add	r12,r12,r9
  802a8c:	1105883a 	add	r2,r2,r4
  802a90:	18c7883a 	add	r3,r3,r3
  802a94:	2089883a 	add	r4,r4,r2
  802a98:	4812d07a 	srli	r9,r9,1
  802a9c:	53ffed1e 	bne	r10,r15,802a54 <__ieee754_sqrt+0x138>
  802aa0:	20c4b03a 	or	r2,r4,r3
  802aa4:	1000201e 	bne	r2,zero,802b28 <__ieee754_sqrt+0x20c>
  802aa8:	600ed07a 	srli	r7,r12,1
  802aac:	2880004c 	andi	r2,r5,1
  802ab0:	1005003a 	cmpeq	r2,r2,zero
  802ab4:	1000011e 	bne	r2,zero,802abc <__ieee754_sqrt+0x1a0>
  802ab8:	39e00034 	orhi	r7,r7,32768
  802abc:	300dd07a 	srai	r6,r6,1
  802ac0:	280bd07a 	srai	r5,r5,1
  802ac4:	010ff834 	movhi	r4,16352
  802ac8:	300c953a 	slli	r6,r6,20
  802acc:	290b883a 	add	r5,r5,r4
  802ad0:	3821883a 	mov	r16,r7
  802ad4:	299d883a 	add	r14,r5,r6
  802ad8:	7023883a 	mov	r17,r14
  802adc:	8005883a 	mov	r2,r16
  802ae0:	8807883a 	mov	r3,r17
  802ae4:	dfc00217 	ldw	ra,8(sp)
  802ae8:	dc400117 	ldw	r17,4(sp)
  802aec:	dc000017 	ldw	r16,0(sp)
  802af0:	dec00304 	addi	sp,sp,12
  802af4:	f800283a 	ret
  802af8:	5884703a 	and	r2,r11,r2
  802afc:	103fda1e 	bne	r2,zero,802a68 <__ieee754_sqrt+0x14c>
  802b00:	40800044 	addi	r2,r8,1
  802b04:	003fd906 	br	802a6c <__ieee754_sqrt+0x150>
  802b08:	19ffd42e 	bgeu	r3,r7,802a5c <__ieee754_sqrt+0x140>
  802b0c:	2011883a 	mov	r8,r4
  802b10:	003fc906 	br	802a38 <__ieee754_sqrt+0x11c>
  802b14:	4004d7fa 	srli	r2,r8,31
  802b18:	4211883a 	add	r8,r8,r8
  802b1c:	1105883a 	add	r2,r2,r4
  802b20:	2089883a 	add	r4,r4,r2
  802b24:	003fa706 	br	8029c4 <__ieee754_sqrt+0xa8>
  802b28:	00bfffc4 	movi	r2,-1
  802b2c:	60802726 	beq	r12,r2,802bcc <__ieee754_sqrt+0x2b0>
  802b30:	6080004c 	andi	r2,r12,1
  802b34:	6085883a 	add	r2,r12,r2
  802b38:	100ed07a 	srli	r7,r2,1
  802b3c:	003fdb06 	br	802aac <__ieee754_sqrt+0x190>
  802b40:	8009883a 	mov	r4,r16
  802b44:	800d883a 	mov	r6,r16
  802b48:	0803c180 	call	803c18 <__muldf3>
  802b4c:	180f883a 	mov	r7,r3
  802b50:	880b883a 	mov	r5,r17
  802b54:	8009883a 	mov	r4,r16
  802b58:	100d883a 	mov	r6,r2
  802b5c:	0803ba40 	call	803ba4 <__adddf3>
  802b60:	1021883a 	mov	r16,r2
  802b64:	1823883a 	mov	r17,r3
  802b68:	8005883a 	mov	r2,r16
  802b6c:	8807883a 	mov	r3,r17
  802b70:	dfc00217 	ldw	ra,8(sp)
  802b74:	dc400117 	ldw	r17,4(sp)
  802b78:	dc000017 	ldw	r16,0(sp)
  802b7c:	dec00304 	addi	sp,sp,12
  802b80:	f800283a 	ret
  802b84:	00a00034 	movhi	r2,32768
  802b88:	10bfffc4 	addi	r2,r2,-1
  802b8c:	2884703a 	and	r2,r5,r2
  802b90:	8084b03a 	or	r2,r16,r2
  802b94:	103fd126 	beq	r2,zero,802adc <__ieee754_sqrt+0x1c0>
  802b98:	283f6d26 	beq	r5,zero,802950 <__ieee754_sqrt+0x34>
  802b9c:	280f883a 	mov	r7,r5
  802ba0:	8009883a 	mov	r4,r16
  802ba4:	800d883a 	mov	r6,r16
  802ba8:	0803b240 	call	803b24 <__subdf3>
  802bac:	1009883a 	mov	r4,r2
  802bb0:	180b883a 	mov	r5,r3
  802bb4:	100d883a 	mov	r6,r2
  802bb8:	180f883a 	mov	r7,r3
  802bbc:	0803fdc0 	call	803fdc <__divdf3>
  802bc0:	1021883a 	mov	r16,r2
  802bc4:	1823883a 	mov	r17,r3
  802bc8:	003fc406 	br	802adc <__ieee754_sqrt+0x1c0>
  802bcc:	29400044 	addi	r5,r5,1
  802bd0:	000f883a 	mov	r7,zero
  802bd4:	003fb506 	br	802aac <__ieee754_sqrt+0x190>
  802bd8:	0009883a 	mov	r4,zero
  802bdc:	00800804 	movi	r2,32
  802be0:	003f6b06 	br	802990 <__ieee754_sqrt+0x74>

00802be4 <fabs>:
  802be4:	01e00034 	movhi	r7,32768
  802be8:	39ffffc4 	addi	r7,r7,-1
  802bec:	394e703a 	and	r7,r7,r5
  802bf0:	2005883a 	mov	r2,r4
  802bf4:	3807883a 	mov	r3,r7
  802bf8:	f800283a 	ret

00802bfc <finite>:
  802bfc:	00a00034 	movhi	r2,32768
  802c00:	10bfffc4 	addi	r2,r2,-1
  802c04:	2884703a 	and	r2,r5,r2
  802c08:	01600434 	movhi	r5,32784
  802c0c:	1145883a 	add	r2,r2,r5
  802c10:	1004d7fa 	srli	r2,r2,31
  802c14:	f800283a 	ret

00802c18 <__isnand>:
  802c18:	200d883a 	mov	r6,r4
  802c1c:	0109c83a 	sub	r4,zero,r4
  802c20:	2188b03a 	or	r4,r4,r6
  802c24:	2008d7fa 	srli	r4,r4,31
  802c28:	00a00034 	movhi	r2,32768
  802c2c:	10bfffc4 	addi	r2,r2,-1
  802c30:	1144703a 	and	r2,r2,r5
  802c34:	2088b03a 	or	r4,r4,r2
  802c38:	009ffc34 	movhi	r2,32752
  802c3c:	1105c83a 	sub	r2,r2,r4
  802c40:	1004d7fa 	srli	r2,r2,31
  802c44:	f800283a 	ret

00802c48 <matherr>:
  802c48:	0005883a 	mov	r2,zero
  802c4c:	f800283a 	ret

00802c50 <nan>:
  802c50:	015ffe34 	movhi	r5,32760
  802c54:	0005883a 	mov	r2,zero
  802c58:	2807883a 	mov	r3,r5
  802c5c:	f800283a 	ret

00802c60 <rint>:
  802c60:	2015883a 	mov	r10,r4
  802c64:	2809d53a 	srai	r4,r5,20
  802c68:	defff904 	addi	sp,sp,-28
  802c6c:	034004c4 	movi	r13,19
  802c70:	2101ffcc 	andi	r4,r4,2047
  802c74:	227f0044 	addi	r9,r4,-1023
  802c78:	dc800415 	stw	r18,16(sp)
  802c7c:	dfc00615 	stw	ra,24(sp)
  802c80:	dcc00515 	stw	r19,20(sp)
  802c84:	dc400315 	stw	r17,12(sp)
  802c88:	dc000215 	stw	r16,8(sp)
  802c8c:	2817883a 	mov	r11,r5
  802c90:	500d883a 	mov	r6,r10
  802c94:	2824d7fa 	srli	r18,r5,31
  802c98:	6a403016 	blt	r13,r9,802d5c <rint+0xfc>
  802c9c:	48004916 	blt	r9,zero,802dc4 <rint+0x164>
  802ca0:	00800434 	movhi	r2,16
  802ca4:	10bfffc4 	addi	r2,r2,-1
  802ca8:	1247d83a 	sra	r3,r2,r9
  802cac:	2809883a 	mov	r4,r5
  802cb0:	1944703a 	and	r2,r3,r5
  802cb4:	5084b03a 	or	r2,r10,r2
  802cb8:	10001f26 	beq	r2,zero,802d38 <rint+0xd8>
  802cbc:	180ad07a 	srli	r5,r3,1
  802cc0:	5944703a 	and	r2,r11,r5
  802cc4:	5084b03a 	or	r2,r10,r2
  802cc8:	10000626 	beq	r2,zero,802ce4 <rint+0x84>
  802ccc:	4b406626 	beq	r9,r13,802e68 <rint+0x208>
  802cd0:	00c000b4 	movhi	r3,2
  802cd4:	1a47d83a 	sra	r3,r3,r9
  802cd8:	0144303a 	nor	r2,zero,r5
  802cdc:	5884703a 	and	r2,r11,r2
  802ce0:	10c8b03a 	or	r4,r2,r3
  802ce4:	900690fa 	slli	r3,r18,3
  802ce8:	00802074 	movhi	r2,129
  802cec:	10948504 	addi	r2,r2,21012
  802cf0:	200f883a 	mov	r7,r4
  802cf4:	1887883a 	add	r3,r3,r2
  802cf8:	1c000017 	ldw	r16,0(r3)
  802cfc:	1c400117 	ldw	r17,4(r3)
  802d00:	8009883a 	mov	r4,r16
  802d04:	880b883a 	mov	r5,r17
  802d08:	0803ba40 	call	803ba4 <__adddf3>
  802d0c:	d8800015 	stw	r2,0(sp)
  802d10:	d8c00115 	stw	r3,4(sp)
  802d14:	d8800017 	ldw	r2,0(sp)
  802d18:	d8c00117 	ldw	r3,4(sp)
  802d1c:	880f883a 	mov	r7,r17
  802d20:	800d883a 	mov	r6,r16
  802d24:	180b883a 	mov	r5,r3
  802d28:	1009883a 	mov	r4,r2
  802d2c:	0803b240 	call	803b24 <__subdf3>
  802d30:	1015883a 	mov	r10,r2
  802d34:	1817883a 	mov	r11,r3
  802d38:	5005883a 	mov	r2,r10
  802d3c:	5807883a 	mov	r3,r11
  802d40:	dfc00617 	ldw	ra,24(sp)
  802d44:	dcc00517 	ldw	r19,20(sp)
  802d48:	dc800417 	ldw	r18,16(sp)
  802d4c:	dc400317 	ldw	r17,12(sp)
  802d50:	dc000217 	ldw	r16,8(sp)
  802d54:	dec00704 	addi	sp,sp,28
  802d58:	f800283a 	ret
  802d5c:	00800cc4 	movi	r2,51
  802d60:	12400f16 	blt	r2,r9,802da0 <rint+0x140>
  802d64:	213efb44 	addi	r4,r4,-1043
  802d68:	00bfffc4 	movi	r2,-1
  802d6c:	1104d83a 	srl	r2,r2,r4
  802d70:	5086703a 	and	r3,r10,r2
  802d74:	183ff026 	beq	r3,zero,802d38 <rint+0xd8>
  802d78:	100ad07a 	srli	r5,r2,1
  802d7c:	5144703a 	and	r2,r10,r5
  802d80:	10000526 	beq	r2,zero,802d98 <rint+0x138>
  802d84:	00d00034 	movhi	r3,16384
  802d88:	1907d83a 	sra	r3,r3,r4
  802d8c:	0144303a 	nor	r2,zero,r5
  802d90:	5084703a 	and	r2,r10,r2
  802d94:	10ccb03a 	or	r6,r2,r3
  802d98:	5809883a 	mov	r4,r11
  802d9c:	003fd106 	br	802ce4 <rint+0x84>
  802da0:	00810004 	movi	r2,1024
  802da4:	48bfe41e 	bne	r9,r2,802d38 <rint+0xd8>
  802da8:	5009883a 	mov	r4,r10
  802dac:	500d883a 	mov	r6,r10
  802db0:	280f883a 	mov	r7,r5
  802db4:	0803ba40 	call	803ba4 <__adddf3>
  802db8:	1015883a 	mov	r10,r2
  802dbc:	1817883a 	mov	r11,r3
  802dc0:	003fdd06 	br	802d38 <rint+0xd8>
  802dc4:	04e00034 	movhi	r19,32768
  802dc8:	9cffffc4 	addi	r19,r19,-1
  802dcc:	2cc4703a 	and	r2,r5,r19
  802dd0:	5084b03a 	or	r2,r10,r2
  802dd4:	103fd826 	beq	r2,zero,802d38 <rint+0xd8>
  802dd8:	00c00434 	movhi	r3,16
  802ddc:	18ffffc4 	addi	r3,r3,-1
  802de0:	28c6703a 	and	r3,r5,r3
  802de4:	50c6b03a 	or	r3,r10,r3
  802de8:	00cdc83a 	sub	r6,zero,r3
  802dec:	900a90fa 	slli	r5,r18,3
  802df0:	1986b03a 	or	r3,r3,r6
  802df4:	01002074 	movhi	r4,129
  802df8:	21148504 	addi	r4,r4,21012
  802dfc:	1806d33a 	srli	r3,r3,12
  802e00:	290b883a 	add	r5,r5,r4
  802e04:	2c000017 	ldw	r16,0(r5)
  802e08:	2c400117 	ldw	r17,4(r5)
  802e0c:	593fffac 	andhi	r4,r11,65534
  802e10:	18c0022c 	andhi	r3,r3,8
  802e14:	1906b03a 	or	r3,r3,r4
  802e18:	500d883a 	mov	r6,r10
  802e1c:	180f883a 	mov	r7,r3
  802e20:	8009883a 	mov	r4,r16
  802e24:	880b883a 	mov	r5,r17
  802e28:	0803ba40 	call	803ba4 <__adddf3>
  802e2c:	d8800015 	stw	r2,0(sp)
  802e30:	d8c00115 	stw	r3,4(sp)
  802e34:	d8800017 	ldw	r2,0(sp)
  802e38:	d8c00117 	ldw	r3,4(sp)
  802e3c:	880f883a 	mov	r7,r17
  802e40:	800d883a 	mov	r6,r16
  802e44:	180b883a 	mov	r5,r3
  802e48:	1009883a 	mov	r4,r2
  802e4c:	0803b240 	call	803b24 <__subdf3>
  802e50:	901297fa 	slli	r9,r18,31
  802e54:	98d0703a 	and	r8,r19,r3
  802e58:	1015883a 	mov	r10,r2
  802e5c:	4250b03a 	or	r8,r8,r9
  802e60:	4017883a 	mov	r11,r8
  802e64:	003fb406 	br	802d38 <rint+0xd8>
  802e68:	01900034 	movhi	r6,16384
  802e6c:	003f9d06 	br	802ce4 <rint+0x84>

00802e70 <scalbn>:
  802e70:	2011883a 	mov	r8,r4
  802e74:	291ffc2c 	andhi	r4,r5,32752
  802e78:	2009d53a 	srai	r4,r4,20
  802e7c:	defffd04 	addi	sp,sp,-12
  802e80:	dc000015 	stw	r16,0(sp)
  802e84:	dfc00215 	stw	ra,8(sp)
  802e88:	dc400115 	stw	r17,4(sp)
  802e8c:	2813883a 	mov	r9,r5
  802e90:	2815883a 	mov	r10,r5
  802e94:	3021883a 	mov	r16,r6
  802e98:	2000281e 	bne	r4,zero,802f3c <scalbn+0xcc>
  802e9c:	00a00034 	movhi	r2,32768
  802ea0:	10bfffc4 	addi	r2,r2,-1
  802ea4:	2884703a 	and	r2,r5,r2
  802ea8:	4084b03a 	or	r2,r8,r2
  802eac:	10001826 	beq	r2,zero,802f10 <scalbn+0xa0>
  802eb0:	0005883a 	mov	r2,zero
  802eb4:	00d0d434 	movhi	r3,17232
  802eb8:	4009883a 	mov	r4,r8
  802ebc:	100d883a 	mov	r6,r2
  802ec0:	180f883a 	mov	r7,r3
  802ec4:	0803c180 	call	803c18 <__muldf3>
  802ec8:	100b883a 	mov	r5,r2
  802ecc:	1011883a 	mov	r8,r2
  802ed0:	00bffff4 	movhi	r2,65535
  802ed4:	108f2c04 	addi	r2,r2,15536
  802ed8:	180d883a 	mov	r6,r3
  802edc:	1813883a 	mov	r9,r3
  802ee0:	8080120e 	bge	r16,r2,802f2c <scalbn+0xbc>
  802ee4:	00b0be74 	movhi	r2,49913
  802ee8:	10bcd644 	addi	r2,r2,-3239
  802eec:	00c06974 	movhi	r3,421
  802ef0:	18db87c4 	addi	r3,r3,28191
  802ef4:	2809883a 	mov	r4,r5
  802ef8:	180f883a 	mov	r7,r3
  802efc:	300b883a 	mov	r5,r6
  802f00:	100d883a 	mov	r6,r2
  802f04:	0803c180 	call	803c18 <__muldf3>
  802f08:	1011883a 	mov	r8,r2
  802f0c:	1813883a 	mov	r9,r3
  802f10:	4005883a 	mov	r2,r8
  802f14:	4807883a 	mov	r3,r9
  802f18:	dfc00217 	ldw	ra,8(sp)
  802f1c:	dc400117 	ldw	r17,4(sp)
  802f20:	dc000017 	ldw	r16,0(sp)
  802f24:	dec00304 	addi	sp,sp,12
  802f28:	f800283a 	ret
  802f2c:	189ffc2c 	andhi	r2,r3,32752
  802f30:	1005d53a 	srai	r2,r2,20
  802f34:	1815883a 	mov	r10,r3
  802f38:	113ff284 	addi	r4,r2,-54
  802f3c:	0081ffc4 	movi	r2,2047
  802f40:	20801126 	beq	r4,r2,802f88 <scalbn+0x118>
  802f44:	2409883a 	add	r4,r4,r16
  802f48:	0081ff84 	movi	r2,2046
  802f4c:	11001c16 	blt	r2,r4,802fc0 <scalbn+0x150>
  802f50:	0100290e 	bge	zero,r4,802ff8 <scalbn+0x188>
  802f54:	200a953a 	slli	r5,r4,20
  802f58:	01200434 	movhi	r4,32784
  802f5c:	213fffc4 	addi	r4,r4,-1
  802f60:	5108703a 	and	r4,r10,r4
  802f64:	2148b03a 	or	r4,r4,r5
  802f68:	2013883a 	mov	r9,r4
  802f6c:	4005883a 	mov	r2,r8
  802f70:	4807883a 	mov	r3,r9
  802f74:	dfc00217 	ldw	ra,8(sp)
  802f78:	dc400117 	ldw	r17,4(sp)
  802f7c:	dc000017 	ldw	r16,0(sp)
  802f80:	dec00304 	addi	sp,sp,12
  802f84:	f800283a 	ret
  802f88:	480f883a 	mov	r7,r9
  802f8c:	4009883a 	mov	r4,r8
  802f90:	480b883a 	mov	r5,r9
  802f94:	400d883a 	mov	r6,r8
  802f98:	0803ba40 	call	803ba4 <__adddf3>
  802f9c:	1011883a 	mov	r8,r2
  802fa0:	1813883a 	mov	r9,r3
  802fa4:	4005883a 	mov	r2,r8
  802fa8:	4807883a 	mov	r3,r9
  802fac:	dfc00217 	ldw	ra,8(sp)
  802fb0:	dc400117 	ldw	r17,4(sp)
  802fb4:	dc000017 	ldw	r16,0(sp)
  802fb8:	dec00304 	addi	sp,sp,12
  802fbc:	f800283a 	ret
  802fc0:	04220034 	movhi	r16,34816
  802fc4:	841d6704 	addi	r16,r16,30108
  802fc8:	045f8e34 	movhi	r17,32312
  802fcc:	8c790f04 	addi	r17,r17,-7108
  802fd0:	480f883a 	mov	r7,r9
  802fd4:	400d883a 	mov	r6,r8
  802fd8:	8009883a 	mov	r4,r16
  802fdc:	880b883a 	mov	r5,r17
  802fe0:	08030500 	call	803050 <copysign>
  802fe4:	180b883a 	mov	r5,r3
  802fe8:	800d883a 	mov	r6,r16
  802fec:	880f883a 	mov	r7,r17
  802ff0:	1009883a 	mov	r4,r2
  802ff4:	003fc306 	br	802f04 <scalbn+0x94>
  802ff8:	00bff284 	movi	r2,-54
  802ffc:	11000716 	blt	r2,r4,80301c <scalbn+0x1ac>
  803000:	00b0d414 	movui	r2,50000
  803004:	143fee16 	blt	r2,r16,802fc0 <scalbn+0x150>
  803008:	0430be74 	movhi	r16,49913
  80300c:	843cd644 	addi	r16,r16,-3239
  803010:	04406974 	movhi	r17,421
  803014:	8c5b87c4 	addi	r17,r17,28191
  803018:	003fed06 	br	802fd0 <scalbn+0x160>
  80301c:	21000d84 	addi	r4,r4,54
  803020:	2008953a 	slli	r4,r4,20
  803024:	01e00434 	movhi	r7,32784
  803028:	39ffffc4 	addi	r7,r7,-1
  80302c:	51ce703a 	and	r7,r10,r7
  803030:	390eb03a 	or	r7,r7,r4
  803034:	024f2434 	movhi	r9,15504
  803038:	4009883a 	mov	r4,r8
  80303c:	0011883a 	mov	r8,zero
  803040:	380b883a 	mov	r5,r7
  803044:	400d883a 	mov	r6,r8
  803048:	480f883a 	mov	r7,r9
  80304c:	003fad06 	br	802f04 <scalbn+0x94>

00803050 <copysign>:
  803050:	3813883a 	mov	r9,r7
  803054:	01e00034 	movhi	r7,32768
  803058:	39ffffc4 	addi	r7,r7,-1
  80305c:	394e703a 	and	r7,r7,r5
  803060:	4aa0002c 	andhi	r10,r9,32768
  803064:	3a8eb03a 	or	r7,r7,r10
  803068:	2005883a 	mov	r2,r4
  80306c:	3807883a 	mov	r3,r7
  803070:	f800283a 	ret

00803074 <_fpadd_parts>:
  803074:	21c00017 	ldw	r7,0(r4)
  803078:	02000044 	movi	r8,1
  80307c:	41c0332e 	bgeu	r8,r7,80314c <_fpadd_parts+0xd8>
  803080:	28800017 	ldw	r2,0(r5)
  803084:	4080462e 	bgeu	r8,r2,8031a0 <_fpadd_parts+0x12c>
  803088:	00c00104 	movi	r3,4
  80308c:	38c06b26 	beq	r7,r3,80323c <_fpadd_parts+0x1c8>
  803090:	10c04326 	beq	r2,r3,8031a0 <_fpadd_parts+0x12c>
  803094:	00c00084 	movi	r3,2
  803098:	10c02e26 	beq	r2,r3,803154 <_fpadd_parts+0xe0>
  80309c:	38c04026 	beq	r7,r3,8031a0 <_fpadd_parts+0x12c>
  8030a0:	22800217 	ldw	r10,8(r4)
  8030a4:	28c00217 	ldw	r3,8(r5)
  8030a8:	23000317 	ldw	r12,12(r4)
  8030ac:	2a400317 	ldw	r9,12(r5)
  8030b0:	50cfc83a 	sub	r7,r10,r3
  8030b4:	3817883a 	mov	r11,r7
  8030b8:	38004f16 	blt	r7,zero,8031f8 <_fpadd_parts+0x184>
  8030bc:	008007c4 	movi	r2,31
  8030c0:	11c03316 	blt	r2,r7,803190 <_fpadd_parts+0x11c>
  8030c4:	02c0540e 	bge	zero,r11,803218 <_fpadd_parts+0x1a4>
  8030c8:	41c4983a 	sll	r2,r8,r7
  8030cc:	49c6d83a 	srl	r3,r9,r7
  8030d0:	10bfffc4 	addi	r2,r2,-1
  8030d4:	4884703a 	and	r2,r9,r2
  8030d8:	1004c03a 	cmpne	r2,r2,zero
  8030dc:	1892b03a 	or	r9,r3,r2
  8030e0:	20c00117 	ldw	r3,4(r4)
  8030e4:	28800117 	ldw	r2,4(r5)
  8030e8:	18803c26 	beq	r3,r2,8031dc <_fpadd_parts+0x168>
  8030ec:	18002f26 	beq	r3,zero,8031ac <_fpadd_parts+0x138>
  8030f0:	4b05c83a 	sub	r2,r9,r12
  8030f4:	10004216 	blt	r2,zero,803200 <_fpadd_parts+0x18c>
  8030f8:	32800215 	stw	r10,8(r6)
  8030fc:	30800315 	stw	r2,12(r6)
  803100:	30000115 	stw	zero,4(r6)
  803104:	31000317 	ldw	r4,12(r6)
  803108:	01d00034 	movhi	r7,16384
  80310c:	39ffff84 	addi	r7,r7,-2
  803110:	20bfffc4 	addi	r2,r4,-1
  803114:	2007883a 	mov	r3,r4
  803118:	38800836 	bltu	r7,r2,80313c <_fpadd_parts+0xc8>
  80311c:	31400217 	ldw	r5,8(r6)
  803120:	18c9883a 	add	r4,r3,r3
  803124:	20bfffc4 	addi	r2,r4,-1
  803128:	297fffc4 	addi	r5,r5,-1
  80312c:	2007883a 	mov	r3,r4
  803130:	38bffb2e 	bgeu	r7,r2,803120 <_fpadd_parts+0xac>
  803134:	31400215 	stw	r5,8(r6)
  803138:	31000315 	stw	r4,12(r6)
  80313c:	008000c4 	movi	r2,3
  803140:	30800015 	stw	r2,0(r6)
  803144:	20001b16 	blt	r4,zero,8031b4 <_fpadd_parts+0x140>
  803148:	3009883a 	mov	r4,r6
  80314c:	2005883a 	mov	r2,r4
  803150:	f800283a 	ret
  803154:	38fffd1e 	bne	r7,r3,80314c <_fpadd_parts+0xd8>
  803158:	31c00015 	stw	r7,0(r6)
  80315c:	20800117 	ldw	r2,4(r4)
  803160:	30800115 	stw	r2,4(r6)
  803164:	20c00217 	ldw	r3,8(r4)
  803168:	30c00215 	stw	r3,8(r6)
  80316c:	20800317 	ldw	r2,12(r4)
  803170:	30800315 	stw	r2,12(r6)
  803174:	20c00117 	ldw	r3,4(r4)
  803178:	28800117 	ldw	r2,4(r5)
  80317c:	3009883a 	mov	r4,r6
  803180:	1886703a 	and	r3,r3,r2
  803184:	2005883a 	mov	r2,r4
  803188:	30c00115 	stw	r3,4(r6)
  80318c:	f800283a 	ret
  803190:	1a801716 	blt	r3,r10,8031f0 <_fpadd_parts+0x17c>
  803194:	1815883a 	mov	r10,r3
  803198:	0019883a 	mov	r12,zero
  80319c:	003fd006 	br	8030e0 <_fpadd_parts+0x6c>
  8031a0:	2809883a 	mov	r4,r5
  8031a4:	2005883a 	mov	r2,r4
  8031a8:	f800283a 	ret
  8031ac:	6245c83a 	sub	r2,r12,r9
  8031b0:	003fd006 	br	8030f4 <_fpadd_parts+0x80>
  8031b4:	30800217 	ldw	r2,8(r6)
  8031b8:	2006d07a 	srli	r3,r4,1
  8031bc:	2100004c 	andi	r4,r4,1
  8031c0:	10800044 	addi	r2,r2,1
  8031c4:	1906b03a 	or	r3,r3,r4
  8031c8:	3009883a 	mov	r4,r6
  8031cc:	30800215 	stw	r2,8(r6)
  8031d0:	2005883a 	mov	r2,r4
  8031d4:	30c00315 	stw	r3,12(r6)
  8031d8:	f800283a 	ret
  8031dc:	4b09883a 	add	r4,r9,r12
  8031e0:	30c00115 	stw	r3,4(r6)
  8031e4:	32800215 	stw	r10,8(r6)
  8031e8:	31000315 	stw	r4,12(r6)
  8031ec:	003fd306 	br	80313c <_fpadd_parts+0xc8>
  8031f0:	0013883a 	mov	r9,zero
  8031f4:	003fba06 	br	8030e0 <_fpadd_parts+0x6c>
  8031f8:	01cfc83a 	sub	r7,zero,r7
  8031fc:	003faf06 	br	8030bc <_fpadd_parts+0x48>
  803200:	0089c83a 	sub	r4,zero,r2
  803204:	00800044 	movi	r2,1
  803208:	30800115 	stw	r2,4(r6)
  80320c:	32800215 	stw	r10,8(r6)
  803210:	31000315 	stw	r4,12(r6)
  803214:	003fbb06 	br	803104 <_fpadd_parts+0x90>
  803218:	583fb126 	beq	r11,zero,8030e0 <_fpadd_parts+0x6c>
  80321c:	41c4983a 	sll	r2,r8,r7
  803220:	61c6d83a 	srl	r3,r12,r7
  803224:	51d5883a 	add	r10,r10,r7
  803228:	10bfffc4 	addi	r2,r2,-1
  80322c:	6084703a 	and	r2,r12,r2
  803230:	1004c03a 	cmpne	r2,r2,zero
  803234:	1898b03a 	or	r12,r3,r2
  803238:	003fa906 	br	8030e0 <_fpadd_parts+0x6c>
  80323c:	11ffc31e 	bne	r2,r7,80314c <_fpadd_parts+0xd8>
  803240:	28c00117 	ldw	r3,4(r5)
  803244:	20800117 	ldw	r2,4(r4)
  803248:	10ffc026 	beq	r2,r3,80314c <_fpadd_parts+0xd8>
  80324c:	01002074 	movhi	r4,129
  803250:	21148904 	addi	r4,r4,21028
  803254:	003fbd06 	br	80314c <_fpadd_parts+0xd8>

00803258 <__subsf3>:
  803258:	deffef04 	addi	sp,sp,-68
  80325c:	dcc00f15 	stw	r19,60(sp)
  803260:	dcc00204 	addi	r19,sp,8
  803264:	dc400e15 	stw	r17,56(sp)
  803268:	d9000015 	stw	r4,0(sp)
  80326c:	d9400115 	stw	r5,4(sp)
  803270:	d809883a 	mov	r4,sp
  803274:	980b883a 	mov	r5,r19
  803278:	dc400604 	addi	r17,sp,24
  80327c:	dfc01015 	stw	ra,64(sp)
  803280:	08048c00 	call	8048c0 <__unpack_f>
  803284:	d9000104 	addi	r4,sp,4
  803288:	880b883a 	mov	r5,r17
  80328c:	08048c00 	call	8048c0 <__unpack_f>
  803290:	d8800717 	ldw	r2,28(sp)
  803294:	9809883a 	mov	r4,r19
  803298:	880b883a 	mov	r5,r17
  80329c:	d9800a04 	addi	r6,sp,40
  8032a0:	1080005c 	xori	r2,r2,1
  8032a4:	d8800715 	stw	r2,28(sp)
  8032a8:	08030740 	call	803074 <_fpadd_parts>
  8032ac:	1009883a 	mov	r4,r2
  8032b0:	08047600 	call	804760 <__pack_f>
  8032b4:	dfc01017 	ldw	ra,64(sp)
  8032b8:	dcc00f17 	ldw	r19,60(sp)
  8032bc:	dc400e17 	ldw	r17,56(sp)
  8032c0:	dec01104 	addi	sp,sp,68
  8032c4:	f800283a 	ret

008032c8 <__addsf3>:
  8032c8:	deffef04 	addi	sp,sp,-68
  8032cc:	dcc00f15 	stw	r19,60(sp)
  8032d0:	dcc00204 	addi	r19,sp,8
  8032d4:	dc400e15 	stw	r17,56(sp)
  8032d8:	d9000015 	stw	r4,0(sp)
  8032dc:	d9400115 	stw	r5,4(sp)
  8032e0:	d809883a 	mov	r4,sp
  8032e4:	980b883a 	mov	r5,r19
  8032e8:	dc400604 	addi	r17,sp,24
  8032ec:	dfc01015 	stw	ra,64(sp)
  8032f0:	08048c00 	call	8048c0 <__unpack_f>
  8032f4:	d9000104 	addi	r4,sp,4
  8032f8:	880b883a 	mov	r5,r17
  8032fc:	08048c00 	call	8048c0 <__unpack_f>
  803300:	d9800a04 	addi	r6,sp,40
  803304:	9809883a 	mov	r4,r19
  803308:	880b883a 	mov	r5,r17
  80330c:	08030740 	call	803074 <_fpadd_parts>
  803310:	1009883a 	mov	r4,r2
  803314:	08047600 	call	804760 <__pack_f>
  803318:	dfc01017 	ldw	ra,64(sp)
  80331c:	dcc00f17 	ldw	r19,60(sp)
  803320:	dc400e17 	ldw	r17,56(sp)
  803324:	dec01104 	addi	sp,sp,68
  803328:	f800283a 	ret

0080332c <__mulsf3>:
  80332c:	deffef04 	addi	sp,sp,-68
  803330:	dc400f15 	stw	r17,60(sp)
  803334:	dc400204 	addi	r17,sp,8
  803338:	dc000e15 	stw	r16,56(sp)
  80333c:	d9000015 	stw	r4,0(sp)
  803340:	d9400115 	stw	r5,4(sp)
  803344:	d809883a 	mov	r4,sp
  803348:	880b883a 	mov	r5,r17
  80334c:	dc000604 	addi	r16,sp,24
  803350:	dfc01015 	stw	ra,64(sp)
  803354:	08048c00 	call	8048c0 <__unpack_f>
  803358:	d9000104 	addi	r4,sp,4
  80335c:	800b883a 	mov	r5,r16
  803360:	08048c00 	call	8048c0 <__unpack_f>
  803364:	d9000217 	ldw	r4,8(sp)
  803368:	00800044 	movi	r2,1
  80336c:	01400104 	movi	r5,4
  803370:	1100142e 	bgeu	r2,r4,8033c4 <__mulsf3+0x98>
  803374:	d8c00617 	ldw	r3,24(sp)
  803378:	10c0052e 	bgeu	r2,r3,803390 <__mulsf3+0x64>
  80337c:	21400f26 	beq	r4,r5,8033bc <__mulsf3+0x90>
  803380:	19405d26 	beq	r3,r5,8034f8 <__mulsf3+0x1cc>
  803384:	00800084 	movi	r2,2
  803388:	20800e26 	beq	r4,r2,8033c4 <__mulsf3+0x98>
  80338c:	1880181e 	bne	r3,r2,8033f0 <__mulsf3+0xc4>
  803390:	d8c00717 	ldw	r3,28(sp)
  803394:	d8800317 	ldw	r2,12(sp)
  803398:	8009883a 	mov	r4,r16
  80339c:	10c4c03a 	cmpne	r2,r2,r3
  8033a0:	d8800715 	stw	r2,28(sp)
  8033a4:	08047600 	call	804760 <__pack_f>
  8033a8:	dfc01017 	ldw	ra,64(sp)
  8033ac:	dc400f17 	ldw	r17,60(sp)
  8033b0:	dc000e17 	ldw	r16,56(sp)
  8033b4:	dec01104 	addi	sp,sp,68
  8033b8:	f800283a 	ret
  8033bc:	00800084 	movi	r2,2
  8033c0:	18804f26 	beq	r3,r2,803500 <__mulsf3+0x1d4>
  8033c4:	d8800317 	ldw	r2,12(sp)
  8033c8:	d8c00717 	ldw	r3,28(sp)
  8033cc:	8809883a 	mov	r4,r17
  8033d0:	10c4c03a 	cmpne	r2,r2,r3
  8033d4:	d8800315 	stw	r2,12(sp)
  8033d8:	08047600 	call	804760 <__pack_f>
  8033dc:	dfc01017 	ldw	ra,64(sp)
  8033e0:	dc400f17 	ldw	r17,60(sp)
  8033e4:	dc000e17 	ldw	r16,56(sp)
  8033e8:	dec01104 	addi	sp,sp,68
  8033ec:	f800283a 	ret
  8033f0:	d8800517 	ldw	r2,20(sp)
  8033f4:	da000917 	ldw	r8,36(sp)
  8033f8:	0013883a 	mov	r9,zero
  8033fc:	0007883a 	mov	r3,zero
  803400:	480f883a 	mov	r7,r9
  803404:	180b883a 	mov	r5,r3
  803408:	400d883a 	mov	r6,r8
  80340c:	1009883a 	mov	r4,r2
  803410:	08046480 	call	804648 <__muldi3>
  803414:	da800417 	ldw	r10,16(sp)
  803418:	d9800817 	ldw	r6,32(sp)
  80341c:	da400317 	ldw	r9,12(sp)
  803420:	52800084 	addi	r10,r10,2
  803424:	3295883a 	add	r10,r6,r10
  803428:	d9800717 	ldw	r6,28(sp)
  80342c:	180b883a 	mov	r5,r3
  803430:	180f883a 	mov	r7,r3
  803434:	4992c03a 	cmpne	r9,r9,r6
  803438:	da400b15 	stw	r9,44(sp)
  80343c:	1007883a 	mov	r3,r2
  803440:	da800c15 	stw	r10,48(sp)
  803444:	2800070e 	bge	r5,zero,803464 <__mulsf3+0x138>
  803448:	2880004c 	andi	r2,r5,1
  80344c:	1005003a 	cmpeq	r2,r2,zero
  803450:	500d883a 	mov	r6,r10
  803454:	10001e26 	beq	r2,zero,8034d0 <__mulsf3+0x1a4>
  803458:	380ed07a 	srli	r7,r7,1
  80345c:	31800044 	addi	r6,r6,1
  803460:	d9800c15 	stw	r6,48(sp)
  803464:	01100034 	movhi	r4,16384
  803468:	213fffc4 	addi	r4,r4,-1
  80346c:	21c00b36 	bltu	r4,r7,80349c <__mulsf3+0x170>
  803470:	d8800c17 	ldw	r2,48(sp)
  803474:	00000206 	br	803480 <__mulsf3+0x154>
  803478:	18c7883a 	add	r3,r3,r3
  80347c:	21c00636 	bltu	r4,r7,803498 <__mulsf3+0x16c>
  803480:	10bfffc4 	addi	r2,r2,-1
  803484:	39cf883a 	add	r7,r7,r7
  803488:	183ffb0e 	bge	r3,zero,803478 <__mulsf3+0x14c>
  80348c:	39c00054 	ori	r7,r7,1
  803490:	18c7883a 	add	r3,r3,r3
  803494:	21fffa2e 	bgeu	r4,r7,803480 <__mulsf3+0x154>
  803498:	d8800c15 	stw	r2,48(sp)
  80349c:	39001fcc 	andi	r4,r7,127
  8034a0:	00801004 	movi	r2,64
  8034a4:	20800d26 	beq	r4,r2,8034dc <__mulsf3+0x1b0>
  8034a8:	008000c4 	movi	r2,3
  8034ac:	d9000a04 	addi	r4,sp,40
  8034b0:	d9c00d15 	stw	r7,52(sp)
  8034b4:	d8800a15 	stw	r2,40(sp)
  8034b8:	08047600 	call	804760 <__pack_f>
  8034bc:	dfc01017 	ldw	ra,64(sp)
  8034c0:	dc400f17 	ldw	r17,60(sp)
  8034c4:	dc000e17 	ldw	r16,56(sp)
  8034c8:	dec01104 	addi	sp,sp,68
  8034cc:	f800283a 	ret
  8034d0:	1804d07a 	srli	r2,r3,1
  8034d4:	10e00034 	orhi	r3,r2,32768
  8034d8:	003fdf06 	br	803458 <__mulsf3+0x12c>
  8034dc:	3880200c 	andi	r2,r7,128
  8034e0:	103ff11e 	bne	r2,zero,8034a8 <__mulsf3+0x17c>
  8034e4:	183ff026 	beq	r3,zero,8034a8 <__mulsf3+0x17c>
  8034e8:	3907883a 	add	r3,r7,r4
  8034ec:	00bfe004 	movi	r2,-128
  8034f0:	188e703a 	and	r7,r3,r2
  8034f4:	003fec06 	br	8034a8 <__mulsf3+0x17c>
  8034f8:	00800084 	movi	r2,2
  8034fc:	20bfa41e 	bne	r4,r2,803390 <__mulsf3+0x64>
  803500:	01002074 	movhi	r4,129
  803504:	21148904 	addi	r4,r4,21028
  803508:	003fb306 	br	8033d8 <__mulsf3+0xac>

0080350c <__divsf3>:
  80350c:	defff304 	addi	sp,sp,-52
  803510:	dc400b15 	stw	r17,44(sp)
  803514:	dc400204 	addi	r17,sp,8
  803518:	dc000a15 	stw	r16,40(sp)
  80351c:	d9000015 	stw	r4,0(sp)
  803520:	d9400115 	stw	r5,4(sp)
  803524:	d809883a 	mov	r4,sp
  803528:	880b883a 	mov	r5,r17
  80352c:	dc000604 	addi	r16,sp,24
  803530:	dfc00c15 	stw	ra,48(sp)
  803534:	08048c00 	call	8048c0 <__unpack_f>
  803538:	d9000104 	addi	r4,sp,4
  80353c:	800b883a 	mov	r5,r16
  803540:	08048c00 	call	8048c0 <__unpack_f>
  803544:	d9000217 	ldw	r4,8(sp)
  803548:	00800044 	movi	r2,1
  80354c:	01800104 	movi	r6,4
  803550:	11000a2e 	bgeu	r2,r4,80357c <__divsf3+0x70>
  803554:	d9400617 	ldw	r5,24(sp)
  803558:	1140432e 	bgeu	r2,r5,803668 <__divsf3+0x15c>
  80355c:	d8800317 	ldw	r2,12(sp)
  803560:	d8c00717 	ldw	r3,28(sp)
  803564:	10c4f03a 	xor	r2,r2,r3
  803568:	d8800315 	stw	r2,12(sp)
  80356c:	21800226 	beq	r4,r6,803578 <__divsf3+0x6c>
  803570:	00800084 	movi	r2,2
  803574:	2080101e 	bne	r4,r2,8035b8 <__divsf3+0xac>
  803578:	29000726 	beq	r5,r4,803598 <__divsf3+0x8c>
  80357c:	8809883a 	mov	r4,r17
  803580:	08047600 	call	804760 <__pack_f>
  803584:	dfc00c17 	ldw	ra,48(sp)
  803588:	dc400b17 	ldw	r17,44(sp)
  80358c:	dc000a17 	ldw	r16,40(sp)
  803590:	dec00d04 	addi	sp,sp,52
  803594:	f800283a 	ret
  803598:	01002074 	movhi	r4,129
  80359c:	21148904 	addi	r4,r4,21028
  8035a0:	08047600 	call	804760 <__pack_f>
  8035a4:	dfc00c17 	ldw	ra,48(sp)
  8035a8:	dc400b17 	ldw	r17,44(sp)
  8035ac:	dc000a17 	ldw	r16,40(sp)
  8035b0:	dec00d04 	addi	sp,sp,52
  8035b4:	f800283a 	ret
  8035b8:	29802d26 	beq	r5,r6,803670 <__divsf3+0x164>
  8035bc:	28801a26 	beq	r5,r2,803628 <__divsf3+0x11c>
  8035c0:	d8c00417 	ldw	r3,16(sp)
  8035c4:	d8800817 	ldw	r2,32(sp)
  8035c8:	d9000517 	ldw	r4,20(sp)
  8035cc:	d9800917 	ldw	r6,36(sp)
  8035d0:	1885c83a 	sub	r2,r3,r2
  8035d4:	d8800415 	stw	r2,16(sp)
  8035d8:	2180032e 	bgeu	r4,r6,8035e8 <__divsf3+0xdc>
  8035dc:	10bfffc4 	addi	r2,r2,-1
  8035e0:	d8800415 	stw	r2,16(sp)
  8035e4:	2109883a 	add	r4,r4,r4
  8035e8:	01500034 	movhi	r5,16384
  8035ec:	0007883a 	mov	r3,zero
  8035f0:	0005883a 	mov	r2,zero
  8035f4:	01c007c4 	movi	r7,31
  8035f8:	10800044 	addi	r2,r2,1
  8035fc:	21800236 	bltu	r4,r6,803608 <__divsf3+0xfc>
  803600:	1946b03a 	or	r3,r3,r5
  803604:	2189c83a 	sub	r4,r4,r6
  803608:	280ad07a 	srli	r5,r5,1
  80360c:	2109883a 	add	r4,r4,r4
  803610:	11fff91e 	bne	r2,r7,8035f8 <__divsf3+0xec>
  803614:	19401fcc 	andi	r5,r3,127
  803618:	00801004 	movi	r2,64
  80361c:	28800a26 	beq	r5,r2,803648 <__divsf3+0x13c>
  803620:	d8c00515 	stw	r3,20(sp)
  803624:	003fd506 	br	80357c <__divsf3+0x70>
  803628:	8809883a 	mov	r4,r17
  80362c:	d9800215 	stw	r6,8(sp)
  803630:	08047600 	call	804760 <__pack_f>
  803634:	dfc00c17 	ldw	ra,48(sp)
  803638:	dc400b17 	ldw	r17,44(sp)
  80363c:	dc000a17 	ldw	r16,40(sp)
  803640:	dec00d04 	addi	sp,sp,52
  803644:	f800283a 	ret
  803648:	1880200c 	andi	r2,r3,128
  80364c:	103ff41e 	bne	r2,zero,803620 <__divsf3+0x114>
  803650:	203ff326 	beq	r4,zero,803620 <__divsf3+0x114>
  803654:	1947883a 	add	r3,r3,r5
  803658:	00bfe004 	movi	r2,-128
  80365c:	1886703a 	and	r3,r3,r2
  803660:	d8c00515 	stw	r3,20(sp)
  803664:	003fc506 	br	80357c <__divsf3+0x70>
  803668:	8009883a 	mov	r4,r16
  80366c:	003fc406 	br	803580 <__divsf3+0x74>
  803670:	8809883a 	mov	r4,r17
  803674:	d8000515 	stw	zero,20(sp)
  803678:	d8000415 	stw	zero,16(sp)
  80367c:	003fc006 	br	803580 <__divsf3+0x74>

00803680 <__fixsfsi>:
  803680:	defffa04 	addi	sp,sp,-24
  803684:	d9000015 	stw	r4,0(sp)
  803688:	d9400104 	addi	r5,sp,4
  80368c:	d809883a 	mov	r4,sp
  803690:	dfc00515 	stw	ra,20(sp)
  803694:	08048c00 	call	8048c0 <__unpack_f>
  803698:	d8c00117 	ldw	r3,4(sp)
  80369c:	00800084 	movi	r2,2
  8036a0:	1880041e 	bne	r3,r2,8036b4 <__fixsfsi+0x34>
  8036a4:	0005883a 	mov	r2,zero
  8036a8:	dfc00517 	ldw	ra,20(sp)
  8036ac:	dec00604 	addi	sp,sp,24
  8036b0:	f800283a 	ret
  8036b4:	00800044 	movi	r2,1
  8036b8:	10fffa2e 	bgeu	r2,r3,8036a4 <__fixsfsi+0x24>
  8036bc:	00800104 	movi	r2,4
  8036c0:	18800426 	beq	r3,r2,8036d4 <__fixsfsi+0x54>
  8036c4:	d8800317 	ldw	r2,12(sp)
  8036c8:	103ff616 	blt	r2,zero,8036a4 <__fixsfsi+0x24>
  8036cc:	00c00784 	movi	r3,30
  8036d0:	1880070e 	bge	r3,r2,8036f0 <__fixsfsi+0x70>
  8036d4:	d8800217 	ldw	r2,8(sp)
  8036d8:	10000c1e 	bne	r2,zero,80370c <__fixsfsi+0x8c>
  8036dc:	00a00034 	movhi	r2,32768
  8036e0:	10bfffc4 	addi	r2,r2,-1
  8036e4:	dfc00517 	ldw	ra,20(sp)
  8036e8:	dec00604 	addi	sp,sp,24
  8036ec:	f800283a 	ret
  8036f0:	1885c83a 	sub	r2,r3,r2
  8036f4:	d9000217 	ldw	r4,8(sp)
  8036f8:	d8c00417 	ldw	r3,16(sp)
  8036fc:	1884d83a 	srl	r2,r3,r2
  803700:	203fe926 	beq	r4,zero,8036a8 <__fixsfsi+0x28>
  803704:	0085c83a 	sub	r2,zero,r2
  803708:	003fe706 	br	8036a8 <__fixsfsi+0x28>
  80370c:	00a00034 	movhi	r2,32768
  803710:	003fe506 	br	8036a8 <__fixsfsi+0x28>

00803714 <_fpadd_parts>:
  803714:	defff804 	addi	sp,sp,-32
  803718:	dcc00315 	stw	r19,12(sp)
  80371c:	2027883a 	mov	r19,r4
  803720:	21000017 	ldw	r4,0(r4)
  803724:	00c00044 	movi	r3,1
  803728:	dd400515 	stw	r21,20(sp)
  80372c:	dd000415 	stw	r20,16(sp)
  803730:	ddc00715 	stw	r23,28(sp)
  803734:	dd800615 	stw	r22,24(sp)
  803738:	dc800215 	stw	r18,8(sp)
  80373c:	dc400115 	stw	r17,4(sp)
  803740:	dc000015 	stw	r16,0(sp)
  803744:	282b883a 	mov	r21,r5
  803748:	3029883a 	mov	r20,r6
  80374c:	1900632e 	bgeu	r3,r4,8038dc <_fpadd_parts+0x1c8>
  803750:	28800017 	ldw	r2,0(r5)
  803754:	1880812e 	bgeu	r3,r2,80395c <_fpadd_parts+0x248>
  803758:	00c00104 	movi	r3,4
  80375c:	20c0dc26 	beq	r4,r3,803ad0 <_fpadd_parts+0x3bc>
  803760:	10c07e26 	beq	r2,r3,80395c <_fpadd_parts+0x248>
  803764:	00c00084 	movi	r3,2
  803768:	10c06726 	beq	r2,r3,803908 <_fpadd_parts+0x1f4>
  80376c:	20c07b26 	beq	r4,r3,80395c <_fpadd_parts+0x248>
  803770:	9dc00217 	ldw	r23,8(r19)
  803774:	28c00217 	ldw	r3,8(r5)
  803778:	9c400317 	ldw	r17,12(r19)
  80377c:	2bc00317 	ldw	r15,12(r5)
  803780:	b8cdc83a 	sub	r6,r23,r3
  803784:	9c800417 	ldw	r18,16(r19)
  803788:	2c000417 	ldw	r16,16(r5)
  80378c:	3009883a 	mov	r4,r6
  803790:	30009716 	blt	r6,zero,8039f0 <_fpadd_parts+0x2dc>
  803794:	00800fc4 	movi	r2,63
  803798:	11806b16 	blt	r2,r6,803948 <_fpadd_parts+0x234>
  80379c:	0100a40e 	bge	zero,r4,803a30 <_fpadd_parts+0x31c>
  8037a0:	35bff804 	addi	r22,r6,-32
  8037a4:	b000bc16 	blt	r22,zero,803a98 <_fpadd_parts+0x384>
  8037a8:	8596d83a 	srl	r11,r16,r22
  8037ac:	0019883a 	mov	r12,zero
  8037b0:	0013883a 	mov	r9,zero
  8037b4:	01000044 	movi	r4,1
  8037b8:	0015883a 	mov	r10,zero
  8037bc:	b000be16 	blt	r22,zero,803ab8 <_fpadd_parts+0x3a4>
  8037c0:	2590983a 	sll	r8,r4,r22
  8037c4:	000f883a 	mov	r7,zero
  8037c8:	00bfffc4 	movi	r2,-1
  8037cc:	3889883a 	add	r4,r7,r2
  8037d0:	408b883a 	add	r5,r8,r2
  8037d4:	21cd803a 	cmpltu	r6,r4,r7
  8037d8:	314b883a 	add	r5,r6,r5
  8037dc:	7904703a 	and	r2,r15,r4
  8037e0:	8146703a 	and	r3,r16,r5
  8037e4:	10c4b03a 	or	r2,r2,r3
  8037e8:	10000226 	beq	r2,zero,8037f4 <_fpadd_parts+0xe0>
  8037ec:	02400044 	movi	r9,1
  8037f0:	0015883a 	mov	r10,zero
  8037f4:	5a5eb03a 	or	r15,r11,r9
  8037f8:	62a0b03a 	or	r16,r12,r10
  8037fc:	99400117 	ldw	r5,4(r19)
  803800:	a8800117 	ldw	r2,4(r21)
  803804:	28806e26 	beq	r5,r2,8039c0 <_fpadd_parts+0x2ac>
  803808:	28006626 	beq	r5,zero,8039a4 <_fpadd_parts+0x290>
  80380c:	7c45c83a 	sub	r2,r15,r17
  803810:	7889803a 	cmpltu	r4,r15,r2
  803814:	8487c83a 	sub	r3,r16,r18
  803818:	1909c83a 	sub	r4,r3,r4
  80381c:	100d883a 	mov	r6,r2
  803820:	200f883a 	mov	r7,r4
  803824:	38007716 	blt	r7,zero,803a04 <_fpadd_parts+0x2f0>
  803828:	a5c00215 	stw	r23,8(r20)
  80382c:	a1c00415 	stw	r7,16(r20)
  803830:	a0000115 	stw	zero,4(r20)
  803834:	a1800315 	stw	r6,12(r20)
  803838:	a2000317 	ldw	r8,12(r20)
  80383c:	a2400417 	ldw	r9,16(r20)
  803840:	00bfffc4 	movi	r2,-1
  803844:	408b883a 	add	r5,r8,r2
  803848:	2a09803a 	cmpltu	r4,r5,r8
  80384c:	488d883a 	add	r6,r9,r2
  803850:	01c40034 	movhi	r7,4096
  803854:	39ffffc4 	addi	r7,r7,-1
  803858:	218d883a 	add	r6,r4,r6
  80385c:	39801736 	bltu	r7,r6,8038bc <_fpadd_parts+0x1a8>
  803860:	31c06526 	beq	r6,r7,8039f8 <_fpadd_parts+0x2e4>
  803864:	a3000217 	ldw	r12,8(r20)
  803868:	4209883a 	add	r4,r8,r8
  80386c:	00bfffc4 	movi	r2,-1
  803870:	220f803a 	cmpltu	r7,r4,r8
  803874:	4a4b883a 	add	r5,r9,r9
  803878:	394f883a 	add	r7,r7,r5
  80387c:	2095883a 	add	r10,r4,r2
  803880:	3897883a 	add	r11,r7,r2
  803884:	510d803a 	cmpltu	r6,r10,r4
  803888:	6099883a 	add	r12,r12,r2
  80388c:	32d7883a 	add	r11,r6,r11
  803890:	00840034 	movhi	r2,4096
  803894:	10bfffc4 	addi	r2,r2,-1
  803898:	2011883a 	mov	r8,r4
  80389c:	3813883a 	mov	r9,r7
  8038a0:	a1000315 	stw	r4,12(r20)
  8038a4:	a1c00415 	stw	r7,16(r20)
  8038a8:	a3000215 	stw	r12,8(r20)
  8038ac:	12c00336 	bltu	r2,r11,8038bc <_fpadd_parts+0x1a8>
  8038b0:	58bfed1e 	bne	r11,r2,803868 <_fpadd_parts+0x154>
  8038b4:	00bfff84 	movi	r2,-2
  8038b8:	12bfeb2e 	bgeu	r2,r10,803868 <_fpadd_parts+0x154>
  8038bc:	a2800417 	ldw	r10,16(r20)
  8038c0:	008000c4 	movi	r2,3
  8038c4:	00c80034 	movhi	r3,8192
  8038c8:	18ffffc4 	addi	r3,r3,-1
  8038cc:	a2400317 	ldw	r9,12(r20)
  8038d0:	a0800015 	stw	r2,0(r20)
  8038d4:	1a802336 	bltu	r3,r10,803964 <_fpadd_parts+0x250>
  8038d8:	a027883a 	mov	r19,r20
  8038dc:	9805883a 	mov	r2,r19
  8038e0:	ddc00717 	ldw	r23,28(sp)
  8038e4:	dd800617 	ldw	r22,24(sp)
  8038e8:	dd400517 	ldw	r21,20(sp)
  8038ec:	dd000417 	ldw	r20,16(sp)
  8038f0:	dcc00317 	ldw	r19,12(sp)
  8038f4:	dc800217 	ldw	r18,8(sp)
  8038f8:	dc400117 	ldw	r17,4(sp)
  8038fc:	dc000017 	ldw	r16,0(sp)
  803900:	dec00804 	addi	sp,sp,32
  803904:	f800283a 	ret
  803908:	20fff41e 	bne	r4,r3,8038dc <_fpadd_parts+0x1c8>
  80390c:	31000015 	stw	r4,0(r6)
  803910:	98800117 	ldw	r2,4(r19)
  803914:	30800115 	stw	r2,4(r6)
  803918:	98c00217 	ldw	r3,8(r19)
  80391c:	30c00215 	stw	r3,8(r6)
  803920:	98800317 	ldw	r2,12(r19)
  803924:	30800315 	stw	r2,12(r6)
  803928:	98c00417 	ldw	r3,16(r19)
  80392c:	30c00415 	stw	r3,16(r6)
  803930:	98800117 	ldw	r2,4(r19)
  803934:	28c00117 	ldw	r3,4(r5)
  803938:	3027883a 	mov	r19,r6
  80393c:	10c4703a 	and	r2,r2,r3
  803940:	30800115 	stw	r2,4(r6)
  803944:	003fe506 	br	8038dc <_fpadd_parts+0x1c8>
  803948:	1dc02616 	blt	r3,r23,8039e4 <_fpadd_parts+0x2d0>
  80394c:	0023883a 	mov	r17,zero
  803950:	182f883a 	mov	r23,r3
  803954:	0025883a 	mov	r18,zero
  803958:	003fa806 	br	8037fc <_fpadd_parts+0xe8>
  80395c:	a827883a 	mov	r19,r21
  803960:	003fde06 	br	8038dc <_fpadd_parts+0x1c8>
  803964:	01800044 	movi	r6,1
  803968:	500497fa 	slli	r2,r10,31
  80396c:	4808d07a 	srli	r4,r9,1
  803970:	518ad83a 	srl	r5,r10,r6
  803974:	a2000217 	ldw	r8,8(r20)
  803978:	1108b03a 	or	r4,r2,r4
  80397c:	0007883a 	mov	r3,zero
  803980:	4984703a 	and	r2,r9,r6
  803984:	208cb03a 	or	r6,r4,r2
  803988:	28ceb03a 	or	r7,r5,r3
  80398c:	42000044 	addi	r8,r8,1
  803990:	a027883a 	mov	r19,r20
  803994:	a1c00415 	stw	r7,16(r20)
  803998:	a2000215 	stw	r8,8(r20)
  80399c:	a1800315 	stw	r6,12(r20)
  8039a0:	003fce06 	br	8038dc <_fpadd_parts+0x1c8>
  8039a4:	8bc5c83a 	sub	r2,r17,r15
  8039a8:	8889803a 	cmpltu	r4,r17,r2
  8039ac:	9407c83a 	sub	r3,r18,r16
  8039b0:	1909c83a 	sub	r4,r3,r4
  8039b4:	100d883a 	mov	r6,r2
  8039b8:	200f883a 	mov	r7,r4
  8039bc:	003f9906 	br	803824 <_fpadd_parts+0x110>
  8039c0:	7c45883a 	add	r2,r15,r17
  8039c4:	13c9803a 	cmpltu	r4,r2,r15
  8039c8:	8487883a 	add	r3,r16,r18
  8039cc:	20c9883a 	add	r4,r4,r3
  8039d0:	a1400115 	stw	r5,4(r20)
  8039d4:	a5c00215 	stw	r23,8(r20)
  8039d8:	a0800315 	stw	r2,12(r20)
  8039dc:	a1000415 	stw	r4,16(r20)
  8039e0:	003fb606 	br	8038bc <_fpadd_parts+0x1a8>
  8039e4:	001f883a 	mov	r15,zero
  8039e8:	0021883a 	mov	r16,zero
  8039ec:	003f8306 	br	8037fc <_fpadd_parts+0xe8>
  8039f0:	018dc83a 	sub	r6,zero,r6
  8039f4:	003f6706 	br	803794 <_fpadd_parts+0x80>
  8039f8:	00bfff84 	movi	r2,-2
  8039fc:	117faf36 	bltu	r2,r5,8038bc <_fpadd_parts+0x1a8>
  803a00:	003f9806 	br	803864 <_fpadd_parts+0x150>
  803a04:	0005883a 	mov	r2,zero
  803a08:	1189c83a 	sub	r4,r2,r6
  803a0c:	1105803a 	cmpltu	r2,r2,r4
  803a10:	01cbc83a 	sub	r5,zero,r7
  803a14:	2885c83a 	sub	r2,r5,r2
  803a18:	01800044 	movi	r6,1
  803a1c:	a1800115 	stw	r6,4(r20)
  803a20:	a5c00215 	stw	r23,8(r20)
  803a24:	a1000315 	stw	r4,12(r20)
  803a28:	a0800415 	stw	r2,16(r20)
  803a2c:	003f8206 	br	803838 <_fpadd_parts+0x124>
  803a30:	203f7226 	beq	r4,zero,8037fc <_fpadd_parts+0xe8>
  803a34:	35bff804 	addi	r22,r6,-32
  803a38:	b9af883a 	add	r23,r23,r6
  803a3c:	b0003116 	blt	r22,zero,803b04 <_fpadd_parts+0x3f0>
  803a40:	959ad83a 	srl	r13,r18,r22
  803a44:	001d883a 	mov	r14,zero
  803a48:	000f883a 	mov	r7,zero
  803a4c:	01000044 	movi	r4,1
  803a50:	0011883a 	mov	r8,zero
  803a54:	b0002516 	blt	r22,zero,803aec <_fpadd_parts+0x3d8>
  803a58:	2594983a 	sll	r10,r4,r22
  803a5c:	0013883a 	mov	r9,zero
  803a60:	00bfffc4 	movi	r2,-1
  803a64:	4889883a 	add	r4,r9,r2
  803a68:	508b883a 	add	r5,r10,r2
  803a6c:	224d803a 	cmpltu	r6,r4,r9
  803a70:	314b883a 	add	r5,r6,r5
  803a74:	8904703a 	and	r2,r17,r4
  803a78:	9146703a 	and	r3,r18,r5
  803a7c:	10c4b03a 	or	r2,r2,r3
  803a80:	10000226 	beq	r2,zero,803a8c <_fpadd_parts+0x378>
  803a84:	01c00044 	movi	r7,1
  803a88:	0011883a 	mov	r8,zero
  803a8c:	69e2b03a 	or	r17,r13,r7
  803a90:	7224b03a 	or	r18,r14,r8
  803a94:	003f5906 	br	8037fc <_fpadd_parts+0xe8>
  803a98:	8407883a 	add	r3,r16,r16
  803a9c:	008007c4 	movi	r2,31
  803aa0:	1185c83a 	sub	r2,r2,r6
  803aa4:	1886983a 	sll	r3,r3,r2
  803aa8:	7996d83a 	srl	r11,r15,r6
  803aac:	8198d83a 	srl	r12,r16,r6
  803ab0:	1ad6b03a 	or	r11,r3,r11
  803ab4:	003f3e06 	br	8037b0 <_fpadd_parts+0x9c>
  803ab8:	2006d07a 	srli	r3,r4,1
  803abc:	008007c4 	movi	r2,31
  803ac0:	1185c83a 	sub	r2,r2,r6
  803ac4:	1890d83a 	srl	r8,r3,r2
  803ac8:	218e983a 	sll	r7,r4,r6
  803acc:	003f3e06 	br	8037c8 <_fpadd_parts+0xb4>
  803ad0:	113f821e 	bne	r2,r4,8038dc <_fpadd_parts+0x1c8>
  803ad4:	28c00117 	ldw	r3,4(r5)
  803ad8:	98800117 	ldw	r2,4(r19)
  803adc:	10ff7f26 	beq	r2,r3,8038dc <_fpadd_parts+0x1c8>
  803ae0:	04c02074 	movhi	r19,129
  803ae4:	9cd48d04 	addi	r19,r19,21044
  803ae8:	003f7c06 	br	8038dc <_fpadd_parts+0x1c8>
  803aec:	2006d07a 	srli	r3,r4,1
  803af0:	008007c4 	movi	r2,31
  803af4:	1185c83a 	sub	r2,r2,r6
  803af8:	1894d83a 	srl	r10,r3,r2
  803afc:	2192983a 	sll	r9,r4,r6
  803b00:	003fd706 	br	803a60 <_fpadd_parts+0x34c>
  803b04:	9487883a 	add	r3,r18,r18
  803b08:	008007c4 	movi	r2,31
  803b0c:	1185c83a 	sub	r2,r2,r6
  803b10:	1886983a 	sll	r3,r3,r2
  803b14:	899ad83a 	srl	r13,r17,r6
  803b18:	919cd83a 	srl	r14,r18,r6
  803b1c:	1b5ab03a 	or	r13,r3,r13
  803b20:	003fc906 	br	803a48 <_fpadd_parts+0x334>

00803b24 <__subdf3>:
  803b24:	deffea04 	addi	sp,sp,-88
  803b28:	dcc01415 	stw	r19,80(sp)
  803b2c:	dcc00404 	addi	r19,sp,16
  803b30:	2011883a 	mov	r8,r4
  803b34:	2813883a 	mov	r9,r5
  803b38:	dc401315 	stw	r17,76(sp)
  803b3c:	d809883a 	mov	r4,sp
  803b40:	980b883a 	mov	r5,r19
  803b44:	dc400904 	addi	r17,sp,36
  803b48:	dfc01515 	stw	ra,84(sp)
  803b4c:	da400115 	stw	r9,4(sp)
  803b50:	d9c00315 	stw	r7,12(sp)
  803b54:	da000015 	stw	r8,0(sp)
  803b58:	d9800215 	stw	r6,8(sp)
  803b5c:	0804cc80 	call	804cc8 <__unpack_d>
  803b60:	d9000204 	addi	r4,sp,8
  803b64:	880b883a 	mov	r5,r17
  803b68:	0804cc80 	call	804cc8 <__unpack_d>
  803b6c:	d8800a17 	ldw	r2,40(sp)
  803b70:	880b883a 	mov	r5,r17
  803b74:	9809883a 	mov	r4,r19
  803b78:	d9800e04 	addi	r6,sp,56
  803b7c:	1080005c 	xori	r2,r2,1
  803b80:	d8800a15 	stw	r2,40(sp)
  803b84:	08037140 	call	803714 <_fpadd_parts>
  803b88:	1009883a 	mov	r4,r2
  803b8c:	08049b40 	call	8049b4 <__pack_d>
  803b90:	dfc01517 	ldw	ra,84(sp)
  803b94:	dcc01417 	ldw	r19,80(sp)
  803b98:	dc401317 	ldw	r17,76(sp)
  803b9c:	dec01604 	addi	sp,sp,88
  803ba0:	f800283a 	ret

00803ba4 <__adddf3>:
  803ba4:	deffea04 	addi	sp,sp,-88
  803ba8:	dcc01415 	stw	r19,80(sp)
  803bac:	dcc00404 	addi	r19,sp,16
  803bb0:	2011883a 	mov	r8,r4
  803bb4:	2813883a 	mov	r9,r5
  803bb8:	dc401315 	stw	r17,76(sp)
  803bbc:	d809883a 	mov	r4,sp
  803bc0:	980b883a 	mov	r5,r19
  803bc4:	dc400904 	addi	r17,sp,36
  803bc8:	dfc01515 	stw	ra,84(sp)
  803bcc:	da400115 	stw	r9,4(sp)
  803bd0:	d9c00315 	stw	r7,12(sp)
  803bd4:	da000015 	stw	r8,0(sp)
  803bd8:	d9800215 	stw	r6,8(sp)
  803bdc:	0804cc80 	call	804cc8 <__unpack_d>
  803be0:	d9000204 	addi	r4,sp,8
  803be4:	880b883a 	mov	r5,r17
  803be8:	0804cc80 	call	804cc8 <__unpack_d>
  803bec:	d9800e04 	addi	r6,sp,56
  803bf0:	9809883a 	mov	r4,r19
  803bf4:	880b883a 	mov	r5,r17
  803bf8:	08037140 	call	803714 <_fpadd_parts>
  803bfc:	1009883a 	mov	r4,r2
  803c00:	08049b40 	call	8049b4 <__pack_d>
  803c04:	dfc01517 	ldw	ra,84(sp)
  803c08:	dcc01417 	ldw	r19,80(sp)
  803c0c:	dc401317 	ldw	r17,76(sp)
  803c10:	dec01604 	addi	sp,sp,88
  803c14:	f800283a 	ret

00803c18 <__muldf3>:
  803c18:	deffe004 	addi	sp,sp,-128
  803c1c:	dc401815 	stw	r17,96(sp)
  803c20:	dc400404 	addi	r17,sp,16
  803c24:	2011883a 	mov	r8,r4
  803c28:	2813883a 	mov	r9,r5
  803c2c:	dc001715 	stw	r16,92(sp)
  803c30:	d809883a 	mov	r4,sp
  803c34:	880b883a 	mov	r5,r17
  803c38:	dc000904 	addi	r16,sp,36
  803c3c:	dfc01f15 	stw	ra,124(sp)
  803c40:	da400115 	stw	r9,4(sp)
  803c44:	d9c00315 	stw	r7,12(sp)
  803c48:	da000015 	stw	r8,0(sp)
  803c4c:	d9800215 	stw	r6,8(sp)
  803c50:	ddc01e15 	stw	r23,120(sp)
  803c54:	dd801d15 	stw	r22,116(sp)
  803c58:	dd401c15 	stw	r21,112(sp)
  803c5c:	dd001b15 	stw	r20,108(sp)
  803c60:	dcc01a15 	stw	r19,104(sp)
  803c64:	dc801915 	stw	r18,100(sp)
  803c68:	0804cc80 	call	804cc8 <__unpack_d>
  803c6c:	d9000204 	addi	r4,sp,8
  803c70:	800b883a 	mov	r5,r16
  803c74:	0804cc80 	call	804cc8 <__unpack_d>
  803c78:	d9000417 	ldw	r4,16(sp)
  803c7c:	00800044 	movi	r2,1
  803c80:	1100102e 	bgeu	r2,r4,803cc4 <__muldf3+0xac>
  803c84:	d8c00917 	ldw	r3,36(sp)
  803c88:	10c0062e 	bgeu	r2,r3,803ca4 <__muldf3+0x8c>
  803c8c:	00800104 	movi	r2,4
  803c90:	20800a26 	beq	r4,r2,803cbc <__muldf3+0xa4>
  803c94:	1880cc26 	beq	r3,r2,803fc8 <__muldf3+0x3b0>
  803c98:	00800084 	movi	r2,2
  803c9c:	20800926 	beq	r4,r2,803cc4 <__muldf3+0xac>
  803ca0:	1880191e 	bne	r3,r2,803d08 <__muldf3+0xf0>
  803ca4:	d8c00a17 	ldw	r3,40(sp)
  803ca8:	d8800517 	ldw	r2,20(sp)
  803cac:	8009883a 	mov	r4,r16
  803cb0:	10c4c03a 	cmpne	r2,r2,r3
  803cb4:	d8800a15 	stw	r2,40(sp)
  803cb8:	00000706 	br	803cd8 <__muldf3+0xc0>
  803cbc:	00800084 	movi	r2,2
  803cc0:	1880c326 	beq	r3,r2,803fd0 <__muldf3+0x3b8>
  803cc4:	d8800517 	ldw	r2,20(sp)
  803cc8:	d8c00a17 	ldw	r3,40(sp)
  803ccc:	8809883a 	mov	r4,r17
  803cd0:	10c4c03a 	cmpne	r2,r2,r3
  803cd4:	d8800515 	stw	r2,20(sp)
  803cd8:	08049b40 	call	8049b4 <__pack_d>
  803cdc:	dfc01f17 	ldw	ra,124(sp)
  803ce0:	ddc01e17 	ldw	r23,120(sp)
  803ce4:	dd801d17 	ldw	r22,116(sp)
  803ce8:	dd401c17 	ldw	r21,112(sp)
  803cec:	dd001b17 	ldw	r20,108(sp)
  803cf0:	dcc01a17 	ldw	r19,104(sp)
  803cf4:	dc801917 	ldw	r18,100(sp)
  803cf8:	dc401817 	ldw	r17,96(sp)
  803cfc:	dc001717 	ldw	r16,92(sp)
  803d00:	dec02004 	addi	sp,sp,128
  803d04:	f800283a 	ret
  803d08:	dd800717 	ldw	r22,28(sp)
  803d0c:	dc800c17 	ldw	r18,48(sp)
  803d10:	002b883a 	mov	r21,zero
  803d14:	0023883a 	mov	r17,zero
  803d18:	a80b883a 	mov	r5,r21
  803d1c:	b00d883a 	mov	r6,r22
  803d20:	880f883a 	mov	r7,r17
  803d24:	ddc00817 	ldw	r23,32(sp)
  803d28:	dcc00d17 	ldw	r19,52(sp)
  803d2c:	9009883a 	mov	r4,r18
  803d30:	08046480 	call	804648 <__muldi3>
  803d34:	001b883a 	mov	r13,zero
  803d38:	680f883a 	mov	r7,r13
  803d3c:	b009883a 	mov	r4,r22
  803d40:	000b883a 	mov	r5,zero
  803d44:	980d883a 	mov	r6,r19
  803d48:	b82d883a 	mov	r22,r23
  803d4c:	002f883a 	mov	r23,zero
  803d50:	db401615 	stw	r13,88(sp)
  803d54:	d8801315 	stw	r2,76(sp)
  803d58:	d8c01415 	stw	r3,80(sp)
  803d5c:	dcc01515 	stw	r19,84(sp)
  803d60:	08046480 	call	804648 <__muldi3>
  803d64:	b00d883a 	mov	r6,r22
  803d68:	000b883a 	mov	r5,zero
  803d6c:	9009883a 	mov	r4,r18
  803d70:	b80f883a 	mov	r7,r23
  803d74:	1021883a 	mov	r16,r2
  803d78:	1823883a 	mov	r17,r3
  803d7c:	08046480 	call	804648 <__muldi3>
  803d80:	8085883a 	add	r2,r16,r2
  803d84:	140d803a 	cmpltu	r6,r2,r16
  803d88:	88c7883a 	add	r3,r17,r3
  803d8c:	30cd883a 	add	r6,r6,r3
  803d90:	1029883a 	mov	r20,r2
  803d94:	302b883a 	mov	r21,r6
  803d98:	da801317 	ldw	r10,76(sp)
  803d9c:	dac01417 	ldw	r11,80(sp)
  803da0:	db001517 	ldw	r12,84(sp)
  803da4:	db401617 	ldw	r13,88(sp)
  803da8:	3440612e 	bgeu	r6,r17,803f30 <__muldf3+0x318>
  803dac:	0009883a 	mov	r4,zero
  803db0:	5105883a 	add	r2,r10,r4
  803db4:	128d803a 	cmpltu	r6,r2,r10
  803db8:	5d07883a 	add	r3,r11,r20
  803dbc:	30cd883a 	add	r6,r6,r3
  803dc0:	0021883a 	mov	r16,zero
  803dc4:	04400044 	movi	r17,1
  803dc8:	1025883a 	mov	r18,r2
  803dcc:	3027883a 	mov	r19,r6
  803dd0:	32c06236 	bltu	r6,r11,803f5c <__muldf3+0x344>
  803dd4:	59807a26 	beq	r11,r6,803fc0 <__muldf3+0x3a8>
  803dd8:	680b883a 	mov	r5,r13
  803ddc:	b80f883a 	mov	r7,r23
  803de0:	6009883a 	mov	r4,r12
  803de4:	b00d883a 	mov	r6,r22
  803de8:	08046480 	call	804648 <__muldi3>
  803dec:	1009883a 	mov	r4,r2
  803df0:	000f883a 	mov	r7,zero
  803df4:	1545883a 	add	r2,r2,r21
  803df8:	1111803a 	cmpltu	r8,r2,r4
  803dfc:	19c7883a 	add	r3,r3,r7
  803e00:	40c7883a 	add	r3,r8,r3
  803e04:	88cb883a 	add	r5,r17,r3
  803e08:	d8c00617 	ldw	r3,24(sp)
  803e0c:	8089883a 	add	r4,r16,r2
  803e10:	d8800b17 	ldw	r2,44(sp)
  803e14:	18c00104 	addi	r3,r3,4
  803e18:	240d803a 	cmpltu	r6,r4,r16
  803e1c:	10c7883a 	add	r3,r2,r3
  803e20:	2013883a 	mov	r9,r4
  803e24:	d8800a17 	ldw	r2,40(sp)
  803e28:	d9000517 	ldw	r4,20(sp)
  803e2c:	314d883a 	add	r6,r6,r5
  803e30:	3015883a 	mov	r10,r6
  803e34:	2088c03a 	cmpne	r4,r4,r2
  803e38:	00880034 	movhi	r2,8192
  803e3c:	10bfffc4 	addi	r2,r2,-1
  803e40:	d9000f15 	stw	r4,60(sp)
  803e44:	d8c01015 	stw	r3,64(sp)
  803e48:	1180162e 	bgeu	r2,r6,803ea4 <__muldf3+0x28c>
  803e4c:	1811883a 	mov	r8,r3
  803e50:	101f883a 	mov	r15,r2
  803e54:	980497fa 	slli	r2,r19,31
  803e58:	9016d07a 	srli	r11,r18,1
  803e5c:	500697fa 	slli	r3,r10,31
  803e60:	480cd07a 	srli	r6,r9,1
  803e64:	500ed07a 	srli	r7,r10,1
  803e68:	12d6b03a 	or	r11,r2,r11
  803e6c:	00800044 	movi	r2,1
  803e70:	198cb03a 	or	r6,r3,r6
  803e74:	4888703a 	and	r4,r9,r2
  803e78:	9818d07a 	srli	r12,r19,1
  803e7c:	001b883a 	mov	r13,zero
  803e80:	03a00034 	movhi	r14,32768
  803e84:	3013883a 	mov	r9,r6
  803e88:	3815883a 	mov	r10,r7
  803e8c:	4091883a 	add	r8,r8,r2
  803e90:	20000226 	beq	r4,zero,803e9c <__muldf3+0x284>
  803e94:	5b64b03a 	or	r18,r11,r13
  803e98:	63a6b03a 	or	r19,r12,r14
  803e9c:	7abfed36 	bltu	r15,r10,803e54 <__muldf3+0x23c>
  803ea0:	da001015 	stw	r8,64(sp)
  803ea4:	00840034 	movhi	r2,4096
  803ea8:	10bfffc4 	addi	r2,r2,-1
  803eac:	12801436 	bltu	r2,r10,803f00 <__muldf3+0x2e8>
  803eb0:	da001017 	ldw	r8,64(sp)
  803eb4:	101f883a 	mov	r15,r2
  803eb8:	4a45883a 	add	r2,r9,r9
  803ebc:	124d803a 	cmpltu	r6,r2,r9
  803ec0:	5287883a 	add	r3,r10,r10
  803ec4:	9497883a 	add	r11,r18,r18
  803ec8:	5c8f803a 	cmpltu	r7,r11,r18
  803ecc:	9cd9883a 	add	r12,r19,r19
  803ed0:	01000044 	movi	r4,1
  803ed4:	30cd883a 	add	r6,r6,r3
  803ed8:	3b0f883a 	add	r7,r7,r12
  803edc:	423fffc4 	addi	r8,r8,-1
  803ee0:	1013883a 	mov	r9,r2
  803ee4:	3015883a 	mov	r10,r6
  803ee8:	111ab03a 	or	r13,r2,r4
  803eec:	98003016 	blt	r19,zero,803fb0 <__muldf3+0x398>
  803ef0:	5825883a 	mov	r18,r11
  803ef4:	3827883a 	mov	r19,r7
  803ef8:	7abfef2e 	bgeu	r15,r10,803eb8 <__muldf3+0x2a0>
  803efc:	da001015 	stw	r8,64(sp)
  803f00:	00803fc4 	movi	r2,255
  803f04:	488e703a 	and	r7,r9,r2
  803f08:	00802004 	movi	r2,128
  803f0c:	0007883a 	mov	r3,zero
  803f10:	0011883a 	mov	r8,zero
  803f14:	38801826 	beq	r7,r2,803f78 <__muldf3+0x360>
  803f18:	008000c4 	movi	r2,3
  803f1c:	d9000e04 	addi	r4,sp,56
  803f20:	da801215 	stw	r10,72(sp)
  803f24:	d8800e15 	stw	r2,56(sp)
  803f28:	da401115 	stw	r9,68(sp)
  803f2c:	003f6a06 	br	803cd8 <__muldf3+0xc0>
  803f30:	89802126 	beq	r17,r6,803fb8 <__muldf3+0x3a0>
  803f34:	0009883a 	mov	r4,zero
  803f38:	5105883a 	add	r2,r10,r4
  803f3c:	128d803a 	cmpltu	r6,r2,r10
  803f40:	5d07883a 	add	r3,r11,r20
  803f44:	30cd883a 	add	r6,r6,r3
  803f48:	0021883a 	mov	r16,zero
  803f4c:	0023883a 	mov	r17,zero
  803f50:	1025883a 	mov	r18,r2
  803f54:	3027883a 	mov	r19,r6
  803f58:	32ff9e2e 	bgeu	r6,r11,803dd4 <__muldf3+0x1bc>
  803f5c:	00800044 	movi	r2,1
  803f60:	8089883a 	add	r4,r16,r2
  803f64:	240d803a 	cmpltu	r6,r4,r16
  803f68:	344d883a 	add	r6,r6,r17
  803f6c:	2021883a 	mov	r16,r4
  803f70:	3023883a 	mov	r17,r6
  803f74:	003f9806 	br	803dd8 <__muldf3+0x1c0>
  803f78:	403fe71e 	bne	r8,zero,803f18 <__muldf3+0x300>
  803f7c:	01004004 	movi	r4,256
  803f80:	4904703a 	and	r2,r9,r4
  803f84:	10c4b03a 	or	r2,r2,r3
  803f88:	103fe31e 	bne	r2,zero,803f18 <__muldf3+0x300>
  803f8c:	94c4b03a 	or	r2,r18,r19
  803f90:	103fe126 	beq	r2,zero,803f18 <__muldf3+0x300>
  803f94:	49c5883a 	add	r2,r9,r7
  803f98:	1251803a 	cmpltu	r8,r2,r9
  803f9c:	4291883a 	add	r8,r8,r10
  803fa0:	013fc004 	movi	r4,-256
  803fa4:	1112703a 	and	r9,r2,r4
  803fa8:	4015883a 	mov	r10,r8
  803fac:	003fda06 	br	803f18 <__muldf3+0x300>
  803fb0:	6813883a 	mov	r9,r13
  803fb4:	003fce06 	br	803ef0 <__muldf3+0x2d8>
  803fb8:	143f7c36 	bltu	r2,r16,803dac <__muldf3+0x194>
  803fbc:	003fdd06 	br	803f34 <__muldf3+0x31c>
  803fc0:	12bf852e 	bgeu	r2,r10,803dd8 <__muldf3+0x1c0>
  803fc4:	003fe506 	br	803f5c <__muldf3+0x344>
  803fc8:	00800084 	movi	r2,2
  803fcc:	20bf351e 	bne	r4,r2,803ca4 <__muldf3+0x8c>
  803fd0:	01002074 	movhi	r4,129
  803fd4:	21148d04 	addi	r4,r4,21044
  803fd8:	003f3f06 	br	803cd8 <__muldf3+0xc0>

00803fdc <__divdf3>:
  803fdc:	deffed04 	addi	sp,sp,-76
  803fe0:	dcc01115 	stw	r19,68(sp)
  803fe4:	dcc00404 	addi	r19,sp,16
  803fe8:	2011883a 	mov	r8,r4
  803fec:	2813883a 	mov	r9,r5
  803ff0:	dc000e15 	stw	r16,56(sp)
  803ff4:	d809883a 	mov	r4,sp
  803ff8:	980b883a 	mov	r5,r19
  803ffc:	dc000904 	addi	r16,sp,36
  804000:	dfc01215 	stw	ra,72(sp)
  804004:	da400115 	stw	r9,4(sp)
  804008:	d9c00315 	stw	r7,12(sp)
  80400c:	da000015 	stw	r8,0(sp)
  804010:	d9800215 	stw	r6,8(sp)
  804014:	dc801015 	stw	r18,64(sp)
  804018:	dc400f15 	stw	r17,60(sp)
  80401c:	0804cc80 	call	804cc8 <__unpack_d>
  804020:	d9000204 	addi	r4,sp,8
  804024:	800b883a 	mov	r5,r16
  804028:	0804cc80 	call	804cc8 <__unpack_d>
  80402c:	d9000417 	ldw	r4,16(sp)
  804030:	00800044 	movi	r2,1
  804034:	11000b2e 	bgeu	r2,r4,804064 <__divdf3+0x88>
  804038:	d9400917 	ldw	r5,36(sp)
  80403c:	1140762e 	bgeu	r2,r5,804218 <__divdf3+0x23c>
  804040:	d8800517 	ldw	r2,20(sp)
  804044:	d8c00a17 	ldw	r3,40(sp)
  804048:	01800104 	movi	r6,4
  80404c:	10c4f03a 	xor	r2,r2,r3
  804050:	d8800515 	stw	r2,20(sp)
  804054:	21800226 	beq	r4,r6,804060 <__divdf3+0x84>
  804058:	00800084 	movi	r2,2
  80405c:	2080141e 	bne	r4,r2,8040b0 <__divdf3+0xd4>
  804060:	29000926 	beq	r5,r4,804088 <__divdf3+0xac>
  804064:	9809883a 	mov	r4,r19
  804068:	08049b40 	call	8049b4 <__pack_d>
  80406c:	dfc01217 	ldw	ra,72(sp)
  804070:	dcc01117 	ldw	r19,68(sp)
  804074:	dc801017 	ldw	r18,64(sp)
  804078:	dc400f17 	ldw	r17,60(sp)
  80407c:	dc000e17 	ldw	r16,56(sp)
  804080:	dec01304 	addi	sp,sp,76
  804084:	f800283a 	ret
  804088:	01002074 	movhi	r4,129
  80408c:	21148d04 	addi	r4,r4,21044
  804090:	08049b40 	call	8049b4 <__pack_d>
  804094:	dfc01217 	ldw	ra,72(sp)
  804098:	dcc01117 	ldw	r19,68(sp)
  80409c:	dc801017 	ldw	r18,64(sp)
  8040a0:	dc400f17 	ldw	r17,60(sp)
  8040a4:	dc000e17 	ldw	r16,56(sp)
  8040a8:	dec01304 	addi	sp,sp,76
  8040ac:	f800283a 	ret
  8040b0:	29805b26 	beq	r5,r6,804220 <__divdf3+0x244>
  8040b4:	28802d26 	beq	r5,r2,80416c <__divdf3+0x190>
  8040b8:	d8c00617 	ldw	r3,24(sp)
  8040bc:	d8800b17 	ldw	r2,44(sp)
  8040c0:	d9c00817 	ldw	r7,32(sp)
  8040c4:	dc400d17 	ldw	r17,52(sp)
  8040c8:	188bc83a 	sub	r5,r3,r2
  8040cc:	d9800717 	ldw	r6,28(sp)
  8040d0:	dc000c17 	ldw	r16,48(sp)
  8040d4:	d9400615 	stw	r5,24(sp)
  8040d8:	3c403836 	bltu	r7,r17,8041bc <__divdf3+0x1e0>
  8040dc:	89c03626 	beq	r17,r7,8041b8 <__divdf3+0x1dc>
  8040e0:	0015883a 	mov	r10,zero
  8040e4:	001d883a 	mov	r14,zero
  8040e8:	02c40034 	movhi	r11,4096
  8040ec:	001f883a 	mov	r15,zero
  8040f0:	003f883a 	mov	ra,zero
  8040f4:	04800f44 	movi	r18,61
  8040f8:	00000f06 	br	804138 <__divdf3+0x15c>
  8040fc:	601d883a 	mov	r14,r12
  804100:	681f883a 	mov	r15,r13
  804104:	400d883a 	mov	r6,r8
  804108:	100f883a 	mov	r7,r2
  80410c:	3191883a 	add	r8,r6,r6
  804110:	5808d07a 	srli	r4,r11,1
  804114:	4185803a 	cmpltu	r2,r8,r6
  804118:	39d3883a 	add	r9,r7,r7
  80411c:	28c6b03a 	or	r3,r5,r3
  804120:	1245883a 	add	r2,r2,r9
  804124:	1815883a 	mov	r10,r3
  804128:	2017883a 	mov	r11,r4
  80412c:	400d883a 	mov	r6,r8
  804130:	100f883a 	mov	r7,r2
  804134:	fc801726 	beq	ra,r18,804194 <__divdf3+0x1b8>
  804138:	580a97fa 	slli	r5,r11,31
  80413c:	5006d07a 	srli	r3,r10,1
  804140:	ffc00044 	addi	ra,ra,1
  804144:	3c7ff136 	bltu	r7,r17,80410c <__divdf3+0x130>
  804148:	3411c83a 	sub	r8,r6,r16
  80414c:	3205803a 	cmpltu	r2,r6,r8
  804150:	3c53c83a 	sub	r9,r7,r17
  804154:	7298b03a 	or	r12,r14,r10
  804158:	7adab03a 	or	r13,r15,r11
  80415c:	4885c83a 	sub	r2,r9,r2
  804160:	89ffe61e 	bne	r17,r7,8040fc <__divdf3+0x120>
  804164:	343fe936 	bltu	r6,r16,80410c <__divdf3+0x130>
  804168:	003fe406 	br	8040fc <__divdf3+0x120>
  80416c:	9809883a 	mov	r4,r19
  804170:	d9800415 	stw	r6,16(sp)
  804174:	08049b40 	call	8049b4 <__pack_d>
  804178:	dfc01217 	ldw	ra,72(sp)
  80417c:	dcc01117 	ldw	r19,68(sp)
  804180:	dc801017 	ldw	r18,64(sp)
  804184:	dc400f17 	ldw	r17,60(sp)
  804188:	dc000e17 	ldw	r16,56(sp)
  80418c:	dec01304 	addi	sp,sp,76
  804190:	f800283a 	ret
  804194:	00803fc4 	movi	r2,255
  804198:	7090703a 	and	r8,r14,r2
  80419c:	00802004 	movi	r2,128
  8041a0:	0007883a 	mov	r3,zero
  8041a4:	0013883a 	mov	r9,zero
  8041a8:	40800d26 	beq	r8,r2,8041e0 <__divdf3+0x204>
  8041ac:	dbc00815 	stw	r15,32(sp)
  8041b0:	db800715 	stw	r14,28(sp)
  8041b4:	003fab06 	br	804064 <__divdf3+0x88>
  8041b8:	343fc92e 	bgeu	r6,r16,8040e0 <__divdf3+0x104>
  8041bc:	3185883a 	add	r2,r6,r6
  8041c0:	1189803a 	cmpltu	r4,r2,r6
  8041c4:	39c7883a 	add	r3,r7,r7
  8041c8:	20c9883a 	add	r4,r4,r3
  8041cc:	297fffc4 	addi	r5,r5,-1
  8041d0:	100d883a 	mov	r6,r2
  8041d4:	200f883a 	mov	r7,r4
  8041d8:	d9400615 	stw	r5,24(sp)
  8041dc:	003fc006 	br	8040e0 <__divdf3+0x104>
  8041e0:	483ff21e 	bne	r9,zero,8041ac <__divdf3+0x1d0>
  8041e4:	01004004 	movi	r4,256
  8041e8:	7104703a 	and	r2,r14,r4
  8041ec:	10c4b03a 	or	r2,r2,r3
  8041f0:	103fee1e 	bne	r2,zero,8041ac <__divdf3+0x1d0>
  8041f4:	31c4b03a 	or	r2,r6,r7
  8041f8:	103fec26 	beq	r2,zero,8041ac <__divdf3+0x1d0>
  8041fc:	7205883a 	add	r2,r14,r8
  804200:	1391803a 	cmpltu	r8,r2,r14
  804204:	43d1883a 	add	r8,r8,r15
  804208:	013fc004 	movi	r4,-256
  80420c:	111c703a 	and	r14,r2,r4
  804210:	401f883a 	mov	r15,r8
  804214:	003fe506 	br	8041ac <__divdf3+0x1d0>
  804218:	8009883a 	mov	r4,r16
  80421c:	003f9206 	br	804068 <__divdf3+0x8c>
  804220:	9809883a 	mov	r4,r19
  804224:	d8000715 	stw	zero,28(sp)
  804228:	d8000815 	stw	zero,32(sp)
  80422c:	d8000615 	stw	zero,24(sp)
  804230:	003f8d06 	br	804068 <__divdf3+0x8c>

00804234 <__eqdf2>:
  804234:	deffef04 	addi	sp,sp,-68
  804238:	dc400f15 	stw	r17,60(sp)
  80423c:	dc400404 	addi	r17,sp,16
  804240:	2005883a 	mov	r2,r4
  804244:	2807883a 	mov	r3,r5
  804248:	dc000e15 	stw	r16,56(sp)
  80424c:	d809883a 	mov	r4,sp
  804250:	880b883a 	mov	r5,r17
  804254:	dc000904 	addi	r16,sp,36
  804258:	d8c00115 	stw	r3,4(sp)
  80425c:	d8800015 	stw	r2,0(sp)
  804260:	d9800215 	stw	r6,8(sp)
  804264:	dfc01015 	stw	ra,64(sp)
  804268:	d9c00315 	stw	r7,12(sp)
  80426c:	0804cc80 	call	804cc8 <__unpack_d>
  804270:	d9000204 	addi	r4,sp,8
  804274:	800b883a 	mov	r5,r16
  804278:	0804cc80 	call	804cc8 <__unpack_d>
  80427c:	d8800417 	ldw	r2,16(sp)
  804280:	00c00044 	movi	r3,1
  804284:	180d883a 	mov	r6,r3
  804288:	1880062e 	bgeu	r3,r2,8042a4 <__eqdf2+0x70>
  80428c:	d8800917 	ldw	r2,36(sp)
  804290:	8809883a 	mov	r4,r17
  804294:	800b883a 	mov	r5,r16
  804298:	1880022e 	bgeu	r3,r2,8042a4 <__eqdf2+0x70>
  80429c:	0804e000 	call	804e00 <__fpcmp_parts_d>
  8042a0:	100d883a 	mov	r6,r2
  8042a4:	3005883a 	mov	r2,r6
  8042a8:	dfc01017 	ldw	ra,64(sp)
  8042ac:	dc400f17 	ldw	r17,60(sp)
  8042b0:	dc000e17 	ldw	r16,56(sp)
  8042b4:	dec01104 	addi	sp,sp,68
  8042b8:	f800283a 	ret

008042bc <__nedf2>:
  8042bc:	deffef04 	addi	sp,sp,-68
  8042c0:	dc400f15 	stw	r17,60(sp)
  8042c4:	dc400404 	addi	r17,sp,16
  8042c8:	2005883a 	mov	r2,r4
  8042cc:	2807883a 	mov	r3,r5
  8042d0:	dc000e15 	stw	r16,56(sp)
  8042d4:	d809883a 	mov	r4,sp
  8042d8:	880b883a 	mov	r5,r17
  8042dc:	dc000904 	addi	r16,sp,36
  8042e0:	d8c00115 	stw	r3,4(sp)
  8042e4:	d8800015 	stw	r2,0(sp)
  8042e8:	d9800215 	stw	r6,8(sp)
  8042ec:	dfc01015 	stw	ra,64(sp)
  8042f0:	d9c00315 	stw	r7,12(sp)
  8042f4:	0804cc80 	call	804cc8 <__unpack_d>
  8042f8:	d9000204 	addi	r4,sp,8
  8042fc:	800b883a 	mov	r5,r16
  804300:	0804cc80 	call	804cc8 <__unpack_d>
  804304:	d8800417 	ldw	r2,16(sp)
  804308:	00c00044 	movi	r3,1
  80430c:	180d883a 	mov	r6,r3
  804310:	1880062e 	bgeu	r3,r2,80432c <__nedf2+0x70>
  804314:	d8800917 	ldw	r2,36(sp)
  804318:	8809883a 	mov	r4,r17
  80431c:	800b883a 	mov	r5,r16
  804320:	1880022e 	bgeu	r3,r2,80432c <__nedf2+0x70>
  804324:	0804e000 	call	804e00 <__fpcmp_parts_d>
  804328:	100d883a 	mov	r6,r2
  80432c:	3005883a 	mov	r2,r6
  804330:	dfc01017 	ldw	ra,64(sp)
  804334:	dc400f17 	ldw	r17,60(sp)
  804338:	dc000e17 	ldw	r16,56(sp)
  80433c:	dec01104 	addi	sp,sp,68
  804340:	f800283a 	ret

00804344 <__gtdf2>:
  804344:	deffef04 	addi	sp,sp,-68
  804348:	dc400f15 	stw	r17,60(sp)
  80434c:	dc400404 	addi	r17,sp,16
  804350:	2005883a 	mov	r2,r4
  804354:	2807883a 	mov	r3,r5
  804358:	dc000e15 	stw	r16,56(sp)
  80435c:	d809883a 	mov	r4,sp
  804360:	880b883a 	mov	r5,r17
  804364:	dc000904 	addi	r16,sp,36
  804368:	d8c00115 	stw	r3,4(sp)
  80436c:	d8800015 	stw	r2,0(sp)
  804370:	d9800215 	stw	r6,8(sp)
  804374:	dfc01015 	stw	ra,64(sp)
  804378:	d9c00315 	stw	r7,12(sp)
  80437c:	0804cc80 	call	804cc8 <__unpack_d>
  804380:	d9000204 	addi	r4,sp,8
  804384:	800b883a 	mov	r5,r16
  804388:	0804cc80 	call	804cc8 <__unpack_d>
  80438c:	d8800417 	ldw	r2,16(sp)
  804390:	00c00044 	movi	r3,1
  804394:	01bfffc4 	movi	r6,-1
  804398:	1880062e 	bgeu	r3,r2,8043b4 <__gtdf2+0x70>
  80439c:	d8800917 	ldw	r2,36(sp)
  8043a0:	8809883a 	mov	r4,r17
  8043a4:	800b883a 	mov	r5,r16
  8043a8:	1880022e 	bgeu	r3,r2,8043b4 <__gtdf2+0x70>
  8043ac:	0804e000 	call	804e00 <__fpcmp_parts_d>
  8043b0:	100d883a 	mov	r6,r2
  8043b4:	3005883a 	mov	r2,r6
  8043b8:	dfc01017 	ldw	ra,64(sp)
  8043bc:	dc400f17 	ldw	r17,60(sp)
  8043c0:	dc000e17 	ldw	r16,56(sp)
  8043c4:	dec01104 	addi	sp,sp,68
  8043c8:	f800283a 	ret

008043cc <__ltdf2>:
  8043cc:	deffef04 	addi	sp,sp,-68
  8043d0:	dc400f15 	stw	r17,60(sp)
  8043d4:	dc400404 	addi	r17,sp,16
  8043d8:	2005883a 	mov	r2,r4
  8043dc:	2807883a 	mov	r3,r5
  8043e0:	dc000e15 	stw	r16,56(sp)
  8043e4:	d809883a 	mov	r4,sp
  8043e8:	880b883a 	mov	r5,r17
  8043ec:	dc000904 	addi	r16,sp,36
  8043f0:	d8c00115 	stw	r3,4(sp)
  8043f4:	d8800015 	stw	r2,0(sp)
  8043f8:	d9800215 	stw	r6,8(sp)
  8043fc:	dfc01015 	stw	ra,64(sp)
  804400:	d9c00315 	stw	r7,12(sp)
  804404:	0804cc80 	call	804cc8 <__unpack_d>
  804408:	d9000204 	addi	r4,sp,8
  80440c:	800b883a 	mov	r5,r16
  804410:	0804cc80 	call	804cc8 <__unpack_d>
  804414:	d8800417 	ldw	r2,16(sp)
  804418:	00c00044 	movi	r3,1
  80441c:	180d883a 	mov	r6,r3
  804420:	1880062e 	bgeu	r3,r2,80443c <__ltdf2+0x70>
  804424:	d8800917 	ldw	r2,36(sp)
  804428:	8809883a 	mov	r4,r17
  80442c:	800b883a 	mov	r5,r16
  804430:	1880022e 	bgeu	r3,r2,80443c <__ltdf2+0x70>
  804434:	0804e000 	call	804e00 <__fpcmp_parts_d>
  804438:	100d883a 	mov	r6,r2
  80443c:	3005883a 	mov	r2,r6
  804440:	dfc01017 	ldw	ra,64(sp)
  804444:	dc400f17 	ldw	r17,60(sp)
  804448:	dc000e17 	ldw	r16,56(sp)
  80444c:	dec01104 	addi	sp,sp,68
  804450:	f800283a 	ret

00804454 <__ledf2>:
  804454:	deffef04 	addi	sp,sp,-68
  804458:	dc400f15 	stw	r17,60(sp)
  80445c:	dc400404 	addi	r17,sp,16
  804460:	2005883a 	mov	r2,r4
  804464:	2807883a 	mov	r3,r5
  804468:	dc000e15 	stw	r16,56(sp)
  80446c:	d809883a 	mov	r4,sp
  804470:	880b883a 	mov	r5,r17
  804474:	dc000904 	addi	r16,sp,36
  804478:	d8c00115 	stw	r3,4(sp)
  80447c:	d8800015 	stw	r2,0(sp)
  804480:	d9800215 	stw	r6,8(sp)
  804484:	dfc01015 	stw	ra,64(sp)
  804488:	d9c00315 	stw	r7,12(sp)
  80448c:	0804cc80 	call	804cc8 <__unpack_d>
  804490:	d9000204 	addi	r4,sp,8
  804494:	800b883a 	mov	r5,r16
  804498:	0804cc80 	call	804cc8 <__unpack_d>
  80449c:	d8800417 	ldw	r2,16(sp)
  8044a0:	00c00044 	movi	r3,1
  8044a4:	180d883a 	mov	r6,r3
  8044a8:	1880062e 	bgeu	r3,r2,8044c4 <__ledf2+0x70>
  8044ac:	d8800917 	ldw	r2,36(sp)
  8044b0:	8809883a 	mov	r4,r17
  8044b4:	800b883a 	mov	r5,r16
  8044b8:	1880022e 	bgeu	r3,r2,8044c4 <__ledf2+0x70>
  8044bc:	0804e000 	call	804e00 <__fpcmp_parts_d>
  8044c0:	100d883a 	mov	r6,r2
  8044c4:	3005883a 	mov	r2,r6
  8044c8:	dfc01017 	ldw	ra,64(sp)
  8044cc:	dc400f17 	ldw	r17,60(sp)
  8044d0:	dc000e17 	ldw	r16,56(sp)
  8044d4:	dec01104 	addi	sp,sp,68
  8044d8:	f800283a 	ret

008044dc <__floatsidf>:
  8044dc:	2006d7fa 	srli	r3,r4,31
  8044e0:	defff604 	addi	sp,sp,-40
  8044e4:	008000c4 	movi	r2,3
  8044e8:	dfc00915 	stw	ra,36(sp)
  8044ec:	dcc00815 	stw	r19,32(sp)
  8044f0:	dc800715 	stw	r18,28(sp)
  8044f4:	dc400615 	stw	r17,24(sp)
  8044f8:	dc000515 	stw	r16,20(sp)
  8044fc:	d8800015 	stw	r2,0(sp)
  804500:	d8c00115 	stw	r3,4(sp)
  804504:	20000f1e 	bne	r4,zero,804544 <__floatsidf+0x68>
  804508:	00800084 	movi	r2,2
  80450c:	d8800015 	stw	r2,0(sp)
  804510:	d809883a 	mov	r4,sp
  804514:	08049b40 	call	8049b4 <__pack_d>
  804518:	1009883a 	mov	r4,r2
  80451c:	180b883a 	mov	r5,r3
  804520:	2005883a 	mov	r2,r4
  804524:	2807883a 	mov	r3,r5
  804528:	dfc00917 	ldw	ra,36(sp)
  80452c:	dcc00817 	ldw	r19,32(sp)
  804530:	dc800717 	ldw	r18,28(sp)
  804534:	dc400617 	ldw	r17,24(sp)
  804538:	dc000517 	ldw	r16,20(sp)
  80453c:	dec00a04 	addi	sp,sp,40
  804540:	f800283a 	ret
  804544:	00800f04 	movi	r2,60
  804548:	1807003a 	cmpeq	r3,r3,zero
  80454c:	d8800215 	stw	r2,8(sp)
  804550:	18001126 	beq	r3,zero,804598 <__floatsidf+0xbc>
  804554:	0027883a 	mov	r19,zero
  804558:	2025883a 	mov	r18,r4
  80455c:	d9000315 	stw	r4,12(sp)
  804560:	dcc00415 	stw	r19,16(sp)
  804564:	08046e00 	call	8046e0 <__clzsi2>
  804568:	11000744 	addi	r4,r2,29
  80456c:	013fe80e 	bge	zero,r4,804510 <__floatsidf+0x34>
  804570:	10bfff44 	addi	r2,r2,-3
  804574:	10000c16 	blt	r2,zero,8045a8 <__floatsidf+0xcc>
  804578:	90a2983a 	sll	r17,r18,r2
  80457c:	0021883a 	mov	r16,zero
  804580:	d8800217 	ldw	r2,8(sp)
  804584:	dc400415 	stw	r17,16(sp)
  804588:	dc000315 	stw	r16,12(sp)
  80458c:	1105c83a 	sub	r2,r2,r4
  804590:	d8800215 	stw	r2,8(sp)
  804594:	003fde06 	br	804510 <__floatsidf+0x34>
  804598:	00a00034 	movhi	r2,32768
  80459c:	20800a26 	beq	r4,r2,8045c8 <__floatsidf+0xec>
  8045a0:	0109c83a 	sub	r4,zero,r4
  8045a4:	003feb06 	br	804554 <__floatsidf+0x78>
  8045a8:	9006d07a 	srli	r3,r18,1
  8045ac:	008007c4 	movi	r2,31
  8045b0:	1105c83a 	sub	r2,r2,r4
  8045b4:	1886d83a 	srl	r3,r3,r2
  8045b8:	9922983a 	sll	r17,r19,r4
  8045bc:	9120983a 	sll	r16,r18,r4
  8045c0:	1c62b03a 	or	r17,r3,r17
  8045c4:	003fee06 	br	804580 <__floatsidf+0xa4>
  8045c8:	0009883a 	mov	r4,zero
  8045cc:	01707834 	movhi	r5,49632
  8045d0:	003fd306 	br	804520 <__floatsidf+0x44>

008045d4 <__truncdfsf2>:
  8045d4:	defff804 	addi	sp,sp,-32
  8045d8:	2005883a 	mov	r2,r4
  8045dc:	2807883a 	mov	r3,r5
  8045e0:	d809883a 	mov	r4,sp
  8045e4:	d9400204 	addi	r5,sp,8
  8045e8:	d8c00115 	stw	r3,4(sp)
  8045ec:	d8800015 	stw	r2,0(sp)
  8045f0:	dfc00715 	stw	ra,28(sp)
  8045f4:	0804cc80 	call	804cc8 <__unpack_d>
  8045f8:	d9c00517 	ldw	r7,20(sp)
  8045fc:	da000617 	ldw	r8,24(sp)
  804600:	02d00034 	movhi	r11,16384
  804604:	5affffc4 	addi	r11,r11,-1
  804608:	3812d7ba 	srli	r9,r7,30
  80460c:	401a90ba 	slli	r13,r8,2
  804610:	3ac4703a 	and	r2,r7,r11
  804614:	0007883a 	mov	r3,zero
  804618:	6a52b03a 	or	r9,r13,r9
  80461c:	10c4b03a 	or	r2,r2,r3
  804620:	d9000217 	ldw	r4,8(sp)
  804624:	d9400317 	ldw	r5,12(sp)
  804628:	d9800417 	ldw	r6,16(sp)
  80462c:	480f883a 	mov	r7,r9
  804630:	10000126 	beq	r2,zero,804638 <__truncdfsf2+0x64>
  804634:	49c00054 	ori	r7,r9,1
  804638:	08049880 	call	804988 <__make_fp>
  80463c:	dfc00717 	ldw	ra,28(sp)
  804640:	dec00804 	addi	sp,sp,32
  804644:	f800283a 	ret

00804648 <__muldi3>:
  804648:	2011883a 	mov	r8,r4
  80464c:	427fffcc 	andi	r9,r8,65535
  804650:	4018d43a 	srli	r12,r8,16
  804654:	32bfffcc 	andi	r10,r6,65535
  804658:	3016d43a 	srli	r11,r6,16
  80465c:	4a85383a 	mul	r2,r9,r10
  804660:	6295383a 	mul	r10,r12,r10
  804664:	4ad3383a 	mul	r9,r9,r11
  804668:	113fffcc 	andi	r4,r2,65535
  80466c:	1004d43a 	srli	r2,r2,16
  804670:	4a93883a 	add	r9,r9,r10
  804674:	3807883a 	mov	r3,r7
  804678:	1245883a 	add	r2,r2,r9
  80467c:	280f883a 	mov	r7,r5
  804680:	180b883a 	mov	r5,r3
  804684:	1006943a 	slli	r3,r2,16
  804688:	defffd04 	addi	sp,sp,-12
  80468c:	dc800215 	stw	r18,8(sp)
  804690:	1907883a 	add	r3,r3,r4
  804694:	dc400115 	stw	r17,4(sp)
  804698:	dc000015 	stw	r16,0(sp)
  80469c:	4165383a 	mul	r18,r8,r5
  8046a0:	31e3383a 	mul	r17,r6,r7
  8046a4:	1012d43a 	srli	r9,r2,16
  8046a8:	62d9383a 	mul	r12,r12,r11
  8046ac:	181f883a 	mov	r15,r3
  8046b0:	1280022e 	bgeu	r2,r10,8046bc <__muldi3+0x74>
  8046b4:	00800074 	movhi	r2,1
  8046b8:	6099883a 	add	r12,r12,r2
  8046bc:	624d883a 	add	r6,r12,r9
  8046c0:	9187883a 	add	r3,r18,r6
  8046c4:	88c7883a 	add	r3,r17,r3
  8046c8:	7805883a 	mov	r2,r15
  8046cc:	dc800217 	ldw	r18,8(sp)
  8046d0:	dc400117 	ldw	r17,4(sp)
  8046d4:	dc000017 	ldw	r16,0(sp)
  8046d8:	dec00304 	addi	sp,sp,12
  8046dc:	f800283a 	ret

008046e0 <__clzsi2>:
  8046e0:	00bfffd4 	movui	r2,65535
  8046e4:	11000e36 	bltu	r2,r4,804720 <__clzsi2+0x40>
  8046e8:	00803fc4 	movi	r2,255
  8046ec:	01400204 	movi	r5,8
  8046f0:	0007883a 	mov	r3,zero
  8046f4:	11001036 	bltu	r2,r4,804738 <__clzsi2+0x58>
  8046f8:	000b883a 	mov	r5,zero
  8046fc:	20c6d83a 	srl	r3,r4,r3
  804700:	00802074 	movhi	r2,129
  804704:	10949204 	addi	r2,r2,21064
  804708:	1887883a 	add	r3,r3,r2
  80470c:	18800003 	ldbu	r2,0(r3)
  804710:	00c00804 	movi	r3,32
  804714:	2885883a 	add	r2,r5,r2
  804718:	1885c83a 	sub	r2,r3,r2
  80471c:	f800283a 	ret
  804720:	01400404 	movi	r5,16
  804724:	00804034 	movhi	r2,256
  804728:	10bfffc4 	addi	r2,r2,-1
  80472c:	2807883a 	mov	r3,r5
  804730:	113ff22e 	bgeu	r2,r4,8046fc <__clzsi2+0x1c>
  804734:	01400604 	movi	r5,24
  804738:	2807883a 	mov	r3,r5
  80473c:	20c6d83a 	srl	r3,r4,r3
  804740:	00802074 	movhi	r2,129
  804744:	10949204 	addi	r2,r2,21064
  804748:	1887883a 	add	r3,r3,r2
  80474c:	18800003 	ldbu	r2,0(r3)
  804750:	00c00804 	movi	r3,32
  804754:	2885883a 	add	r2,r5,r2
  804758:	1885c83a 	sub	r2,r3,r2
  80475c:	f800283a 	ret

00804760 <__pack_f>:
  804760:	20c00017 	ldw	r3,0(r4)
  804764:	01c00044 	movi	r7,1
  804768:	21800317 	ldw	r6,12(r4)
  80476c:	21400117 	ldw	r5,4(r4)
  804770:	38c02d2e 	bgeu	r7,r3,804828 <__pack_f+0xc8>
  804774:	00800104 	movi	r2,4
  804778:	18802826 	beq	r3,r2,80481c <__pack_f+0xbc>
  80477c:	00800084 	movi	r2,2
  804780:	18800126 	beq	r3,r2,804788 <__pack_f+0x28>
  804784:	3000101e 	bne	r6,zero,8047c8 <__pack_f+0x68>
  804788:	000d883a 	mov	r6,zero
  80478c:	0007883a 	mov	r3,zero
  804790:	19003fcc 	andi	r4,r3,255
  804794:	200895fa 	slli	r4,r4,23
  804798:	00c02034 	movhi	r3,128
  80479c:	18ffffc4 	addi	r3,r3,-1
  8047a0:	30c6703a 	and	r3,r6,r3
  8047a4:	10a0002c 	andhi	r2,r2,32768
  8047a8:	10c4b03a 	or	r2,r2,r3
  8047ac:	280a97fa 	slli	r5,r5,31
  8047b0:	1104b03a 	or	r2,r2,r4
  8047b4:	00e00034 	movhi	r3,32768
  8047b8:	18ffffc4 	addi	r3,r3,-1
  8047bc:	10c4703a 	and	r2,r2,r3
  8047c0:	1144b03a 	or	r2,r2,r5
  8047c4:	f800283a 	ret
  8047c8:	21000217 	ldw	r4,8(r4)
  8047cc:	00bfe084 	movi	r2,-126
  8047d0:	20801b16 	blt	r4,r2,804840 <__pack_f+0xe0>
  8047d4:	00801fc4 	movi	r2,127
  8047d8:	11001016 	blt	r2,r4,80481c <__pack_f+0xbc>
  8047dc:	308e703a 	and	r7,r6,r2
  8047e0:	2087883a 	add	r3,r4,r2
  8047e4:	00801004 	movi	r2,64
  8047e8:	38800526 	beq	r7,r2,804800 <__pack_f+0xa0>
  8047ec:	31800fc4 	addi	r6,r6,63
  8047f0:	30000716 	blt	r6,zero,804810 <__pack_f+0xb0>
  8047f4:	300490ba 	slli	r2,r6,2
  8047f8:	100cd27a 	srli	r6,r2,9
  8047fc:	003fe406 	br	804790 <__pack_f+0x30>
  804800:	3080200c 	andi	r2,r6,128
  804804:	103ffa26 	beq	r2,zero,8047f0 <__pack_f+0x90>
  804808:	31cd883a 	add	r6,r6,r7
  80480c:	003ff806 	br	8047f0 <__pack_f+0x90>
  804810:	300cd07a 	srli	r6,r6,1
  804814:	18c00044 	addi	r3,r3,1
  804818:	003ff606 	br	8047f4 <__pack_f+0x94>
  80481c:	000d883a 	mov	r6,zero
  804820:	00ffffc4 	movi	r3,-1
  804824:	003fda06 	br	804790 <__pack_f+0x30>
  804828:	31800434 	orhi	r6,r6,16
  80482c:	00802034 	movhi	r2,128
  804830:	10bfffc4 	addi	r2,r2,-1
  804834:	308c703a 	and	r6,r6,r2
  804838:	00ffffc4 	movi	r3,-1
  80483c:	003fd406 	br	804790 <__pack_f+0x30>
  804840:	1109c83a 	sub	r4,r2,r4
  804844:	00800644 	movi	r2,25
  804848:	11001216 	blt	r2,r4,804894 <__pack_f+0x134>
  80484c:	3904983a 	sll	r2,r7,r4
  804850:	3106d83a 	srl	r3,r6,r4
  804854:	10bfffc4 	addi	r2,r2,-1
  804858:	3084703a 	and	r2,r6,r2
  80485c:	1004c03a 	cmpne	r2,r2,zero
  804860:	1886b03a 	or	r3,r3,r2
  804864:	19001fcc 	andi	r4,r3,127
  804868:	00801004 	movi	r2,64
  80486c:	20800c26 	beq	r4,r2,8048a0 <__pack_f+0x140>
  804870:	18c00fc4 	addi	r3,r3,63
  804874:	00900034 	movhi	r2,16384
  804878:	10bfffc4 	addi	r2,r2,-1
  80487c:	180cd1fa 	srli	r6,r3,7
  804880:	10c7803a 	cmpltu	r3,r2,r3
  804884:	00802034 	movhi	r2,128
  804888:	10bfffc4 	addi	r2,r2,-1
  80488c:	308c703a 	and	r6,r6,r2
  804890:	003fbf06 	br	804790 <__pack_f+0x30>
  804894:	0007883a 	mov	r3,zero
  804898:	000d883a 	mov	r6,zero
  80489c:	003ff906 	br	804884 <__pack_f+0x124>
  8048a0:	1880200c 	andi	r2,r3,128
  8048a4:	10000126 	beq	r2,zero,8048ac <__pack_f+0x14c>
  8048a8:	1907883a 	add	r3,r3,r4
  8048ac:	180cd1fa 	srli	r6,r3,7
  8048b0:	00900034 	movhi	r2,16384
  8048b4:	10bfffc4 	addi	r2,r2,-1
  8048b8:	10c7803a 	cmpltu	r3,r2,r3
  8048bc:	003ff106 	br	804884 <__pack_f+0x124>

008048c0 <__unpack_f>:
  8048c0:	21800017 	ldw	r6,0(r4)
  8048c4:	00c02034 	movhi	r3,128
  8048c8:	18ffffc4 	addi	r3,r3,-1
  8048cc:	3004d5fa 	srli	r2,r6,23
  8048d0:	3008d7fa 	srli	r4,r6,31
  8048d4:	30ce703a 	and	r7,r6,r3
  8048d8:	10c03fcc 	andi	r3,r2,255
  8048dc:	29000115 	stw	r4,4(r5)
  8048e0:	1800131e 	bne	r3,zero,804930 <__unpack_f+0x70>
  8048e4:	38000f26 	beq	r7,zero,804924 <__unpack_f+0x64>
  8048e8:	380691fa 	slli	r3,r7,7
  8048ec:	01bfe084 	movi	r6,-126
  8048f0:	008000c4 	movi	r2,3
  8048f4:	01100034 	movhi	r4,16384
  8048f8:	213fffc4 	addi	r4,r4,-1
  8048fc:	28800015 	stw	r2,0(r5)
  804900:	29800215 	stw	r6,8(r5)
  804904:	20c00536 	bltu	r4,r3,80491c <__unpack_f+0x5c>
  804908:	3005883a 	mov	r2,r6
  80490c:	18c7883a 	add	r3,r3,r3
  804910:	10bfffc4 	addi	r2,r2,-1
  804914:	20fffd2e 	bgeu	r4,r3,80490c <__unpack_f+0x4c>
  804918:	28800215 	stw	r2,8(r5)
  80491c:	28c00315 	stw	r3,12(r5)
  804920:	f800283a 	ret
  804924:	00800084 	movi	r2,2
  804928:	28800015 	stw	r2,0(r5)
  80492c:	f800283a 	ret
  804930:	00803fc4 	movi	r2,255
  804934:	18800826 	beq	r3,r2,804958 <__unpack_f+0x98>
  804938:	380491fa 	slli	r2,r7,7
  80493c:	18ffe044 	addi	r3,r3,-127
  804940:	28c00215 	stw	r3,8(r5)
  804944:	10900034 	orhi	r2,r2,16384
  804948:	28800315 	stw	r2,12(r5)
  80494c:	008000c4 	movi	r2,3
  804950:	28800015 	stw	r2,0(r5)
  804954:	f800283a 	ret
  804958:	3800031e 	bne	r7,zero,804968 <__unpack_f+0xa8>
  80495c:	00800104 	movi	r2,4
  804960:	28800015 	stw	r2,0(r5)
  804964:	f800283a 	ret
  804968:	3080042c 	andhi	r2,r6,16
  80496c:	10000426 	beq	r2,zero,804980 <__unpack_f+0xc0>
  804970:	00800044 	movi	r2,1
  804974:	28800015 	stw	r2,0(r5)
  804978:	29c00315 	stw	r7,12(r5)
  80497c:	f800283a 	ret
  804980:	28000015 	stw	zero,0(r5)
  804984:	003ffc06 	br	804978 <__unpack_f+0xb8>

00804988 <__make_fp>:
  804988:	defffb04 	addi	sp,sp,-20
  80498c:	d9000015 	stw	r4,0(sp)
  804990:	d809883a 	mov	r4,sp
  804994:	dfc00415 	stw	ra,16(sp)
  804998:	d9400115 	stw	r5,4(sp)
  80499c:	d9800215 	stw	r6,8(sp)
  8049a0:	d9c00315 	stw	r7,12(sp)
  8049a4:	08047600 	call	804760 <__pack_f>
  8049a8:	dfc00417 	ldw	ra,16(sp)
  8049ac:	dec00504 	addi	sp,sp,20
  8049b0:	f800283a 	ret

008049b4 <__pack_d>:
  8049b4:	20c00017 	ldw	r3,0(r4)
  8049b8:	defffd04 	addi	sp,sp,-12
  8049bc:	dc000015 	stw	r16,0(sp)
  8049c0:	dc800215 	stw	r18,8(sp)
  8049c4:	dc400115 	stw	r17,4(sp)
  8049c8:	00800044 	movi	r2,1
  8049cc:	22000317 	ldw	r8,12(r4)
  8049d0:	001f883a 	mov	r15,zero
  8049d4:	22400417 	ldw	r9,16(r4)
  8049d8:	24000117 	ldw	r16,4(r4)
  8049dc:	10c0552e 	bgeu	r2,r3,804b34 <__pack_d+0x180>
  8049e0:	00800104 	movi	r2,4
  8049e4:	18804f26 	beq	r3,r2,804b24 <__pack_d+0x170>
  8049e8:	00800084 	movi	r2,2
  8049ec:	18800226 	beq	r3,r2,8049f8 <__pack_d+0x44>
  8049f0:	4244b03a 	or	r2,r8,r9
  8049f4:	10001a1e 	bne	r2,zero,804a60 <__pack_d+0xac>
  8049f8:	000d883a 	mov	r6,zero
  8049fc:	000f883a 	mov	r7,zero
  804a00:	0011883a 	mov	r8,zero
  804a04:	00800434 	movhi	r2,16
  804a08:	10bfffc4 	addi	r2,r2,-1
  804a0c:	301d883a 	mov	r14,r6
  804a10:	3884703a 	and	r2,r7,r2
  804a14:	400a953a 	slli	r5,r8,20
  804a18:	79bffc2c 	andhi	r6,r15,65520
  804a1c:	308cb03a 	or	r6,r6,r2
  804a20:	00e00434 	movhi	r3,32784
  804a24:	18ffffc4 	addi	r3,r3,-1
  804a28:	800497fa 	slli	r2,r16,31
  804a2c:	30c6703a 	and	r3,r6,r3
  804a30:	1946b03a 	or	r3,r3,r5
  804a34:	01600034 	movhi	r5,32768
  804a38:	297fffc4 	addi	r5,r5,-1
  804a3c:	194a703a 	and	r5,r3,r5
  804a40:	288ab03a 	or	r5,r5,r2
  804a44:	2807883a 	mov	r3,r5
  804a48:	7005883a 	mov	r2,r14
  804a4c:	dc800217 	ldw	r18,8(sp)
  804a50:	dc400117 	ldw	r17,4(sp)
  804a54:	dc000017 	ldw	r16,0(sp)
  804a58:	dec00304 	addi	sp,sp,12
  804a5c:	f800283a 	ret
  804a60:	21000217 	ldw	r4,8(r4)
  804a64:	00bf0084 	movi	r2,-1022
  804a68:	20803f16 	blt	r4,r2,804b68 <__pack_d+0x1b4>
  804a6c:	0080ffc4 	movi	r2,1023
  804a70:	11002c16 	blt	r2,r4,804b24 <__pack_d+0x170>
  804a74:	00803fc4 	movi	r2,255
  804a78:	408c703a 	and	r6,r8,r2
  804a7c:	00802004 	movi	r2,128
  804a80:	0007883a 	mov	r3,zero
  804a84:	000f883a 	mov	r7,zero
  804a88:	2280ffc4 	addi	r10,r4,1023
  804a8c:	30801e26 	beq	r6,r2,804b08 <__pack_d+0x154>
  804a90:	00801fc4 	movi	r2,127
  804a94:	4089883a 	add	r4,r8,r2
  804a98:	220d803a 	cmpltu	r6,r4,r8
  804a9c:	324d883a 	add	r6,r6,r9
  804aa0:	2011883a 	mov	r8,r4
  804aa4:	3013883a 	mov	r9,r6
  804aa8:	00880034 	movhi	r2,8192
  804aac:	10bfffc4 	addi	r2,r2,-1
  804ab0:	12400d36 	bltu	r2,r9,804ae8 <__pack_d+0x134>
  804ab4:	4804963a 	slli	r2,r9,24
  804ab8:	400cd23a 	srli	r6,r8,8
  804abc:	480ed23a 	srli	r7,r9,8
  804ac0:	013fffc4 	movi	r4,-1
  804ac4:	118cb03a 	or	r6,r2,r6
  804ac8:	01400434 	movhi	r5,16
  804acc:	297fffc4 	addi	r5,r5,-1
  804ad0:	3104703a 	and	r2,r6,r4
  804ad4:	3946703a 	and	r3,r7,r5
  804ad8:	5201ffcc 	andi	r8,r10,2047
  804adc:	100d883a 	mov	r6,r2
  804ae0:	180f883a 	mov	r7,r3
  804ae4:	003fc706 	br	804a04 <__pack_d+0x50>
  804ae8:	480897fa 	slli	r4,r9,31
  804aec:	4004d07a 	srli	r2,r8,1
  804af0:	4806d07a 	srli	r3,r9,1
  804af4:	52800044 	addi	r10,r10,1
  804af8:	2084b03a 	or	r2,r4,r2
  804afc:	1011883a 	mov	r8,r2
  804b00:	1813883a 	mov	r9,r3
  804b04:	003feb06 	br	804ab4 <__pack_d+0x100>
  804b08:	383fe11e 	bne	r7,zero,804a90 <__pack_d+0xdc>
  804b0c:	01004004 	movi	r4,256
  804b10:	4104703a 	and	r2,r8,r4
  804b14:	10c4b03a 	or	r2,r2,r3
  804b18:	103fe326 	beq	r2,zero,804aa8 <__pack_d+0xf4>
  804b1c:	3005883a 	mov	r2,r6
  804b20:	003fdc06 	br	804a94 <__pack_d+0xe0>
  804b24:	000d883a 	mov	r6,zero
  804b28:	000f883a 	mov	r7,zero
  804b2c:	0201ffc4 	movi	r8,2047
  804b30:	003fb406 	br	804a04 <__pack_d+0x50>
  804b34:	0005883a 	mov	r2,zero
  804b38:	00c00234 	movhi	r3,8
  804b3c:	408cb03a 	or	r6,r8,r2
  804b40:	48ceb03a 	or	r7,r9,r3
  804b44:	013fffc4 	movi	r4,-1
  804b48:	01400434 	movhi	r5,16
  804b4c:	297fffc4 	addi	r5,r5,-1
  804b50:	3104703a 	and	r2,r6,r4
  804b54:	3946703a 	and	r3,r7,r5
  804b58:	100d883a 	mov	r6,r2
  804b5c:	180f883a 	mov	r7,r3
  804b60:	0201ffc4 	movi	r8,2047
  804b64:	003fa706 	br	804a04 <__pack_d+0x50>
  804b68:	1109c83a 	sub	r4,r2,r4
  804b6c:	00800e04 	movi	r2,56
  804b70:	11004316 	blt	r2,r4,804c80 <__pack_d+0x2cc>
  804b74:	21fff804 	addi	r7,r4,-32
  804b78:	38004516 	blt	r7,zero,804c90 <__pack_d+0x2dc>
  804b7c:	49d8d83a 	srl	r12,r9,r7
  804b80:	001b883a 	mov	r13,zero
  804b84:	0023883a 	mov	r17,zero
  804b88:	01400044 	movi	r5,1
  804b8c:	0025883a 	mov	r18,zero
  804b90:	38004716 	blt	r7,zero,804cb0 <__pack_d+0x2fc>
  804b94:	29d6983a 	sll	r11,r5,r7
  804b98:	0015883a 	mov	r10,zero
  804b9c:	00bfffc4 	movi	r2,-1
  804ba0:	5089883a 	add	r4,r10,r2
  804ba4:	588b883a 	add	r5,r11,r2
  804ba8:	228d803a 	cmpltu	r6,r4,r10
  804bac:	314b883a 	add	r5,r6,r5
  804bb0:	4104703a 	and	r2,r8,r4
  804bb4:	4946703a 	and	r3,r9,r5
  804bb8:	10c4b03a 	or	r2,r2,r3
  804bbc:	10000226 	beq	r2,zero,804bc8 <__pack_d+0x214>
  804bc0:	04400044 	movi	r17,1
  804bc4:	0025883a 	mov	r18,zero
  804bc8:	00803fc4 	movi	r2,255
  804bcc:	644eb03a 	or	r7,r12,r17
  804bd0:	3892703a 	and	r9,r7,r2
  804bd4:	00802004 	movi	r2,128
  804bd8:	6c90b03a 	or	r8,r13,r18
  804bdc:	0015883a 	mov	r10,zero
  804be0:	48801626 	beq	r9,r2,804c3c <__pack_d+0x288>
  804be4:	01001fc4 	movi	r4,127
  804be8:	3905883a 	add	r2,r7,r4
  804bec:	11cd803a 	cmpltu	r6,r2,r7
  804bf0:	320d883a 	add	r6,r6,r8
  804bf4:	100f883a 	mov	r7,r2
  804bf8:	00840034 	movhi	r2,4096
  804bfc:	10bfffc4 	addi	r2,r2,-1
  804c00:	3011883a 	mov	r8,r6
  804c04:	0007883a 	mov	r3,zero
  804c08:	11801b36 	bltu	r2,r6,804c78 <__pack_d+0x2c4>
  804c0c:	4004963a 	slli	r2,r8,24
  804c10:	3808d23a 	srli	r4,r7,8
  804c14:	400ad23a 	srli	r5,r8,8
  804c18:	1813883a 	mov	r9,r3
  804c1c:	1108b03a 	or	r4,r2,r4
  804c20:	00bfffc4 	movi	r2,-1
  804c24:	00c00434 	movhi	r3,16
  804c28:	18ffffc4 	addi	r3,r3,-1
  804c2c:	208c703a 	and	r6,r4,r2
  804c30:	28ce703a 	and	r7,r5,r3
  804c34:	4a01ffcc 	andi	r8,r9,2047
  804c38:	003f7206 	br	804a04 <__pack_d+0x50>
  804c3c:	503fe91e 	bne	r10,zero,804be4 <__pack_d+0x230>
  804c40:	01004004 	movi	r4,256
  804c44:	3904703a 	and	r2,r7,r4
  804c48:	0007883a 	mov	r3,zero
  804c4c:	10c4b03a 	or	r2,r2,r3
  804c50:	10000626 	beq	r2,zero,804c6c <__pack_d+0x2b8>
  804c54:	3a45883a 	add	r2,r7,r9
  804c58:	11cd803a 	cmpltu	r6,r2,r7
  804c5c:	320d883a 	add	r6,r6,r8
  804c60:	100f883a 	mov	r7,r2
  804c64:	3011883a 	mov	r8,r6
  804c68:	0007883a 	mov	r3,zero
  804c6c:	00840034 	movhi	r2,4096
  804c70:	10bfffc4 	addi	r2,r2,-1
  804c74:	123fe52e 	bgeu	r2,r8,804c0c <__pack_d+0x258>
  804c78:	00c00044 	movi	r3,1
  804c7c:	003fe306 	br	804c0c <__pack_d+0x258>
  804c80:	0009883a 	mov	r4,zero
  804c84:	0013883a 	mov	r9,zero
  804c88:	000b883a 	mov	r5,zero
  804c8c:	003fe406 	br	804c20 <__pack_d+0x26c>
  804c90:	4a47883a 	add	r3,r9,r9
  804c94:	008007c4 	movi	r2,31
  804c98:	1105c83a 	sub	r2,r2,r4
  804c9c:	1886983a 	sll	r3,r3,r2
  804ca0:	4118d83a 	srl	r12,r8,r4
  804ca4:	491ad83a 	srl	r13,r9,r4
  804ca8:	1b18b03a 	or	r12,r3,r12
  804cac:	003fb506 	br	804b84 <__pack_d+0x1d0>
  804cb0:	2806d07a 	srli	r3,r5,1
  804cb4:	008007c4 	movi	r2,31
  804cb8:	1105c83a 	sub	r2,r2,r4
  804cbc:	1896d83a 	srl	r11,r3,r2
  804cc0:	2914983a 	sll	r10,r5,r4
  804cc4:	003fb506 	br	804b9c <__pack_d+0x1e8>

00804cc8 <__unpack_d>:
  804cc8:	20c00117 	ldw	r3,4(r4)
  804ccc:	22400017 	ldw	r9,0(r4)
  804cd0:	00800434 	movhi	r2,16
  804cd4:	10bfffc4 	addi	r2,r2,-1
  804cd8:	1808d53a 	srli	r4,r3,20
  804cdc:	180cd7fa 	srli	r6,r3,31
  804ce0:	1894703a 	and	r10,r3,r2
  804ce4:	2201ffcc 	andi	r8,r4,2047
  804ce8:	281b883a 	mov	r13,r5
  804cec:	4817883a 	mov	r11,r9
  804cf0:	29800115 	stw	r6,4(r5)
  804cf4:	5019883a 	mov	r12,r10
  804cf8:	40001e1e 	bne	r8,zero,804d74 <__unpack_d+0xac>
  804cfc:	4a84b03a 	or	r2,r9,r10
  804d00:	10001926 	beq	r2,zero,804d68 <__unpack_d+0xa0>
  804d04:	4804d63a 	srli	r2,r9,24
  804d08:	500c923a 	slli	r6,r10,8
  804d0c:	013f0084 	movi	r4,-1022
  804d10:	00c40034 	movhi	r3,4096
  804d14:	18ffffc4 	addi	r3,r3,-1
  804d18:	118cb03a 	or	r6,r2,r6
  804d1c:	008000c4 	movi	r2,3
  804d20:	480a923a 	slli	r5,r9,8
  804d24:	68800015 	stw	r2,0(r13)
  804d28:	69000215 	stw	r4,8(r13)
  804d2c:	19800b36 	bltu	r3,r6,804d5c <__unpack_d+0x94>
  804d30:	200f883a 	mov	r7,r4
  804d34:	1811883a 	mov	r8,r3
  804d38:	2945883a 	add	r2,r5,r5
  804d3c:	1149803a 	cmpltu	r4,r2,r5
  804d40:	3187883a 	add	r3,r6,r6
  804d44:	20c9883a 	add	r4,r4,r3
  804d48:	100b883a 	mov	r5,r2
  804d4c:	200d883a 	mov	r6,r4
  804d50:	39ffffc4 	addi	r7,r7,-1
  804d54:	413ff82e 	bgeu	r8,r4,804d38 <__unpack_d+0x70>
  804d58:	69c00215 	stw	r7,8(r13)
  804d5c:	69800415 	stw	r6,16(r13)
  804d60:	69400315 	stw	r5,12(r13)
  804d64:	f800283a 	ret
  804d68:	00800084 	movi	r2,2
  804d6c:	28800015 	stw	r2,0(r5)
  804d70:	f800283a 	ret
  804d74:	0081ffc4 	movi	r2,2047
  804d78:	40800f26 	beq	r8,r2,804db8 <__unpack_d+0xf0>
  804d7c:	480cd63a 	srli	r6,r9,24
  804d80:	5006923a 	slli	r3,r10,8
  804d84:	4804923a 	slli	r2,r9,8
  804d88:	0009883a 	mov	r4,zero
  804d8c:	30c6b03a 	or	r3,r6,r3
  804d90:	01440034 	movhi	r5,4096
  804d94:	110cb03a 	or	r6,r2,r4
  804d98:	423f0044 	addi	r8,r8,-1023
  804d9c:	194eb03a 	or	r7,r3,r5
  804da0:	008000c4 	movi	r2,3
  804da4:	69c00415 	stw	r7,16(r13)
  804da8:	6a000215 	stw	r8,8(r13)
  804dac:	68800015 	stw	r2,0(r13)
  804db0:	69800315 	stw	r6,12(r13)
  804db4:	f800283a 	ret
  804db8:	4a84b03a 	or	r2,r9,r10
  804dbc:	1000031e 	bne	r2,zero,804dcc <__unpack_d+0x104>
  804dc0:	00800104 	movi	r2,4
  804dc4:	28800015 	stw	r2,0(r5)
  804dc8:	f800283a 	ret
  804dcc:	0009883a 	mov	r4,zero
  804dd0:	01400234 	movhi	r5,8
  804dd4:	4904703a 	and	r2,r9,r4
  804dd8:	5146703a 	and	r3,r10,r5
  804ddc:	10c4b03a 	or	r2,r2,r3
  804de0:	10000526 	beq	r2,zero,804df8 <__unpack_d+0x130>
  804de4:	00800044 	movi	r2,1
  804de8:	68800015 	stw	r2,0(r13)
  804dec:	6b000415 	stw	r12,16(r13)
  804df0:	6ac00315 	stw	r11,12(r13)
  804df4:	f800283a 	ret
  804df8:	68000015 	stw	zero,0(r13)
  804dfc:	003ffb06 	br	804dec <__unpack_d+0x124>

00804e00 <__fpcmp_parts_d>:
  804e00:	21800017 	ldw	r6,0(r4)
  804e04:	00c00044 	movi	r3,1
  804e08:	19800a2e 	bgeu	r3,r6,804e34 <__fpcmp_parts_d+0x34>
  804e0c:	28800017 	ldw	r2,0(r5)
  804e10:	1880082e 	bgeu	r3,r2,804e34 <__fpcmp_parts_d+0x34>
  804e14:	00c00104 	movi	r3,4
  804e18:	30c02626 	beq	r6,r3,804eb4 <__fpcmp_parts_d+0xb4>
  804e1c:	10c02226 	beq	r2,r3,804ea8 <__fpcmp_parts_d+0xa8>
  804e20:	00c00084 	movi	r3,2
  804e24:	30c00526 	beq	r6,r3,804e3c <__fpcmp_parts_d+0x3c>
  804e28:	10c0071e 	bne	r2,r3,804e48 <__fpcmp_parts_d+0x48>
  804e2c:	20800117 	ldw	r2,4(r4)
  804e30:	1000091e 	bne	r2,zero,804e58 <__fpcmp_parts_d+0x58>
  804e34:	00800044 	movi	r2,1
  804e38:	f800283a 	ret
  804e3c:	10c01a1e 	bne	r2,r3,804ea8 <__fpcmp_parts_d+0xa8>
  804e40:	0005883a 	mov	r2,zero
  804e44:	f800283a 	ret
  804e48:	22000117 	ldw	r8,4(r4)
  804e4c:	28800117 	ldw	r2,4(r5)
  804e50:	40800326 	beq	r8,r2,804e60 <__fpcmp_parts_d+0x60>
  804e54:	403ff726 	beq	r8,zero,804e34 <__fpcmp_parts_d+0x34>
  804e58:	00bfffc4 	movi	r2,-1
  804e5c:	f800283a 	ret
  804e60:	20c00217 	ldw	r3,8(r4)
  804e64:	28800217 	ldw	r2,8(r5)
  804e68:	10fffa16 	blt	r2,r3,804e54 <__fpcmp_parts_d+0x54>
  804e6c:	18800916 	blt	r3,r2,804e94 <__fpcmp_parts_d+0x94>
  804e70:	21c00417 	ldw	r7,16(r4)
  804e74:	28c00417 	ldw	r3,16(r5)
  804e78:	21800317 	ldw	r6,12(r4)
  804e7c:	28800317 	ldw	r2,12(r5)
  804e80:	19fff436 	bltu	r3,r7,804e54 <__fpcmp_parts_d+0x54>
  804e84:	38c00526 	beq	r7,r3,804e9c <__fpcmp_parts_d+0x9c>
  804e88:	38c00236 	bltu	r7,r3,804e94 <__fpcmp_parts_d+0x94>
  804e8c:	19ffec1e 	bne	r3,r7,804e40 <__fpcmp_parts_d+0x40>
  804e90:	30bfeb2e 	bgeu	r6,r2,804e40 <__fpcmp_parts_d+0x40>
  804e94:	403fe71e 	bne	r8,zero,804e34 <__fpcmp_parts_d+0x34>
  804e98:	003fef06 	br	804e58 <__fpcmp_parts_d+0x58>
  804e9c:	11bffa2e 	bgeu	r2,r6,804e88 <__fpcmp_parts_d+0x88>
  804ea0:	403fe426 	beq	r8,zero,804e34 <__fpcmp_parts_d+0x34>
  804ea4:	003fec06 	br	804e58 <__fpcmp_parts_d+0x58>
  804ea8:	28800117 	ldw	r2,4(r5)
  804eac:	103fe11e 	bne	r2,zero,804e34 <__fpcmp_parts_d+0x34>
  804eb0:	003fe906 	br	804e58 <__fpcmp_parts_d+0x58>
  804eb4:	11bfdd1e 	bne	r2,r6,804e2c <__fpcmp_parts_d+0x2c>
  804eb8:	28c00117 	ldw	r3,4(r5)
  804ebc:	20800117 	ldw	r2,4(r4)
  804ec0:	1885c83a 	sub	r2,r3,r2
  804ec4:	f800283a 	ret

00804ec8 <__errno>:
  804ec8:	00c02074 	movhi	r3,129
  804ecc:	18dbe704 	addi	r3,r3,28572
  804ed0:	18800017 	ldw	r2,0(r3)
  804ed4:	f800283a 	ret

00804ed8 <memcpy>:
  804ed8:	01c003c4 	movi	r7,15
  804edc:	2007883a 	mov	r3,r4
  804ee0:	3980032e 	bgeu	r7,r6,804ef0 <memcpy+0x18>
  804ee4:	2904b03a 	or	r2,r5,r4
  804ee8:	108000cc 	andi	r2,r2,3
  804eec:	10000926 	beq	r2,zero,804f14 <memcpy+0x3c>
  804ef0:	30000626 	beq	r6,zero,804f0c <memcpy+0x34>
  804ef4:	30cd883a 	add	r6,r6,r3
  804ef8:	28800003 	ldbu	r2,0(r5)
  804efc:	29400044 	addi	r5,r5,1
  804f00:	18800005 	stb	r2,0(r3)
  804f04:	18c00044 	addi	r3,r3,1
  804f08:	30fffb1e 	bne	r6,r3,804ef8 <memcpy+0x20>
  804f0c:	2005883a 	mov	r2,r4
  804f10:	f800283a 	ret
  804f14:	3811883a 	mov	r8,r7
  804f18:	200f883a 	mov	r7,r4
  804f1c:	28c00017 	ldw	r3,0(r5)
  804f20:	31bffc04 	addi	r6,r6,-16
  804f24:	38c00015 	stw	r3,0(r7)
  804f28:	28800117 	ldw	r2,4(r5)
  804f2c:	38800115 	stw	r2,4(r7)
  804f30:	28c00217 	ldw	r3,8(r5)
  804f34:	38c00215 	stw	r3,8(r7)
  804f38:	28800317 	ldw	r2,12(r5)
  804f3c:	29400404 	addi	r5,r5,16
  804f40:	38800315 	stw	r2,12(r7)
  804f44:	39c00404 	addi	r7,r7,16
  804f48:	41bff436 	bltu	r8,r6,804f1c <memcpy+0x44>
  804f4c:	008000c4 	movi	r2,3
  804f50:	1180072e 	bgeu	r2,r6,804f70 <memcpy+0x98>
  804f54:	1007883a 	mov	r3,r2
  804f58:	28800017 	ldw	r2,0(r5)
  804f5c:	31bfff04 	addi	r6,r6,-4
  804f60:	29400104 	addi	r5,r5,4
  804f64:	38800015 	stw	r2,0(r7)
  804f68:	39c00104 	addi	r7,r7,4
  804f6c:	19bffa36 	bltu	r3,r6,804f58 <memcpy+0x80>
  804f70:	3807883a 	mov	r3,r7
  804f74:	003fde06 	br	804ef0 <memcpy+0x18>

00804f78 <putchar>:
  804f78:	00802074 	movhi	r2,129
  804f7c:	109be704 	addi	r2,r2,28572
  804f80:	11800017 	ldw	r6,0(r2)
  804f84:	200b883a 	mov	r5,r4
  804f88:	3009883a 	mov	r4,r6
  804f8c:	31800217 	ldw	r6,8(r6)
  804f90:	0805f681 	jmpi	805f68 <_putc_r>

00804f94 <_putchar_r>:
  804f94:	21800217 	ldw	r6,8(r4)
  804f98:	0805f681 	jmpi	805f68 <_putc_r>

00804f9c <_puts_r>:
  804f9c:	defff604 	addi	sp,sp,-40
  804fa0:	dc400715 	stw	r17,28(sp)
  804fa4:	2023883a 	mov	r17,r4
  804fa8:	2809883a 	mov	r4,r5
  804fac:	dfc00915 	stw	ra,36(sp)
  804fb0:	dcc00815 	stw	r19,32(sp)
  804fb4:	2827883a 	mov	r19,r5
  804fb8:	08050500 	call	805050 <strlen>
  804fbc:	89400217 	ldw	r5,8(r17)
  804fc0:	00c02074 	movhi	r3,129
  804fc4:	18d4d304 	addi	r3,r3,21324
  804fc8:	01c00044 	movi	r7,1
  804fcc:	12000044 	addi	r8,r2,1
  804fd0:	d8c00515 	stw	r3,20(sp)
  804fd4:	d9c00615 	stw	r7,24(sp)
  804fd8:	d8c00304 	addi	r3,sp,12
  804fdc:	01c00084 	movi	r7,2
  804fe0:	8809883a 	mov	r4,r17
  804fe4:	d80d883a 	mov	r6,sp
  804fe8:	d8c00015 	stw	r3,0(sp)
  804fec:	dcc00315 	stw	r19,12(sp)
  804ff0:	da000215 	stw	r8,8(sp)
  804ff4:	d9c00115 	stw	r7,4(sp)
  804ff8:	d8800415 	stw	r2,16(sp)
  804ffc:	08050c40 	call	8050c4 <__sfvwrite_r>
  805000:	00ffffc4 	movi	r3,-1
  805004:	10000626 	beq	r2,zero,805020 <_puts_r+0x84>
  805008:	1805883a 	mov	r2,r3
  80500c:	dfc00917 	ldw	ra,36(sp)
  805010:	dcc00817 	ldw	r19,32(sp)
  805014:	dc400717 	ldw	r17,28(sp)
  805018:	dec00a04 	addi	sp,sp,40
  80501c:	f800283a 	ret
  805020:	00c00284 	movi	r3,10
  805024:	1805883a 	mov	r2,r3
  805028:	dfc00917 	ldw	ra,36(sp)
  80502c:	dcc00817 	ldw	r19,32(sp)
  805030:	dc400717 	ldw	r17,28(sp)
  805034:	dec00a04 	addi	sp,sp,40
  805038:	f800283a 	ret

0080503c <puts>:
  80503c:	00802074 	movhi	r2,129
  805040:	109be704 	addi	r2,r2,28572
  805044:	200b883a 	mov	r5,r4
  805048:	11000017 	ldw	r4,0(r2)
  80504c:	0804f9c1 	jmpi	804f9c <_puts_r>

00805050 <strlen>:
  805050:	208000cc 	andi	r2,r4,3
  805054:	2011883a 	mov	r8,r4
  805058:	1000161e 	bne	r2,zero,8050b4 <strlen+0x64>
  80505c:	20c00017 	ldw	r3,0(r4)
  805060:	017fbff4 	movhi	r5,65279
  805064:	297fbfc4 	addi	r5,r5,-257
  805068:	01e02074 	movhi	r7,32897
  80506c:	39e02004 	addi	r7,r7,-32640
  805070:	1945883a 	add	r2,r3,r5
  805074:	11c4703a 	and	r2,r2,r7
  805078:	00c6303a 	nor	r3,zero,r3
  80507c:	1886703a 	and	r3,r3,r2
  805080:	18000c1e 	bne	r3,zero,8050b4 <strlen+0x64>
  805084:	280d883a 	mov	r6,r5
  805088:	380b883a 	mov	r5,r7
  80508c:	21000104 	addi	r4,r4,4
  805090:	20800017 	ldw	r2,0(r4)
  805094:	1187883a 	add	r3,r2,r6
  805098:	1946703a 	and	r3,r3,r5
  80509c:	0084303a 	nor	r2,zero,r2
  8050a0:	10c4703a 	and	r2,r2,r3
  8050a4:	103ff926 	beq	r2,zero,80508c <strlen+0x3c>
  8050a8:	20800007 	ldb	r2,0(r4)
  8050ac:	10000326 	beq	r2,zero,8050bc <strlen+0x6c>
  8050b0:	21000044 	addi	r4,r4,1
  8050b4:	20800007 	ldb	r2,0(r4)
  8050b8:	103ffd1e 	bne	r2,zero,8050b0 <strlen+0x60>
  8050bc:	2205c83a 	sub	r2,r4,r8
  8050c0:	f800283a 	ret

008050c4 <__sfvwrite_r>:
  8050c4:	30800217 	ldw	r2,8(r6)
  8050c8:	defff504 	addi	sp,sp,-44
  8050cc:	df000915 	stw	fp,36(sp)
  8050d0:	dd800715 	stw	r22,28(sp)
  8050d4:	dc800315 	stw	r18,12(sp)
  8050d8:	dfc00a15 	stw	ra,40(sp)
  8050dc:	ddc00815 	stw	r23,32(sp)
  8050e0:	dd400615 	stw	r21,24(sp)
  8050e4:	dd000515 	stw	r20,20(sp)
  8050e8:	dcc00415 	stw	r19,16(sp)
  8050ec:	dc400215 	stw	r17,8(sp)
  8050f0:	dc000115 	stw	r16,4(sp)
  8050f4:	302d883a 	mov	r22,r6
  8050f8:	2039883a 	mov	fp,r4
  8050fc:	2825883a 	mov	r18,r5
  805100:	10001c26 	beq	r2,zero,805174 <__sfvwrite_r+0xb0>
  805104:	29c0030b 	ldhu	r7,12(r5)
  805108:	3880020c 	andi	r2,r7,8
  80510c:	10002726 	beq	r2,zero,8051ac <__sfvwrite_r+0xe8>
  805110:	28800417 	ldw	r2,16(r5)
  805114:	10002526 	beq	r2,zero,8051ac <__sfvwrite_r+0xe8>
  805118:	3880008c 	andi	r2,r7,2
  80511c:	b5400017 	ldw	r21,0(r22)
  805120:	10002826 	beq	r2,zero,8051c4 <__sfvwrite_r+0x100>
  805124:	0021883a 	mov	r16,zero
  805128:	0023883a 	mov	r17,zero
  80512c:	880d883a 	mov	r6,r17
  805130:	e009883a 	mov	r4,fp
  805134:	00810004 	movi	r2,1024
  805138:	80006e26 	beq	r16,zero,8052f4 <__sfvwrite_r+0x230>
  80513c:	800f883a 	mov	r7,r16
  805140:	91400717 	ldw	r5,28(r18)
  805144:	1400012e 	bgeu	r2,r16,80514c <__sfvwrite_r+0x88>
  805148:	100f883a 	mov	r7,r2
  80514c:	90c00917 	ldw	r3,36(r18)
  805150:	183ee83a 	callr	r3
  805154:	1007883a 	mov	r3,r2
  805158:	80a1c83a 	sub	r16,r16,r2
  80515c:	88a3883a 	add	r17,r17,r2
  805160:	00806d0e 	bge	zero,r2,805318 <__sfvwrite_r+0x254>
  805164:	b0800217 	ldw	r2,8(r22)
  805168:	10c5c83a 	sub	r2,r2,r3
  80516c:	b0800215 	stw	r2,8(r22)
  805170:	103fee1e 	bne	r2,zero,80512c <__sfvwrite_r+0x68>
  805174:	0009883a 	mov	r4,zero
  805178:	2005883a 	mov	r2,r4
  80517c:	dfc00a17 	ldw	ra,40(sp)
  805180:	df000917 	ldw	fp,36(sp)
  805184:	ddc00817 	ldw	r23,32(sp)
  805188:	dd800717 	ldw	r22,28(sp)
  80518c:	dd400617 	ldw	r21,24(sp)
  805190:	dd000517 	ldw	r20,20(sp)
  805194:	dcc00417 	ldw	r19,16(sp)
  805198:	dc800317 	ldw	r18,12(sp)
  80519c:	dc400217 	ldw	r17,8(sp)
  8051a0:	dc000117 	ldw	r16,4(sp)
  8051a4:	dec00b04 	addi	sp,sp,44
  8051a8:	f800283a 	ret
  8051ac:	08068000 	call	806800 <__swsetup_r>
  8051b0:	1000e41e 	bne	r2,zero,805544 <__sfvwrite_r+0x480>
  8051b4:	91c0030b 	ldhu	r7,12(r18)
  8051b8:	b5400017 	ldw	r21,0(r22)
  8051bc:	3880008c 	andi	r2,r7,2
  8051c0:	103fd81e 	bne	r2,zero,805124 <__sfvwrite_r+0x60>
  8051c4:	3880004c 	andi	r2,r7,1
  8051c8:	1005003a 	cmpeq	r2,r2,zero
  8051cc:	10005726 	beq	r2,zero,80532c <__sfvwrite_r+0x268>
  8051d0:	0029883a 	mov	r20,zero
  8051d4:	002f883a 	mov	r23,zero
  8051d8:	a0004226 	beq	r20,zero,8052e4 <__sfvwrite_r+0x220>
  8051dc:	3880800c 	andi	r2,r7,512
  8051e0:	94000217 	ldw	r16,8(r18)
  8051e4:	10008b26 	beq	r2,zero,805414 <__sfvwrite_r+0x350>
  8051e8:	800d883a 	mov	r6,r16
  8051ec:	a400a536 	bltu	r20,r16,805484 <__sfvwrite_r+0x3c0>
  8051f0:	3881200c 	andi	r2,r7,1152
  8051f4:	10002726 	beq	r2,zero,805294 <__sfvwrite_r+0x1d0>
  8051f8:	90800517 	ldw	r2,20(r18)
  8051fc:	92000417 	ldw	r8,16(r18)
  805200:	91400017 	ldw	r5,0(r18)
  805204:	1087883a 	add	r3,r2,r2
  805208:	1887883a 	add	r3,r3,r2
  80520c:	1808d7fa 	srli	r4,r3,31
  805210:	2a21c83a 	sub	r16,r5,r8
  805214:	80800044 	addi	r2,r16,1
  805218:	20c9883a 	add	r4,r4,r3
  80521c:	2027d07a 	srai	r19,r4,1
  805220:	a085883a 	add	r2,r20,r2
  805224:	980d883a 	mov	r6,r19
  805228:	9880022e 	bgeu	r19,r2,805234 <__sfvwrite_r+0x170>
  80522c:	1027883a 	mov	r19,r2
  805230:	100d883a 	mov	r6,r2
  805234:	3881000c 	andi	r2,r7,1024
  805238:	1000b826 	beq	r2,zero,80551c <__sfvwrite_r+0x458>
  80523c:	300b883a 	mov	r5,r6
  805240:	e009883a 	mov	r4,fp
  805244:	08055600 	call	805560 <_malloc_r>
  805248:	10003126 	beq	r2,zero,805310 <__sfvwrite_r+0x24c>
  80524c:	91400417 	ldw	r5,16(r18)
  805250:	1009883a 	mov	r4,r2
  805254:	800d883a 	mov	r6,r16
  805258:	1023883a 	mov	r17,r2
  80525c:	0804ed80 	call	804ed8 <memcpy>
  805260:	90c0030b 	ldhu	r3,12(r18)
  805264:	00beffc4 	movi	r2,-1025
  805268:	1886703a 	and	r3,r3,r2
  80526c:	18c02014 	ori	r3,r3,128
  805270:	90c0030d 	sth	r3,12(r18)
  805274:	9c07c83a 	sub	r3,r19,r16
  805278:	8c05883a 	add	r2,r17,r16
  80527c:	a00d883a 	mov	r6,r20
  805280:	a021883a 	mov	r16,r20
  805284:	90800015 	stw	r2,0(r18)
  805288:	90c00215 	stw	r3,8(r18)
  80528c:	94400415 	stw	r17,16(r18)
  805290:	94c00515 	stw	r19,20(r18)
  805294:	91000017 	ldw	r4,0(r18)
  805298:	b80b883a 	mov	r5,r23
  80529c:	a023883a 	mov	r17,r20
  8052a0:	0805d840 	call	805d84 <memmove>
  8052a4:	90c00217 	ldw	r3,8(r18)
  8052a8:	90800017 	ldw	r2,0(r18)
  8052ac:	a027883a 	mov	r19,r20
  8052b0:	1c07c83a 	sub	r3,r3,r16
  8052b4:	1405883a 	add	r2,r2,r16
  8052b8:	90c00215 	stw	r3,8(r18)
  8052bc:	a021883a 	mov	r16,r20
  8052c0:	90800015 	stw	r2,0(r18)
  8052c4:	b0800217 	ldw	r2,8(r22)
  8052c8:	1405c83a 	sub	r2,r2,r16
  8052cc:	b0800215 	stw	r2,8(r22)
  8052d0:	103fa826 	beq	r2,zero,805174 <__sfvwrite_r+0xb0>
  8052d4:	a469c83a 	sub	r20,r20,r17
  8052d8:	91c0030b 	ldhu	r7,12(r18)
  8052dc:	bcef883a 	add	r23,r23,r19
  8052e0:	a03fbe1e 	bne	r20,zero,8051dc <__sfvwrite_r+0x118>
  8052e4:	adc00017 	ldw	r23,0(r21)
  8052e8:	ad000117 	ldw	r20,4(r21)
  8052ec:	ad400204 	addi	r21,r21,8
  8052f0:	003fb906 	br	8051d8 <__sfvwrite_r+0x114>
  8052f4:	ac400017 	ldw	r17,0(r21)
  8052f8:	ac000117 	ldw	r16,4(r21)
  8052fc:	ad400204 	addi	r21,r21,8
  805300:	003f8a06 	br	80512c <__sfvwrite_r+0x68>
  805304:	91400417 	ldw	r5,16(r18)
  805308:	e009883a 	mov	r4,fp
  80530c:	0806f580 	call	806f58 <_free_r>
  805310:	00800304 	movi	r2,12
  805314:	e0800015 	stw	r2,0(fp)
  805318:	9080030b 	ldhu	r2,12(r18)
  80531c:	013fffc4 	movi	r4,-1
  805320:	10801014 	ori	r2,r2,64
  805324:	9080030d 	sth	r2,12(r18)
  805328:	003f9306 	br	805178 <__sfvwrite_r+0xb4>
  80532c:	0027883a 	mov	r19,zero
  805330:	002f883a 	mov	r23,zero
  805334:	d8000015 	stw	zero,0(sp)
  805338:	0029883a 	mov	r20,zero
  80533c:	98001e26 	beq	r19,zero,8053b8 <__sfvwrite_r+0x2f4>
  805340:	d8c00017 	ldw	r3,0(sp)
  805344:	1804c03a 	cmpne	r2,r3,zero
  805348:	10005e26 	beq	r2,zero,8054c4 <__sfvwrite_r+0x400>
  80534c:	9821883a 	mov	r16,r19
  805350:	a4c0012e 	bgeu	r20,r19,805358 <__sfvwrite_r+0x294>
  805354:	a021883a 	mov	r16,r20
  805358:	91000017 	ldw	r4,0(r18)
  80535c:	90800417 	ldw	r2,16(r18)
  805360:	91800217 	ldw	r6,8(r18)
  805364:	91c00517 	ldw	r7,20(r18)
  805368:	1100022e 	bgeu	r2,r4,805374 <__sfvwrite_r+0x2b0>
  80536c:	31e3883a 	add	r17,r6,r7
  805370:	8c001616 	blt	r17,r16,8053cc <__sfvwrite_r+0x308>
  805374:	81c03816 	blt	r16,r7,805458 <__sfvwrite_r+0x394>
  805378:	90c00917 	ldw	r3,36(r18)
  80537c:	91400717 	ldw	r5,28(r18)
  805380:	e009883a 	mov	r4,fp
  805384:	b80d883a 	mov	r6,r23
  805388:	183ee83a 	callr	r3
  80538c:	1023883a 	mov	r17,r2
  805390:	00bfe10e 	bge	zero,r2,805318 <__sfvwrite_r+0x254>
  805394:	a469c83a 	sub	r20,r20,r17
  805398:	a0001826 	beq	r20,zero,8053fc <__sfvwrite_r+0x338>
  80539c:	b0800217 	ldw	r2,8(r22)
  8053a0:	1445c83a 	sub	r2,r2,r17
  8053a4:	b0800215 	stw	r2,8(r22)
  8053a8:	103f7226 	beq	r2,zero,805174 <__sfvwrite_r+0xb0>
  8053ac:	9c67c83a 	sub	r19,r19,r17
  8053b0:	bc6f883a 	add	r23,r23,r17
  8053b4:	983fe21e 	bne	r19,zero,805340 <__sfvwrite_r+0x27c>
  8053b8:	adc00017 	ldw	r23,0(r21)
  8053bc:	acc00117 	ldw	r19,4(r21)
  8053c0:	ad400204 	addi	r21,r21,8
  8053c4:	d8000015 	stw	zero,0(sp)
  8053c8:	003fdc06 	br	80533c <__sfvwrite_r+0x278>
  8053cc:	b80b883a 	mov	r5,r23
  8053d0:	880d883a 	mov	r6,r17
  8053d4:	0805d840 	call	805d84 <memmove>
  8053d8:	90c00017 	ldw	r3,0(r18)
  8053dc:	e009883a 	mov	r4,fp
  8053e0:	900b883a 	mov	r5,r18
  8053e4:	1c47883a 	add	r3,r3,r17
  8053e8:	90c00015 	stw	r3,0(r18)
  8053ec:	080693c0 	call	80693c <_fflush_r>
  8053f0:	103fc91e 	bne	r2,zero,805318 <__sfvwrite_r+0x254>
  8053f4:	a469c83a 	sub	r20,r20,r17
  8053f8:	a03fe81e 	bne	r20,zero,80539c <__sfvwrite_r+0x2d8>
  8053fc:	e009883a 	mov	r4,fp
  805400:	900b883a 	mov	r5,r18
  805404:	080693c0 	call	80693c <_fflush_r>
  805408:	103fc31e 	bne	r2,zero,805318 <__sfvwrite_r+0x254>
  80540c:	d8000015 	stw	zero,0(sp)
  805410:	003fe206 	br	80539c <__sfvwrite_r+0x2d8>
  805414:	91000017 	ldw	r4,0(r18)
  805418:	90800417 	ldw	r2,16(r18)
  80541c:	1100022e 	bgeu	r2,r4,805428 <__sfvwrite_r+0x364>
  805420:	8023883a 	mov	r17,r16
  805424:	85003136 	bltu	r16,r20,8054ec <__sfvwrite_r+0x428>
  805428:	91c00517 	ldw	r7,20(r18)
  80542c:	a1c01836 	bltu	r20,r7,805490 <__sfvwrite_r+0x3cc>
  805430:	90c00917 	ldw	r3,36(r18)
  805434:	91400717 	ldw	r5,28(r18)
  805438:	e009883a 	mov	r4,fp
  80543c:	b80d883a 	mov	r6,r23
  805440:	183ee83a 	callr	r3
  805444:	1021883a 	mov	r16,r2
  805448:	00bfb30e 	bge	zero,r2,805318 <__sfvwrite_r+0x254>
  80544c:	1023883a 	mov	r17,r2
  805450:	1027883a 	mov	r19,r2
  805454:	003f9b06 	br	8052c4 <__sfvwrite_r+0x200>
  805458:	b80b883a 	mov	r5,r23
  80545c:	800d883a 	mov	r6,r16
  805460:	0805d840 	call	805d84 <memmove>
  805464:	90c00217 	ldw	r3,8(r18)
  805468:	90800017 	ldw	r2,0(r18)
  80546c:	8023883a 	mov	r17,r16
  805470:	1c07c83a 	sub	r3,r3,r16
  805474:	1405883a 	add	r2,r2,r16
  805478:	90c00215 	stw	r3,8(r18)
  80547c:	90800015 	stw	r2,0(r18)
  805480:	003fc406 	br	805394 <__sfvwrite_r+0x2d0>
  805484:	a00d883a 	mov	r6,r20
  805488:	a021883a 	mov	r16,r20
  80548c:	003f8106 	br	805294 <__sfvwrite_r+0x1d0>
  805490:	b80b883a 	mov	r5,r23
  805494:	a00d883a 	mov	r6,r20
  805498:	0805d840 	call	805d84 <memmove>
  80549c:	90c00217 	ldw	r3,8(r18)
  8054a0:	90800017 	ldw	r2,0(r18)
  8054a4:	a021883a 	mov	r16,r20
  8054a8:	1d07c83a 	sub	r3,r3,r20
  8054ac:	1505883a 	add	r2,r2,r20
  8054b0:	a023883a 	mov	r17,r20
  8054b4:	a027883a 	mov	r19,r20
  8054b8:	90c00215 	stw	r3,8(r18)
  8054bc:	90800015 	stw	r2,0(r18)
  8054c0:	003f8006 	br	8052c4 <__sfvwrite_r+0x200>
  8054c4:	b809883a 	mov	r4,r23
  8054c8:	01400284 	movi	r5,10
  8054cc:	980d883a 	mov	r6,r19
  8054d0:	0805ca00 	call	805ca0 <memchr>
  8054d4:	10001726 	beq	r2,zero,805534 <__sfvwrite_r+0x470>
  8054d8:	15c5c83a 	sub	r2,r2,r23
  8054dc:	15000044 	addi	r20,r2,1
  8054e0:	00800044 	movi	r2,1
  8054e4:	d8800015 	stw	r2,0(sp)
  8054e8:	003f9806 	br	80534c <__sfvwrite_r+0x288>
  8054ec:	b80b883a 	mov	r5,r23
  8054f0:	800d883a 	mov	r6,r16
  8054f4:	0805d840 	call	805d84 <memmove>
  8054f8:	90c00017 	ldw	r3,0(r18)
  8054fc:	e009883a 	mov	r4,fp
  805500:	900b883a 	mov	r5,r18
  805504:	1c07883a 	add	r3,r3,r16
  805508:	90c00015 	stw	r3,0(r18)
  80550c:	8027883a 	mov	r19,r16
  805510:	080693c0 	call	80693c <_fflush_r>
  805514:	103f6b26 	beq	r2,zero,8052c4 <__sfvwrite_r+0x200>
  805518:	003f7f06 	br	805318 <__sfvwrite_r+0x254>
  80551c:	400b883a 	mov	r5,r8
  805520:	e009883a 	mov	r4,fp
  805524:	08060500 	call	806050 <_realloc_r>
  805528:	103f7626 	beq	r2,zero,805304 <__sfvwrite_r+0x240>
  80552c:	1023883a 	mov	r17,r2
  805530:	003f5006 	br	805274 <__sfvwrite_r+0x1b0>
  805534:	00c00044 	movi	r3,1
  805538:	9d000044 	addi	r20,r19,1
  80553c:	d8c00015 	stw	r3,0(sp)
  805540:	003f8206 	br	80534c <__sfvwrite_r+0x288>
  805544:	9080030b 	ldhu	r2,12(r18)
  805548:	00c00244 	movi	r3,9
  80554c:	013fffc4 	movi	r4,-1
  805550:	10801014 	ori	r2,r2,64
  805554:	9080030d 	sth	r2,12(r18)
  805558:	e0c00015 	stw	r3,0(fp)
  80555c:	003f0606 	br	805178 <__sfvwrite_r+0xb4>

00805560 <_malloc_r>:
  805560:	defff604 	addi	sp,sp,-40
  805564:	28c002c4 	addi	r3,r5,11
  805568:	00800584 	movi	r2,22
  80556c:	dc800215 	stw	r18,8(sp)
  805570:	dfc00915 	stw	ra,36(sp)
  805574:	df000815 	stw	fp,32(sp)
  805578:	ddc00715 	stw	r23,28(sp)
  80557c:	dd800615 	stw	r22,24(sp)
  805580:	dd400515 	stw	r21,20(sp)
  805584:	dd000415 	stw	r20,16(sp)
  805588:	dcc00315 	stw	r19,12(sp)
  80558c:	dc400115 	stw	r17,4(sp)
  805590:	dc000015 	stw	r16,0(sp)
  805594:	2025883a 	mov	r18,r4
  805598:	10c01236 	bltu	r2,r3,8055e4 <_malloc_r+0x84>
  80559c:	04400404 	movi	r17,16
  8055a0:	8940142e 	bgeu	r17,r5,8055f4 <_malloc_r+0x94>
  8055a4:	00800304 	movi	r2,12
  8055a8:	0007883a 	mov	r3,zero
  8055ac:	90800015 	stw	r2,0(r18)
  8055b0:	1805883a 	mov	r2,r3
  8055b4:	dfc00917 	ldw	ra,36(sp)
  8055b8:	df000817 	ldw	fp,32(sp)
  8055bc:	ddc00717 	ldw	r23,28(sp)
  8055c0:	dd800617 	ldw	r22,24(sp)
  8055c4:	dd400517 	ldw	r21,20(sp)
  8055c8:	dd000417 	ldw	r20,16(sp)
  8055cc:	dcc00317 	ldw	r19,12(sp)
  8055d0:	dc800217 	ldw	r18,8(sp)
  8055d4:	dc400117 	ldw	r17,4(sp)
  8055d8:	dc000017 	ldw	r16,0(sp)
  8055dc:	dec00a04 	addi	sp,sp,40
  8055e0:	f800283a 	ret
  8055e4:	00bffe04 	movi	r2,-8
  8055e8:	18a2703a 	and	r17,r3,r2
  8055ec:	883fed16 	blt	r17,zero,8055a4 <_malloc_r+0x44>
  8055f0:	897fec36 	bltu	r17,r5,8055a4 <_malloc_r+0x44>
  8055f4:	9009883a 	mov	r4,r18
  8055f8:	0808bc00 	call	808bc0 <__malloc_lock>
  8055fc:	00807dc4 	movi	r2,503
  805600:	14402b2e 	bgeu	r2,r17,8056b0 <_malloc_r+0x150>
  805604:	8806d27a 	srli	r3,r17,9
  805608:	18003f1e 	bne	r3,zero,805708 <_malloc_r+0x1a8>
  80560c:	880cd0fa 	srli	r6,r17,3
  805610:	300490fa 	slli	r2,r6,3
  805614:	02c02074 	movhi	r11,129
  805618:	5ad63c04 	addi	r11,r11,22768
  80561c:	12cb883a 	add	r5,r2,r11
  805620:	2c000317 	ldw	r16,12(r5)
  805624:	580f883a 	mov	r7,r11
  805628:	2c00041e 	bne	r5,r16,80563c <_malloc_r+0xdc>
  80562c:	00000a06 	br	805658 <_malloc_r+0xf8>
  805630:	1800860e 	bge	r3,zero,80584c <_malloc_r+0x2ec>
  805634:	84000317 	ldw	r16,12(r16)
  805638:	2c000726 	beq	r5,r16,805658 <_malloc_r+0xf8>
  80563c:	80800117 	ldw	r2,4(r16)
  805640:	00ffff04 	movi	r3,-4
  805644:	10c8703a 	and	r4,r2,r3
  805648:	2447c83a 	sub	r3,r4,r17
  80564c:	008003c4 	movi	r2,15
  805650:	10fff70e 	bge	r2,r3,805630 <_malloc_r+0xd0>
  805654:	31bfffc4 	addi	r6,r6,-1
  805658:	32400044 	addi	r9,r6,1
  80565c:	02802074 	movhi	r10,129
  805660:	52963e04 	addi	r10,r10,22776
  805664:	54000217 	ldw	r16,8(r10)
  805668:	8280a026 	beq	r16,r10,8058ec <_malloc_r+0x38c>
  80566c:	80800117 	ldw	r2,4(r16)
  805670:	00ffff04 	movi	r3,-4
  805674:	10ca703a 	and	r5,r2,r3
  805678:	2c4dc83a 	sub	r6,r5,r17
  80567c:	008003c4 	movi	r2,15
  805680:	11808316 	blt	r2,r6,805890 <_malloc_r+0x330>
  805684:	52800315 	stw	r10,12(r10)
  805688:	52800215 	stw	r10,8(r10)
  80568c:	30002916 	blt	r6,zero,805734 <_malloc_r+0x1d4>
  805690:	8147883a 	add	r3,r16,r5
  805694:	18800117 	ldw	r2,4(r3)
  805698:	9009883a 	mov	r4,r18
  80569c:	10800054 	ori	r2,r2,1
  8056a0:	18800115 	stw	r2,4(r3)
  8056a4:	0808cc80 	call	808cc8 <__malloc_unlock>
  8056a8:	80c00204 	addi	r3,r16,8
  8056ac:	003fc006 	br	8055b0 <_malloc_r+0x50>
  8056b0:	02c02074 	movhi	r11,129
  8056b4:	5ad63c04 	addi	r11,r11,22768
  8056b8:	8ac5883a 	add	r2,r17,r11
  8056bc:	14000317 	ldw	r16,12(r2)
  8056c0:	580f883a 	mov	r7,r11
  8056c4:	8806d0fa 	srli	r3,r17,3
  8056c8:	14006c26 	beq	r2,r16,80587c <_malloc_r+0x31c>
  8056cc:	80c00117 	ldw	r3,4(r16)
  8056d0:	00bfff04 	movi	r2,-4
  8056d4:	81800317 	ldw	r6,12(r16)
  8056d8:	1886703a 	and	r3,r3,r2
  8056dc:	80c7883a 	add	r3,r16,r3
  8056e0:	18800117 	ldw	r2,4(r3)
  8056e4:	81400217 	ldw	r5,8(r16)
  8056e8:	9009883a 	mov	r4,r18
  8056ec:	10800054 	ori	r2,r2,1
  8056f0:	18800115 	stw	r2,4(r3)
  8056f4:	31400215 	stw	r5,8(r6)
  8056f8:	29800315 	stw	r6,12(r5)
  8056fc:	0808cc80 	call	808cc8 <__malloc_unlock>
  805700:	80c00204 	addi	r3,r16,8
  805704:	003faa06 	br	8055b0 <_malloc_r+0x50>
  805708:	00800104 	movi	r2,4
  80570c:	10c0052e 	bgeu	r2,r3,805724 <_malloc_r+0x1c4>
  805710:	00800504 	movi	r2,20
  805714:	10c07836 	bltu	r2,r3,8058f8 <_malloc_r+0x398>
  805718:	198016c4 	addi	r6,r3,91
  80571c:	300490fa 	slli	r2,r6,3
  805720:	003fbc06 	br	805614 <_malloc_r+0xb4>
  805724:	8804d1ba 	srli	r2,r17,6
  805728:	11800e04 	addi	r6,r2,56
  80572c:	300490fa 	slli	r2,r6,3
  805730:	003fb806 	br	805614 <_malloc_r+0xb4>
  805734:	00807fc4 	movi	r2,511
  805738:	1140bb36 	bltu	r2,r5,805a28 <_malloc_r+0x4c8>
  80573c:	2806d0fa 	srli	r3,r5,3
  805740:	573ffe04 	addi	fp,r10,-8
  805744:	00800044 	movi	r2,1
  805748:	180890fa 	slli	r4,r3,3
  80574c:	1807d0ba 	srai	r3,r3,2
  805750:	e1c00117 	ldw	r7,4(fp)
  805754:	5909883a 	add	r4,r11,r4
  805758:	21400217 	ldw	r5,8(r4)
  80575c:	10c4983a 	sll	r2,r2,r3
  805760:	81000315 	stw	r4,12(r16)
  805764:	81400215 	stw	r5,8(r16)
  805768:	388eb03a 	or	r7,r7,r2
  80576c:	2c000315 	stw	r16,12(r5)
  805770:	24000215 	stw	r16,8(r4)
  805774:	e1c00115 	stw	r7,4(fp)
  805778:	4807883a 	mov	r3,r9
  80577c:	4800cd16 	blt	r9,zero,805ab4 <_malloc_r+0x554>
  805780:	1807d0ba 	srai	r3,r3,2
  805784:	00800044 	movi	r2,1
  805788:	10c8983a 	sll	r4,r2,r3
  80578c:	39004436 	bltu	r7,r4,8058a0 <_malloc_r+0x340>
  805790:	21c4703a 	and	r2,r4,r7
  805794:	10000a1e 	bne	r2,zero,8057c0 <_malloc_r+0x260>
  805798:	2109883a 	add	r4,r4,r4
  80579c:	00bfff04 	movi	r2,-4
  8057a0:	4884703a 	and	r2,r9,r2
  8057a4:	3906703a 	and	r3,r7,r4
  8057a8:	12400104 	addi	r9,r2,4
  8057ac:	1800041e 	bne	r3,zero,8057c0 <_malloc_r+0x260>
  8057b0:	2109883a 	add	r4,r4,r4
  8057b4:	3904703a 	and	r2,r7,r4
  8057b8:	4a400104 	addi	r9,r9,4
  8057bc:	103ffc26 	beq	r2,zero,8057b0 <_malloc_r+0x250>
  8057c0:	480490fa 	slli	r2,r9,3
  8057c4:	4819883a 	mov	r12,r9
  8057c8:	023fff04 	movi	r8,-4
  8057cc:	589b883a 	add	r13,r11,r2
  8057d0:	6807883a 	mov	r3,r13
  8057d4:	014003c4 	movi	r5,15
  8057d8:	1c000317 	ldw	r16,12(r3)
  8057dc:	1c00041e 	bne	r3,r16,8057f0 <_malloc_r+0x290>
  8057e0:	0000a706 	br	805a80 <_malloc_r+0x520>
  8057e4:	3000ab0e 	bge	r6,zero,805a94 <_malloc_r+0x534>
  8057e8:	84000317 	ldw	r16,12(r16)
  8057ec:	1c00a426 	beq	r3,r16,805a80 <_malloc_r+0x520>
  8057f0:	80800117 	ldw	r2,4(r16)
  8057f4:	1204703a 	and	r2,r2,r8
  8057f8:	144dc83a 	sub	r6,r2,r17
  8057fc:	29bff90e 	bge	r5,r6,8057e4 <_malloc_r+0x284>
  805800:	81000317 	ldw	r4,12(r16)
  805804:	80c00217 	ldw	r3,8(r16)
  805808:	89400054 	ori	r5,r17,1
  80580c:	8445883a 	add	r2,r16,r17
  805810:	20c00215 	stw	r3,8(r4)
  805814:	19000315 	stw	r4,12(r3)
  805818:	81400115 	stw	r5,4(r16)
  80581c:	1187883a 	add	r3,r2,r6
  805820:	31000054 	ori	r4,r6,1
  805824:	50800315 	stw	r2,12(r10)
  805828:	50800215 	stw	r2,8(r10)
  80582c:	19800015 	stw	r6,0(r3)
  805830:	11000115 	stw	r4,4(r2)
  805834:	12800215 	stw	r10,8(r2)
  805838:	12800315 	stw	r10,12(r2)
  80583c:	9009883a 	mov	r4,r18
  805840:	0808cc80 	call	808cc8 <__malloc_unlock>
  805844:	80c00204 	addi	r3,r16,8
  805848:	003f5906 	br	8055b0 <_malloc_r+0x50>
  80584c:	8109883a 	add	r4,r16,r4
  805850:	20800117 	ldw	r2,4(r4)
  805854:	80c00217 	ldw	r3,8(r16)
  805858:	81400317 	ldw	r5,12(r16)
  80585c:	10800054 	ori	r2,r2,1
  805860:	20800115 	stw	r2,4(r4)
  805864:	28c00215 	stw	r3,8(r5)
  805868:	19400315 	stw	r5,12(r3)
  80586c:	9009883a 	mov	r4,r18
  805870:	0808cc80 	call	808cc8 <__malloc_unlock>
  805874:	80c00204 	addi	r3,r16,8
  805878:	003f4d06 	br	8055b0 <_malloc_r+0x50>
  80587c:	80800204 	addi	r2,r16,8
  805880:	14000317 	ldw	r16,12(r2)
  805884:	143f911e 	bne	r2,r16,8056cc <_malloc_r+0x16c>
  805888:	1a400084 	addi	r9,r3,2
  80588c:	003f7306 	br	80565c <_malloc_r+0xfc>
  805890:	88c00054 	ori	r3,r17,1
  805894:	8445883a 	add	r2,r16,r17
  805898:	80c00115 	stw	r3,4(r16)
  80589c:	003fdf06 	br	80581c <_malloc_r+0x2bc>
  8058a0:	e4000217 	ldw	r16,8(fp)
  8058a4:	00bfff04 	movi	r2,-4
  8058a8:	80c00117 	ldw	r3,4(r16)
  8058ac:	802d883a 	mov	r22,r16
  8058b0:	18aa703a 	and	r21,r3,r2
  8058b4:	ac401636 	bltu	r21,r17,805910 <_malloc_r+0x3b0>
  8058b8:	ac49c83a 	sub	r4,r21,r17
  8058bc:	008003c4 	movi	r2,15
  8058c0:	1100130e 	bge	r2,r4,805910 <_malloc_r+0x3b0>
  8058c4:	88800054 	ori	r2,r17,1
  8058c8:	8447883a 	add	r3,r16,r17
  8058cc:	80800115 	stw	r2,4(r16)
  8058d0:	20800054 	ori	r2,r4,1
  8058d4:	18800115 	stw	r2,4(r3)
  8058d8:	e0c00215 	stw	r3,8(fp)
  8058dc:	9009883a 	mov	r4,r18
  8058e0:	0808cc80 	call	808cc8 <__malloc_unlock>
  8058e4:	80c00204 	addi	r3,r16,8
  8058e8:	003f3106 	br	8055b0 <_malloc_r+0x50>
  8058ec:	39c00117 	ldw	r7,4(r7)
  8058f0:	573ffe04 	addi	fp,r10,-8
  8058f4:	003fa006 	br	805778 <_malloc_r+0x218>
  8058f8:	00801504 	movi	r2,84
  8058fc:	10c06736 	bltu	r2,r3,805a9c <_malloc_r+0x53c>
  805900:	8804d33a 	srli	r2,r17,12
  805904:	11801b84 	addi	r6,r2,110
  805908:	300490fa 	slli	r2,r6,3
  80590c:	003f4106 	br	805614 <_malloc_r+0xb4>
  805910:	d0a03417 	ldw	r2,-32560(gp)
  805914:	d0e00417 	ldw	r3,-32752(gp)
  805918:	053fffc4 	movi	r20,-1
  80591c:	10800404 	addi	r2,r2,16
  805920:	88a7883a 	add	r19,r17,r2
  805924:	1d000326 	beq	r3,r20,805934 <_malloc_r+0x3d4>
  805928:	98c3ffc4 	addi	r3,r19,4095
  80592c:	00bc0004 	movi	r2,-4096
  805930:	18a6703a 	and	r19,r3,r2
  805934:	9009883a 	mov	r4,r18
  805938:	980b883a 	mov	r5,r19
  80593c:	08066440 	call	806644 <_sbrk_r>
  805940:	1009883a 	mov	r4,r2
  805944:	15000426 	beq	r2,r20,805958 <_malloc_r+0x3f8>
  805948:	854b883a 	add	r5,r16,r21
  80594c:	1029883a 	mov	r20,r2
  805950:	11405a2e 	bgeu	r2,r5,805abc <_malloc_r+0x55c>
  805954:	87000c26 	beq	r16,fp,805988 <_malloc_r+0x428>
  805958:	e4000217 	ldw	r16,8(fp)
  80595c:	80c00117 	ldw	r3,4(r16)
  805960:	00bfff04 	movi	r2,-4
  805964:	1884703a 	and	r2,r3,r2
  805968:	14400336 	bltu	r2,r17,805978 <_malloc_r+0x418>
  80596c:	1449c83a 	sub	r4,r2,r17
  805970:	008003c4 	movi	r2,15
  805974:	113fd316 	blt	r2,r4,8058c4 <_malloc_r+0x364>
  805978:	9009883a 	mov	r4,r18
  80597c:	0808cc80 	call	808cc8 <__malloc_unlock>
  805980:	0007883a 	mov	r3,zero
  805984:	003f0a06 	br	8055b0 <_malloc_r+0x50>
  805988:	05c02074 	movhi	r23,129
  80598c:	bddc3d04 	addi	r23,r23,28916
  805990:	b8800017 	ldw	r2,0(r23)
  805994:	988d883a 	add	r6,r19,r2
  805998:	b9800015 	stw	r6,0(r23)
  80599c:	d0e00417 	ldw	r3,-32752(gp)
  8059a0:	00bfffc4 	movi	r2,-1
  8059a4:	18808e26 	beq	r3,r2,805be0 <_malloc_r+0x680>
  8059a8:	2145c83a 	sub	r2,r4,r5
  8059ac:	3085883a 	add	r2,r6,r2
  8059b0:	b8800015 	stw	r2,0(r23)
  8059b4:	20c001cc 	andi	r3,r4,7
  8059b8:	18005f1e 	bne	r3,zero,805b38 <_malloc_r+0x5d8>
  8059bc:	000b883a 	mov	r5,zero
  8059c0:	a4c5883a 	add	r2,r20,r19
  8059c4:	1083ffcc 	andi	r2,r2,4095
  8059c8:	00c40004 	movi	r3,4096
  8059cc:	1887c83a 	sub	r3,r3,r2
  8059d0:	28e7883a 	add	r19,r5,r3
  8059d4:	9009883a 	mov	r4,r18
  8059d8:	980b883a 	mov	r5,r19
  8059dc:	08066440 	call	806644 <_sbrk_r>
  8059e0:	1007883a 	mov	r3,r2
  8059e4:	00bfffc4 	movi	r2,-1
  8059e8:	18807a26 	beq	r3,r2,805bd4 <_malloc_r+0x674>
  8059ec:	1d05c83a 	sub	r2,r3,r20
  8059f0:	9885883a 	add	r2,r19,r2
  8059f4:	10c00054 	ori	r3,r2,1
  8059f8:	b8800017 	ldw	r2,0(r23)
  8059fc:	a021883a 	mov	r16,r20
  805a00:	a0c00115 	stw	r3,4(r20)
  805a04:	9885883a 	add	r2,r19,r2
  805a08:	b8800015 	stw	r2,0(r23)
  805a0c:	e5000215 	stw	r20,8(fp)
  805a10:	b7003626 	beq	r22,fp,805aec <_malloc_r+0x58c>
  805a14:	018003c4 	movi	r6,15
  805a18:	35404b36 	bltu	r6,r21,805b48 <_malloc_r+0x5e8>
  805a1c:	00800044 	movi	r2,1
  805a20:	a0800115 	stw	r2,4(r20)
  805a24:	003fcd06 	br	80595c <_malloc_r+0x3fc>
  805a28:	2808d27a 	srli	r4,r5,9
  805a2c:	2000371e 	bne	r4,zero,805b0c <_malloc_r+0x5ac>
  805a30:	2808d0fa 	srli	r4,r5,3
  805a34:	200690fa 	slli	r3,r4,3
  805a38:	1ad1883a 	add	r8,r3,r11
  805a3c:	41800217 	ldw	r6,8(r8)
  805a40:	41805b26 	beq	r8,r6,805bb0 <_malloc_r+0x650>
  805a44:	30800117 	ldw	r2,4(r6)
  805a48:	00ffff04 	movi	r3,-4
  805a4c:	10c4703a 	and	r2,r2,r3
  805a50:	2880022e 	bgeu	r5,r2,805a5c <_malloc_r+0x4fc>
  805a54:	31800217 	ldw	r6,8(r6)
  805a58:	41bffa1e 	bne	r8,r6,805a44 <_malloc_r+0x4e4>
  805a5c:	32000317 	ldw	r8,12(r6)
  805a60:	39c00117 	ldw	r7,4(r7)
  805a64:	82000315 	stw	r8,12(r16)
  805a68:	81800215 	stw	r6,8(r16)
  805a6c:	07002074 	movhi	fp,129
  805a70:	e7163c04 	addi	fp,fp,22768
  805a74:	34000315 	stw	r16,12(r6)
  805a78:	44000215 	stw	r16,8(r8)
  805a7c:	003f3e06 	br	805778 <_malloc_r+0x218>
  805a80:	63000044 	addi	r12,r12,1
  805a84:	608000cc 	andi	r2,r12,3
  805a88:	10005d26 	beq	r2,zero,805c00 <_malloc_r+0x6a0>
  805a8c:	18c00204 	addi	r3,r3,8
  805a90:	003f5106 	br	8057d8 <_malloc_r+0x278>
  805a94:	8089883a 	add	r4,r16,r2
  805a98:	003f6d06 	br	805850 <_malloc_r+0x2f0>
  805a9c:	00805504 	movi	r2,340
  805aa0:	10c02036 	bltu	r2,r3,805b24 <_malloc_r+0x5c4>
  805aa4:	8804d3fa 	srli	r2,r17,15
  805aa8:	11801dc4 	addi	r6,r2,119
  805aac:	300490fa 	slli	r2,r6,3
  805ab0:	003ed806 	br	805614 <_malloc_r+0xb4>
  805ab4:	48c000c4 	addi	r3,r9,3
  805ab8:	003f3106 	br	805780 <_malloc_r+0x220>
  805abc:	05c02074 	movhi	r23,129
  805ac0:	bddc3d04 	addi	r23,r23,28916
  805ac4:	b8800017 	ldw	r2,0(r23)
  805ac8:	988d883a 	add	r6,r19,r2
  805acc:	b9800015 	stw	r6,0(r23)
  805ad0:	293fb21e 	bne	r5,r4,80599c <_malloc_r+0x43c>
  805ad4:	2083ffcc 	andi	r2,r4,4095
  805ad8:	103fb01e 	bne	r2,zero,80599c <_malloc_r+0x43c>
  805adc:	e4000217 	ldw	r16,8(fp)
  805ae0:	9d45883a 	add	r2,r19,r21
  805ae4:	10800054 	ori	r2,r2,1
  805ae8:	80800115 	stw	r2,4(r16)
  805aec:	b8c00017 	ldw	r3,0(r23)
  805af0:	d0a03517 	ldw	r2,-32556(gp)
  805af4:	10c0012e 	bgeu	r2,r3,805afc <_malloc_r+0x59c>
  805af8:	d0e03515 	stw	r3,-32556(gp)
  805afc:	d0a03617 	ldw	r2,-32552(gp)
  805b00:	10ff962e 	bgeu	r2,r3,80595c <_malloc_r+0x3fc>
  805b04:	d0e03615 	stw	r3,-32552(gp)
  805b08:	003f9406 	br	80595c <_malloc_r+0x3fc>
  805b0c:	00800104 	movi	r2,4
  805b10:	11001e36 	bltu	r2,r4,805b8c <_malloc_r+0x62c>
  805b14:	2804d1ba 	srli	r2,r5,6
  805b18:	11000e04 	addi	r4,r2,56
  805b1c:	200690fa 	slli	r3,r4,3
  805b20:	003fc506 	br	805a38 <_malloc_r+0x4d8>
  805b24:	00815504 	movi	r2,1364
  805b28:	10c01d2e 	bgeu	r2,r3,805ba0 <_malloc_r+0x640>
  805b2c:	01801f84 	movi	r6,126
  805b30:	0080fc04 	movi	r2,1008
  805b34:	003eb706 	br	805614 <_malloc_r+0xb4>
  805b38:	00800204 	movi	r2,8
  805b3c:	10cbc83a 	sub	r5,r2,r3
  805b40:	2169883a 	add	r20,r4,r5
  805b44:	003f9e06 	br	8059c0 <_malloc_r+0x460>
  805b48:	00bffe04 	movi	r2,-8
  805b4c:	a93ffd04 	addi	r4,r21,-12
  805b50:	2088703a 	and	r4,r4,r2
  805b54:	b10b883a 	add	r5,r22,r4
  805b58:	00c00144 	movi	r3,5
  805b5c:	28c00215 	stw	r3,8(r5)
  805b60:	28c00115 	stw	r3,4(r5)
  805b64:	b0800117 	ldw	r2,4(r22)
  805b68:	1080004c 	andi	r2,r2,1
  805b6c:	2084b03a 	or	r2,r4,r2
  805b70:	b0800115 	stw	r2,4(r22)
  805b74:	313fdd2e 	bgeu	r6,r4,805aec <_malloc_r+0x58c>
  805b78:	b1400204 	addi	r5,r22,8
  805b7c:	9009883a 	mov	r4,r18
  805b80:	0806f580 	call	806f58 <_free_r>
  805b84:	e4000217 	ldw	r16,8(fp)
  805b88:	003fd806 	br	805aec <_malloc_r+0x58c>
  805b8c:	00800504 	movi	r2,20
  805b90:	11001536 	bltu	r2,r4,805be8 <_malloc_r+0x688>
  805b94:	210016c4 	addi	r4,r4,91
  805b98:	200690fa 	slli	r3,r4,3
  805b9c:	003fa606 	br	805a38 <_malloc_r+0x4d8>
  805ba0:	8804d4ba 	srli	r2,r17,18
  805ba4:	11801f04 	addi	r6,r2,124
  805ba8:	300490fa 	slli	r2,r6,3
  805bac:	003e9906 	br	805614 <_malloc_r+0xb4>
  805bb0:	2009d0ba 	srai	r4,r4,2
  805bb4:	01402074 	movhi	r5,129
  805bb8:	29563c04 	addi	r5,r5,22768
  805bbc:	00c00044 	movi	r3,1
  805bc0:	28800117 	ldw	r2,4(r5)
  805bc4:	1906983a 	sll	r3,r3,r4
  805bc8:	10c4b03a 	or	r2,r2,r3
  805bcc:	28800115 	stw	r2,4(r5)
  805bd0:	003fa306 	br	805a60 <_malloc_r+0x500>
  805bd4:	0027883a 	mov	r19,zero
  805bd8:	00c00044 	movi	r3,1
  805bdc:	003f8606 	br	8059f8 <_malloc_r+0x498>
  805be0:	d1200415 	stw	r4,-32752(gp)
  805be4:	003f7306 	br	8059b4 <_malloc_r+0x454>
  805be8:	00801504 	movi	r2,84
  805bec:	11001936 	bltu	r2,r4,805c54 <_malloc_r+0x6f4>
  805bf0:	2804d33a 	srli	r2,r5,12
  805bf4:	11001b84 	addi	r4,r2,110
  805bf8:	200690fa 	slli	r3,r4,3
  805bfc:	003f8e06 	br	805a38 <_malloc_r+0x4d8>
  805c00:	480b883a 	mov	r5,r9
  805c04:	6807883a 	mov	r3,r13
  805c08:	288000cc 	andi	r2,r5,3
  805c0c:	18fffe04 	addi	r3,r3,-8
  805c10:	297fffc4 	addi	r5,r5,-1
  805c14:	10001526 	beq	r2,zero,805c6c <_malloc_r+0x70c>
  805c18:	18800217 	ldw	r2,8(r3)
  805c1c:	10fffa26 	beq	r2,r3,805c08 <_malloc_r+0x6a8>
  805c20:	2109883a 	add	r4,r4,r4
  805c24:	393f1e36 	bltu	r7,r4,8058a0 <_malloc_r+0x340>
  805c28:	203f1d26 	beq	r4,zero,8058a0 <_malloc_r+0x340>
  805c2c:	21c4703a 	and	r2,r4,r7
  805c30:	10000226 	beq	r2,zero,805c3c <_malloc_r+0x6dc>
  805c34:	6013883a 	mov	r9,r12
  805c38:	003ee106 	br	8057c0 <_malloc_r+0x260>
  805c3c:	2109883a 	add	r4,r4,r4
  805c40:	3904703a 	and	r2,r7,r4
  805c44:	63000104 	addi	r12,r12,4
  805c48:	103ffc26 	beq	r2,zero,805c3c <_malloc_r+0x6dc>
  805c4c:	6013883a 	mov	r9,r12
  805c50:	003edb06 	br	8057c0 <_malloc_r+0x260>
  805c54:	00805504 	movi	r2,340
  805c58:	11000836 	bltu	r2,r4,805c7c <_malloc_r+0x71c>
  805c5c:	2804d3fa 	srli	r2,r5,15
  805c60:	11001dc4 	addi	r4,r2,119
  805c64:	200690fa 	slli	r3,r4,3
  805c68:	003f7306 	br	805a38 <_malloc_r+0x4d8>
  805c6c:	0104303a 	nor	r2,zero,r4
  805c70:	388e703a 	and	r7,r7,r2
  805c74:	e1c00115 	stw	r7,4(fp)
  805c78:	003fe906 	br	805c20 <_malloc_r+0x6c0>
  805c7c:	00815504 	movi	r2,1364
  805c80:	1100032e 	bgeu	r2,r4,805c90 <_malloc_r+0x730>
  805c84:	01001f84 	movi	r4,126
  805c88:	00c0fc04 	movi	r3,1008
  805c8c:	003f6a06 	br	805a38 <_malloc_r+0x4d8>
  805c90:	2804d4ba 	srli	r2,r5,18
  805c94:	11001f04 	addi	r4,r2,124
  805c98:	200690fa 	slli	r3,r4,3
  805c9c:	003f6606 	br	805a38 <_malloc_r+0x4d8>

00805ca0 <memchr>:
  805ca0:	008000c4 	movi	r2,3
  805ca4:	29403fcc 	andi	r5,r5,255
  805ca8:	2007883a 	mov	r3,r4
  805cac:	1180022e 	bgeu	r2,r6,805cb8 <memchr+0x18>
  805cb0:	2084703a 	and	r2,r4,r2
  805cb4:	10000b26 	beq	r2,zero,805ce4 <memchr+0x44>
  805cb8:	313fffc4 	addi	r4,r6,-1
  805cbc:	3000051e 	bne	r6,zero,805cd4 <memchr+0x34>
  805cc0:	00002c06 	br	805d74 <memchr+0xd4>
  805cc4:	213fffc4 	addi	r4,r4,-1
  805cc8:	00bfffc4 	movi	r2,-1
  805ccc:	18c00044 	addi	r3,r3,1
  805cd0:	20802826 	beq	r4,r2,805d74 <memchr+0xd4>
  805cd4:	18800003 	ldbu	r2,0(r3)
  805cd8:	28bffa1e 	bne	r5,r2,805cc4 <memchr+0x24>
  805cdc:	1805883a 	mov	r2,r3
  805ce0:	f800283a 	ret
  805ce4:	0011883a 	mov	r8,zero
  805ce8:	0007883a 	mov	r3,zero
  805cec:	01c00104 	movi	r7,4
  805cf0:	4004923a 	slli	r2,r8,8
  805cf4:	18c00044 	addi	r3,r3,1
  805cf8:	1151883a 	add	r8,r2,r5
  805cfc:	19fffc1e 	bne	r3,r7,805cf0 <memchr+0x50>
  805d00:	02bfbff4 	movhi	r10,65279
  805d04:	52bfbfc4 	addi	r10,r10,-257
  805d08:	02602074 	movhi	r9,32897
  805d0c:	4a602004 	addi	r9,r9,-32640
  805d10:	02c000c4 	movi	r11,3
  805d14:	20800017 	ldw	r2,0(r4)
  805d18:	31bfff04 	addi	r6,r6,-4
  805d1c:	200f883a 	mov	r7,r4
  805d20:	1204f03a 	xor	r2,r2,r8
  805d24:	1287883a 	add	r3,r2,r10
  805d28:	1a46703a 	and	r3,r3,r9
  805d2c:	0084303a 	nor	r2,zero,r2
  805d30:	10c4703a 	and	r2,r2,r3
  805d34:	10000b26 	beq	r2,zero,805d64 <memchr+0xc4>
  805d38:	20800003 	ldbu	r2,0(r4)
  805d3c:	28800f26 	beq	r5,r2,805d7c <memchr+0xdc>
  805d40:	20800043 	ldbu	r2,1(r4)
  805d44:	21c00044 	addi	r7,r4,1
  805d48:	28800c26 	beq	r5,r2,805d7c <memchr+0xdc>
  805d4c:	20800083 	ldbu	r2,2(r4)
  805d50:	21c00084 	addi	r7,r4,2
  805d54:	28800926 	beq	r5,r2,805d7c <memchr+0xdc>
  805d58:	208000c3 	ldbu	r2,3(r4)
  805d5c:	21c000c4 	addi	r7,r4,3
  805d60:	28800626 	beq	r5,r2,805d7c <memchr+0xdc>
  805d64:	21000104 	addi	r4,r4,4
  805d68:	59bfea36 	bltu	r11,r6,805d14 <memchr+0x74>
  805d6c:	2007883a 	mov	r3,r4
  805d70:	003fd106 	br	805cb8 <memchr+0x18>
  805d74:	0005883a 	mov	r2,zero
  805d78:	f800283a 	ret
  805d7c:	3805883a 	mov	r2,r7
  805d80:	f800283a 	ret

00805d84 <memmove>:
  805d84:	2807883a 	mov	r3,r5
  805d88:	2011883a 	mov	r8,r4
  805d8c:	29000c2e 	bgeu	r5,r4,805dc0 <memmove+0x3c>
  805d90:	298f883a 	add	r7,r5,r6
  805d94:	21c00a2e 	bgeu	r4,r7,805dc0 <memmove+0x3c>
  805d98:	30000726 	beq	r6,zero,805db8 <memmove+0x34>
  805d9c:	2187883a 	add	r3,r4,r6
  805da0:	198dc83a 	sub	r6,r3,r6
  805da4:	39ffffc4 	addi	r7,r7,-1
  805da8:	38800003 	ldbu	r2,0(r7)
  805dac:	18ffffc4 	addi	r3,r3,-1
  805db0:	18800005 	stb	r2,0(r3)
  805db4:	19bffb1e 	bne	r3,r6,805da4 <memmove+0x20>
  805db8:	2005883a 	mov	r2,r4
  805dbc:	f800283a 	ret
  805dc0:	01c003c4 	movi	r7,15
  805dc4:	39800a36 	bltu	r7,r6,805df0 <memmove+0x6c>
  805dc8:	303ffb26 	beq	r6,zero,805db8 <memmove+0x34>
  805dcc:	400f883a 	mov	r7,r8
  805dd0:	320d883a 	add	r6,r6,r8
  805dd4:	28800003 	ldbu	r2,0(r5)
  805dd8:	29400044 	addi	r5,r5,1
  805ddc:	38800005 	stb	r2,0(r7)
  805de0:	39c00044 	addi	r7,r7,1
  805de4:	39bffb1e 	bne	r7,r6,805dd4 <memmove+0x50>
  805de8:	2005883a 	mov	r2,r4
  805dec:	f800283a 	ret
  805df0:	1904b03a 	or	r2,r3,r4
  805df4:	108000cc 	andi	r2,r2,3
  805df8:	103ff31e 	bne	r2,zero,805dc8 <memmove+0x44>
  805dfc:	3811883a 	mov	r8,r7
  805e00:	180b883a 	mov	r5,r3
  805e04:	200f883a 	mov	r7,r4
  805e08:	28c00017 	ldw	r3,0(r5)
  805e0c:	31bffc04 	addi	r6,r6,-16
  805e10:	38c00015 	stw	r3,0(r7)
  805e14:	28800117 	ldw	r2,4(r5)
  805e18:	38800115 	stw	r2,4(r7)
  805e1c:	28c00217 	ldw	r3,8(r5)
  805e20:	38c00215 	stw	r3,8(r7)
  805e24:	28800317 	ldw	r2,12(r5)
  805e28:	29400404 	addi	r5,r5,16
  805e2c:	38800315 	stw	r2,12(r7)
  805e30:	39c00404 	addi	r7,r7,16
  805e34:	41bff436 	bltu	r8,r6,805e08 <memmove+0x84>
  805e38:	008000c4 	movi	r2,3
  805e3c:	1180072e 	bgeu	r2,r6,805e5c <memmove+0xd8>
  805e40:	1007883a 	mov	r3,r2
  805e44:	28800017 	ldw	r2,0(r5)
  805e48:	31bfff04 	addi	r6,r6,-4
  805e4c:	29400104 	addi	r5,r5,4
  805e50:	38800015 	stw	r2,0(r7)
  805e54:	39c00104 	addi	r7,r7,4
  805e58:	19bffa36 	bltu	r3,r6,805e44 <memmove+0xc0>
  805e5c:	3811883a 	mov	r8,r7
  805e60:	003fd906 	br	805dc8 <memmove+0x44>

00805e64 <putc>:
  805e64:	defffc04 	addi	sp,sp,-16
  805e68:	dc800215 	stw	r18,8(sp)
  805e6c:	04802074 	movhi	r18,129
  805e70:	949be704 	addi	r18,r18,28572
  805e74:	90c00017 	ldw	r3,0(r18)
  805e78:	dc400115 	stw	r17,4(sp)
  805e7c:	dc000015 	stw	r16,0(sp)
  805e80:	dfc00315 	stw	ra,12(sp)
  805e84:	2023883a 	mov	r17,r4
  805e88:	2821883a 	mov	r16,r5
  805e8c:	18000226 	beq	r3,zero,805e98 <putc+0x34>
  805e90:	18800e17 	ldw	r2,56(r3)
  805e94:	10001126 	beq	r2,zero,805edc <putc+0x78>
  805e98:	80800217 	ldw	r2,8(r16)
  805e9c:	10ffffc4 	addi	r3,r2,-1
  805ea0:	80c00215 	stw	r3,8(r16)
  805ea4:	18001316 	blt	r3,zero,805ef4 <putc+0x90>
  805ea8:	80800017 	ldw	r2,0(r16)
  805eac:	14400005 	stb	r17,0(r2)
  805eb0:	80c00017 	ldw	r3,0(r16)
  805eb4:	18800044 	addi	r2,r3,1
  805eb8:	18c00003 	ldbu	r3,0(r3)
  805ebc:	80800015 	stw	r2,0(r16)
  805ec0:	1805883a 	mov	r2,r3
  805ec4:	dfc00317 	ldw	ra,12(sp)
  805ec8:	dc800217 	ldw	r18,8(sp)
  805ecc:	dc400117 	ldw	r17,4(sp)
  805ed0:	dc000017 	ldw	r16,0(sp)
  805ed4:	dec00404 	addi	sp,sp,16
  805ed8:	f800283a 	ret
  805edc:	1809883a 	mov	r4,r3
  805ee0:	0806bd40 	call	806bd4 <__sinit>
  805ee4:	80800217 	ldw	r2,8(r16)
  805ee8:	10ffffc4 	addi	r3,r2,-1
  805eec:	80c00215 	stw	r3,8(r16)
  805ef0:	183fed0e 	bge	r3,zero,805ea8 <putc+0x44>
  805ef4:	80800617 	ldw	r2,24(r16)
  805ef8:	18800f16 	blt	r3,r2,805f38 <putc+0xd4>
  805efc:	80800017 	ldw	r2,0(r16)
  805f00:	14400005 	stb	r17,0(r2)
  805f04:	81000017 	ldw	r4,0(r16)
  805f08:	00800284 	movi	r2,10
  805f0c:	20c00003 	ldbu	r3,0(r4)
  805f10:	18801226 	beq	r3,r2,805f5c <putc+0xf8>
  805f14:	20800044 	addi	r2,r4,1
  805f18:	80800015 	stw	r2,0(r16)
  805f1c:	1805883a 	mov	r2,r3
  805f20:	dfc00317 	ldw	ra,12(sp)
  805f24:	dc800217 	ldw	r18,8(sp)
  805f28:	dc400117 	ldw	r17,4(sp)
  805f2c:	dc000017 	ldw	r16,0(sp)
  805f30:	dec00404 	addi	sp,sp,16
  805f34:	f800283a 	ret
  805f38:	91000017 	ldw	r4,0(r18)
  805f3c:	880b883a 	mov	r5,r17
  805f40:	800d883a 	mov	r6,r16
  805f44:	dfc00317 	ldw	ra,12(sp)
  805f48:	dc800217 	ldw	r18,8(sp)
  805f4c:	dc400117 	ldw	r17,4(sp)
  805f50:	dc000017 	ldw	r16,0(sp)
  805f54:	dec00404 	addi	sp,sp,16
  805f58:	08066b41 	jmpi	8066b4 <__swbuf_r>
  805f5c:	91000017 	ldw	r4,0(r18)
  805f60:	180b883a 	mov	r5,r3
  805f64:	003ff606 	br	805f40 <putc+0xdc>

00805f68 <_putc_r>:
  805f68:	defffc04 	addi	sp,sp,-16
  805f6c:	dc400215 	stw	r17,8(sp)
  805f70:	dc000115 	stw	r16,4(sp)
  805f74:	dfc00315 	stw	ra,12(sp)
  805f78:	2021883a 	mov	r16,r4
  805f7c:	2823883a 	mov	r17,r5
  805f80:	20000226 	beq	r4,zero,805f8c <_putc_r+0x24>
  805f84:	20800e17 	ldw	r2,56(r4)
  805f88:	10001026 	beq	r2,zero,805fcc <_putc_r+0x64>
  805f8c:	30800217 	ldw	r2,8(r6)
  805f90:	10ffffc4 	addi	r3,r2,-1
  805f94:	30c00215 	stw	r3,8(r6)
  805f98:	18001316 	blt	r3,zero,805fe8 <_putc_r+0x80>
  805f9c:	30800017 	ldw	r2,0(r6)
  805fa0:	14400005 	stb	r17,0(r2)
  805fa4:	30c00017 	ldw	r3,0(r6)
  805fa8:	18800044 	addi	r2,r3,1
  805fac:	18c00003 	ldbu	r3,0(r3)
  805fb0:	30800015 	stw	r2,0(r6)
  805fb4:	1805883a 	mov	r2,r3
  805fb8:	dfc00317 	ldw	ra,12(sp)
  805fbc:	dc400217 	ldw	r17,8(sp)
  805fc0:	dc000117 	ldw	r16,4(sp)
  805fc4:	dec00404 	addi	sp,sp,16
  805fc8:	f800283a 	ret
  805fcc:	d9800015 	stw	r6,0(sp)
  805fd0:	0806bd40 	call	806bd4 <__sinit>
  805fd4:	d9800017 	ldw	r6,0(sp)
  805fd8:	30800217 	ldw	r2,8(r6)
  805fdc:	10ffffc4 	addi	r3,r2,-1
  805fe0:	30c00215 	stw	r3,8(r6)
  805fe4:	183fed0e 	bge	r3,zero,805f9c <_putc_r+0x34>
  805fe8:	30800617 	ldw	r2,24(r6)
  805fec:	18800e16 	blt	r3,r2,806028 <_putc_r+0xc0>
  805ff0:	30800017 	ldw	r2,0(r6)
  805ff4:	14400005 	stb	r17,0(r2)
  805ff8:	31000017 	ldw	r4,0(r6)
  805ffc:	00800284 	movi	r2,10
  806000:	20c00003 	ldbu	r3,0(r4)
  806004:	18800f26 	beq	r3,r2,806044 <_putc_r+0xdc>
  806008:	20800044 	addi	r2,r4,1
  80600c:	30800015 	stw	r2,0(r6)
  806010:	1805883a 	mov	r2,r3
  806014:	dfc00317 	ldw	ra,12(sp)
  806018:	dc400217 	ldw	r17,8(sp)
  80601c:	dc000117 	ldw	r16,4(sp)
  806020:	dec00404 	addi	sp,sp,16
  806024:	f800283a 	ret
  806028:	8009883a 	mov	r4,r16
  80602c:	880b883a 	mov	r5,r17
  806030:	dfc00317 	ldw	ra,12(sp)
  806034:	dc400217 	ldw	r17,8(sp)
  806038:	dc000117 	ldw	r16,4(sp)
  80603c:	dec00404 	addi	sp,sp,16
  806040:	08066b41 	jmpi	8066b4 <__swbuf_r>
  806044:	8009883a 	mov	r4,r16
  806048:	180b883a 	mov	r5,r3
  80604c:	003ff806 	br	806030 <_putc_r+0xc8>

00806050 <_realloc_r>:
  806050:	defff404 	addi	sp,sp,-48
  806054:	dd800815 	stw	r22,32(sp)
  806058:	dc800415 	stw	r18,16(sp)
  80605c:	dc400315 	stw	r17,12(sp)
  806060:	dfc00b15 	stw	ra,44(sp)
  806064:	df000a15 	stw	fp,40(sp)
  806068:	ddc00915 	stw	r23,36(sp)
  80606c:	dd400715 	stw	r21,28(sp)
  806070:	dd000615 	stw	r20,24(sp)
  806074:	dcc00515 	stw	r19,20(sp)
  806078:	dc000215 	stw	r16,8(sp)
  80607c:	2825883a 	mov	r18,r5
  806080:	3023883a 	mov	r17,r6
  806084:	202d883a 	mov	r22,r4
  806088:	2800c926 	beq	r5,zero,8063b0 <_realloc_r+0x360>
  80608c:	0808bc00 	call	808bc0 <__malloc_lock>
  806090:	943ffe04 	addi	r16,r18,-8
  806094:	88c002c4 	addi	r3,r17,11
  806098:	00800584 	movi	r2,22
  80609c:	82000117 	ldw	r8,4(r16)
  8060a0:	10c01b2e 	bgeu	r2,r3,806110 <_realloc_r+0xc0>
  8060a4:	00bffe04 	movi	r2,-8
  8060a8:	188e703a 	and	r7,r3,r2
  8060ac:	3839883a 	mov	fp,r7
  8060b0:	38001a16 	blt	r7,zero,80611c <_realloc_r+0xcc>
  8060b4:	e4401936 	bltu	fp,r17,80611c <_realloc_r+0xcc>
  8060b8:	013fff04 	movi	r4,-4
  8060bc:	4126703a 	and	r19,r8,r4
  8060c0:	99c02616 	blt	r19,r7,80615c <_realloc_r+0x10c>
  8060c4:	802b883a 	mov	r21,r16
  8060c8:	9829883a 	mov	r20,r19
  8060cc:	84000204 	addi	r16,r16,8
  8060d0:	a80f883a 	mov	r7,r21
  8060d4:	a70dc83a 	sub	r6,r20,fp
  8060d8:	008003c4 	movi	r2,15
  8060dc:	1180c136 	bltu	r2,r6,8063e4 <_realloc_r+0x394>
  8060e0:	38800117 	ldw	r2,4(r7)
  8060e4:	a549883a 	add	r4,r20,r21
  8060e8:	1080004c 	andi	r2,r2,1
  8060ec:	a084b03a 	or	r2,r20,r2
  8060f0:	38800115 	stw	r2,4(r7)
  8060f4:	20c00117 	ldw	r3,4(r4)
  8060f8:	18c00054 	ori	r3,r3,1
  8060fc:	20c00115 	stw	r3,4(r4)
  806100:	b009883a 	mov	r4,r22
  806104:	0808cc80 	call	808cc8 <__malloc_unlock>
  806108:	8023883a 	mov	r17,r16
  80610c:	00000606 	br	806128 <_realloc_r+0xd8>
  806110:	01c00404 	movi	r7,16
  806114:	3839883a 	mov	fp,r7
  806118:	e47fe72e 	bgeu	fp,r17,8060b8 <_realloc_r+0x68>
  80611c:	00800304 	movi	r2,12
  806120:	0023883a 	mov	r17,zero
  806124:	b0800015 	stw	r2,0(r22)
  806128:	8805883a 	mov	r2,r17
  80612c:	dfc00b17 	ldw	ra,44(sp)
  806130:	df000a17 	ldw	fp,40(sp)
  806134:	ddc00917 	ldw	r23,36(sp)
  806138:	dd800817 	ldw	r22,32(sp)
  80613c:	dd400717 	ldw	r21,28(sp)
  806140:	dd000617 	ldw	r20,24(sp)
  806144:	dcc00517 	ldw	r19,20(sp)
  806148:	dc800417 	ldw	r18,16(sp)
  80614c:	dc400317 	ldw	r17,12(sp)
  806150:	dc000217 	ldw	r16,8(sp)
  806154:	dec00c04 	addi	sp,sp,48
  806158:	f800283a 	ret
  80615c:	00802074 	movhi	r2,129
  806160:	10963c04 	addi	r2,r2,22768
  806164:	12400217 	ldw	r9,8(r2)
  806168:	84cd883a 	add	r6,r16,r19
  80616c:	802b883a 	mov	r21,r16
  806170:	3240b926 	beq	r6,r9,806458 <_realloc_r+0x408>
  806174:	31400117 	ldw	r5,4(r6)
  806178:	00bfff84 	movi	r2,-2
  80617c:	2884703a 	and	r2,r5,r2
  806180:	1185883a 	add	r2,r2,r6
  806184:	10c00117 	ldw	r3,4(r2)
  806188:	18c0004c 	andi	r3,r3,1
  80618c:	1807003a 	cmpeq	r3,r3,zero
  806190:	1800a326 	beq	r3,zero,806420 <_realloc_r+0x3d0>
  806194:	2908703a 	and	r4,r5,r4
  806198:	9929883a 	add	r20,r19,r4
  80619c:	a1c0a30e 	bge	r20,r7,80642c <_realloc_r+0x3dc>
  8061a0:	4080004c 	andi	r2,r8,1
  8061a4:	1000551e 	bne	r2,zero,8062fc <_realloc_r+0x2ac>
  8061a8:	80800017 	ldw	r2,0(r16)
  8061ac:	80afc83a 	sub	r23,r16,r2
  8061b0:	b8c00117 	ldw	r3,4(r23)
  8061b4:	00bfff04 	movi	r2,-4
  8061b8:	1884703a 	and	r2,r3,r2
  8061bc:	30002e26 	beq	r6,zero,806278 <_realloc_r+0x228>
  8061c0:	3240b926 	beq	r6,r9,8064a8 <_realloc_r+0x458>
  8061c4:	98a9883a 	add	r20,r19,r2
  8061c8:	2509883a 	add	r4,r4,r20
  8061cc:	d9000015 	stw	r4,0(sp)
  8061d0:	21c02a16 	blt	r4,r7,80627c <_realloc_r+0x22c>
  8061d4:	30800317 	ldw	r2,12(r6)
  8061d8:	30c00217 	ldw	r3,8(r6)
  8061dc:	01400904 	movi	r5,36
  8061e0:	99bfff04 	addi	r6,r19,-4
  8061e4:	18800315 	stw	r2,12(r3)
  8061e8:	10c00215 	stw	r3,8(r2)
  8061ec:	b9000317 	ldw	r4,12(r23)
  8061f0:	b8800217 	ldw	r2,8(r23)
  8061f4:	b82b883a 	mov	r21,r23
  8061f8:	bc000204 	addi	r16,r23,8
  8061fc:	20800215 	stw	r2,8(r4)
  806200:	11000315 	stw	r4,12(r2)
  806204:	2980e436 	bltu	r5,r6,806598 <_realloc_r+0x548>
  806208:	008004c4 	movi	r2,19
  80620c:	9009883a 	mov	r4,r18
  806210:	8011883a 	mov	r8,r16
  806214:	11800f2e 	bgeu	r2,r6,806254 <_realloc_r+0x204>
  806218:	90800017 	ldw	r2,0(r18)
  80621c:	ba000404 	addi	r8,r23,16
  806220:	91000204 	addi	r4,r18,8
  806224:	b8800215 	stw	r2,8(r23)
  806228:	90c00117 	ldw	r3,4(r18)
  80622c:	008006c4 	movi	r2,27
  806230:	b8c00315 	stw	r3,12(r23)
  806234:	1180072e 	bgeu	r2,r6,806254 <_realloc_r+0x204>
  806238:	90c00217 	ldw	r3,8(r18)
  80623c:	ba000604 	addi	r8,r23,24
  806240:	91000404 	addi	r4,r18,16
  806244:	b8c00415 	stw	r3,16(r23)
  806248:	90800317 	ldw	r2,12(r18)
  80624c:	b8800515 	stw	r2,20(r23)
  806250:	3140e726 	beq	r6,r5,8065f0 <_realloc_r+0x5a0>
  806254:	20800017 	ldw	r2,0(r4)
  806258:	dd000017 	ldw	r20,0(sp)
  80625c:	b80f883a 	mov	r7,r23
  806260:	40800015 	stw	r2,0(r8)
  806264:	20c00117 	ldw	r3,4(r4)
  806268:	40c00115 	stw	r3,4(r8)
  80626c:	20800217 	ldw	r2,8(r4)
  806270:	40800215 	stw	r2,8(r8)
  806274:	003f9706 	br	8060d4 <_realloc_r+0x84>
  806278:	98a9883a 	add	r20,r19,r2
  80627c:	a1c01f16 	blt	r20,r7,8062fc <_realloc_r+0x2ac>
  806280:	b8c00317 	ldw	r3,12(r23)
  806284:	b8800217 	ldw	r2,8(r23)
  806288:	99bfff04 	addi	r6,r19,-4
  80628c:	01400904 	movi	r5,36
  806290:	b82b883a 	mov	r21,r23
  806294:	18800215 	stw	r2,8(r3)
  806298:	10c00315 	stw	r3,12(r2)
  80629c:	bc000204 	addi	r16,r23,8
  8062a0:	2980c336 	bltu	r5,r6,8065b0 <_realloc_r+0x560>
  8062a4:	008004c4 	movi	r2,19
  8062a8:	9009883a 	mov	r4,r18
  8062ac:	8011883a 	mov	r8,r16
  8062b0:	11800f2e 	bgeu	r2,r6,8062f0 <_realloc_r+0x2a0>
  8062b4:	90800017 	ldw	r2,0(r18)
  8062b8:	ba000404 	addi	r8,r23,16
  8062bc:	91000204 	addi	r4,r18,8
  8062c0:	b8800215 	stw	r2,8(r23)
  8062c4:	90c00117 	ldw	r3,4(r18)
  8062c8:	008006c4 	movi	r2,27
  8062cc:	b8c00315 	stw	r3,12(r23)
  8062d0:	1180072e 	bgeu	r2,r6,8062f0 <_realloc_r+0x2a0>
  8062d4:	90c00217 	ldw	r3,8(r18)
  8062d8:	ba000604 	addi	r8,r23,24
  8062dc:	91000404 	addi	r4,r18,16
  8062e0:	b8c00415 	stw	r3,16(r23)
  8062e4:	90800317 	ldw	r2,12(r18)
  8062e8:	b8800515 	stw	r2,20(r23)
  8062ec:	3140c726 	beq	r6,r5,80660c <_realloc_r+0x5bc>
  8062f0:	20800017 	ldw	r2,0(r4)
  8062f4:	b80f883a 	mov	r7,r23
  8062f8:	003fd906 	br	806260 <_realloc_r+0x210>
  8062fc:	880b883a 	mov	r5,r17
  806300:	b009883a 	mov	r4,r22
  806304:	08055600 	call	805560 <_malloc_r>
  806308:	1023883a 	mov	r17,r2
  80630c:	10002526 	beq	r2,zero,8063a4 <_realloc_r+0x354>
  806310:	80800117 	ldw	r2,4(r16)
  806314:	00ffff84 	movi	r3,-2
  806318:	893ffe04 	addi	r4,r17,-8
  80631c:	10c4703a 	and	r2,r2,r3
  806320:	8085883a 	add	r2,r16,r2
  806324:	20809526 	beq	r4,r2,80657c <_realloc_r+0x52c>
  806328:	99bfff04 	addi	r6,r19,-4
  80632c:	01c00904 	movi	r7,36
  806330:	39804536 	bltu	r7,r6,806448 <_realloc_r+0x3f8>
  806334:	008004c4 	movi	r2,19
  806338:	9009883a 	mov	r4,r18
  80633c:	880b883a 	mov	r5,r17
  806340:	11800f2e 	bgeu	r2,r6,806380 <_realloc_r+0x330>
  806344:	90800017 	ldw	r2,0(r18)
  806348:	89400204 	addi	r5,r17,8
  80634c:	91000204 	addi	r4,r18,8
  806350:	88800015 	stw	r2,0(r17)
  806354:	90c00117 	ldw	r3,4(r18)
  806358:	008006c4 	movi	r2,27
  80635c:	88c00115 	stw	r3,4(r17)
  806360:	1180072e 	bgeu	r2,r6,806380 <_realloc_r+0x330>
  806364:	90c00217 	ldw	r3,8(r18)
  806368:	89400404 	addi	r5,r17,16
  80636c:	91000404 	addi	r4,r18,16
  806370:	88c00215 	stw	r3,8(r17)
  806374:	90800317 	ldw	r2,12(r18)
  806378:	88800315 	stw	r2,12(r17)
  80637c:	31c09126 	beq	r6,r7,8065c4 <_realloc_r+0x574>
  806380:	20800017 	ldw	r2,0(r4)
  806384:	28800015 	stw	r2,0(r5)
  806388:	20c00117 	ldw	r3,4(r4)
  80638c:	28c00115 	stw	r3,4(r5)
  806390:	20800217 	ldw	r2,8(r4)
  806394:	28800215 	stw	r2,8(r5)
  806398:	900b883a 	mov	r5,r18
  80639c:	b009883a 	mov	r4,r22
  8063a0:	0806f580 	call	806f58 <_free_r>
  8063a4:	b009883a 	mov	r4,r22
  8063a8:	0808cc80 	call	808cc8 <__malloc_unlock>
  8063ac:	003f5e06 	br	806128 <_realloc_r+0xd8>
  8063b0:	300b883a 	mov	r5,r6
  8063b4:	dfc00b17 	ldw	ra,44(sp)
  8063b8:	df000a17 	ldw	fp,40(sp)
  8063bc:	ddc00917 	ldw	r23,36(sp)
  8063c0:	dd800817 	ldw	r22,32(sp)
  8063c4:	dd400717 	ldw	r21,28(sp)
  8063c8:	dd000617 	ldw	r20,24(sp)
  8063cc:	dcc00517 	ldw	r19,20(sp)
  8063d0:	dc800417 	ldw	r18,16(sp)
  8063d4:	dc400317 	ldw	r17,12(sp)
  8063d8:	dc000217 	ldw	r16,8(sp)
  8063dc:	dec00c04 	addi	sp,sp,48
  8063e0:	08055601 	jmpi	805560 <_malloc_r>
  8063e4:	38800117 	ldw	r2,4(r7)
  8063e8:	e54b883a 	add	r5,fp,r21
  8063ec:	31000054 	ori	r4,r6,1
  8063f0:	1080004c 	andi	r2,r2,1
  8063f4:	1704b03a 	or	r2,r2,fp
  8063f8:	38800115 	stw	r2,4(r7)
  8063fc:	29000115 	stw	r4,4(r5)
  806400:	2987883a 	add	r3,r5,r6
  806404:	18800117 	ldw	r2,4(r3)
  806408:	29400204 	addi	r5,r5,8
  80640c:	b009883a 	mov	r4,r22
  806410:	10800054 	ori	r2,r2,1
  806414:	18800115 	stw	r2,4(r3)
  806418:	0806f580 	call	806f58 <_free_r>
  80641c:	003f3806 	br	806100 <_realloc_r+0xb0>
  806420:	000d883a 	mov	r6,zero
  806424:	0009883a 	mov	r4,zero
  806428:	003f5d06 	br	8061a0 <_realloc_r+0x150>
  80642c:	30c00217 	ldw	r3,8(r6)
  806430:	30800317 	ldw	r2,12(r6)
  806434:	800f883a 	mov	r7,r16
  806438:	84000204 	addi	r16,r16,8
  80643c:	10c00215 	stw	r3,8(r2)
  806440:	18800315 	stw	r2,12(r3)
  806444:	003f2306 	br	8060d4 <_realloc_r+0x84>
  806448:	8809883a 	mov	r4,r17
  80644c:	900b883a 	mov	r5,r18
  806450:	0805d840 	call	805d84 <memmove>
  806454:	003fd006 	br	806398 <_realloc_r+0x348>
  806458:	30800117 	ldw	r2,4(r6)
  80645c:	e0c00404 	addi	r3,fp,16
  806460:	1108703a 	and	r4,r2,r4
  806464:	9905883a 	add	r2,r19,r4
  806468:	10ff4d16 	blt	r2,r3,8061a0 <_realloc_r+0x150>
  80646c:	1705c83a 	sub	r2,r2,fp
  806470:	870b883a 	add	r5,r16,fp
  806474:	10800054 	ori	r2,r2,1
  806478:	28800115 	stw	r2,4(r5)
  80647c:	80c00117 	ldw	r3,4(r16)
  806480:	00802074 	movhi	r2,129
  806484:	10963c04 	addi	r2,r2,22768
  806488:	b009883a 	mov	r4,r22
  80648c:	18c0004c 	andi	r3,r3,1
  806490:	e0c6b03a 	or	r3,fp,r3
  806494:	11400215 	stw	r5,8(r2)
  806498:	80c00115 	stw	r3,4(r16)
  80649c:	0808cc80 	call	808cc8 <__malloc_unlock>
  8064a0:	84400204 	addi	r17,r16,8
  8064a4:	003f2006 	br	806128 <_realloc_r+0xd8>
  8064a8:	98a9883a 	add	r20,r19,r2
  8064ac:	2509883a 	add	r4,r4,r20
  8064b0:	e0800404 	addi	r2,fp,16
  8064b4:	d9000115 	stw	r4,4(sp)
  8064b8:	20bf7016 	blt	r4,r2,80627c <_realloc_r+0x22c>
  8064bc:	b8c00317 	ldw	r3,12(r23)
  8064c0:	b8800217 	ldw	r2,8(r23)
  8064c4:	99bfff04 	addi	r6,r19,-4
  8064c8:	01400904 	movi	r5,36
  8064cc:	18800215 	stw	r2,8(r3)
  8064d0:	10c00315 	stw	r3,12(r2)
  8064d4:	bc400204 	addi	r17,r23,8
  8064d8:	29804136 	bltu	r5,r6,8065e0 <_realloc_r+0x590>
  8064dc:	008004c4 	movi	r2,19
  8064e0:	9009883a 	mov	r4,r18
  8064e4:	880f883a 	mov	r7,r17
  8064e8:	11800f2e 	bgeu	r2,r6,806528 <_realloc_r+0x4d8>
  8064ec:	90800017 	ldw	r2,0(r18)
  8064f0:	b9c00404 	addi	r7,r23,16
  8064f4:	91000204 	addi	r4,r18,8
  8064f8:	b8800215 	stw	r2,8(r23)
  8064fc:	90c00117 	ldw	r3,4(r18)
  806500:	008006c4 	movi	r2,27
  806504:	b8c00315 	stw	r3,12(r23)
  806508:	1180072e 	bgeu	r2,r6,806528 <_realloc_r+0x4d8>
  80650c:	90c00217 	ldw	r3,8(r18)
  806510:	b9c00604 	addi	r7,r23,24
  806514:	91000404 	addi	r4,r18,16
  806518:	b8c00415 	stw	r3,16(r23)
  80651c:	90800317 	ldw	r2,12(r18)
  806520:	b8800515 	stw	r2,20(r23)
  806524:	31404026 	beq	r6,r5,806628 <_realloc_r+0x5d8>
  806528:	20800017 	ldw	r2,0(r4)
  80652c:	38800015 	stw	r2,0(r7)
  806530:	20c00117 	ldw	r3,4(r4)
  806534:	38c00115 	stw	r3,4(r7)
  806538:	20800217 	ldw	r2,8(r4)
  80653c:	38800215 	stw	r2,8(r7)
  806540:	d8c00117 	ldw	r3,4(sp)
  806544:	bf0b883a 	add	r5,r23,fp
  806548:	b009883a 	mov	r4,r22
  80654c:	1f05c83a 	sub	r2,r3,fp
  806550:	10800054 	ori	r2,r2,1
  806554:	28800115 	stw	r2,4(r5)
  806558:	b8c00117 	ldw	r3,4(r23)
  80655c:	00802074 	movhi	r2,129
  806560:	10963c04 	addi	r2,r2,22768
  806564:	11400215 	stw	r5,8(r2)
  806568:	18c0004c 	andi	r3,r3,1
  80656c:	e0c6b03a 	or	r3,fp,r3
  806570:	b8c00115 	stw	r3,4(r23)
  806574:	0808cc80 	call	808cc8 <__malloc_unlock>
  806578:	003eeb06 	br	806128 <_realloc_r+0xd8>
  80657c:	20800117 	ldw	r2,4(r4)
  806580:	00ffff04 	movi	r3,-4
  806584:	800f883a 	mov	r7,r16
  806588:	10c4703a 	and	r2,r2,r3
  80658c:	98a9883a 	add	r20,r19,r2
  806590:	84000204 	addi	r16,r16,8
  806594:	003ecf06 	br	8060d4 <_realloc_r+0x84>
  806598:	900b883a 	mov	r5,r18
  80659c:	8009883a 	mov	r4,r16
  8065a0:	0805d840 	call	805d84 <memmove>
  8065a4:	dd000017 	ldw	r20,0(sp)
  8065a8:	b80f883a 	mov	r7,r23
  8065ac:	003ec906 	br	8060d4 <_realloc_r+0x84>
  8065b0:	900b883a 	mov	r5,r18
  8065b4:	8009883a 	mov	r4,r16
  8065b8:	0805d840 	call	805d84 <memmove>
  8065bc:	b80f883a 	mov	r7,r23
  8065c0:	003ec406 	br	8060d4 <_realloc_r+0x84>
  8065c4:	90c00417 	ldw	r3,16(r18)
  8065c8:	89400604 	addi	r5,r17,24
  8065cc:	91000604 	addi	r4,r18,24
  8065d0:	88c00415 	stw	r3,16(r17)
  8065d4:	90800517 	ldw	r2,20(r18)
  8065d8:	88800515 	stw	r2,20(r17)
  8065dc:	003f6806 	br	806380 <_realloc_r+0x330>
  8065e0:	900b883a 	mov	r5,r18
  8065e4:	8809883a 	mov	r4,r17
  8065e8:	0805d840 	call	805d84 <memmove>
  8065ec:	003fd406 	br	806540 <_realloc_r+0x4f0>
  8065f0:	90c00417 	ldw	r3,16(r18)
  8065f4:	91000604 	addi	r4,r18,24
  8065f8:	ba000804 	addi	r8,r23,32
  8065fc:	b8c00615 	stw	r3,24(r23)
  806600:	90800517 	ldw	r2,20(r18)
  806604:	b8800715 	stw	r2,28(r23)
  806608:	003f1206 	br	806254 <_realloc_r+0x204>
  80660c:	90c00417 	ldw	r3,16(r18)
  806610:	91000604 	addi	r4,r18,24
  806614:	ba000804 	addi	r8,r23,32
  806618:	b8c00615 	stw	r3,24(r23)
  80661c:	90800517 	ldw	r2,20(r18)
  806620:	b8800715 	stw	r2,28(r23)
  806624:	003f3206 	br	8062f0 <_realloc_r+0x2a0>
  806628:	90c00417 	ldw	r3,16(r18)
  80662c:	91000604 	addi	r4,r18,24
  806630:	b9c00804 	addi	r7,r23,32
  806634:	b8c00615 	stw	r3,24(r23)
  806638:	90800517 	ldw	r2,20(r18)
  80663c:	b8800715 	stw	r2,28(r23)
  806640:	003fb906 	br	806528 <_realloc_r+0x4d8>

00806644 <_sbrk_r>:
  806644:	defffd04 	addi	sp,sp,-12
  806648:	dc000015 	stw	r16,0(sp)
  80664c:	04002074 	movhi	r16,129
  806650:	841c1d04 	addi	r16,r16,28788
  806654:	dc400115 	stw	r17,4(sp)
  806658:	80000015 	stw	zero,0(r16)
  80665c:	2023883a 	mov	r17,r4
  806660:	2809883a 	mov	r4,r5
  806664:	dfc00215 	stw	ra,8(sp)
  806668:	080887c0 	call	80887c <sbrk>
  80666c:	1007883a 	mov	r3,r2
  806670:	00bfffc4 	movi	r2,-1
  806674:	18800626 	beq	r3,r2,806690 <_sbrk_r+0x4c>
  806678:	1805883a 	mov	r2,r3
  80667c:	dfc00217 	ldw	ra,8(sp)
  806680:	dc400117 	ldw	r17,4(sp)
  806684:	dc000017 	ldw	r16,0(sp)
  806688:	dec00304 	addi	sp,sp,12
  80668c:	f800283a 	ret
  806690:	80800017 	ldw	r2,0(r16)
  806694:	103ff826 	beq	r2,zero,806678 <_sbrk_r+0x34>
  806698:	88800015 	stw	r2,0(r17)
  80669c:	1805883a 	mov	r2,r3
  8066a0:	dfc00217 	ldw	ra,8(sp)
  8066a4:	dc400117 	ldw	r17,4(sp)
  8066a8:	dc000017 	ldw	r16,0(sp)
  8066ac:	dec00304 	addi	sp,sp,12
  8066b0:	f800283a 	ret

008066b4 <__swbuf_r>:
  8066b4:	defffc04 	addi	sp,sp,-16
  8066b8:	dc400215 	stw	r17,8(sp)
  8066bc:	dc000115 	stw	r16,4(sp)
  8066c0:	dfc00315 	stw	ra,12(sp)
  8066c4:	2023883a 	mov	r17,r4
  8066c8:	2821883a 	mov	r16,r5
  8066cc:	20000226 	beq	r4,zero,8066d8 <__swbuf_r+0x24>
  8066d0:	20800e17 	ldw	r2,56(r4)
  8066d4:	10002f26 	beq	r2,zero,806794 <__swbuf_r+0xe0>
  8066d8:	3080030b 	ldhu	r2,12(r6)
  8066dc:	30c00617 	ldw	r3,24(r6)
  8066e0:	1080020c 	andi	r2,r2,8
  8066e4:	30c00215 	stw	r3,8(r6)
  8066e8:	10002226 	beq	r2,zero,806774 <__swbuf_r+0xc0>
  8066ec:	30c00417 	ldw	r3,16(r6)
  8066f0:	18002026 	beq	r3,zero,806774 <__swbuf_r+0xc0>
  8066f4:	31000017 	ldw	r4,0(r6)
  8066f8:	30800517 	ldw	r2,20(r6)
  8066fc:	20c7c83a 	sub	r3,r4,r3
  806700:	18802f0e 	bge	r3,r2,8067c0 <__swbuf_r+0x10c>
  806704:	19400044 	addi	r5,r3,1
  806708:	30800217 	ldw	r2,8(r6)
  80670c:	84003fcc 	andi	r16,r16,255
  806710:	20c00044 	addi	r3,r4,1
  806714:	10bfffc4 	addi	r2,r2,-1
  806718:	30800215 	stw	r2,8(r6)
  80671c:	24000005 	stb	r16,0(r4)
  806720:	30800517 	ldw	r2,20(r6)
  806724:	30c00015 	stw	r3,0(r6)
  806728:	11400c26 	beq	r2,r5,80675c <__swbuf_r+0xa8>
  80672c:	3080030b 	ldhu	r2,12(r6)
  806730:	1080004c 	andi	r2,r2,1
  806734:	1005003a 	cmpeq	r2,r2,zero
  806738:	10000626 	beq	r2,zero,806754 <__swbuf_r+0xa0>
  80673c:	8005883a 	mov	r2,r16
  806740:	dfc00317 	ldw	ra,12(sp)
  806744:	dc400217 	ldw	r17,8(sp)
  806748:	dc000117 	ldw	r16,4(sp)
  80674c:	dec00404 	addi	sp,sp,16
  806750:	f800283a 	ret
  806754:	00800284 	movi	r2,10
  806758:	80bff81e 	bne	r16,r2,80673c <__swbuf_r+0x88>
  80675c:	8809883a 	mov	r4,r17
  806760:	300b883a 	mov	r5,r6
  806764:	080693c0 	call	80693c <_fflush_r>
  806768:	103ff426 	beq	r2,zero,80673c <__swbuf_r+0x88>
  80676c:	043fffc4 	movi	r16,-1
  806770:	003ff206 	br	80673c <__swbuf_r+0x88>
  806774:	300b883a 	mov	r5,r6
  806778:	8809883a 	mov	r4,r17
  80677c:	d9800015 	stw	r6,0(sp)
  806780:	08068000 	call	806800 <__swsetup_r>
  806784:	d9800017 	ldw	r6,0(sp)
  806788:	1000061e 	bne	r2,zero,8067a4 <__swbuf_r+0xf0>
  80678c:	30c00417 	ldw	r3,16(r6)
  806790:	003fd806 	br	8066f4 <__swbuf_r+0x40>
  806794:	d9800015 	stw	r6,0(sp)
  806798:	0806bd40 	call	806bd4 <__sinit>
  80679c:	d9800017 	ldw	r6,0(sp)
  8067a0:	003fcd06 	br	8066d8 <__swbuf_r+0x24>
  8067a4:	3080030b 	ldhu	r2,12(r6)
  8067a8:	00c00244 	movi	r3,9
  8067ac:	043fffc4 	movi	r16,-1
  8067b0:	10801014 	ori	r2,r2,64
  8067b4:	3080030d 	sth	r2,12(r6)
  8067b8:	88c00015 	stw	r3,0(r17)
  8067bc:	003fdf06 	br	80673c <__swbuf_r+0x88>
  8067c0:	300b883a 	mov	r5,r6
  8067c4:	8809883a 	mov	r4,r17
  8067c8:	d9800015 	stw	r6,0(sp)
  8067cc:	080693c0 	call	80693c <_fflush_r>
  8067d0:	d9800017 	ldw	r6,0(sp)
  8067d4:	103fe51e 	bne	r2,zero,80676c <__swbuf_r+0xb8>
  8067d8:	31000017 	ldw	r4,0(r6)
  8067dc:	01400044 	movi	r5,1
  8067e0:	003fc906 	br	806708 <__swbuf_r+0x54>

008067e4 <__swbuf>:
  8067e4:	01802074 	movhi	r6,129
  8067e8:	319be704 	addi	r6,r6,28572
  8067ec:	2007883a 	mov	r3,r4
  8067f0:	31000017 	ldw	r4,0(r6)
  8067f4:	280d883a 	mov	r6,r5
  8067f8:	180b883a 	mov	r5,r3
  8067fc:	08066b41 	jmpi	8066b4 <__swbuf_r>

00806800 <__swsetup_r>:
  806800:	00802074 	movhi	r2,129
  806804:	109be704 	addi	r2,r2,28572
  806808:	10c00017 	ldw	r3,0(r2)
  80680c:	defffd04 	addi	sp,sp,-12
  806810:	dc400115 	stw	r17,4(sp)
  806814:	dc000015 	stw	r16,0(sp)
  806818:	dfc00215 	stw	ra,8(sp)
  80681c:	2023883a 	mov	r17,r4
  806820:	2821883a 	mov	r16,r5
  806824:	18000226 	beq	r3,zero,806830 <__swsetup_r+0x30>
  806828:	18800e17 	ldw	r2,56(r3)
  80682c:	10001f26 	beq	r2,zero,8068ac <__swsetup_r+0xac>
  806830:	8100030b 	ldhu	r4,12(r16)
  806834:	2080020c 	andi	r2,r4,8
  806838:	10002826 	beq	r2,zero,8068dc <__swsetup_r+0xdc>
  80683c:	81400417 	ldw	r5,16(r16)
  806840:	28001d26 	beq	r5,zero,8068b8 <__swsetup_r+0xb8>
  806844:	2080004c 	andi	r2,r4,1
  806848:	1005003a 	cmpeq	r2,r2,zero
  80684c:	10000b26 	beq	r2,zero,80687c <__swsetup_r+0x7c>
  806850:	2080008c 	andi	r2,r4,2
  806854:	10001226 	beq	r2,zero,8068a0 <__swsetup_r+0xa0>
  806858:	0005883a 	mov	r2,zero
  80685c:	80800215 	stw	r2,8(r16)
  806860:	28000b26 	beq	r5,zero,806890 <__swsetup_r+0x90>
  806864:	0005883a 	mov	r2,zero
  806868:	dfc00217 	ldw	ra,8(sp)
  80686c:	dc400117 	ldw	r17,4(sp)
  806870:	dc000017 	ldw	r16,0(sp)
  806874:	dec00304 	addi	sp,sp,12
  806878:	f800283a 	ret
  80687c:	80800517 	ldw	r2,20(r16)
  806880:	80000215 	stw	zero,8(r16)
  806884:	0085c83a 	sub	r2,zero,r2
  806888:	80800615 	stw	r2,24(r16)
  80688c:	283ff51e 	bne	r5,zero,806864 <__swsetup_r+0x64>
  806890:	2080200c 	andi	r2,r4,128
  806894:	103ff326 	beq	r2,zero,806864 <__swsetup_r+0x64>
  806898:	00bfffc4 	movi	r2,-1
  80689c:	003ff206 	br	806868 <__swsetup_r+0x68>
  8068a0:	80800517 	ldw	r2,20(r16)
  8068a4:	80800215 	stw	r2,8(r16)
  8068a8:	003fed06 	br	806860 <__swsetup_r+0x60>
  8068ac:	1809883a 	mov	r4,r3
  8068b0:	0806bd40 	call	806bd4 <__sinit>
  8068b4:	003fde06 	br	806830 <__swsetup_r+0x30>
  8068b8:	20c0a00c 	andi	r3,r4,640
  8068bc:	00808004 	movi	r2,512
  8068c0:	18bfe026 	beq	r3,r2,806844 <__swsetup_r+0x44>
  8068c4:	8809883a 	mov	r4,r17
  8068c8:	800b883a 	mov	r5,r16
  8068cc:	08073ec0 	call	8073ec <__smakebuf_r>
  8068d0:	8100030b 	ldhu	r4,12(r16)
  8068d4:	81400417 	ldw	r5,16(r16)
  8068d8:	003fda06 	br	806844 <__swsetup_r+0x44>
  8068dc:	2080040c 	andi	r2,r4,16
  8068e0:	103fed26 	beq	r2,zero,806898 <__swsetup_r+0x98>
  8068e4:	2080010c 	andi	r2,r4,4
  8068e8:	10001226 	beq	r2,zero,806934 <__swsetup_r+0x134>
  8068ec:	81400c17 	ldw	r5,48(r16)
  8068f0:	28000526 	beq	r5,zero,806908 <__swsetup_r+0x108>
  8068f4:	80801004 	addi	r2,r16,64
  8068f8:	28800226 	beq	r5,r2,806904 <__swsetup_r+0x104>
  8068fc:	8809883a 	mov	r4,r17
  806900:	0806f580 	call	806f58 <_free_r>
  806904:	80000c15 	stw	zero,48(r16)
  806908:	8080030b 	ldhu	r2,12(r16)
  80690c:	81400417 	ldw	r5,16(r16)
  806910:	80000115 	stw	zero,4(r16)
  806914:	10bff6cc 	andi	r2,r2,65499
  806918:	8080030d 	sth	r2,12(r16)
  80691c:	81400015 	stw	r5,0(r16)
  806920:	8080030b 	ldhu	r2,12(r16)
  806924:	10800214 	ori	r2,r2,8
  806928:	113fffcc 	andi	r4,r2,65535
  80692c:	8080030d 	sth	r2,12(r16)
  806930:	003fc306 	br	806840 <__swsetup_r+0x40>
  806934:	81400417 	ldw	r5,16(r16)
  806938:	003ff906 	br	806920 <__swsetup_r+0x120>

0080693c <_fflush_r>:
  80693c:	defffb04 	addi	sp,sp,-20
  806940:	dcc00315 	stw	r19,12(sp)
  806944:	dc800215 	stw	r18,8(sp)
  806948:	dfc00415 	stw	ra,16(sp)
  80694c:	dc400115 	stw	r17,4(sp)
  806950:	dc000015 	stw	r16,0(sp)
  806954:	2027883a 	mov	r19,r4
  806958:	2825883a 	mov	r18,r5
  80695c:	20000226 	beq	r4,zero,806968 <_fflush_r+0x2c>
  806960:	20800e17 	ldw	r2,56(r4)
  806964:	10005626 	beq	r2,zero,806ac0 <_fflush_r+0x184>
  806968:	9100030b 	ldhu	r4,12(r18)
  80696c:	20ffffcc 	andi	r3,r4,65535
  806970:	18e0001c 	xori	r3,r3,32768
  806974:	18e00004 	addi	r3,r3,-32768
  806978:	1880020c 	andi	r2,r3,8
  80697c:	1000261e 	bne	r2,zero,806a18 <_fflush_r+0xdc>
  806980:	90c00117 	ldw	r3,4(r18)
  806984:	20820014 	ori	r2,r4,2048
  806988:	9080030d 	sth	r2,12(r18)
  80698c:	1009883a 	mov	r4,r2
  806990:	00c0400e 	bge	zero,r3,806a94 <_fflush_r+0x158>
  806994:	92000a17 	ldw	r8,40(r18)
  806998:	40004026 	beq	r8,zero,806a9c <_fflush_r+0x160>
  80699c:	2084000c 	andi	r2,r4,4096
  8069a0:	10005326 	beq	r2,zero,806af0 <_fflush_r+0x1b4>
  8069a4:	94001417 	ldw	r16,80(r18)
  8069a8:	9080030b 	ldhu	r2,12(r18)
  8069ac:	1080010c 	andi	r2,r2,4
  8069b0:	1000481e 	bne	r2,zero,806ad4 <_fflush_r+0x198>
  8069b4:	91400717 	ldw	r5,28(r18)
  8069b8:	9809883a 	mov	r4,r19
  8069bc:	800d883a 	mov	r6,r16
  8069c0:	000f883a 	mov	r7,zero
  8069c4:	403ee83a 	callr	r8
  8069c8:	8080261e 	bne	r16,r2,806a64 <_fflush_r+0x128>
  8069cc:	9080030b 	ldhu	r2,12(r18)
  8069d0:	91000417 	ldw	r4,16(r18)
  8069d4:	90000115 	stw	zero,4(r18)
  8069d8:	10bdffcc 	andi	r2,r2,63487
  8069dc:	10ffffcc 	andi	r3,r2,65535
  8069e0:	18c4000c 	andi	r3,r3,4096
  8069e4:	9080030d 	sth	r2,12(r18)
  8069e8:	91000015 	stw	r4,0(r18)
  8069ec:	18002b26 	beq	r3,zero,806a9c <_fflush_r+0x160>
  8069f0:	0007883a 	mov	r3,zero
  8069f4:	1805883a 	mov	r2,r3
  8069f8:	94001415 	stw	r16,80(r18)
  8069fc:	dfc00417 	ldw	ra,16(sp)
  806a00:	dcc00317 	ldw	r19,12(sp)
  806a04:	dc800217 	ldw	r18,8(sp)
  806a08:	dc400117 	ldw	r17,4(sp)
  806a0c:	dc000017 	ldw	r16,0(sp)
  806a10:	dec00504 	addi	sp,sp,20
  806a14:	f800283a 	ret
  806a18:	94400417 	ldw	r17,16(r18)
  806a1c:	88001f26 	beq	r17,zero,806a9c <_fflush_r+0x160>
  806a20:	90800017 	ldw	r2,0(r18)
  806a24:	18c000cc 	andi	r3,r3,3
  806a28:	94400015 	stw	r17,0(r18)
  806a2c:	1461c83a 	sub	r16,r2,r17
  806a30:	18002526 	beq	r3,zero,806ac8 <_fflush_r+0x18c>
  806a34:	0005883a 	mov	r2,zero
  806a38:	90800215 	stw	r2,8(r18)
  806a3c:	0400170e 	bge	zero,r16,806a9c <_fflush_r+0x160>
  806a40:	90c00917 	ldw	r3,36(r18)
  806a44:	91400717 	ldw	r5,28(r18)
  806a48:	880d883a 	mov	r6,r17
  806a4c:	800f883a 	mov	r7,r16
  806a50:	9809883a 	mov	r4,r19
  806a54:	183ee83a 	callr	r3
  806a58:	88a3883a 	add	r17,r17,r2
  806a5c:	80a1c83a 	sub	r16,r16,r2
  806a60:	00bff616 	blt	zero,r2,806a3c <_fflush_r+0x100>
  806a64:	9080030b 	ldhu	r2,12(r18)
  806a68:	00ffffc4 	movi	r3,-1
  806a6c:	10801014 	ori	r2,r2,64
  806a70:	9080030d 	sth	r2,12(r18)
  806a74:	1805883a 	mov	r2,r3
  806a78:	dfc00417 	ldw	ra,16(sp)
  806a7c:	dcc00317 	ldw	r19,12(sp)
  806a80:	dc800217 	ldw	r18,8(sp)
  806a84:	dc400117 	ldw	r17,4(sp)
  806a88:	dc000017 	ldw	r16,0(sp)
  806a8c:	dec00504 	addi	sp,sp,20
  806a90:	f800283a 	ret
  806a94:	90800f17 	ldw	r2,60(r18)
  806a98:	00bfbe16 	blt	zero,r2,806994 <_fflush_r+0x58>
  806a9c:	0007883a 	mov	r3,zero
  806aa0:	1805883a 	mov	r2,r3
  806aa4:	dfc00417 	ldw	ra,16(sp)
  806aa8:	dcc00317 	ldw	r19,12(sp)
  806aac:	dc800217 	ldw	r18,8(sp)
  806ab0:	dc400117 	ldw	r17,4(sp)
  806ab4:	dc000017 	ldw	r16,0(sp)
  806ab8:	dec00504 	addi	sp,sp,20
  806abc:	f800283a 	ret
  806ac0:	0806bd40 	call	806bd4 <__sinit>
  806ac4:	003fa806 	br	806968 <_fflush_r+0x2c>
  806ac8:	90800517 	ldw	r2,20(r18)
  806acc:	90800215 	stw	r2,8(r18)
  806ad0:	003fda06 	br	806a3c <_fflush_r+0x100>
  806ad4:	90800117 	ldw	r2,4(r18)
  806ad8:	90c00c17 	ldw	r3,48(r18)
  806adc:	80a1c83a 	sub	r16,r16,r2
  806ae0:	183fb426 	beq	r3,zero,8069b4 <_fflush_r+0x78>
  806ae4:	90800f17 	ldw	r2,60(r18)
  806ae8:	80a1c83a 	sub	r16,r16,r2
  806aec:	003fb106 	br	8069b4 <_fflush_r+0x78>
  806af0:	91400717 	ldw	r5,28(r18)
  806af4:	9809883a 	mov	r4,r19
  806af8:	000d883a 	mov	r6,zero
  806afc:	01c00044 	movi	r7,1
  806b00:	403ee83a 	callr	r8
  806b04:	1021883a 	mov	r16,r2
  806b08:	00bfffc4 	movi	r2,-1
  806b0c:	80800226 	beq	r16,r2,806b18 <_fflush_r+0x1dc>
  806b10:	92000a17 	ldw	r8,40(r18)
  806b14:	003fa406 	br	8069a8 <_fflush_r+0x6c>
  806b18:	98c00017 	ldw	r3,0(r19)
  806b1c:	00800744 	movi	r2,29
  806b20:	18bfde26 	beq	r3,r2,806a9c <_fflush_r+0x160>
  806b24:	9080030b 	ldhu	r2,12(r18)
  806b28:	8007883a 	mov	r3,r16
  806b2c:	10801014 	ori	r2,r2,64
  806b30:	9080030d 	sth	r2,12(r18)
  806b34:	003fcf06 	br	806a74 <_fflush_r+0x138>

00806b38 <fflush>:
  806b38:	01402034 	movhi	r5,128
  806b3c:	295a4f04 	addi	r5,r5,26940
  806b40:	2007883a 	mov	r3,r4
  806b44:	20000526 	beq	r4,zero,806b5c <fflush+0x24>
  806b48:	00802074 	movhi	r2,129
  806b4c:	109be704 	addi	r2,r2,28572
  806b50:	11000017 	ldw	r4,0(r2)
  806b54:	180b883a 	mov	r5,r3
  806b58:	080693c1 	jmpi	80693c <_fflush_r>
  806b5c:	00802074 	movhi	r2,129
  806b60:	109be804 	addi	r2,r2,28576
  806b64:	11000017 	ldw	r4,0(r2)
  806b68:	080726c1 	jmpi	80726c <_fwalk_reent>

00806b6c <std>:
  806b6c:	00802034 	movhi	r2,128
  806b70:	109d8604 	addi	r2,r2,30232
  806b74:	20800b15 	stw	r2,44(r4)
  806b78:	00802034 	movhi	r2,128
  806b7c:	109dc104 	addi	r2,r2,30468
  806b80:	20800815 	stw	r2,32(r4)
  806b84:	00c02034 	movhi	r3,128
  806b88:	18dda204 	addi	r3,r3,30344
  806b8c:	00802034 	movhi	r2,128
  806b90:	109d8804 	addi	r2,r2,30240
  806b94:	2140030d 	sth	r5,12(r4)
  806b98:	2180038d 	sth	r6,14(r4)
  806b9c:	20c00915 	stw	r3,36(r4)
  806ba0:	20800a15 	stw	r2,40(r4)
  806ba4:	20000015 	stw	zero,0(r4)
  806ba8:	20000115 	stw	zero,4(r4)
  806bac:	20000215 	stw	zero,8(r4)
  806bb0:	20000415 	stw	zero,16(r4)
  806bb4:	20000515 	stw	zero,20(r4)
  806bb8:	20000615 	stw	zero,24(r4)
  806bbc:	21000715 	stw	r4,28(r4)
  806bc0:	f800283a 	ret

00806bc4 <__sfp_lock_acquire>:
  806bc4:	f800283a 	ret

00806bc8 <__sfp_lock_release>:
  806bc8:	f800283a 	ret

00806bcc <__sinit_lock_acquire>:
  806bcc:	f800283a 	ret

00806bd0 <__sinit_lock_release>:
  806bd0:	f800283a 	ret

00806bd4 <__sinit>:
  806bd4:	20800e17 	ldw	r2,56(r4)
  806bd8:	defffd04 	addi	sp,sp,-12
  806bdc:	dc400115 	stw	r17,4(sp)
  806be0:	dc000015 	stw	r16,0(sp)
  806be4:	dfc00215 	stw	ra,8(sp)
  806be8:	04400044 	movi	r17,1
  806bec:	01400104 	movi	r5,4
  806bf0:	000d883a 	mov	r6,zero
  806bf4:	2021883a 	mov	r16,r4
  806bf8:	2200bb04 	addi	r8,r4,748
  806bfc:	200f883a 	mov	r7,r4
  806c00:	10000526 	beq	r2,zero,806c18 <__sinit+0x44>
  806c04:	dfc00217 	ldw	ra,8(sp)
  806c08:	dc400117 	ldw	r17,4(sp)
  806c0c:	dc000017 	ldw	r16,0(sp)
  806c10:	dec00304 	addi	sp,sp,12
  806c14:	f800283a 	ret
  806c18:	21000117 	ldw	r4,4(r4)
  806c1c:	00802034 	movhi	r2,128
  806c20:	109b2e04 	addi	r2,r2,27832
  806c24:	00c000c4 	movi	r3,3
  806c28:	80800f15 	stw	r2,60(r16)
  806c2c:	80c0b915 	stw	r3,740(r16)
  806c30:	8200ba15 	stw	r8,744(r16)
  806c34:	84400e15 	stw	r17,56(r16)
  806c38:	8000b815 	stw	zero,736(r16)
  806c3c:	0806b6c0 	call	806b6c <std>
  806c40:	81000217 	ldw	r4,8(r16)
  806c44:	880d883a 	mov	r6,r17
  806c48:	800f883a 	mov	r7,r16
  806c4c:	01400284 	movi	r5,10
  806c50:	0806b6c0 	call	806b6c <std>
  806c54:	81000317 	ldw	r4,12(r16)
  806c58:	800f883a 	mov	r7,r16
  806c5c:	01400484 	movi	r5,18
  806c60:	01800084 	movi	r6,2
  806c64:	dfc00217 	ldw	ra,8(sp)
  806c68:	dc400117 	ldw	r17,4(sp)
  806c6c:	dc000017 	ldw	r16,0(sp)
  806c70:	dec00304 	addi	sp,sp,12
  806c74:	0806b6c1 	jmpi	806b6c <std>

00806c78 <__fp_lock>:
  806c78:	0005883a 	mov	r2,zero
  806c7c:	f800283a 	ret

00806c80 <__fp_unlock>:
  806c80:	0005883a 	mov	r2,zero
  806c84:	f800283a 	ret

00806c88 <__fp_unlock_all>:
  806c88:	00802074 	movhi	r2,129
  806c8c:	109be704 	addi	r2,r2,28572
  806c90:	11000017 	ldw	r4,0(r2)
  806c94:	01402034 	movhi	r5,128
  806c98:	295b2004 	addi	r5,r5,27776
  806c9c:	08073341 	jmpi	807334 <_fwalk>

00806ca0 <__fp_lock_all>:
  806ca0:	00802074 	movhi	r2,129
  806ca4:	109be704 	addi	r2,r2,28572
  806ca8:	11000017 	ldw	r4,0(r2)
  806cac:	01402034 	movhi	r5,128
  806cb0:	295b1e04 	addi	r5,r5,27768
  806cb4:	08073341 	jmpi	807334 <_fwalk>

00806cb8 <_cleanup_r>:
  806cb8:	01402034 	movhi	r5,128
  806cbc:	295e5704 	addi	r5,r5,31068
  806cc0:	08073341 	jmpi	807334 <_fwalk>

00806cc4 <_cleanup>:
  806cc4:	00802074 	movhi	r2,129
  806cc8:	109be804 	addi	r2,r2,28576
  806ccc:	11000017 	ldw	r4,0(r2)
  806cd0:	0806cb81 	jmpi	806cb8 <_cleanup_r>

00806cd4 <__sfmoreglue>:
  806cd4:	defffc04 	addi	sp,sp,-16
  806cd8:	dc400115 	stw	r17,4(sp)
  806cdc:	2c401724 	muli	r17,r5,92
  806ce0:	dc800215 	stw	r18,8(sp)
  806ce4:	2825883a 	mov	r18,r5
  806ce8:	89400304 	addi	r5,r17,12
  806cec:	dc000015 	stw	r16,0(sp)
  806cf0:	dfc00315 	stw	ra,12(sp)
  806cf4:	08055600 	call	805560 <_malloc_r>
  806cf8:	0021883a 	mov	r16,zero
  806cfc:	880d883a 	mov	r6,r17
  806d00:	000b883a 	mov	r5,zero
  806d04:	10000626 	beq	r2,zero,806d20 <__sfmoreglue+0x4c>
  806d08:	11000304 	addi	r4,r2,12
  806d0c:	14800115 	stw	r18,4(r2)
  806d10:	10000015 	stw	zero,0(r2)
  806d14:	11000215 	stw	r4,8(r2)
  806d18:	1021883a 	mov	r16,r2
  806d1c:	08075800 	call	807580 <memset>
  806d20:	8005883a 	mov	r2,r16
  806d24:	dfc00317 	ldw	ra,12(sp)
  806d28:	dc800217 	ldw	r18,8(sp)
  806d2c:	dc400117 	ldw	r17,4(sp)
  806d30:	dc000017 	ldw	r16,0(sp)
  806d34:	dec00404 	addi	sp,sp,16
  806d38:	f800283a 	ret

00806d3c <__sfp>:
  806d3c:	defffd04 	addi	sp,sp,-12
  806d40:	00802074 	movhi	r2,129
  806d44:	109be804 	addi	r2,r2,28576
  806d48:	dc000015 	stw	r16,0(sp)
  806d4c:	14000017 	ldw	r16,0(r2)
  806d50:	dc400115 	stw	r17,4(sp)
  806d54:	dfc00215 	stw	ra,8(sp)
  806d58:	80800e17 	ldw	r2,56(r16)
  806d5c:	2023883a 	mov	r17,r4
  806d60:	10002626 	beq	r2,zero,806dfc <__sfp+0xc0>
  806d64:	8400b804 	addi	r16,r16,736
  806d68:	80800117 	ldw	r2,4(r16)
  806d6c:	81000217 	ldw	r4,8(r16)
  806d70:	10ffffc4 	addi	r3,r2,-1
  806d74:	18000916 	blt	r3,zero,806d9c <__sfp+0x60>
  806d78:	2080030f 	ldh	r2,12(r4)
  806d7c:	10000b26 	beq	r2,zero,806dac <__sfp+0x70>
  806d80:	017fffc4 	movi	r5,-1
  806d84:	00000206 	br	806d90 <__sfp+0x54>
  806d88:	2080030f 	ldh	r2,12(r4)
  806d8c:	10000726 	beq	r2,zero,806dac <__sfp+0x70>
  806d90:	18ffffc4 	addi	r3,r3,-1
  806d94:	21001704 	addi	r4,r4,92
  806d98:	197ffb1e 	bne	r3,r5,806d88 <__sfp+0x4c>
  806d9c:	80800017 	ldw	r2,0(r16)
  806da0:	10001926 	beq	r2,zero,806e08 <__sfp+0xcc>
  806da4:	1021883a 	mov	r16,r2
  806da8:	003fef06 	br	806d68 <__sfp+0x2c>
  806dac:	00bfffc4 	movi	r2,-1
  806db0:	00c00044 	movi	r3,1
  806db4:	2080038d 	sth	r2,14(r4)
  806db8:	20c0030d 	sth	r3,12(r4)
  806dbc:	20000015 	stw	zero,0(r4)
  806dc0:	20000215 	stw	zero,8(r4)
  806dc4:	20000115 	stw	zero,4(r4)
  806dc8:	20000415 	stw	zero,16(r4)
  806dcc:	20000515 	stw	zero,20(r4)
  806dd0:	20000615 	stw	zero,24(r4)
  806dd4:	20000c15 	stw	zero,48(r4)
  806dd8:	20000d15 	stw	zero,52(r4)
  806ddc:	20001115 	stw	zero,68(r4)
  806de0:	20001215 	stw	zero,72(r4)
  806de4:	2005883a 	mov	r2,r4
  806de8:	dfc00217 	ldw	ra,8(sp)
  806dec:	dc400117 	ldw	r17,4(sp)
  806df0:	dc000017 	ldw	r16,0(sp)
  806df4:	dec00304 	addi	sp,sp,12
  806df8:	f800283a 	ret
  806dfc:	8009883a 	mov	r4,r16
  806e00:	0806bd40 	call	806bd4 <__sinit>
  806e04:	003fd706 	br	806d64 <__sfp+0x28>
  806e08:	8809883a 	mov	r4,r17
  806e0c:	01400104 	movi	r5,4
  806e10:	0806cd40 	call	806cd4 <__sfmoreglue>
  806e14:	80800015 	stw	r2,0(r16)
  806e18:	103fe21e 	bne	r2,zero,806da4 <__sfp+0x68>
  806e1c:	00800304 	movi	r2,12
  806e20:	0009883a 	mov	r4,zero
  806e24:	88800015 	stw	r2,0(r17)
  806e28:	003fee06 	br	806de4 <__sfp+0xa8>

00806e2c <_malloc_trim_r>:
  806e2c:	defffb04 	addi	sp,sp,-20
  806e30:	dcc00315 	stw	r19,12(sp)
  806e34:	04c02074 	movhi	r19,129
  806e38:	9cd63c04 	addi	r19,r19,22768
  806e3c:	dc800215 	stw	r18,8(sp)
  806e40:	dc400115 	stw	r17,4(sp)
  806e44:	dc000015 	stw	r16,0(sp)
  806e48:	2823883a 	mov	r17,r5
  806e4c:	2025883a 	mov	r18,r4
  806e50:	dfc00415 	stw	ra,16(sp)
  806e54:	0808bc00 	call	808bc0 <__malloc_lock>
  806e58:	98800217 	ldw	r2,8(r19)
  806e5c:	9009883a 	mov	r4,r18
  806e60:	000b883a 	mov	r5,zero
  806e64:	10c00117 	ldw	r3,4(r2)
  806e68:	00bfff04 	movi	r2,-4
  806e6c:	18a0703a 	and	r16,r3,r2
  806e70:	8463c83a 	sub	r17,r16,r17
  806e74:	8c43fbc4 	addi	r17,r17,4079
  806e78:	8822d33a 	srli	r17,r17,12
  806e7c:	0083ffc4 	movi	r2,4095
  806e80:	8c7fffc4 	addi	r17,r17,-1
  806e84:	8822933a 	slli	r17,r17,12
  806e88:	1440060e 	bge	r2,r17,806ea4 <_malloc_trim_r+0x78>
  806e8c:	08066440 	call	806644 <_sbrk_r>
  806e90:	98c00217 	ldw	r3,8(r19)
  806e94:	9009883a 	mov	r4,r18
  806e98:	044bc83a 	sub	r5,zero,r17
  806e9c:	80c7883a 	add	r3,r16,r3
  806ea0:	10c00926 	beq	r2,r3,806ec8 <_malloc_trim_r+0x9c>
  806ea4:	0808cc80 	call	808cc8 <__malloc_unlock>
  806ea8:	0005883a 	mov	r2,zero
  806eac:	dfc00417 	ldw	ra,16(sp)
  806eb0:	dcc00317 	ldw	r19,12(sp)
  806eb4:	dc800217 	ldw	r18,8(sp)
  806eb8:	dc400117 	ldw	r17,4(sp)
  806ebc:	dc000017 	ldw	r16,0(sp)
  806ec0:	dec00504 	addi	sp,sp,20
  806ec4:	f800283a 	ret
  806ec8:	9009883a 	mov	r4,r18
  806ecc:	08066440 	call	806644 <_sbrk_r>
  806ed0:	844dc83a 	sub	r6,r16,r17
  806ed4:	00ffffc4 	movi	r3,-1
  806ed8:	9009883a 	mov	r4,r18
  806edc:	000b883a 	mov	r5,zero
  806ee0:	01c02074 	movhi	r7,129
  806ee4:	39dc3d04 	addi	r7,r7,28916
  806ee8:	31800054 	ori	r6,r6,1
  806eec:	10c00926 	beq	r2,r3,806f14 <_malloc_trim_r+0xe8>
  806ef0:	38800017 	ldw	r2,0(r7)
  806ef4:	98c00217 	ldw	r3,8(r19)
  806ef8:	9009883a 	mov	r4,r18
  806efc:	1445c83a 	sub	r2,r2,r17
  806f00:	38800015 	stw	r2,0(r7)
  806f04:	19800115 	stw	r6,4(r3)
  806f08:	0808cc80 	call	808cc8 <__malloc_unlock>
  806f0c:	00800044 	movi	r2,1
  806f10:	003fe606 	br	806eac <_malloc_trim_r+0x80>
  806f14:	08066440 	call	806644 <_sbrk_r>
  806f18:	99800217 	ldw	r6,8(r19)
  806f1c:	100f883a 	mov	r7,r2
  806f20:	9009883a 	mov	r4,r18
  806f24:	1187c83a 	sub	r3,r2,r6
  806f28:	008003c4 	movi	r2,15
  806f2c:	19400054 	ori	r5,r3,1
  806f30:	10ffdc0e 	bge	r2,r3,806ea4 <_malloc_trim_r+0x78>
  806f34:	00802074 	movhi	r2,129
  806f38:	109bea04 	addi	r2,r2,28584
  806f3c:	10c00017 	ldw	r3,0(r2)
  806f40:	00802074 	movhi	r2,129
  806f44:	109c3d04 	addi	r2,r2,28916
  806f48:	31400115 	stw	r5,4(r6)
  806f4c:	38c7c83a 	sub	r3,r7,r3
  806f50:	10c00015 	stw	r3,0(r2)
  806f54:	003fd306 	br	806ea4 <_malloc_trim_r+0x78>

00806f58 <_free_r>:
  806f58:	defffd04 	addi	sp,sp,-12
  806f5c:	dc400115 	stw	r17,4(sp)
  806f60:	dc000015 	stw	r16,0(sp)
  806f64:	dfc00215 	stw	ra,8(sp)
  806f68:	2821883a 	mov	r16,r5
  806f6c:	2023883a 	mov	r17,r4
  806f70:	28005a26 	beq	r5,zero,8070dc <_free_r+0x184>
  806f74:	0808bc00 	call	808bc0 <__malloc_lock>
  806f78:	823ffe04 	addi	r8,r16,-8
  806f7c:	41400117 	ldw	r5,4(r8)
  806f80:	00bfff84 	movi	r2,-2
  806f84:	02802074 	movhi	r10,129
  806f88:	52963c04 	addi	r10,r10,22768
  806f8c:	288e703a 	and	r7,r5,r2
  806f90:	41cd883a 	add	r6,r8,r7
  806f94:	30c00117 	ldw	r3,4(r6)
  806f98:	51000217 	ldw	r4,8(r10)
  806f9c:	00bfff04 	movi	r2,-4
  806fa0:	1892703a 	and	r9,r3,r2
  806fa4:	5017883a 	mov	r11,r10
  806fa8:	31006726 	beq	r6,r4,807148 <_free_r+0x1f0>
  806fac:	2880004c 	andi	r2,r5,1
  806fb0:	1005003a 	cmpeq	r2,r2,zero
  806fb4:	32400115 	stw	r9,4(r6)
  806fb8:	10001a1e 	bne	r2,zero,807024 <_free_r+0xcc>
  806fbc:	000b883a 	mov	r5,zero
  806fc0:	3247883a 	add	r3,r6,r9
  806fc4:	18800117 	ldw	r2,4(r3)
  806fc8:	1080004c 	andi	r2,r2,1
  806fcc:	1000231e 	bne	r2,zero,80705c <_free_r+0x104>
  806fd0:	280ac03a 	cmpne	r5,r5,zero
  806fd4:	3a4f883a 	add	r7,r7,r9
  806fd8:	2800451e 	bne	r5,zero,8070f0 <_free_r+0x198>
  806fdc:	31000217 	ldw	r4,8(r6)
  806fe0:	00802074 	movhi	r2,129
  806fe4:	10963e04 	addi	r2,r2,22776
  806fe8:	20807b26 	beq	r4,r2,8071d8 <_free_r+0x280>
  806fec:	30800317 	ldw	r2,12(r6)
  806ff0:	3a07883a 	add	r3,r7,r8
  806ff4:	19c00015 	stw	r7,0(r3)
  806ff8:	11000215 	stw	r4,8(r2)
  806ffc:	20800315 	stw	r2,12(r4)
  807000:	38800054 	ori	r2,r7,1
  807004:	40800115 	stw	r2,4(r8)
  807008:	28001a26 	beq	r5,zero,807074 <_free_r+0x11c>
  80700c:	8809883a 	mov	r4,r17
  807010:	dfc00217 	ldw	ra,8(sp)
  807014:	dc400117 	ldw	r17,4(sp)
  807018:	dc000017 	ldw	r16,0(sp)
  80701c:	dec00304 	addi	sp,sp,12
  807020:	0808cc81 	jmpi	808cc8 <__malloc_unlock>
  807024:	80bffe17 	ldw	r2,-8(r16)
  807028:	50c00204 	addi	r3,r10,8
  80702c:	4091c83a 	sub	r8,r8,r2
  807030:	41000217 	ldw	r4,8(r8)
  807034:	388f883a 	add	r7,r7,r2
  807038:	20c06126 	beq	r4,r3,8071c0 <_free_r+0x268>
  80703c:	40800317 	ldw	r2,12(r8)
  807040:	3247883a 	add	r3,r6,r9
  807044:	000b883a 	mov	r5,zero
  807048:	11000215 	stw	r4,8(r2)
  80704c:	20800315 	stw	r2,12(r4)
  807050:	18800117 	ldw	r2,4(r3)
  807054:	1080004c 	andi	r2,r2,1
  807058:	103fdd26 	beq	r2,zero,806fd0 <_free_r+0x78>
  80705c:	38800054 	ori	r2,r7,1
  807060:	3a07883a 	add	r3,r7,r8
  807064:	280ac03a 	cmpne	r5,r5,zero
  807068:	40800115 	stw	r2,4(r8)
  80706c:	19c00015 	stw	r7,0(r3)
  807070:	283fe61e 	bne	r5,zero,80700c <_free_r+0xb4>
  807074:	00807fc4 	movi	r2,511
  807078:	11c01f2e 	bgeu	r2,r7,8070f8 <_free_r+0x1a0>
  80707c:	3806d27a 	srli	r3,r7,9
  807080:	1800481e 	bne	r3,zero,8071a4 <_free_r+0x24c>
  807084:	3804d0fa 	srli	r2,r7,3
  807088:	100690fa 	slli	r3,r2,3
  80708c:	1acd883a 	add	r6,r3,r11
  807090:	31400217 	ldw	r5,8(r6)
  807094:	31405926 	beq	r6,r5,8071fc <_free_r+0x2a4>
  807098:	28800117 	ldw	r2,4(r5)
  80709c:	00ffff04 	movi	r3,-4
  8070a0:	10c4703a 	and	r2,r2,r3
  8070a4:	3880022e 	bgeu	r7,r2,8070b0 <_free_r+0x158>
  8070a8:	29400217 	ldw	r5,8(r5)
  8070ac:	317ffa1e 	bne	r6,r5,807098 <_free_r+0x140>
  8070b0:	29800317 	ldw	r6,12(r5)
  8070b4:	41800315 	stw	r6,12(r8)
  8070b8:	41400215 	stw	r5,8(r8)
  8070bc:	8809883a 	mov	r4,r17
  8070c0:	2a000315 	stw	r8,12(r5)
  8070c4:	32000215 	stw	r8,8(r6)
  8070c8:	dfc00217 	ldw	ra,8(sp)
  8070cc:	dc400117 	ldw	r17,4(sp)
  8070d0:	dc000017 	ldw	r16,0(sp)
  8070d4:	dec00304 	addi	sp,sp,12
  8070d8:	0808cc81 	jmpi	808cc8 <__malloc_unlock>
  8070dc:	dfc00217 	ldw	ra,8(sp)
  8070e0:	dc400117 	ldw	r17,4(sp)
  8070e4:	dc000017 	ldw	r16,0(sp)
  8070e8:	dec00304 	addi	sp,sp,12
  8070ec:	f800283a 	ret
  8070f0:	31000217 	ldw	r4,8(r6)
  8070f4:	003fbd06 	br	806fec <_free_r+0x94>
  8070f8:	3806d0fa 	srli	r3,r7,3
  8070fc:	00800044 	movi	r2,1
  807100:	51400117 	ldw	r5,4(r10)
  807104:	180890fa 	slli	r4,r3,3
  807108:	1807d0ba 	srai	r3,r3,2
  80710c:	22c9883a 	add	r4,r4,r11
  807110:	21800217 	ldw	r6,8(r4)
  807114:	10c4983a 	sll	r2,r2,r3
  807118:	41000315 	stw	r4,12(r8)
  80711c:	41800215 	stw	r6,8(r8)
  807120:	288ab03a 	or	r5,r5,r2
  807124:	22000215 	stw	r8,8(r4)
  807128:	8809883a 	mov	r4,r17
  80712c:	51400115 	stw	r5,4(r10)
  807130:	32000315 	stw	r8,12(r6)
  807134:	dfc00217 	ldw	ra,8(sp)
  807138:	dc400117 	ldw	r17,4(sp)
  80713c:	dc000017 	ldw	r16,0(sp)
  807140:	dec00304 	addi	sp,sp,12
  807144:	0808cc81 	jmpi	808cc8 <__malloc_unlock>
  807148:	2880004c 	andi	r2,r5,1
  80714c:	3a4d883a 	add	r6,r7,r9
  807150:	1000071e 	bne	r2,zero,807170 <_free_r+0x218>
  807154:	80bffe17 	ldw	r2,-8(r16)
  807158:	4091c83a 	sub	r8,r8,r2
  80715c:	41000317 	ldw	r4,12(r8)
  807160:	40c00217 	ldw	r3,8(r8)
  807164:	308d883a 	add	r6,r6,r2
  807168:	20c00215 	stw	r3,8(r4)
  80716c:	19000315 	stw	r4,12(r3)
  807170:	00802074 	movhi	r2,129
  807174:	109be904 	addi	r2,r2,28580
  807178:	11000017 	ldw	r4,0(r2)
  80717c:	30c00054 	ori	r3,r6,1
  807180:	52000215 	stw	r8,8(r10)
  807184:	40c00115 	stw	r3,4(r8)
  807188:	313fa036 	bltu	r6,r4,80700c <_free_r+0xb4>
  80718c:	00802074 	movhi	r2,129
  807190:	109c1a04 	addi	r2,r2,28776
  807194:	11400017 	ldw	r5,0(r2)
  807198:	8809883a 	mov	r4,r17
  80719c:	0806e2c0 	call	806e2c <_malloc_trim_r>
  8071a0:	003f9a06 	br	80700c <_free_r+0xb4>
  8071a4:	00800104 	movi	r2,4
  8071a8:	10c0072e 	bgeu	r2,r3,8071c8 <_free_r+0x270>
  8071ac:	00800504 	movi	r2,20
  8071b0:	10c01936 	bltu	r2,r3,807218 <_free_r+0x2c0>
  8071b4:	188016c4 	addi	r2,r3,91
  8071b8:	100690fa 	slli	r3,r2,3
  8071bc:	003fb306 	br	80708c <_free_r+0x134>
  8071c0:	01400044 	movi	r5,1
  8071c4:	003f7e06 	br	806fc0 <_free_r+0x68>
  8071c8:	3804d1ba 	srli	r2,r7,6
  8071cc:	10800e04 	addi	r2,r2,56
  8071d0:	100690fa 	slli	r3,r2,3
  8071d4:	003fad06 	br	80708c <_free_r+0x134>
  8071d8:	22000315 	stw	r8,12(r4)
  8071dc:	22000215 	stw	r8,8(r4)
  8071e0:	3a05883a 	add	r2,r7,r8
  8071e4:	38c00054 	ori	r3,r7,1
  8071e8:	11c00015 	stw	r7,0(r2)
  8071ec:	41000215 	stw	r4,8(r8)
  8071f0:	40c00115 	stw	r3,4(r8)
  8071f4:	41000315 	stw	r4,12(r8)
  8071f8:	003f8406 	br	80700c <_free_r+0xb4>
  8071fc:	1005d0ba 	srai	r2,r2,2
  807200:	00c00044 	movi	r3,1
  807204:	51000117 	ldw	r4,4(r10)
  807208:	1886983a 	sll	r3,r3,r2
  80720c:	20c8b03a 	or	r4,r4,r3
  807210:	51000115 	stw	r4,4(r10)
  807214:	003fa706 	br	8070b4 <_free_r+0x15c>
  807218:	00801504 	movi	r2,84
  80721c:	10c00436 	bltu	r2,r3,807230 <_free_r+0x2d8>
  807220:	3804d33a 	srli	r2,r7,12
  807224:	10801b84 	addi	r2,r2,110
  807228:	100690fa 	slli	r3,r2,3
  80722c:	003f9706 	br	80708c <_free_r+0x134>
  807230:	00805504 	movi	r2,340
  807234:	10c00436 	bltu	r2,r3,807248 <_free_r+0x2f0>
  807238:	3804d3fa 	srli	r2,r7,15
  80723c:	10801dc4 	addi	r2,r2,119
  807240:	100690fa 	slli	r3,r2,3
  807244:	003f9106 	br	80708c <_free_r+0x134>
  807248:	00815504 	movi	r2,1364
  80724c:	10c0032e 	bgeu	r2,r3,80725c <_free_r+0x304>
  807250:	00801f84 	movi	r2,126
  807254:	00c0fc04 	movi	r3,1008
  807258:	003f8c06 	br	80708c <_free_r+0x134>
  80725c:	3804d4ba 	srli	r2,r7,18
  807260:	10801f04 	addi	r2,r2,124
  807264:	100690fa 	slli	r3,r2,3
  807268:	003f8806 	br	80708c <_free_r+0x134>

0080726c <_fwalk_reent>:
  80726c:	defff704 	addi	sp,sp,-36
  807270:	dcc00315 	stw	r19,12(sp)
  807274:	24c0b804 	addi	r19,r4,736
  807278:	dd800615 	stw	r22,24(sp)
  80727c:	dd400515 	stw	r21,20(sp)
  807280:	dfc00815 	stw	ra,32(sp)
  807284:	ddc00715 	stw	r23,28(sp)
  807288:	dd000415 	stw	r20,16(sp)
  80728c:	dc800215 	stw	r18,8(sp)
  807290:	dc400115 	stw	r17,4(sp)
  807294:	dc000015 	stw	r16,0(sp)
  807298:	202b883a 	mov	r21,r4
  80729c:	282d883a 	mov	r22,r5
  8072a0:	0806bc40 	call	806bc4 <__sfp_lock_acquire>
  8072a4:	98002126 	beq	r19,zero,80732c <_fwalk_reent+0xc0>
  8072a8:	002f883a 	mov	r23,zero
  8072ac:	9c800117 	ldw	r18,4(r19)
  8072b0:	9c000217 	ldw	r16,8(r19)
  8072b4:	90bfffc4 	addi	r2,r18,-1
  8072b8:	10000d16 	blt	r2,zero,8072f0 <_fwalk_reent+0x84>
  8072bc:	0023883a 	mov	r17,zero
  8072c0:	053fffc4 	movi	r20,-1
  8072c4:	8080030f 	ldh	r2,12(r16)
  8072c8:	8c400044 	addi	r17,r17,1
  8072cc:	10000626 	beq	r2,zero,8072e8 <_fwalk_reent+0x7c>
  8072d0:	8080038f 	ldh	r2,14(r16)
  8072d4:	800b883a 	mov	r5,r16
  8072d8:	a809883a 	mov	r4,r21
  8072dc:	15000226 	beq	r2,r20,8072e8 <_fwalk_reent+0x7c>
  8072e0:	b03ee83a 	callr	r22
  8072e4:	b8aeb03a 	or	r23,r23,r2
  8072e8:	84001704 	addi	r16,r16,92
  8072ec:	947ff51e 	bne	r18,r17,8072c4 <_fwalk_reent+0x58>
  8072f0:	9cc00017 	ldw	r19,0(r19)
  8072f4:	983fed1e 	bne	r19,zero,8072ac <_fwalk_reent+0x40>
  8072f8:	0806bc80 	call	806bc8 <__sfp_lock_release>
  8072fc:	b805883a 	mov	r2,r23
  807300:	dfc00817 	ldw	ra,32(sp)
  807304:	ddc00717 	ldw	r23,28(sp)
  807308:	dd800617 	ldw	r22,24(sp)
  80730c:	dd400517 	ldw	r21,20(sp)
  807310:	dd000417 	ldw	r20,16(sp)
  807314:	dcc00317 	ldw	r19,12(sp)
  807318:	dc800217 	ldw	r18,8(sp)
  80731c:	dc400117 	ldw	r17,4(sp)
  807320:	dc000017 	ldw	r16,0(sp)
  807324:	dec00904 	addi	sp,sp,36
  807328:	f800283a 	ret
  80732c:	002f883a 	mov	r23,zero
  807330:	003ff106 	br	8072f8 <_fwalk_reent+0x8c>

00807334 <_fwalk>:
  807334:	defff804 	addi	sp,sp,-32
  807338:	dcc00315 	stw	r19,12(sp)
  80733c:	24c0b804 	addi	r19,r4,736
  807340:	dd400515 	stw	r21,20(sp)
  807344:	dfc00715 	stw	ra,28(sp)
  807348:	dd800615 	stw	r22,24(sp)
  80734c:	dd000415 	stw	r20,16(sp)
  807350:	dc800215 	stw	r18,8(sp)
  807354:	dc400115 	stw	r17,4(sp)
  807358:	dc000015 	stw	r16,0(sp)
  80735c:	282b883a 	mov	r21,r5
  807360:	0806bc40 	call	806bc4 <__sfp_lock_acquire>
  807364:	98001f26 	beq	r19,zero,8073e4 <_fwalk+0xb0>
  807368:	002d883a 	mov	r22,zero
  80736c:	9c800117 	ldw	r18,4(r19)
  807370:	9c000217 	ldw	r16,8(r19)
  807374:	90bfffc4 	addi	r2,r18,-1
  807378:	10000c16 	blt	r2,zero,8073ac <_fwalk+0x78>
  80737c:	0023883a 	mov	r17,zero
  807380:	053fffc4 	movi	r20,-1
  807384:	8080030f 	ldh	r2,12(r16)
  807388:	8c400044 	addi	r17,r17,1
  80738c:	10000526 	beq	r2,zero,8073a4 <_fwalk+0x70>
  807390:	8080038f 	ldh	r2,14(r16)
  807394:	8009883a 	mov	r4,r16
  807398:	15000226 	beq	r2,r20,8073a4 <_fwalk+0x70>
  80739c:	a83ee83a 	callr	r21
  8073a0:	b0acb03a 	or	r22,r22,r2
  8073a4:	84001704 	addi	r16,r16,92
  8073a8:	947ff61e 	bne	r18,r17,807384 <_fwalk+0x50>
  8073ac:	9cc00017 	ldw	r19,0(r19)
  8073b0:	983fee1e 	bne	r19,zero,80736c <_fwalk+0x38>
  8073b4:	0806bc80 	call	806bc8 <__sfp_lock_release>
  8073b8:	b005883a 	mov	r2,r22
  8073bc:	dfc00717 	ldw	ra,28(sp)
  8073c0:	dd800617 	ldw	r22,24(sp)
  8073c4:	dd400517 	ldw	r21,20(sp)
  8073c8:	dd000417 	ldw	r20,16(sp)
  8073cc:	dcc00317 	ldw	r19,12(sp)
  8073d0:	dc800217 	ldw	r18,8(sp)
  8073d4:	dc400117 	ldw	r17,4(sp)
  8073d8:	dc000017 	ldw	r16,0(sp)
  8073dc:	dec00804 	addi	sp,sp,32
  8073e0:	f800283a 	ret
  8073e4:	002d883a 	mov	r22,zero
  8073e8:	003ff206 	br	8073b4 <_fwalk+0x80>

008073ec <__smakebuf_r>:
  8073ec:	2880030b 	ldhu	r2,12(r5)
  8073f0:	deffed04 	addi	sp,sp,-76
  8073f4:	dc401015 	stw	r17,64(sp)
  8073f8:	1080008c 	andi	r2,r2,2
  8073fc:	dc000f15 	stw	r16,60(sp)
  807400:	dfc01215 	stw	ra,72(sp)
  807404:	dc801115 	stw	r18,68(sp)
  807408:	2821883a 	mov	r16,r5
  80740c:	2023883a 	mov	r17,r4
  807410:	10000b26 	beq	r2,zero,807440 <__smakebuf_r+0x54>
  807414:	28c010c4 	addi	r3,r5,67
  807418:	00800044 	movi	r2,1
  80741c:	28800515 	stw	r2,20(r5)
  807420:	28c00415 	stw	r3,16(r5)
  807424:	28c00015 	stw	r3,0(r5)
  807428:	dfc01217 	ldw	ra,72(sp)
  80742c:	dc801117 	ldw	r18,68(sp)
  807430:	dc401017 	ldw	r17,64(sp)
  807434:	dc000f17 	ldw	r16,60(sp)
  807438:	dec01304 	addi	sp,sp,76
  80743c:	f800283a 	ret
  807440:	2940038f 	ldh	r5,14(r5)
  807444:	28002116 	blt	r5,zero,8074cc <__smakebuf_r+0xe0>
  807448:	d80d883a 	mov	r6,sp
  80744c:	08079700 	call	807970 <_fstat_r>
  807450:	10001e16 	blt	r2,zero,8074cc <__smakebuf_r+0xe0>
  807454:	d8800117 	ldw	r2,4(sp)
  807458:	00e00014 	movui	r3,32768
  80745c:	113c000c 	andi	r4,r2,61440
  807460:	20c03126 	beq	r4,r3,807528 <__smakebuf_r+0x13c>
  807464:	8080030b 	ldhu	r2,12(r16)
  807468:	00c80004 	movi	r3,8192
  80746c:	10820014 	ori	r2,r2,2048
  807470:	8080030d 	sth	r2,12(r16)
  807474:	20c01e26 	beq	r4,r3,8074f0 <__smakebuf_r+0x104>
  807478:	04810004 	movi	r18,1024
  80747c:	8809883a 	mov	r4,r17
  807480:	900b883a 	mov	r5,r18
  807484:	08055600 	call	805560 <_malloc_r>
  807488:	1009883a 	mov	r4,r2
  80748c:	10003126 	beq	r2,zero,807554 <__smakebuf_r+0x168>
  807490:	80c0030b 	ldhu	r3,12(r16)
  807494:	00802034 	movhi	r2,128
  807498:	109b2e04 	addi	r2,r2,27832
  80749c:	88800f15 	stw	r2,60(r17)
  8074a0:	18c02014 	ori	r3,r3,128
  8074a4:	84800515 	stw	r18,20(r16)
  8074a8:	80c0030d 	sth	r3,12(r16)
  8074ac:	81000415 	stw	r4,16(r16)
  8074b0:	81000015 	stw	r4,0(r16)
  8074b4:	dfc01217 	ldw	ra,72(sp)
  8074b8:	dc801117 	ldw	r18,68(sp)
  8074bc:	dc401017 	ldw	r17,64(sp)
  8074c0:	dc000f17 	ldw	r16,60(sp)
  8074c4:	dec01304 	addi	sp,sp,76
  8074c8:	f800283a 	ret
  8074cc:	80c0030b 	ldhu	r3,12(r16)
  8074d0:	1880200c 	andi	r2,r3,128
  8074d4:	10000426 	beq	r2,zero,8074e8 <__smakebuf_r+0xfc>
  8074d8:	04801004 	movi	r18,64
  8074dc:	18820014 	ori	r2,r3,2048
  8074e0:	8080030d 	sth	r2,12(r16)
  8074e4:	003fe506 	br	80747c <__smakebuf_r+0x90>
  8074e8:	04810004 	movi	r18,1024
  8074ec:	003ffb06 	br	8074dc <__smakebuf_r+0xf0>
  8074f0:	8140038f 	ldh	r5,14(r16)
  8074f4:	8809883a 	mov	r4,r17
  8074f8:	08079e40 	call	8079e4 <_isatty_r>
  8074fc:	103fde26 	beq	r2,zero,807478 <__smakebuf_r+0x8c>
  807500:	8080030b 	ldhu	r2,12(r16)
  807504:	80c010c4 	addi	r3,r16,67
  807508:	04810004 	movi	r18,1024
  80750c:	10800054 	ori	r2,r2,1
  807510:	8080030d 	sth	r2,12(r16)
  807514:	00800044 	movi	r2,1
  807518:	80c00415 	stw	r3,16(r16)
  80751c:	80800515 	stw	r2,20(r16)
  807520:	80c00015 	stw	r3,0(r16)
  807524:	003fd506 	br	80747c <__smakebuf_r+0x90>
  807528:	80c00a17 	ldw	r3,40(r16)
  80752c:	00802034 	movhi	r2,128
  807530:	109d8804 	addi	r2,r2,30240
  807534:	18bfcb1e 	bne	r3,r2,807464 <__smakebuf_r+0x78>
  807538:	8080030b 	ldhu	r2,12(r16)
  80753c:	00c10004 	movi	r3,1024
  807540:	1825883a 	mov	r18,r3
  807544:	10c4b03a 	or	r2,r2,r3
  807548:	8080030d 	sth	r2,12(r16)
  80754c:	80c01315 	stw	r3,76(r16)
  807550:	003fca06 	br	80747c <__smakebuf_r+0x90>
  807554:	8100030b 	ldhu	r4,12(r16)
  807558:	2080800c 	andi	r2,r4,512
  80755c:	103fb21e 	bne	r2,zero,807428 <__smakebuf_r+0x3c>
  807560:	80c010c4 	addi	r3,r16,67
  807564:	21000094 	ori	r4,r4,2
  807568:	00800044 	movi	r2,1
  80756c:	80800515 	stw	r2,20(r16)
  807570:	8100030d 	sth	r4,12(r16)
  807574:	80c00415 	stw	r3,16(r16)
  807578:	80c00015 	stw	r3,0(r16)
  80757c:	003faa06 	br	807428 <__smakebuf_r+0x3c>

00807580 <memset>:
  807580:	008000c4 	movi	r2,3
  807584:	29403fcc 	andi	r5,r5,255
  807588:	2007883a 	mov	r3,r4
  80758c:	1180022e 	bgeu	r2,r6,807598 <memset+0x18>
  807590:	2084703a 	and	r2,r4,r2
  807594:	10000826 	beq	r2,zero,8075b8 <memset+0x38>
  807598:	30000526 	beq	r6,zero,8075b0 <memset+0x30>
  80759c:	2805883a 	mov	r2,r5
  8075a0:	30cd883a 	add	r6,r6,r3
  8075a4:	18800005 	stb	r2,0(r3)
  8075a8:	18c00044 	addi	r3,r3,1
  8075ac:	19bffd1e 	bne	r3,r6,8075a4 <memset+0x24>
  8075b0:	2005883a 	mov	r2,r4
  8075b4:	f800283a 	ret
  8075b8:	2804923a 	slli	r2,r5,8
  8075bc:	020003c4 	movi	r8,15
  8075c0:	200f883a 	mov	r7,r4
  8075c4:	2884b03a 	or	r2,r5,r2
  8075c8:	1006943a 	slli	r3,r2,16
  8075cc:	10c6b03a 	or	r3,r2,r3
  8075d0:	41800a2e 	bgeu	r8,r6,8075fc <memset+0x7c>
  8075d4:	4005883a 	mov	r2,r8
  8075d8:	31bffc04 	addi	r6,r6,-16
  8075dc:	38c00015 	stw	r3,0(r7)
  8075e0:	38c00115 	stw	r3,4(r7)
  8075e4:	38c00215 	stw	r3,8(r7)
  8075e8:	38c00315 	stw	r3,12(r7)
  8075ec:	39c00404 	addi	r7,r7,16
  8075f0:	11bff936 	bltu	r2,r6,8075d8 <memset+0x58>
  8075f4:	008000c4 	movi	r2,3
  8075f8:	1180052e 	bgeu	r2,r6,807610 <memset+0x90>
  8075fc:	31bfff04 	addi	r6,r6,-4
  807600:	008000c4 	movi	r2,3
  807604:	38c00015 	stw	r3,0(r7)
  807608:	39c00104 	addi	r7,r7,4
  80760c:	11bffb36 	bltu	r2,r6,8075fc <memset+0x7c>
  807610:	3807883a 	mov	r3,r7
  807614:	003fe006 	br	807598 <memset+0x18>

00807618 <__sclose>:
  807618:	2940038f 	ldh	r5,14(r5)
  80761c:	08077dc1 	jmpi	8077dc <_close_r>

00807620 <__sseek>:
  807620:	defffe04 	addi	sp,sp,-8
  807624:	dc000015 	stw	r16,0(sp)
  807628:	2821883a 	mov	r16,r5
  80762c:	2940038f 	ldh	r5,14(r5)
  807630:	dfc00115 	stw	ra,4(sp)
  807634:	0807a540 	call	807a54 <_lseek_r>
  807638:	1007883a 	mov	r3,r2
  80763c:	00bfffc4 	movi	r2,-1
  807640:	18800926 	beq	r3,r2,807668 <__sseek+0x48>
  807644:	8080030b 	ldhu	r2,12(r16)
  807648:	80c01415 	stw	r3,80(r16)
  80764c:	10840014 	ori	r2,r2,4096
  807650:	8080030d 	sth	r2,12(r16)
  807654:	1805883a 	mov	r2,r3
  807658:	dfc00117 	ldw	ra,4(sp)
  80765c:	dc000017 	ldw	r16,0(sp)
  807660:	dec00204 	addi	sp,sp,8
  807664:	f800283a 	ret
  807668:	8080030b 	ldhu	r2,12(r16)
  80766c:	10bbffcc 	andi	r2,r2,61439
  807670:	8080030d 	sth	r2,12(r16)
  807674:	1805883a 	mov	r2,r3
  807678:	dfc00117 	ldw	ra,4(sp)
  80767c:	dc000017 	ldw	r16,0(sp)
  807680:	dec00204 	addi	sp,sp,8
  807684:	f800283a 	ret

00807688 <__swrite>:
  807688:	2880030b 	ldhu	r2,12(r5)
  80768c:	defffb04 	addi	sp,sp,-20
  807690:	dcc00315 	stw	r19,12(sp)
  807694:	1080400c 	andi	r2,r2,256
  807698:	dc800215 	stw	r18,8(sp)
  80769c:	dc400115 	stw	r17,4(sp)
  8076a0:	dc000015 	stw	r16,0(sp)
  8076a4:	3027883a 	mov	r19,r6
  8076a8:	3825883a 	mov	r18,r7
  8076ac:	dfc00415 	stw	ra,16(sp)
  8076b0:	2821883a 	mov	r16,r5
  8076b4:	000d883a 	mov	r6,zero
  8076b8:	01c00084 	movi	r7,2
  8076bc:	2023883a 	mov	r17,r4
  8076c0:	10000226 	beq	r2,zero,8076cc <__swrite+0x44>
  8076c4:	2940038f 	ldh	r5,14(r5)
  8076c8:	0807a540 	call	807a54 <_lseek_r>
  8076cc:	8080030b 	ldhu	r2,12(r16)
  8076d0:	8140038f 	ldh	r5,14(r16)
  8076d4:	8809883a 	mov	r4,r17
  8076d8:	10bbffcc 	andi	r2,r2,61439
  8076dc:	980d883a 	mov	r6,r19
  8076e0:	900f883a 	mov	r7,r18
  8076e4:	8080030d 	sth	r2,12(r16)
  8076e8:	dfc00417 	ldw	ra,16(sp)
  8076ec:	dcc00317 	ldw	r19,12(sp)
  8076f0:	dc800217 	ldw	r18,8(sp)
  8076f4:	dc400117 	ldw	r17,4(sp)
  8076f8:	dc000017 	ldw	r16,0(sp)
  8076fc:	dec00504 	addi	sp,sp,20
  807700:	08077641 	jmpi	807764 <_write_r>

00807704 <__sread>:
  807704:	defffe04 	addi	sp,sp,-8
  807708:	dc000015 	stw	r16,0(sp)
  80770c:	2821883a 	mov	r16,r5
  807710:	2940038f 	ldh	r5,14(r5)
  807714:	dfc00115 	stw	ra,4(sp)
  807718:	0807acc0 	call	807acc <_read_r>
  80771c:	1007883a 	mov	r3,r2
  807720:	10000816 	blt	r2,zero,807744 <__sread+0x40>
  807724:	80801417 	ldw	r2,80(r16)
  807728:	10c5883a 	add	r2,r2,r3
  80772c:	80801415 	stw	r2,80(r16)
  807730:	1805883a 	mov	r2,r3
  807734:	dfc00117 	ldw	ra,4(sp)
  807738:	dc000017 	ldw	r16,0(sp)
  80773c:	dec00204 	addi	sp,sp,8
  807740:	f800283a 	ret
  807744:	8080030b 	ldhu	r2,12(r16)
  807748:	10bbffcc 	andi	r2,r2,61439
  80774c:	8080030d 	sth	r2,12(r16)
  807750:	1805883a 	mov	r2,r3
  807754:	dfc00117 	ldw	ra,4(sp)
  807758:	dc000017 	ldw	r16,0(sp)
  80775c:	dec00204 	addi	sp,sp,8
  807760:	f800283a 	ret

00807764 <_write_r>:
  807764:	defffd04 	addi	sp,sp,-12
  807768:	dc000015 	stw	r16,0(sp)
  80776c:	04002074 	movhi	r16,129
  807770:	841c1d04 	addi	r16,r16,28788
  807774:	dc400115 	stw	r17,4(sp)
  807778:	80000015 	stw	zero,0(r16)
  80777c:	2023883a 	mov	r17,r4
  807780:	2809883a 	mov	r4,r5
  807784:	300b883a 	mov	r5,r6
  807788:	380d883a 	mov	r6,r7
  80778c:	dfc00215 	stw	ra,8(sp)
  807790:	08089380 	call	808938 <write>
  807794:	1007883a 	mov	r3,r2
  807798:	00bfffc4 	movi	r2,-1
  80779c:	18800626 	beq	r3,r2,8077b8 <_write_r+0x54>
  8077a0:	1805883a 	mov	r2,r3
  8077a4:	dfc00217 	ldw	ra,8(sp)
  8077a8:	dc400117 	ldw	r17,4(sp)
  8077ac:	dc000017 	ldw	r16,0(sp)
  8077b0:	dec00304 	addi	sp,sp,12
  8077b4:	f800283a 	ret
  8077b8:	80800017 	ldw	r2,0(r16)
  8077bc:	103ff826 	beq	r2,zero,8077a0 <_write_r+0x3c>
  8077c0:	88800015 	stw	r2,0(r17)
  8077c4:	1805883a 	mov	r2,r3
  8077c8:	dfc00217 	ldw	ra,8(sp)
  8077cc:	dc400117 	ldw	r17,4(sp)
  8077d0:	dc000017 	ldw	r16,0(sp)
  8077d4:	dec00304 	addi	sp,sp,12
  8077d8:	f800283a 	ret

008077dc <_close_r>:
  8077dc:	defffd04 	addi	sp,sp,-12
  8077e0:	dc000015 	stw	r16,0(sp)
  8077e4:	04002074 	movhi	r16,129
  8077e8:	841c1d04 	addi	r16,r16,28788
  8077ec:	dc400115 	stw	r17,4(sp)
  8077f0:	80000015 	stw	zero,0(r16)
  8077f4:	2023883a 	mov	r17,r4
  8077f8:	2809883a 	mov	r4,r5
  8077fc:	dfc00215 	stw	ra,8(sp)
  807800:	0807b440 	call	807b44 <close>
  807804:	1007883a 	mov	r3,r2
  807808:	00bfffc4 	movi	r2,-1
  80780c:	18800626 	beq	r3,r2,807828 <_close_r+0x4c>
  807810:	1805883a 	mov	r2,r3
  807814:	dfc00217 	ldw	ra,8(sp)
  807818:	dc400117 	ldw	r17,4(sp)
  80781c:	dc000017 	ldw	r16,0(sp)
  807820:	dec00304 	addi	sp,sp,12
  807824:	f800283a 	ret
  807828:	80800017 	ldw	r2,0(r16)
  80782c:	103ff826 	beq	r2,zero,807810 <_close_r+0x34>
  807830:	88800015 	stw	r2,0(r17)
  807834:	1805883a 	mov	r2,r3
  807838:	dfc00217 	ldw	ra,8(sp)
  80783c:	dc400117 	ldw	r17,4(sp)
  807840:	dc000017 	ldw	r16,0(sp)
  807844:	dec00304 	addi	sp,sp,12
  807848:	f800283a 	ret

0080784c <_fclose_r>:
  80784c:	defffc04 	addi	sp,sp,-16
  807850:	dc400115 	stw	r17,4(sp)
  807854:	dc000015 	stw	r16,0(sp)
  807858:	dfc00315 	stw	ra,12(sp)
  80785c:	dc800215 	stw	r18,8(sp)
  807860:	2821883a 	mov	r16,r5
  807864:	2023883a 	mov	r17,r4
  807868:	28002926 	beq	r5,zero,807910 <_fclose_r+0xc4>
  80786c:	0806bc40 	call	806bc4 <__sfp_lock_acquire>
  807870:	88000226 	beq	r17,zero,80787c <_fclose_r+0x30>
  807874:	88800e17 	ldw	r2,56(r17)
  807878:	10002d26 	beq	r2,zero,807930 <_fclose_r+0xe4>
  80787c:	8080030f 	ldh	r2,12(r16)
  807880:	10002226 	beq	r2,zero,80790c <_fclose_r+0xc0>
  807884:	8809883a 	mov	r4,r17
  807888:	800b883a 	mov	r5,r16
  80788c:	080693c0 	call	80693c <_fflush_r>
  807890:	1025883a 	mov	r18,r2
  807894:	80800b17 	ldw	r2,44(r16)
  807898:	10000426 	beq	r2,zero,8078ac <_fclose_r+0x60>
  80789c:	81400717 	ldw	r5,28(r16)
  8078a0:	8809883a 	mov	r4,r17
  8078a4:	103ee83a 	callr	r2
  8078a8:	10002a16 	blt	r2,zero,807954 <_fclose_r+0x108>
  8078ac:	8080030b 	ldhu	r2,12(r16)
  8078b0:	1080200c 	andi	r2,r2,128
  8078b4:	1000231e 	bne	r2,zero,807944 <_fclose_r+0xf8>
  8078b8:	81400c17 	ldw	r5,48(r16)
  8078bc:	28000526 	beq	r5,zero,8078d4 <_fclose_r+0x88>
  8078c0:	80801004 	addi	r2,r16,64
  8078c4:	28800226 	beq	r5,r2,8078d0 <_fclose_r+0x84>
  8078c8:	8809883a 	mov	r4,r17
  8078cc:	0806f580 	call	806f58 <_free_r>
  8078d0:	80000c15 	stw	zero,48(r16)
  8078d4:	81401117 	ldw	r5,68(r16)
  8078d8:	28000326 	beq	r5,zero,8078e8 <_fclose_r+0x9c>
  8078dc:	8809883a 	mov	r4,r17
  8078e0:	0806f580 	call	806f58 <_free_r>
  8078e4:	80001115 	stw	zero,68(r16)
  8078e8:	8000030d 	sth	zero,12(r16)
  8078ec:	0806bc80 	call	806bc8 <__sfp_lock_release>
  8078f0:	9005883a 	mov	r2,r18
  8078f4:	dfc00317 	ldw	ra,12(sp)
  8078f8:	dc800217 	ldw	r18,8(sp)
  8078fc:	dc400117 	ldw	r17,4(sp)
  807900:	dc000017 	ldw	r16,0(sp)
  807904:	dec00404 	addi	sp,sp,16
  807908:	f800283a 	ret
  80790c:	0806bc80 	call	806bc8 <__sfp_lock_release>
  807910:	0025883a 	mov	r18,zero
  807914:	9005883a 	mov	r2,r18
  807918:	dfc00317 	ldw	ra,12(sp)
  80791c:	dc800217 	ldw	r18,8(sp)
  807920:	dc400117 	ldw	r17,4(sp)
  807924:	dc000017 	ldw	r16,0(sp)
  807928:	dec00404 	addi	sp,sp,16
  80792c:	f800283a 	ret
  807930:	8809883a 	mov	r4,r17
  807934:	0806bd40 	call	806bd4 <__sinit>
  807938:	8080030f 	ldh	r2,12(r16)
  80793c:	103fd11e 	bne	r2,zero,807884 <_fclose_r+0x38>
  807940:	003ff206 	br	80790c <_fclose_r+0xc0>
  807944:	81400417 	ldw	r5,16(r16)
  807948:	8809883a 	mov	r4,r17
  80794c:	0806f580 	call	806f58 <_free_r>
  807950:	003fd906 	br	8078b8 <_fclose_r+0x6c>
  807954:	04bfffc4 	movi	r18,-1
  807958:	003fd406 	br	8078ac <_fclose_r+0x60>

0080795c <fclose>:
  80795c:	00802074 	movhi	r2,129
  807960:	109be704 	addi	r2,r2,28572
  807964:	200b883a 	mov	r5,r4
  807968:	11000017 	ldw	r4,0(r2)
  80796c:	080784c1 	jmpi	80784c <_fclose_r>

00807970 <_fstat_r>:
  807970:	defffd04 	addi	sp,sp,-12
  807974:	dc000015 	stw	r16,0(sp)
  807978:	04002074 	movhi	r16,129
  80797c:	841c1d04 	addi	r16,r16,28788
  807980:	dc400115 	stw	r17,4(sp)
  807984:	80000015 	stw	zero,0(r16)
  807988:	2023883a 	mov	r17,r4
  80798c:	2809883a 	mov	r4,r5
  807990:	300b883a 	mov	r5,r6
  807994:	dfc00215 	stw	ra,8(sp)
  807998:	0807ccc0 	call	807ccc <fstat>
  80799c:	1007883a 	mov	r3,r2
  8079a0:	00bfffc4 	movi	r2,-1
  8079a4:	18800626 	beq	r3,r2,8079c0 <_fstat_r+0x50>
  8079a8:	1805883a 	mov	r2,r3
  8079ac:	dfc00217 	ldw	ra,8(sp)
  8079b0:	dc400117 	ldw	r17,4(sp)
  8079b4:	dc000017 	ldw	r16,0(sp)
  8079b8:	dec00304 	addi	sp,sp,12
  8079bc:	f800283a 	ret
  8079c0:	80800017 	ldw	r2,0(r16)
  8079c4:	103ff826 	beq	r2,zero,8079a8 <_fstat_r+0x38>
  8079c8:	88800015 	stw	r2,0(r17)
  8079cc:	1805883a 	mov	r2,r3
  8079d0:	dfc00217 	ldw	ra,8(sp)
  8079d4:	dc400117 	ldw	r17,4(sp)
  8079d8:	dc000017 	ldw	r16,0(sp)
  8079dc:	dec00304 	addi	sp,sp,12
  8079e0:	f800283a 	ret

008079e4 <_isatty_r>:
  8079e4:	defffd04 	addi	sp,sp,-12
  8079e8:	dc000015 	stw	r16,0(sp)
  8079ec:	04002074 	movhi	r16,129
  8079f0:	841c1d04 	addi	r16,r16,28788
  8079f4:	dc400115 	stw	r17,4(sp)
  8079f8:	80000015 	stw	zero,0(r16)
  8079fc:	2023883a 	mov	r17,r4
  807a00:	2809883a 	mov	r4,r5
  807a04:	dfc00215 	stw	ra,8(sp)
  807a08:	08080cc0 	call	8080cc <isatty>
  807a0c:	1007883a 	mov	r3,r2
  807a10:	00bfffc4 	movi	r2,-1
  807a14:	18800626 	beq	r3,r2,807a30 <_isatty_r+0x4c>
  807a18:	1805883a 	mov	r2,r3
  807a1c:	dfc00217 	ldw	ra,8(sp)
  807a20:	dc400117 	ldw	r17,4(sp)
  807a24:	dc000017 	ldw	r16,0(sp)
  807a28:	dec00304 	addi	sp,sp,12
  807a2c:	f800283a 	ret
  807a30:	80800017 	ldw	r2,0(r16)
  807a34:	103ff826 	beq	r2,zero,807a18 <_isatty_r+0x34>
  807a38:	88800015 	stw	r2,0(r17)
  807a3c:	1805883a 	mov	r2,r3
  807a40:	dfc00217 	ldw	ra,8(sp)
  807a44:	dc400117 	ldw	r17,4(sp)
  807a48:	dc000017 	ldw	r16,0(sp)
  807a4c:	dec00304 	addi	sp,sp,12
  807a50:	f800283a 	ret

00807a54 <_lseek_r>:
  807a54:	defffd04 	addi	sp,sp,-12
  807a58:	dc000015 	stw	r16,0(sp)
  807a5c:	04002074 	movhi	r16,129
  807a60:	841c1d04 	addi	r16,r16,28788
  807a64:	dc400115 	stw	r17,4(sp)
  807a68:	80000015 	stw	zero,0(r16)
  807a6c:	2023883a 	mov	r17,r4
  807a70:	2809883a 	mov	r4,r5
  807a74:	300b883a 	mov	r5,r6
  807a78:	380d883a 	mov	r6,r7
  807a7c:	dfc00215 	stw	ra,8(sp)
  807a80:	08081ec0 	call	8081ec <lseek>
  807a84:	1007883a 	mov	r3,r2
  807a88:	00bfffc4 	movi	r2,-1
  807a8c:	18800626 	beq	r3,r2,807aa8 <_lseek_r+0x54>
  807a90:	1805883a 	mov	r2,r3
  807a94:	dfc00217 	ldw	ra,8(sp)
  807a98:	dc400117 	ldw	r17,4(sp)
  807a9c:	dc000017 	ldw	r16,0(sp)
  807aa0:	dec00304 	addi	sp,sp,12
  807aa4:	f800283a 	ret
  807aa8:	80800017 	ldw	r2,0(r16)
  807aac:	103ff826 	beq	r2,zero,807a90 <_lseek_r+0x3c>
  807ab0:	88800015 	stw	r2,0(r17)
  807ab4:	1805883a 	mov	r2,r3
  807ab8:	dfc00217 	ldw	ra,8(sp)
  807abc:	dc400117 	ldw	r17,4(sp)
  807ac0:	dc000017 	ldw	r16,0(sp)
  807ac4:	dec00304 	addi	sp,sp,12
  807ac8:	f800283a 	ret

00807acc <_read_r>:
  807acc:	defffd04 	addi	sp,sp,-12
  807ad0:	dc000015 	stw	r16,0(sp)
  807ad4:	04002074 	movhi	r16,129
  807ad8:	841c1d04 	addi	r16,r16,28788
  807adc:	dc400115 	stw	r17,4(sp)
  807ae0:	80000015 	stw	zero,0(r16)
  807ae4:	2023883a 	mov	r17,r4
  807ae8:	2809883a 	mov	r4,r5
  807aec:	300b883a 	mov	r5,r6
  807af0:	380d883a 	mov	r6,r7
  807af4:	dfc00215 	stw	ra,8(sp)
  807af8:	080869c0 	call	80869c <read>
  807afc:	1007883a 	mov	r3,r2
  807b00:	00bfffc4 	movi	r2,-1
  807b04:	18800626 	beq	r3,r2,807b20 <_read_r+0x54>
  807b08:	1805883a 	mov	r2,r3
  807b0c:	dfc00217 	ldw	ra,8(sp)
  807b10:	dc400117 	ldw	r17,4(sp)
  807b14:	dc000017 	ldw	r16,0(sp)
  807b18:	dec00304 	addi	sp,sp,12
  807b1c:	f800283a 	ret
  807b20:	80800017 	ldw	r2,0(r16)
  807b24:	103ff826 	beq	r2,zero,807b08 <_read_r+0x3c>
  807b28:	88800015 	stw	r2,0(r17)
  807b2c:	1805883a 	mov	r2,r3
  807b30:	dfc00217 	ldw	ra,8(sp)
  807b34:	dc400117 	ldw	r17,4(sp)
  807b38:	dc000017 	ldw	r16,0(sp)
  807b3c:	dec00304 	addi	sp,sp,12
  807b40:	f800283a 	ret

00807b44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  807b44:	defff804 	addi	sp,sp,-32
  807b48:	dfc00715 	stw	ra,28(sp)
  807b4c:	df000615 	stw	fp,24(sp)
  807b50:	df000604 	addi	fp,sp,24
  807b54:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  807b58:	e0bffc17 	ldw	r2,-16(fp)
  807b5c:	1004803a 	cmplt	r2,r2,zero
  807b60:	1000081e 	bne	r2,zero,807b84 <close+0x40>
  807b64:	e0bffc17 	ldw	r2,-16(fp)
  807b68:	10800324 	muli	r2,r2,12
  807b6c:	1007883a 	mov	r3,r2
  807b70:	00802074 	movhi	r2,129
  807b74:	10974804 	addi	r2,r2,23840
  807b78:	1887883a 	add	r3,r3,r2
  807b7c:	e0ffff15 	stw	r3,-4(fp)
  807b80:	00000106 	br	807b88 <close+0x44>
  807b84:	e03fff15 	stw	zero,-4(fp)
  807b88:	e0bfff17 	ldw	r2,-4(fp)
  807b8c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  807b90:	e0bffb17 	ldw	r2,-20(fp)
  807b94:	1005003a 	cmpeq	r2,r2,zero
  807b98:	10001d1e 	bne	r2,zero,807c10 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  807b9c:	e0bffb17 	ldw	r2,-20(fp)
  807ba0:	10800017 	ldw	r2,0(r2)
  807ba4:	10800417 	ldw	r2,16(r2)
  807ba8:	1005003a 	cmpeq	r2,r2,zero
  807bac:	1000071e 	bne	r2,zero,807bcc <close+0x88>
  807bb0:	e0bffb17 	ldw	r2,-20(fp)
  807bb4:	10800017 	ldw	r2,0(r2)
  807bb8:	10800417 	ldw	r2,16(r2)
  807bbc:	e13ffb17 	ldw	r4,-20(fp)
  807bc0:	103ee83a 	callr	r2
  807bc4:	e0bffe15 	stw	r2,-8(fp)
  807bc8:	00000106 	br	807bd0 <close+0x8c>
  807bcc:	e03ffe15 	stw	zero,-8(fp)
  807bd0:	e0bffe17 	ldw	r2,-8(fp)
  807bd4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807bd8:	e13ffc17 	ldw	r4,-16(fp)
  807bdc:	080881c0 	call	80881c <alt_release_fd>
    if (rval < 0)
  807be0:	e0bffa17 	ldw	r2,-24(fp)
  807be4:	1004403a 	cmpge	r2,r2,zero
  807be8:	1000071e 	bne	r2,zero,807c08 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  807bec:	0807c400 	call	807c40 <alt_get_errno>
  807bf0:	e0fffa17 	ldw	r3,-24(fp)
  807bf4:	00c7c83a 	sub	r3,zero,r3
  807bf8:	10c00015 	stw	r3,0(r2)
      return -1;
  807bfc:	00bfffc4 	movi	r2,-1
  807c00:	e0bffd15 	stw	r2,-12(fp)
  807c04:	00000806 	br	807c28 <close+0xe4>
    }
    return 0;
  807c08:	e03ffd15 	stw	zero,-12(fp)
  807c0c:	00000606 	br	807c28 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  807c10:	0807c400 	call	807c40 <alt_get_errno>
  807c14:	1007883a 	mov	r3,r2
  807c18:	00801444 	movi	r2,81
  807c1c:	18800015 	stw	r2,0(r3)
    return -1;
  807c20:	00bfffc4 	movi	r2,-1
  807c24:	e0bffd15 	stw	r2,-12(fp)
  807c28:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  807c2c:	e037883a 	mov	sp,fp
  807c30:	dfc00117 	ldw	ra,4(sp)
  807c34:	df000017 	ldw	fp,0(sp)
  807c38:	dec00204 	addi	sp,sp,8
  807c3c:	f800283a 	ret

00807c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807c40:	defffd04 	addi	sp,sp,-12
  807c44:	dfc00215 	stw	ra,8(sp)
  807c48:	df000115 	stw	fp,4(sp)
  807c4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807c50:	00802074 	movhi	r2,129
  807c54:	109bf004 	addi	r2,r2,28608
  807c58:	10800017 	ldw	r2,0(r2)
  807c5c:	1005003a 	cmpeq	r2,r2,zero
  807c60:	1000061e 	bne	r2,zero,807c7c <alt_get_errno+0x3c>
  807c64:	00802074 	movhi	r2,129
  807c68:	109bf004 	addi	r2,r2,28608
  807c6c:	10800017 	ldw	r2,0(r2)
  807c70:	103ee83a 	callr	r2
  807c74:	e0bfff15 	stw	r2,-4(fp)
  807c78:	00000306 	br	807c88 <alt_get_errno+0x48>
  807c7c:	00802074 	movhi	r2,129
  807c80:	109c1d04 	addi	r2,r2,28788
  807c84:	e0bfff15 	stw	r2,-4(fp)
  807c88:	e0bfff17 	ldw	r2,-4(fp)
}
  807c8c:	e037883a 	mov	sp,fp
  807c90:	dfc00117 	ldw	ra,4(sp)
  807c94:	df000017 	ldw	fp,0(sp)
  807c98:	dec00204 	addi	sp,sp,8
  807c9c:	f800283a 	ret

00807ca0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  807ca0:	defffc04 	addi	sp,sp,-16
  807ca4:	df000315 	stw	fp,12(sp)
  807ca8:	df000304 	addi	fp,sp,12
  807cac:	e13ffd15 	stw	r4,-12(fp)
  807cb0:	e17ffe15 	stw	r5,-8(fp)
  807cb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  807cb8:	e0bfff17 	ldw	r2,-4(fp)
}
  807cbc:	e037883a 	mov	sp,fp
  807cc0:	df000017 	ldw	fp,0(sp)
  807cc4:	dec00104 	addi	sp,sp,4
  807cc8:	f800283a 	ret

00807ccc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  807ccc:	defff904 	addi	sp,sp,-28
  807cd0:	dfc00615 	stw	ra,24(sp)
  807cd4:	df000515 	stw	fp,20(sp)
  807cd8:	df000504 	addi	fp,sp,20
  807cdc:	e13ffc15 	stw	r4,-16(fp)
  807ce0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  807ce4:	e0bffc17 	ldw	r2,-16(fp)
  807ce8:	1004803a 	cmplt	r2,r2,zero
  807cec:	1000081e 	bne	r2,zero,807d10 <fstat+0x44>
  807cf0:	e0bffc17 	ldw	r2,-16(fp)
  807cf4:	10800324 	muli	r2,r2,12
  807cf8:	1007883a 	mov	r3,r2
  807cfc:	00802074 	movhi	r2,129
  807d00:	10974804 	addi	r2,r2,23840
  807d04:	1887883a 	add	r3,r3,r2
  807d08:	e0ffff15 	stw	r3,-4(fp)
  807d0c:	00000106 	br	807d14 <fstat+0x48>
  807d10:	e03fff15 	stw	zero,-4(fp)
  807d14:	e0bfff17 	ldw	r2,-4(fp)
  807d18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  807d1c:	e0bffb17 	ldw	r2,-20(fp)
  807d20:	1005003a 	cmpeq	r2,r2,zero
  807d24:	1000121e 	bne	r2,zero,807d70 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  807d28:	e0bffb17 	ldw	r2,-20(fp)
  807d2c:	10800017 	ldw	r2,0(r2)
  807d30:	10800817 	ldw	r2,32(r2)
  807d34:	1005003a 	cmpeq	r2,r2,zero
  807d38:	1000081e 	bne	r2,zero,807d5c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  807d3c:	e0bffb17 	ldw	r2,-20(fp)
  807d40:	10800017 	ldw	r2,0(r2)
  807d44:	10800817 	ldw	r2,32(r2)
  807d48:	e13ffb17 	ldw	r4,-20(fp)
  807d4c:	e17ffd17 	ldw	r5,-12(fp)
  807d50:	103ee83a 	callr	r2
  807d54:	e0bffe15 	stw	r2,-8(fp)
  807d58:	00000b06 	br	807d88 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  807d5c:	e0fffd17 	ldw	r3,-12(fp)
  807d60:	00880004 	movi	r2,8192
  807d64:	18800115 	stw	r2,4(r3)
      return 0;
  807d68:	e03ffe15 	stw	zero,-8(fp)
  807d6c:	00000606 	br	807d88 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  807d70:	0807da00 	call	807da0 <alt_get_errno>
  807d74:	1007883a 	mov	r3,r2
  807d78:	00801444 	movi	r2,81
  807d7c:	18800015 	stw	r2,0(r3)
    return -1;
  807d80:	00bfffc4 	movi	r2,-1
  807d84:	e0bffe15 	stw	r2,-8(fp)
  807d88:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  807d8c:	e037883a 	mov	sp,fp
  807d90:	dfc00117 	ldw	ra,4(sp)
  807d94:	df000017 	ldw	fp,0(sp)
  807d98:	dec00204 	addi	sp,sp,8
  807d9c:	f800283a 	ret

00807da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807da0:	defffd04 	addi	sp,sp,-12
  807da4:	dfc00215 	stw	ra,8(sp)
  807da8:	df000115 	stw	fp,4(sp)
  807dac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807db0:	00802074 	movhi	r2,129
  807db4:	109bf004 	addi	r2,r2,28608
  807db8:	10800017 	ldw	r2,0(r2)
  807dbc:	1005003a 	cmpeq	r2,r2,zero
  807dc0:	1000061e 	bne	r2,zero,807ddc <alt_get_errno+0x3c>
  807dc4:	00802074 	movhi	r2,129
  807dc8:	109bf004 	addi	r2,r2,28608
  807dcc:	10800017 	ldw	r2,0(r2)
  807dd0:	103ee83a 	callr	r2
  807dd4:	e0bfff15 	stw	r2,-4(fp)
  807dd8:	00000306 	br	807de8 <alt_get_errno+0x48>
  807ddc:	00802074 	movhi	r2,129
  807de0:	109c1d04 	addi	r2,r2,28788
  807de4:	e0bfff15 	stw	r2,-4(fp)
  807de8:	e0bfff17 	ldw	r2,-4(fp)
}
  807dec:	e037883a 	mov	sp,fp
  807df0:	dfc00117 	ldw	ra,4(sp)
  807df4:	df000017 	ldw	fp,0(sp)
  807df8:	dec00204 	addi	sp,sp,8
  807dfc:	f800283a 	ret

00807e00 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807e00:	defff904 	addi	sp,sp,-28
  807e04:	dfc00615 	stw	ra,24(sp)
  807e08:	df000515 	stw	fp,20(sp)
  807e0c:	df000504 	addi	fp,sp,20
  807e10:	e13ffc15 	stw	r4,-16(fp)
  807e14:	e17ffd15 	stw	r5,-12(fp)
  807e18:	e1bffe15 	stw	r6,-8(fp)
  807e1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  807e20:	e0800217 	ldw	r2,8(fp)
  807e24:	d8800015 	stw	r2,0(sp)
  807e28:	e13ffc17 	ldw	r4,-16(fp)
  807e2c:	e17ffd17 	ldw	r5,-12(fp)
  807e30:	e1bffe17 	ldw	r6,-8(fp)
  807e34:	e1ffff17 	ldw	r7,-4(fp)
  807e38:	0807fd40 	call	807fd4 <alt_iic_isr_register>
}  
  807e3c:	e037883a 	mov	sp,fp
  807e40:	dfc00117 	ldw	ra,4(sp)
  807e44:	df000017 	ldw	fp,0(sp)
  807e48:	dec00204 	addi	sp,sp,8
  807e4c:	f800283a 	ret

00807e50 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  807e50:	defff904 	addi	sp,sp,-28
  807e54:	df000615 	stw	fp,24(sp)
  807e58:	df000604 	addi	fp,sp,24
  807e5c:	e13ffe15 	stw	r4,-8(fp)
  807e60:	e17fff15 	stw	r5,-4(fp)
  807e64:	e0bfff17 	ldw	r2,-4(fp)
  807e68:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807e6c:	0005303a 	rdctl	r2,status
  807e70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807e74:	e0fffb17 	ldw	r3,-20(fp)
  807e78:	00bfff84 	movi	r2,-2
  807e7c:	1884703a 	and	r2,r3,r2
  807e80:	1001703a 	wrctl	status,r2
  
  return context;
  807e84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807e88:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  807e8c:	e0fffc17 	ldw	r3,-16(fp)
  807e90:	00800044 	movi	r2,1
  807e94:	10c4983a 	sll	r2,r2,r3
  807e98:	1007883a 	mov	r3,r2
  807e9c:	00802074 	movhi	r2,129
  807ea0:	109c1f04 	addi	r2,r2,28796
  807ea4:	10800017 	ldw	r2,0(r2)
  807ea8:	1886b03a 	or	r3,r3,r2
  807eac:	00802074 	movhi	r2,129
  807eb0:	109c1f04 	addi	r2,r2,28796
  807eb4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807eb8:	00802074 	movhi	r2,129
  807ebc:	109c1f04 	addi	r2,r2,28796
  807ec0:	10800017 	ldw	r2,0(r2)
  807ec4:	100170fa 	wrctl	ienable,r2
  807ec8:	e0bffd17 	ldw	r2,-12(fp)
  807ecc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807ed0:	e0bffa17 	ldw	r2,-24(fp)
  807ed4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807ed8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  807edc:	e037883a 	mov	sp,fp
  807ee0:	df000017 	ldw	fp,0(sp)
  807ee4:	dec00104 	addi	sp,sp,4
  807ee8:	f800283a 	ret

00807eec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  807eec:	defff904 	addi	sp,sp,-28
  807ef0:	df000615 	stw	fp,24(sp)
  807ef4:	df000604 	addi	fp,sp,24
  807ef8:	e13ffe15 	stw	r4,-8(fp)
  807efc:	e17fff15 	stw	r5,-4(fp)
  807f00:	e0bfff17 	ldw	r2,-4(fp)
  807f04:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807f08:	0005303a 	rdctl	r2,status
  807f0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807f10:	e0fffb17 	ldw	r3,-20(fp)
  807f14:	00bfff84 	movi	r2,-2
  807f18:	1884703a 	and	r2,r3,r2
  807f1c:	1001703a 	wrctl	status,r2
  
  return context;
  807f20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807f24:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  807f28:	e0fffc17 	ldw	r3,-16(fp)
  807f2c:	00800044 	movi	r2,1
  807f30:	10c4983a 	sll	r2,r2,r3
  807f34:	0084303a 	nor	r2,zero,r2
  807f38:	1007883a 	mov	r3,r2
  807f3c:	00802074 	movhi	r2,129
  807f40:	109c1f04 	addi	r2,r2,28796
  807f44:	10800017 	ldw	r2,0(r2)
  807f48:	1886703a 	and	r3,r3,r2
  807f4c:	00802074 	movhi	r2,129
  807f50:	109c1f04 	addi	r2,r2,28796
  807f54:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807f58:	00802074 	movhi	r2,129
  807f5c:	109c1f04 	addi	r2,r2,28796
  807f60:	10800017 	ldw	r2,0(r2)
  807f64:	100170fa 	wrctl	ienable,r2
  807f68:	e0bffd17 	ldw	r2,-12(fp)
  807f6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807f70:	e0bffa17 	ldw	r2,-24(fp)
  807f74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807f78:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  807f7c:	e037883a 	mov	sp,fp
  807f80:	df000017 	ldw	fp,0(sp)
  807f84:	dec00104 	addi	sp,sp,4
  807f88:	f800283a 	ret

00807f8c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  807f8c:	defffc04 	addi	sp,sp,-16
  807f90:	df000315 	stw	fp,12(sp)
  807f94:	df000304 	addi	fp,sp,12
  807f98:	e13ffe15 	stw	r4,-8(fp)
  807f9c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  807fa0:	000530fa 	rdctl	r2,ienable
  807fa4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  807fa8:	e0ffff17 	ldw	r3,-4(fp)
  807fac:	00800044 	movi	r2,1
  807fb0:	10c4983a 	sll	r2,r2,r3
  807fb4:	1007883a 	mov	r3,r2
  807fb8:	e0bffd17 	ldw	r2,-12(fp)
  807fbc:	1884703a 	and	r2,r3,r2
  807fc0:	1004c03a 	cmpne	r2,r2,zero
}
  807fc4:	e037883a 	mov	sp,fp
  807fc8:	df000017 	ldw	fp,0(sp)
  807fcc:	dec00104 	addi	sp,sp,4
  807fd0:	f800283a 	ret

00807fd4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807fd4:	defff404 	addi	sp,sp,-48
  807fd8:	dfc00b15 	stw	ra,44(sp)
  807fdc:	df000a15 	stw	fp,40(sp)
  807fe0:	df000a04 	addi	fp,sp,40
  807fe4:	e13ffb15 	stw	r4,-20(fp)
  807fe8:	e17ffc15 	stw	r5,-16(fp)
  807fec:	e1bffd15 	stw	r6,-12(fp)
  807ff0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  807ff4:	00bffa84 	movi	r2,-22
  807ff8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  807ffc:	e0bffc17 	ldw	r2,-16(fp)
  808000:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  808004:	e0bff917 	ldw	r2,-28(fp)
  808008:	10800808 	cmpgei	r2,r2,32
  80800c:	1000291e 	bne	r2,zero,8080b4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808010:	0005303a 	rdctl	r2,status
  808014:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808018:	e0fff717 	ldw	r3,-36(fp)
  80801c:	00bfff84 	movi	r2,-2
  808020:	1884703a 	and	r2,r3,r2
  808024:	1001703a 	wrctl	status,r2
  
  return context;
  808028:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80802c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  808030:	e0bff917 	ldw	r2,-28(fp)
  808034:	00c02234 	movhi	r3,136
  808038:	18c9f704 	addi	r3,r3,10204
  80803c:	100490fa 	slli	r2,r2,3
  808040:	10c7883a 	add	r3,r2,r3
  808044:	e0bffd17 	ldw	r2,-12(fp)
  808048:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80804c:	e0bff917 	ldw	r2,-28(fp)
  808050:	00c02234 	movhi	r3,136
  808054:	18c9f704 	addi	r3,r3,10204
  808058:	100490fa 	slli	r2,r2,3
  80805c:	10c5883a 	add	r2,r2,r3
  808060:	10c00104 	addi	r3,r2,4
  808064:	e0bffe17 	ldw	r2,-8(fp)
  808068:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80806c:	e0bffd17 	ldw	r2,-12(fp)
  808070:	1005003a 	cmpeq	r2,r2,zero
  808074:	1000051e 	bne	r2,zero,80808c <alt_iic_isr_register+0xb8>
  808078:	e17ff917 	ldw	r5,-28(fp)
  80807c:	e13ffb17 	ldw	r4,-20(fp)
  808080:	0807e500 	call	807e50 <alt_ic_irq_enable>
  808084:	e0bfff15 	stw	r2,-4(fp)
  808088:	00000406 	br	80809c <alt_iic_isr_register+0xc8>
  80808c:	e17ff917 	ldw	r5,-28(fp)
  808090:	e13ffb17 	ldw	r4,-20(fp)
  808094:	0807eec0 	call	807eec <alt_ic_irq_disable>
  808098:	e0bfff15 	stw	r2,-4(fp)
  80809c:	e0bfff17 	ldw	r2,-4(fp)
  8080a0:	e0bffa15 	stw	r2,-24(fp)
  8080a4:	e0bff817 	ldw	r2,-32(fp)
  8080a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8080ac:	e0bff617 	ldw	r2,-40(fp)
  8080b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8080b4:	e0bffa17 	ldw	r2,-24(fp)
}
  8080b8:	e037883a 	mov	sp,fp
  8080bc:	dfc00117 	ldw	ra,4(sp)
  8080c0:	df000017 	ldw	fp,0(sp)
  8080c4:	dec00204 	addi	sp,sp,8
  8080c8:	f800283a 	ret

008080cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8080cc:	deffeb04 	addi	sp,sp,-84
  8080d0:	dfc01415 	stw	ra,80(sp)
  8080d4:	df001315 	stw	fp,76(sp)
  8080d8:	df001304 	addi	fp,sp,76
  8080dc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8080e0:	e0bffd17 	ldw	r2,-12(fp)
  8080e4:	1004803a 	cmplt	r2,r2,zero
  8080e8:	1000081e 	bne	r2,zero,80810c <isatty+0x40>
  8080ec:	e0bffd17 	ldw	r2,-12(fp)
  8080f0:	10800324 	muli	r2,r2,12
  8080f4:	1007883a 	mov	r3,r2
  8080f8:	00802074 	movhi	r2,129
  8080fc:	10974804 	addi	r2,r2,23840
  808100:	1887883a 	add	r3,r3,r2
  808104:	e0ffff15 	stw	r3,-4(fp)
  808108:	00000106 	br	808110 <isatty+0x44>
  80810c:	e03fff15 	stw	zero,-4(fp)
  808110:	e0bfff17 	ldw	r2,-4(fp)
  808114:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  808118:	e0bfed17 	ldw	r2,-76(fp)
  80811c:	1005003a 	cmpeq	r2,r2,zero
  808120:	10000f1e 	bne	r2,zero,808160 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  808124:	e0bfed17 	ldw	r2,-76(fp)
  808128:	10800017 	ldw	r2,0(r2)
  80812c:	10800817 	ldw	r2,32(r2)
  808130:	1004c03a 	cmpne	r2,r2,zero
  808134:	1000031e 	bne	r2,zero,808144 <isatty+0x78>
    {
      return 1;
  808138:	00800044 	movi	r2,1
  80813c:	e0bffe15 	stw	r2,-8(fp)
  808140:	00000c06 	br	808174 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  808144:	e17fee04 	addi	r5,fp,-72
  808148:	e13ffd17 	ldw	r4,-12(fp)
  80814c:	0807ccc0 	call	807ccc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  808150:	e0bfef17 	ldw	r2,-68(fp)
  808154:	10880020 	cmpeqi	r2,r2,8192
  808158:	e0bffe15 	stw	r2,-8(fp)
  80815c:	00000506 	br	808174 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  808160:	080818c0 	call	80818c <alt_get_errno>
  808164:	1007883a 	mov	r3,r2
  808168:	00801444 	movi	r2,81
  80816c:	18800015 	stw	r2,0(r3)
    return 0;
  808170:	e03ffe15 	stw	zero,-8(fp)
  808174:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  808178:	e037883a 	mov	sp,fp
  80817c:	dfc00117 	ldw	ra,4(sp)
  808180:	df000017 	ldw	fp,0(sp)
  808184:	dec00204 	addi	sp,sp,8
  808188:	f800283a 	ret

0080818c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80818c:	defffd04 	addi	sp,sp,-12
  808190:	dfc00215 	stw	ra,8(sp)
  808194:	df000115 	stw	fp,4(sp)
  808198:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80819c:	00802074 	movhi	r2,129
  8081a0:	109bf004 	addi	r2,r2,28608
  8081a4:	10800017 	ldw	r2,0(r2)
  8081a8:	1005003a 	cmpeq	r2,r2,zero
  8081ac:	1000061e 	bne	r2,zero,8081c8 <alt_get_errno+0x3c>
  8081b0:	00802074 	movhi	r2,129
  8081b4:	109bf004 	addi	r2,r2,28608
  8081b8:	10800017 	ldw	r2,0(r2)
  8081bc:	103ee83a 	callr	r2
  8081c0:	e0bfff15 	stw	r2,-4(fp)
  8081c4:	00000306 	br	8081d4 <alt_get_errno+0x48>
  8081c8:	00802074 	movhi	r2,129
  8081cc:	109c1d04 	addi	r2,r2,28788
  8081d0:	e0bfff15 	stw	r2,-4(fp)
  8081d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8081d8:	e037883a 	mov	sp,fp
  8081dc:	dfc00117 	ldw	ra,4(sp)
  8081e0:	df000017 	ldw	fp,0(sp)
  8081e4:	dec00204 	addi	sp,sp,8
  8081e8:	f800283a 	ret

008081ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8081ec:	defff804 	addi	sp,sp,-32
  8081f0:	dfc00715 	stw	ra,28(sp)
  8081f4:	df000615 	stw	fp,24(sp)
  8081f8:	df000604 	addi	fp,sp,24
  8081fc:	e13ffc15 	stw	r4,-16(fp)
  808200:	e17ffd15 	stw	r5,-12(fp)
  808204:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  808208:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80820c:	e0bffc17 	ldw	r2,-16(fp)
  808210:	1004803a 	cmplt	r2,r2,zero
  808214:	1000081e 	bne	r2,zero,808238 <lseek+0x4c>
  808218:	e0bffc17 	ldw	r2,-16(fp)
  80821c:	10800324 	muli	r2,r2,12
  808220:	1007883a 	mov	r3,r2
  808224:	00802074 	movhi	r2,129
  808228:	10974804 	addi	r2,r2,23840
  80822c:	1887883a 	add	r3,r3,r2
  808230:	e0ffff15 	stw	r3,-4(fp)
  808234:	00000106 	br	80823c <lseek+0x50>
  808238:	e03fff15 	stw	zero,-4(fp)
  80823c:	e0bfff17 	ldw	r2,-4(fp)
  808240:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  808244:	e0bffb17 	ldw	r2,-20(fp)
  808248:	1005003a 	cmpeq	r2,r2,zero
  80824c:	1000111e 	bne	r2,zero,808294 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  808250:	e0bffb17 	ldw	r2,-20(fp)
  808254:	10800017 	ldw	r2,0(r2)
  808258:	10800717 	ldw	r2,28(r2)
  80825c:	1005003a 	cmpeq	r2,r2,zero
  808260:	1000091e 	bne	r2,zero,808288 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  808264:	e0bffb17 	ldw	r2,-20(fp)
  808268:	10800017 	ldw	r2,0(r2)
  80826c:	10800717 	ldw	r2,28(r2)
  808270:	e13ffb17 	ldw	r4,-20(fp)
  808274:	e17ffd17 	ldw	r5,-12(fp)
  808278:	e1bffe17 	ldw	r6,-8(fp)
  80827c:	103ee83a 	callr	r2
  808280:	e0bffa15 	stw	r2,-24(fp)
  808284:	00000506 	br	80829c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  808288:	00bfde84 	movi	r2,-134
  80828c:	e0bffa15 	stw	r2,-24(fp)
  808290:	00000206 	br	80829c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  808294:	00bfebc4 	movi	r2,-81
  808298:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80829c:	e0bffa17 	ldw	r2,-24(fp)
  8082a0:	1004403a 	cmpge	r2,r2,zero
  8082a4:	1000071e 	bne	r2,zero,8082c4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  8082a8:	08082dc0 	call	8082dc <alt_get_errno>
  8082ac:	1007883a 	mov	r3,r2
  8082b0:	e0bffa17 	ldw	r2,-24(fp)
  8082b4:	0085c83a 	sub	r2,zero,r2
  8082b8:	18800015 	stw	r2,0(r3)
    rc = -1;
  8082bc:	00bfffc4 	movi	r2,-1
  8082c0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  8082c4:	e0bffa17 	ldw	r2,-24(fp)
}
  8082c8:	e037883a 	mov	sp,fp
  8082cc:	dfc00117 	ldw	ra,4(sp)
  8082d0:	df000017 	ldw	fp,0(sp)
  8082d4:	dec00204 	addi	sp,sp,8
  8082d8:	f800283a 	ret

008082dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8082dc:	defffd04 	addi	sp,sp,-12
  8082e0:	dfc00215 	stw	ra,8(sp)
  8082e4:	df000115 	stw	fp,4(sp)
  8082e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8082ec:	00802074 	movhi	r2,129
  8082f0:	109bf004 	addi	r2,r2,28608
  8082f4:	10800017 	ldw	r2,0(r2)
  8082f8:	1005003a 	cmpeq	r2,r2,zero
  8082fc:	1000061e 	bne	r2,zero,808318 <alt_get_errno+0x3c>
  808300:	00802074 	movhi	r2,129
  808304:	109bf004 	addi	r2,r2,28608
  808308:	10800017 	ldw	r2,0(r2)
  80830c:	103ee83a 	callr	r2
  808310:	e0bfff15 	stw	r2,-4(fp)
  808314:	00000306 	br	808324 <alt_get_errno+0x48>
  808318:	00802074 	movhi	r2,129
  80831c:	109c1d04 	addi	r2,r2,28788
  808320:	e0bfff15 	stw	r2,-4(fp)
  808324:	e0bfff17 	ldw	r2,-4(fp)
}
  808328:	e037883a 	mov	sp,fp
  80832c:	dfc00117 	ldw	ra,4(sp)
  808330:	df000017 	ldw	fp,0(sp)
  808334:	dec00204 	addi	sp,sp,8
  808338:	f800283a 	ret

0080833c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80833c:	defffb04 	addi	sp,sp,-20
  808340:	dfc00415 	stw	ra,16(sp)
  808344:	df000315 	stw	fp,12(sp)
  808348:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80834c:	0009883a 	mov	r4,zero
  808350:	08110640 	call	811064 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  808354:	08096c00 	call	8096c0 <OSInit>
  808358:	01000044 	movi	r4,1
  80835c:	080e5840 	call	80e584 <OSSemCreate>
  808360:	1007883a 	mov	r3,r2
  808364:	00802074 	movhi	r2,129
  808368:	109c2404 	addi	r2,r2,28816
  80836c:	10c00015 	stw	r3,0(r2)
  808370:	01000044 	movi	r4,1
  808374:	080e5840 	call	80e584 <OSSemCreate>
  808378:	1007883a 	mov	r3,r2
  80837c:	00802074 	movhi	r2,129
  808380:	109c2604 	addi	r2,r2,28824
  808384:	10c00015 	stw	r3,0(r2)
  808388:	00802074 	movhi	r2,129
  80838c:	109c1e04 	addi	r2,r2,28792
  808390:	e0bffd15 	stw	r2,-12(fp)
  808394:	00800044 	movi	r2,1
  808398:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80839c:	e13ffe0b 	ldhu	r4,-8(fp)
  8083a0:	080e5840 	call	80e584 <OSSemCreate>
  8083a4:	1007883a 	mov	r3,r2
  8083a8:	e0bffd17 	ldw	r2,-12(fp)
  8083ac:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8083b0:	08110980 	call	811098 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8083b4:	01002074 	movhi	r4,129
  8083b8:	2114d704 	addi	r4,r4,21340
  8083bc:	01402074 	movhi	r5,129
  8083c0:	2954d704 	addi	r5,r5,21340
  8083c4:	01802074 	movhi	r6,129
  8083c8:	3194d704 	addi	r6,r6,21340
  8083cc:	0813e640 	call	813e64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8083d0:	0813c440 	call	813c44 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8083d4:	01002074 	movhi	r4,129
  8083d8:	210f2a04 	addi	r4,r4,15528
  8083dc:	0814a640 	call	814a64 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8083e0:	d1203a17 	ldw	r4,-32536(gp)
  8083e4:	d1603b17 	ldw	r5,-32532(gp)
  8083e8:	d1a03c17 	ldw	r6,-32528(gp)
  8083ec:	0800bfc0 	call	800bfc <main>
  8083f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8083f4:	01000044 	movi	r4,1
  8083f8:	0807b440 	call	807b44 <close>
  exit (result);
  8083fc:	e13fff17 	ldw	r4,-4(fp)
  808400:	0814a780 	call	814a78 <exit>

00808404 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  808404:	defff204 	addi	sp,sp,-56
  808408:	dfc00a15 	stw	ra,40(sp)
  80840c:	df000915 	stw	fp,36(sp)
  808410:	df000904 	addi	fp,sp,36
  808414:	e1400215 	stw	r5,8(fp)
  808418:	e1800315 	stw	r6,12(fp)
  80841c:	e1c00415 	stw	r7,16(fp)
  808420:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
  808424:	e0800204 	addi	r2,fp,8
  808428:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  80842c:	e0bfff17 	ldw	r2,-4(fp)
  808430:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
  808434:	00007806 	br	808618 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  808438:	e0bffc07 	ldb	r2,-16(fp)
  80843c:	10800960 	cmpeqi	r2,r2,37
  808440:	1000031e 	bne	r2,zero,808450 <alt_printf+0x4c>
        {
            alt_putchar(c);
  808444:	e13ffc07 	ldb	r4,-16(fp)
  808448:	080865c0 	call	80865c <alt_putchar>
  80844c:	00007206 	br	808618 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  808450:	e0bffd17 	ldw	r2,-12(fp)
  808454:	10800003 	ldbu	r2,0(r2)
  808458:	e0bffc05 	stb	r2,-16(fp)
  80845c:	e0bffc07 	ldb	r2,-16(fp)
  808460:	1004c03a 	cmpne	r2,r2,zero
  808464:	1007883a 	mov	r3,r2
  808468:	e0bffd17 	ldw	r2,-12(fp)
  80846c:	10800044 	addi	r2,r2,1
  808470:	e0bffd15 	stw	r2,-12(fp)
  808474:	18803fcc 	andi	r2,r3,255
  808478:	1005003a 	cmpeq	r2,r2,zero
  80847c:	1000721e 	bne	r2,zero,808648 <alt_printf+0x244>
            {
                if (c == '%')
  808480:	e0bffc07 	ldb	r2,-16(fp)
  808484:	10800958 	cmpnei	r2,r2,37
  808488:	1000031e 	bne	r2,zero,808498 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  80848c:	e13ffc07 	ldb	r4,-16(fp)
  808490:	080865c0 	call	80865c <alt_putchar>
  808494:	00006006 	br	808618 <alt_printf+0x214>
                } 
                else if (c == 'c')
  808498:	e0bffc07 	ldb	r2,-16(fp)
  80849c:	108018d8 	cmpnei	r2,r2,99
  8084a0:	1000091e 	bne	r2,zero,8084c8 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
  8084a4:	e0fffe17 	ldw	r3,-8(fp)
  8084a8:	18800104 	addi	r2,r3,4
  8084ac:	e0bffe15 	stw	r2,-8(fp)
  8084b0:	1805883a 	mov	r2,r3
  8084b4:	10800017 	ldw	r2,0(r2)
  8084b8:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
  8084bc:	e13ffb17 	ldw	r4,-20(fp)
  8084c0:	080865c0 	call	80865c <alt_putchar>
  8084c4:	00005406 	br	808618 <alt_printf+0x214>
                }
                else if (c == 'x')
  8084c8:	e0bffc07 	ldb	r2,-16(fp)
  8084cc:	10801e18 	cmpnei	r2,r2,120
  8084d0:	1000371e 	bne	r2,zero,8085b0 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  8084d4:	e0fffe17 	ldw	r3,-8(fp)
  8084d8:	18800104 	addi	r2,r3,4
  8084dc:	e0bffe15 	stw	r2,-8(fp)
  8084e0:	1805883a 	mov	r2,r3
  8084e4:	10800017 	ldw	r2,0(r2)
  8084e8:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  8084ec:	e0bffa17 	ldw	r2,-24(fp)
  8084f0:	1004c03a 	cmpne	r2,r2,zero
  8084f4:	1000031e 	bne	r2,zero,808504 <alt_printf+0x100>
                    {
                        alt_putchar('0');
  8084f8:	01000c04 	movi	r4,48
  8084fc:	080865c0 	call	80865c <alt_putchar>
                        continue;
  808500:	00004506 	br	808618 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  808504:	00800704 	movi	r2,28
  808508:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
  80850c:	00000306 	br	80851c <alt_printf+0x118>
                        digit_shift -= 4;
  808510:	e0bff817 	ldw	r2,-32(fp)
  808514:	10bfff04 	addi	r2,r2,-4
  808518:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  80851c:	00c003c4 	movi	r3,15
  808520:	e0bff817 	ldw	r2,-32(fp)
  808524:	1884983a 	sll	r2,r3,r2
  808528:	1007883a 	mov	r3,r2
  80852c:	e0bffa17 	ldw	r2,-24(fp)
  808530:	1884703a 	and	r2,r3,r2
  808534:	1005003a 	cmpeq	r2,r2,zero
  808538:	103ff51e 	bne	r2,zero,808510 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80853c:	00001806 	br	8085a0 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  808540:	00c003c4 	movi	r3,15
  808544:	e0bff817 	ldw	r2,-32(fp)
  808548:	1884983a 	sll	r2,r3,r2
  80854c:	1007883a 	mov	r3,r2
  808550:	e0bffa17 	ldw	r2,-24(fp)
  808554:	1886703a 	and	r3,r3,r2
  808558:	e0bff817 	ldw	r2,-32(fp)
  80855c:	1884d83a 	srl	r2,r3,r2
  808560:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
  808564:	e0bff917 	ldw	r2,-28(fp)
  808568:	108002a8 	cmpgeui	r2,r2,10
  80856c:	1000041e 	bne	r2,zero,808580 <alt_printf+0x17c>
                            c = '0' + digit;
  808570:	e0bff917 	ldw	r2,-28(fp)
  808574:	10800c04 	addi	r2,r2,48
  808578:	e0bffc05 	stb	r2,-16(fp)
  80857c:	00000306 	br	80858c <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
  808580:	e0bff917 	ldw	r2,-28(fp)
  808584:	108015c4 	addi	r2,r2,87
  808588:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
  80858c:	e13ffc07 	ldb	r4,-16(fp)
  808590:	080865c0 	call	80865c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  808594:	e0bff817 	ldw	r2,-32(fp)
  808598:	10bfff04 	addi	r2,r2,-4
  80859c:	e0bff815 	stw	r2,-32(fp)
  8085a0:	e0bff817 	ldw	r2,-32(fp)
  8085a4:	1004403a 	cmpge	r2,r2,zero
  8085a8:	103fe51e 	bne	r2,zero,808540 <alt_printf+0x13c>
  8085ac:	00001a06 	br	808618 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  8085b0:	e0bffc07 	ldb	r2,-16(fp)
  8085b4:	10801cd8 	cmpnei	r2,r2,115
  8085b8:	1000171e 	bne	r2,zero,808618 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  8085bc:	e0fffe17 	ldw	r3,-8(fp)
  8085c0:	18800104 	addi	r2,r3,4
  8085c4:	e0bffe15 	stw	r2,-8(fp)
  8085c8:	1805883a 	mov	r2,r3
  8085cc:	10800017 	ldw	r2,0(r2)
  8085d0:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
  8085d4:	00000906 	br	8085fc <alt_printf+0x1f8>
                      alt_putchar(*s++);
  8085d8:	e0bff717 	ldw	r2,-36(fp)
  8085dc:	10800003 	ldbu	r2,0(r2)
  8085e0:	11003fcc 	andi	r4,r2,255
  8085e4:	2100201c 	xori	r4,r4,128
  8085e8:	213fe004 	addi	r4,r4,-128
  8085ec:	e0bff717 	ldw	r2,-36(fp)
  8085f0:	10800044 	addi	r2,r2,1
  8085f4:	e0bff715 	stw	r2,-36(fp)
  8085f8:	080865c0 	call	80865c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  8085fc:	e0bff717 	ldw	r2,-36(fp)
  808600:	10800003 	ldbu	r2,0(r2)
  808604:	10803fcc 	andi	r2,r2,255
  808608:	1080201c 	xori	r2,r2,128
  80860c:	10bfe004 	addi	r2,r2,-128
  808610:	1004c03a 	cmpne	r2,r2,zero
  808614:	103ff01e 	bne	r2,zero,8085d8 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  808618:	e0bffd17 	ldw	r2,-12(fp)
  80861c:	10800003 	ldbu	r2,0(r2)
  808620:	e0bffc05 	stb	r2,-16(fp)
  808624:	e0bffc07 	ldb	r2,-16(fp)
  808628:	1004c03a 	cmpne	r2,r2,zero
  80862c:	1007883a 	mov	r3,r2
  808630:	e0bffd17 	ldw	r2,-12(fp)
  808634:	10800044 	addi	r2,r2,1
  808638:	e0bffd15 	stw	r2,-12(fp)
  80863c:	18803fcc 	andi	r2,r3,255
  808640:	1004c03a 	cmpne	r2,r2,zero
  808644:	103f7c1e 	bne	r2,zero,808438 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
  808648:	e037883a 	mov	sp,fp
  80864c:	dfc00117 	ldw	ra,4(sp)
  808650:	df000017 	ldw	fp,0(sp)
  808654:	dec00504 	addi	sp,sp,20
  808658:	f800283a 	ret

0080865c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  80865c:	defffd04 	addi	sp,sp,-12
  808660:	dfc00215 	stw	ra,8(sp)
  808664:	df000115 	stw	fp,4(sp)
  808668:	df000104 	addi	fp,sp,4
  80866c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  808670:	00802074 	movhi	r2,129
  808674:	109be704 	addi	r2,r2,28572
  808678:	10800017 	ldw	r2,0(r2)
  80867c:	11400217 	ldw	r5,8(r2)
  808680:	e13fff17 	ldw	r4,-4(fp)
  808684:	0805e640 	call	805e64 <putc>
#endif
}
  808688:	e037883a 	mov	sp,fp
  80868c:	dfc00117 	ldw	ra,4(sp)
  808690:	df000017 	ldw	fp,0(sp)
  808694:	dec00204 	addi	sp,sp,8
  808698:	f800283a 	ret

0080869c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80869c:	defff704 	addi	sp,sp,-36
  8086a0:	dfc00815 	stw	ra,32(sp)
  8086a4:	df000715 	stw	fp,28(sp)
  8086a8:	df000704 	addi	fp,sp,28
  8086ac:	e13ffb15 	stw	r4,-20(fp)
  8086b0:	e17ffc15 	stw	r5,-16(fp)
  8086b4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8086b8:	e0bffb17 	ldw	r2,-20(fp)
  8086bc:	1004803a 	cmplt	r2,r2,zero
  8086c0:	1000081e 	bne	r2,zero,8086e4 <read+0x48>
  8086c4:	e0bffb17 	ldw	r2,-20(fp)
  8086c8:	10800324 	muli	r2,r2,12
  8086cc:	1007883a 	mov	r3,r2
  8086d0:	00802074 	movhi	r2,129
  8086d4:	10974804 	addi	r2,r2,23840
  8086d8:	1887883a 	add	r3,r3,r2
  8086dc:	e0ffff15 	stw	r3,-4(fp)
  8086e0:	00000106 	br	8086e8 <read+0x4c>
  8086e4:	e03fff15 	stw	zero,-4(fp)
  8086e8:	e0bfff17 	ldw	r2,-4(fp)
  8086ec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8086f0:	e0bffa17 	ldw	r2,-24(fp)
  8086f4:	1005003a 	cmpeq	r2,r2,zero
  8086f8:	1000241e 	bne	r2,zero,80878c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8086fc:	e0bffa17 	ldw	r2,-24(fp)
  808700:	10800217 	ldw	r2,8(r2)
  808704:	108000cc 	andi	r2,r2,3
  808708:	10800060 	cmpeqi	r2,r2,1
  80870c:	10001a1e 	bne	r2,zero,808778 <read+0xdc>
  808710:	e0bffa17 	ldw	r2,-24(fp)
  808714:	10800017 	ldw	r2,0(r2)
  808718:	10800517 	ldw	r2,20(r2)
  80871c:	1005003a 	cmpeq	r2,r2,zero
  808720:	1000151e 	bne	r2,zero,808778 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  808724:	e0bffa17 	ldw	r2,-24(fp)
  808728:	10800017 	ldw	r2,0(r2)
  80872c:	10800517 	ldw	r2,20(r2)
  808730:	e17ffc17 	ldw	r5,-16(fp)
  808734:	e1bffd17 	ldw	r6,-12(fp)
  808738:	e13ffa17 	ldw	r4,-24(fp)
  80873c:	103ee83a 	callr	r2
  808740:	e0bff915 	stw	r2,-28(fp)
  808744:	e0bff917 	ldw	r2,-28(fp)
  808748:	1004403a 	cmpge	r2,r2,zero
  80874c:	1000071e 	bne	r2,zero,80876c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  808750:	08087bc0 	call	8087bc <alt_get_errno>
  808754:	e0fff917 	ldw	r3,-28(fp)
  808758:	00c7c83a 	sub	r3,zero,r3
  80875c:	10c00015 	stw	r3,0(r2)
          return -1;
  808760:	00bfffc4 	movi	r2,-1
  808764:	e0bffe15 	stw	r2,-8(fp)
  808768:	00000e06 	br	8087a4 <read+0x108>
        }
        return rval;
  80876c:	e0bff917 	ldw	r2,-28(fp)
  808770:	e0bffe15 	stw	r2,-8(fp)
  808774:	00000b06 	br	8087a4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  808778:	08087bc0 	call	8087bc <alt_get_errno>
  80877c:	1007883a 	mov	r3,r2
  808780:	00800344 	movi	r2,13
  808784:	18800015 	stw	r2,0(r3)
  808788:	00000406 	br	80879c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80878c:	08087bc0 	call	8087bc <alt_get_errno>
  808790:	1007883a 	mov	r3,r2
  808794:	00801444 	movi	r2,81
  808798:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80879c:	00bfffc4 	movi	r2,-1
  8087a0:	e0bffe15 	stw	r2,-8(fp)
  8087a4:	e0bffe17 	ldw	r2,-8(fp)
}
  8087a8:	e037883a 	mov	sp,fp
  8087ac:	dfc00117 	ldw	ra,4(sp)
  8087b0:	df000017 	ldw	fp,0(sp)
  8087b4:	dec00204 	addi	sp,sp,8
  8087b8:	f800283a 	ret

008087bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8087bc:	defffd04 	addi	sp,sp,-12
  8087c0:	dfc00215 	stw	ra,8(sp)
  8087c4:	df000115 	stw	fp,4(sp)
  8087c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8087cc:	00802074 	movhi	r2,129
  8087d0:	109bf004 	addi	r2,r2,28608
  8087d4:	10800017 	ldw	r2,0(r2)
  8087d8:	1005003a 	cmpeq	r2,r2,zero
  8087dc:	1000061e 	bne	r2,zero,8087f8 <alt_get_errno+0x3c>
  8087e0:	00802074 	movhi	r2,129
  8087e4:	109bf004 	addi	r2,r2,28608
  8087e8:	10800017 	ldw	r2,0(r2)
  8087ec:	103ee83a 	callr	r2
  8087f0:	e0bfff15 	stw	r2,-4(fp)
  8087f4:	00000306 	br	808804 <alt_get_errno+0x48>
  8087f8:	00802074 	movhi	r2,129
  8087fc:	109c1d04 	addi	r2,r2,28788
  808800:	e0bfff15 	stw	r2,-4(fp)
  808804:	e0bfff17 	ldw	r2,-4(fp)
}
  808808:	e037883a 	mov	sp,fp
  80880c:	dfc00117 	ldw	ra,4(sp)
  808810:	df000017 	ldw	fp,0(sp)
  808814:	dec00204 	addi	sp,sp,8
  808818:	f800283a 	ret

0080881c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80881c:	defffe04 	addi	sp,sp,-8
  808820:	df000115 	stw	fp,4(sp)
  808824:	df000104 	addi	fp,sp,4
  808828:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80882c:	e0bfff17 	ldw	r2,-4(fp)
  808830:	108000d0 	cmplti	r2,r2,3
  808834:	10000d1e 	bne	r2,zero,80886c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  808838:	e0bfff17 	ldw	r2,-4(fp)
  80883c:	00c02074 	movhi	r3,129
  808840:	18d74804 	addi	r3,r3,23840
  808844:	10800324 	muli	r2,r2,12
  808848:	10c5883a 	add	r2,r2,r3
  80884c:	10800204 	addi	r2,r2,8
  808850:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  808854:	e0bfff17 	ldw	r2,-4(fp)
  808858:	00c02074 	movhi	r3,129
  80885c:	18d74804 	addi	r3,r3,23840
  808860:	10800324 	muli	r2,r2,12
  808864:	10c5883a 	add	r2,r2,r3
  808868:	10000015 	stw	zero,0(r2)
  }
}
  80886c:	e037883a 	mov	sp,fp
  808870:	df000017 	ldw	fp,0(sp)
  808874:	dec00104 	addi	sp,sp,4
  808878:	f800283a 	ret

0080887c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80887c:	defff804 	addi	sp,sp,-32
  808880:	df000715 	stw	fp,28(sp)
  808884:	df000704 	addi	fp,sp,28
  808888:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80888c:	0005303a 	rdctl	r2,status
  808890:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808894:	e0fffb17 	ldw	r3,-20(fp)
  808898:	00bfff84 	movi	r2,-2
  80889c:	1884703a 	and	r2,r3,r2
  8088a0:	1001703a 	wrctl	status,r2
  
  return context;
  8088a4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8088a8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8088ac:	d0a00c17 	ldw	r2,-32720(gp)
  8088b0:	10c000c4 	addi	r3,r2,3
  8088b4:	00bfff04 	movi	r2,-4
  8088b8:	1884703a 	and	r2,r3,r2
  8088bc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8088c0:	d0e00c17 	ldw	r3,-32720(gp)
  8088c4:	e0bffe17 	ldw	r2,-8(fp)
  8088c8:	1887883a 	add	r3,r3,r2
  8088cc:	00804034 	movhi	r2,256
  8088d0:	10800004 	addi	r2,r2,0
  8088d4:	10c0072e 	bgeu	r2,r3,8088f4 <sbrk+0x78>
  8088d8:	e0bffd17 	ldw	r2,-12(fp)
  8088dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8088e0:	e0bffa17 	ldw	r2,-24(fp)
  8088e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8088e8:	00bfffc4 	movi	r2,-1
  8088ec:	e0bfff15 	stw	r2,-4(fp)
  8088f0:	00000c06 	br	808924 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8088f4:	d0a00c17 	ldw	r2,-32720(gp)
  8088f8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8088fc:	d0e00c17 	ldw	r3,-32720(gp)
  808900:	e0bffe17 	ldw	r2,-8(fp)
  808904:	1885883a 	add	r2,r3,r2
  808908:	d0a00c15 	stw	r2,-32720(gp)
  80890c:	e0bffd17 	ldw	r2,-12(fp)
  808910:	e0bff915 	stw	r2,-28(fp)
  808914:	e0bff917 	ldw	r2,-28(fp)
  808918:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80891c:	e0bffc17 	ldw	r2,-16(fp)
  808920:	e0bfff15 	stw	r2,-4(fp)
  808924:	e0bfff17 	ldw	r2,-4(fp)
} 
  808928:	e037883a 	mov	sp,fp
  80892c:	df000017 	ldw	fp,0(sp)
  808930:	dec00104 	addi	sp,sp,4
  808934:	f800283a 	ret

00808938 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  808938:	defff704 	addi	sp,sp,-36
  80893c:	dfc00815 	stw	ra,32(sp)
  808940:	df000715 	stw	fp,28(sp)
  808944:	df000704 	addi	fp,sp,28
  808948:	e13ffb15 	stw	r4,-20(fp)
  80894c:	e17ffc15 	stw	r5,-16(fp)
  808950:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  808954:	e0bffb17 	ldw	r2,-20(fp)
  808958:	1004803a 	cmplt	r2,r2,zero
  80895c:	1000081e 	bne	r2,zero,808980 <write+0x48>
  808960:	e0bffb17 	ldw	r2,-20(fp)
  808964:	10800324 	muli	r2,r2,12
  808968:	1007883a 	mov	r3,r2
  80896c:	00802074 	movhi	r2,129
  808970:	10974804 	addi	r2,r2,23840
  808974:	1887883a 	add	r3,r3,r2
  808978:	e0ffff15 	stw	r3,-4(fp)
  80897c:	00000106 	br	808984 <write+0x4c>
  808980:	e03fff15 	stw	zero,-4(fp)
  808984:	e0bfff17 	ldw	r2,-4(fp)
  808988:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80898c:	e0bffa17 	ldw	r2,-24(fp)
  808990:	1005003a 	cmpeq	r2,r2,zero
  808994:	1000241e 	bne	r2,zero,808a28 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  808998:	e0bffa17 	ldw	r2,-24(fp)
  80899c:	10800217 	ldw	r2,8(r2)
  8089a0:	108000cc 	andi	r2,r2,3
  8089a4:	1005003a 	cmpeq	r2,r2,zero
  8089a8:	10001a1e 	bne	r2,zero,808a14 <write+0xdc>
  8089ac:	e0bffa17 	ldw	r2,-24(fp)
  8089b0:	10800017 	ldw	r2,0(r2)
  8089b4:	10800617 	ldw	r2,24(r2)
  8089b8:	1005003a 	cmpeq	r2,r2,zero
  8089bc:	1000151e 	bne	r2,zero,808a14 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8089c0:	e0bffa17 	ldw	r2,-24(fp)
  8089c4:	10800017 	ldw	r2,0(r2)
  8089c8:	10800617 	ldw	r2,24(r2)
  8089cc:	e17ffc17 	ldw	r5,-16(fp)
  8089d0:	e1bffd17 	ldw	r6,-12(fp)
  8089d4:	e13ffa17 	ldw	r4,-24(fp)
  8089d8:	103ee83a 	callr	r2
  8089dc:	e0bff915 	stw	r2,-28(fp)
  8089e0:	e0bff917 	ldw	r2,-28(fp)
  8089e4:	1004403a 	cmpge	r2,r2,zero
  8089e8:	1000071e 	bne	r2,zero,808a08 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8089ec:	0808a580 	call	808a58 <alt_get_errno>
  8089f0:	e0fff917 	ldw	r3,-28(fp)
  8089f4:	00c7c83a 	sub	r3,zero,r3
  8089f8:	10c00015 	stw	r3,0(r2)
        return -1;
  8089fc:	00bfffc4 	movi	r2,-1
  808a00:	e0bffe15 	stw	r2,-8(fp)
  808a04:	00000e06 	br	808a40 <write+0x108>
      }
      return rval;
  808a08:	e0bff917 	ldw	r2,-28(fp)
  808a0c:	e0bffe15 	stw	r2,-8(fp)
  808a10:	00000b06 	br	808a40 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  808a14:	0808a580 	call	808a58 <alt_get_errno>
  808a18:	1007883a 	mov	r3,r2
  808a1c:	00800344 	movi	r2,13
  808a20:	18800015 	stw	r2,0(r3)
  808a24:	00000406 	br	808a38 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  808a28:	0808a580 	call	808a58 <alt_get_errno>
  808a2c:	1007883a 	mov	r3,r2
  808a30:	00801444 	movi	r2,81
  808a34:	18800015 	stw	r2,0(r3)
  }
  return -1;
  808a38:	00bfffc4 	movi	r2,-1
  808a3c:	e0bffe15 	stw	r2,-8(fp)
  808a40:	e0bffe17 	ldw	r2,-8(fp)
}
  808a44:	e037883a 	mov	sp,fp
  808a48:	dfc00117 	ldw	ra,4(sp)
  808a4c:	df000017 	ldw	fp,0(sp)
  808a50:	dec00204 	addi	sp,sp,8
  808a54:	f800283a 	ret

00808a58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  808a58:	defffd04 	addi	sp,sp,-12
  808a5c:	dfc00215 	stw	ra,8(sp)
  808a60:	df000115 	stw	fp,4(sp)
  808a64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  808a68:	00802074 	movhi	r2,129
  808a6c:	109bf004 	addi	r2,r2,28608
  808a70:	10800017 	ldw	r2,0(r2)
  808a74:	1005003a 	cmpeq	r2,r2,zero
  808a78:	1000061e 	bne	r2,zero,808a94 <alt_get_errno+0x3c>
  808a7c:	00802074 	movhi	r2,129
  808a80:	109bf004 	addi	r2,r2,28608
  808a84:	10800017 	ldw	r2,0(r2)
  808a88:	103ee83a 	callr	r2
  808a8c:	e0bfff15 	stw	r2,-4(fp)
  808a90:	00000306 	br	808aa0 <alt_get_errno+0x48>
  808a94:	00802074 	movhi	r2,129
  808a98:	109c1d04 	addi	r2,r2,28788
  808a9c:	e0bfff15 	stw	r2,-4(fp)
  808aa0:	e0bfff17 	ldw	r2,-4(fp)
}
  808aa4:	e037883a 	mov	sp,fp
  808aa8:	dfc00117 	ldw	ra,4(sp)
  808aac:	df000017 	ldw	fp,0(sp)
  808ab0:	dec00204 	addi	sp,sp,8
  808ab4:	f800283a 	ret

00808ab8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  808ab8:	deffdf04 	addi	sp,sp,-132
  808abc:	dfc02015 	stw	ra,128(sp)
  808ac0:	df001f15 	stw	fp,124(sp)
  808ac4:	df001f04 	addi	fp,sp,124
  808ac8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  808acc:	e17fe204 	addi	r5,fp,-120
  808ad0:	01003fc4 	movi	r4,255
  808ad4:	081090c0 	call	81090c <OSTaskQuery>
  808ad8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  808adc:	e0bffe83 	ldbu	r2,-6(fp)
  808ae0:	10803fcc 	andi	r2,r2,255
  808ae4:	1004c03a 	cmpne	r2,r2,zero
  808ae8:	1000191e 	bne	r2,zero,808b50 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  808aec:	e0bfee83 	ldbu	r2,-70(fp)
  808af0:	10803fcc 	andi	r2,r2,255
  808af4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  808af8:	d1203e17 	ldw	r4,-32520(gp)
  808afc:	e17ffd04 	addi	r5,fp,-12
  808b00:	080ee580 	call	80ee58 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  808b04:	e0bffe43 	ldbu	r2,-7(fp)
  808b08:	10803fcc 	andi	r2,r2,255
  808b0c:	1005003a 	cmpeq	r2,r2,zero
  808b10:	1000071e 	bne	r2,zero,808b30 <__env_lock+0x78>
  808b14:	d0e00d17 	ldw	r3,-32716(gp)
  808b18:	e0bfe117 	ldw	r2,-124(fp)
  808b1c:	10c0041e 	bne	r2,r3,808b30 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  808b20:	d0a03d17 	ldw	r2,-32524(gp)
  808b24:	10800044 	addi	r2,r2,1
  808b28:	d0a03d15 	stw	r2,-32524(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  808b2c:	00000806 	br	808b50 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  808b30:	d1203e17 	ldw	r4,-32520(gp)
  808b34:	e1bffe84 	addi	r6,fp,-6
  808b38:	000b883a 	mov	r5,zero
  808b3c:	080e9380 	call	80e938 <OSSemPend>
    locks  = 1;
  808b40:	00800044 	movi	r2,1
  808b44:	d0a03d15 	stw	r2,-32524(gp)
    lockid = id;
  808b48:	e0bfe117 	ldw	r2,-124(fp)
  808b4c:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  808b50:	e037883a 	mov	sp,fp
  808b54:	dfc00117 	ldw	ra,4(sp)
  808b58:	df000017 	ldw	fp,0(sp)
  808b5c:	dec00204 	addi	sp,sp,8
  808b60:	f800283a 	ret

00808b64 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  808b64:	defffd04 	addi	sp,sp,-12
  808b68:	dfc00215 	stw	ra,8(sp)
  808b6c:	df000115 	stw	fp,4(sp)
  808b70:	df000104 	addi	fp,sp,4
  808b74:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  808b78:	d0a03d17 	ldw	r2,-32524(gp)
  808b7c:	1005003a 	cmpeq	r2,r2,zero
  808b80:	10000a1e 	bne	r2,zero,808bac <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  808b84:	d0a03d17 	ldw	r2,-32524(gp)
  808b88:	10bfffc4 	addi	r2,r2,-1
  808b8c:	d0a03d15 	stw	r2,-32524(gp)
  808b90:	d0a03d17 	ldw	r2,-32524(gp)
  808b94:	1004c03a 	cmpne	r2,r2,zero
  808b98:	1000041e 	bne	r2,zero,808bac <__env_unlock+0x48>
  {
    lockid = -1;
  808b9c:	00bfffc4 	movi	r2,-1
  808ba0:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
  808ba4:	d1203e17 	ldw	r4,-32520(gp)
  808ba8:	080ed300 	call	80ed30 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  808bac:	e037883a 	mov	sp,fp
  808bb0:	dfc00117 	ldw	ra,4(sp)
  808bb4:	df000017 	ldw	fp,0(sp)
  808bb8:	dec00204 	addi	sp,sp,8
  808bbc:	f800283a 	ret

00808bc0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  808bc0:	deffdb04 	addi	sp,sp,-148
  808bc4:	dfc02415 	stw	ra,144(sp)
  808bc8:	df002315 	stw	fp,140(sp)
  808bcc:	df002304 	addi	fp,sp,140
  808bd0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808bd4:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  808bd8:	00802074 	movhi	r2,129
  808bdc:	109c2744 	addi	r2,r2,28829
  808be0:	10800003 	ldbu	r2,0(r2)
  808be4:	10803fcc 	andi	r2,r2,255
  808be8:	10800058 	cmpnei	r2,r2,1
  808bec:	1000311e 	bne	r2,zero,808cb4 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  808bf0:	e17fe204 	addi	r5,fp,-120
  808bf4:	01003fc4 	movi	r4,255
  808bf8:	081090c0 	call	81090c <OSTaskQuery>
  808bfc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  808c00:	e0bffe83 	ldbu	r2,-6(fp)
  808c04:	10803fcc 	andi	r2,r2,255
  808c08:	1004c03a 	cmpne	r2,r2,zero
  808c0c:	1000291e 	bne	r2,zero,808cb4 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  808c10:	e0bfee83 	ldbu	r2,-70(fp)
  808c14:	10803fcc 	andi	r2,r2,255
  808c18:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  808c1c:	d1204017 	ldw	r4,-32512(gp)
  808c20:	e17ffd04 	addi	r5,fp,-12
  808c24:	080ee580 	call	80ee58 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808c28:	0005303a 	rdctl	r2,status
  808c2c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808c30:	e0ffdf17 	ldw	r3,-132(fp)
  808c34:	00bfff84 	movi	r2,-2
  808c38:	1884703a 	and	r2,r3,r2
  808c3c:	1001703a 	wrctl	status,r2
  
  return context;
  808c40:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  808c44:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  808c48:	e0bffd0b 	ldhu	r2,-12(fp)
  808c4c:	10bfffcc 	andi	r2,r2,65535
  808c50:	1004c03a 	cmpne	r2,r2,zero
  808c54:	10000b1e 	bne	r2,zero,808c84 <__malloc_lock+0xc4>
  808c58:	d0e00e17 	ldw	r3,-32712(gp)
  808c5c:	e0bfe117 	ldw	r2,-124(fp)
  808c60:	10c0081e 	bne	r2,r3,808c84 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  808c64:	d0a03f17 	ldw	r2,-32516(gp)
  808c68:	10800044 	addi	r2,r2,1
  808c6c:	d0a03f15 	stw	r2,-32516(gp)
  808c70:	e0bfe017 	ldw	r2,-128(fp)
  808c74:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808c78:	e0bfde17 	ldw	r2,-136(fp)
  808c7c:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  808c80:	00000c06 	br	808cb4 <__malloc_lock+0xf4>
  808c84:	e0bfe017 	ldw	r2,-128(fp)
  808c88:	e0bfdd15 	stw	r2,-140(fp)
  808c8c:	e0bfdd17 	ldw	r2,-140(fp)
  808c90:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  808c94:	d1204017 	ldw	r4,-32512(gp)
  808c98:	e1bffe84 	addi	r6,fp,-6
  808c9c:	000b883a 	mov	r5,zero
  808ca0:	080e9380 	call	80e938 <OSSemPend>
    locks  = 1;
  808ca4:	00800044 	movi	r2,1
  808ca8:	d0a03f15 	stw	r2,-32516(gp)
    lockid = id;
  808cac:	e0bfe117 	ldw	r2,-124(fp)
  808cb0:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  808cb4:	e037883a 	mov	sp,fp
  808cb8:	dfc00117 	ldw	ra,4(sp)
  808cbc:	df000017 	ldw	fp,0(sp)
  808cc0:	dec00204 	addi	sp,sp,8
  808cc4:	f800283a 	ret

00808cc8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  808cc8:	defff804 	addi	sp,sp,-32
  808ccc:	dfc00715 	stw	ra,28(sp)
  808cd0:	df000615 	stw	fp,24(sp)
  808cd4:	df000604 	addi	fp,sp,24
  808cd8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808cdc:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  808ce0:	00802074 	movhi	r2,129
  808ce4:	109c2744 	addi	r2,r2,28829
  808ce8:	10800003 	ldbu	r2,0(r2)
  808cec:	10803fcc 	andi	r2,r2,255
  808cf0:	10800058 	cmpnei	r2,r2,1
  808cf4:	1000231e 	bne	r2,zero,808d84 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808cf8:	0005303a 	rdctl	r2,status
  808cfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808d00:	e0fffd17 	ldw	r3,-12(fp)
  808d04:	00bfff84 	movi	r2,-2
  808d08:	1884703a 	and	r2,r3,r2
  808d0c:	1001703a 	wrctl	status,r2
  
  return context;
  808d10:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  808d14:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  808d18:	d0a03f17 	ldw	r2,-32516(gp)
  808d1c:	1004c03a 	cmpne	r2,r2,zero
  808d20:	1000051e 	bne	r2,zero,808d38 <__malloc_unlock+0x70>
  808d24:	e0bffe17 	ldw	r2,-8(fp)
  808d28:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808d2c:	e0bffc17 	ldw	r2,-16(fp)
  808d30:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  808d34:	00001306 	br	808d84 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  808d38:	d0a03f17 	ldw	r2,-32516(gp)
  808d3c:	10bfffc4 	addi	r2,r2,-1
  808d40:	d0a03f15 	stw	r2,-32516(gp)
  808d44:	d0a03f17 	ldw	r2,-32516(gp)
  808d48:	1004c03a 	cmpne	r2,r2,zero
  808d4c:	1000091e 	bne	r2,zero,808d74 <__malloc_unlock+0xac>
  {
    lockid = -1;
  808d50:	00bfffc4 	movi	r2,-1
  808d54:	d0a00e15 	stw	r2,-32712(gp)
  808d58:	e0bffe17 	ldw	r2,-8(fp)
  808d5c:	e0bffb15 	stw	r2,-20(fp)
  808d60:	e0bffb17 	ldw	r2,-20(fp)
  808d64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  808d68:	d1204017 	ldw	r4,-32512(gp)
  808d6c:	080ed300 	call	80ed30 <OSSemPost>
  808d70:	00000406 	br	808d84 <__malloc_unlock+0xbc>
  808d74:	e0bffe17 	ldw	r2,-8(fp)
  808d78:	e0bffa15 	stw	r2,-24(fp)
  808d7c:	e0bffa17 	ldw	r2,-24(fp)
  808d80:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  808d84:	e037883a 	mov	sp,fp
  808d88:	dfc00117 	ldw	ra,4(sp)
  808d8c:	df000017 	ldw	fp,0(sp)
  808d90:	dec00204 	addi	sp,sp,8
  808d94:	f800283a 	ret

00808d98 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  808d98:	defff604 	addi	sp,sp,-40
  808d9c:	dfc00915 	stw	ra,36(sp)
  808da0:	df000815 	stw	fp,32(sp)
  808da4:	df000804 	addi	fp,sp,32
  808da8:	e13ffc15 	stw	r4,-16(fp)
  808dac:	e17ffd15 	stw	r5,-12(fp)
  808db0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808db4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  808db8:	e0bffe17 	ldw	r2,-8(fp)
  808dbc:	1004c03a 	cmpne	r2,r2,zero
  808dc0:	1000021e 	bne	r2,zero,808dcc <OSEventNameGet+0x34>
        return (0);
  808dc4:	e03fff15 	stw	zero,-4(fp)
  808dc8:	00003906 	br	808eb0 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  808dcc:	e0bffc17 	ldw	r2,-16(fp)
  808dd0:	1004c03a 	cmpne	r2,r2,zero
  808dd4:	1000051e 	bne	r2,zero,808dec <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  808dd8:	e0fffe17 	ldw	r3,-8(fp)
  808ddc:	00800104 	movi	r2,4
  808de0:	18800005 	stb	r2,0(r3)
        return (0);
  808de4:	e03fff15 	stw	zero,-4(fp)
  808de8:	00003106 	br	808eb0 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  808dec:	e0bffd17 	ldw	r2,-12(fp)
  808df0:	1004c03a 	cmpne	r2,r2,zero
  808df4:	1000051e 	bne	r2,zero,808e0c <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  808df8:	e0fffe17 	ldw	r3,-8(fp)
  808dfc:	00800304 	movi	r2,12
  808e00:	18800005 	stb	r2,0(r3)
        return (0);
  808e04:	e03fff15 	stw	zero,-4(fp)
  808e08:	00002906 	br	808eb0 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  808e0c:	d0a04f03 	ldbu	r2,-32452(gp)
  808e10:	10803fcc 	andi	r2,r2,255
  808e14:	1005003a 	cmpeq	r2,r2,zero
  808e18:	1000051e 	bne	r2,zero,808e30 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  808e1c:	e0fffe17 	ldw	r3,-8(fp)
  808e20:	00800444 	movi	r2,17
  808e24:	18800005 	stb	r2,0(r3)
        return (0);
  808e28:	e03fff15 	stw	zero,-4(fp)
  808e2c:	00002006 	br	808eb0 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  808e30:	e0bffc17 	ldw	r2,-16(fp)
  808e34:	10800003 	ldbu	r2,0(r2)
  808e38:	10803fcc 	andi	r2,r2,255
  808e3c:	10bfffc4 	addi	r2,r2,-1
  808e40:	10800128 	cmpgeui	r2,r2,4
  808e44:	1000161e 	bne	r2,zero,808ea0 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808e48:	0005303a 	rdctl	r2,status
  808e4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808e50:	e0fff917 	ldw	r3,-28(fp)
  808e54:	00bfff84 	movi	r2,-2
  808e58:	1884703a 	and	r2,r3,r2
  808e5c:	1001703a 	wrctl	status,r2
  
  return context;
  808e60:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  808e64:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  808e68:	e0bffc17 	ldw	r2,-16(fp)
  808e6c:	11400384 	addi	r5,r2,14
  808e70:	e13ffd17 	ldw	r4,-12(fp)
  808e74:	080a91c0 	call	80a91c <OS_StrCopy>
  808e78:	e0bffb05 	stb	r2,-20(fp)
  808e7c:	e0bffa17 	ldw	r2,-24(fp)
  808e80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808e84:	e0bff817 	ldw	r2,-32(fp)
  808e88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  808e8c:	e0bffe17 	ldw	r2,-8(fp)
  808e90:	10000005 	stb	zero,0(r2)
    return (len);
  808e94:	e0bffb03 	ldbu	r2,-20(fp)
  808e98:	e0bfff15 	stw	r2,-4(fp)
  808e9c:	00000406 	br	808eb0 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  808ea0:	e0fffe17 	ldw	r3,-8(fp)
  808ea4:	00800044 	movi	r2,1
  808ea8:	18800005 	stb	r2,0(r3)
             return (0);
  808eac:	e03fff15 	stw	zero,-4(fp)
  808eb0:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  808eb4:	e037883a 	mov	sp,fp
  808eb8:	dfc00117 	ldw	ra,4(sp)
  808ebc:	df000017 	ldw	fp,0(sp)
  808ec0:	dec00204 	addi	sp,sp,8
  808ec4:	f800283a 	ret

00808ec8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  808ec8:	defff604 	addi	sp,sp,-40
  808ecc:	dfc00915 	stw	ra,36(sp)
  808ed0:	df000815 	stw	fp,32(sp)
  808ed4:	df000804 	addi	fp,sp,32
  808ed8:	e13ffd15 	stw	r4,-12(fp)
  808edc:	e17ffe15 	stw	r5,-8(fp)
  808ee0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808ee4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  808ee8:	e0bfff17 	ldw	r2,-4(fp)
  808eec:	1005003a 	cmpeq	r2,r2,zero
  808ef0:	1000411e 	bne	r2,zero,808ff8 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  808ef4:	e0bffd17 	ldw	r2,-12(fp)
  808ef8:	1004c03a 	cmpne	r2,r2,zero
  808efc:	1000041e 	bne	r2,zero,808f10 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  808f00:	e0ffff17 	ldw	r3,-4(fp)
  808f04:	00800104 	movi	r2,4
  808f08:	18800005 	stb	r2,0(r3)
        return;
  808f0c:	00003a06 	br	808ff8 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  808f10:	e0bffe17 	ldw	r2,-8(fp)
  808f14:	1004c03a 	cmpne	r2,r2,zero
  808f18:	1000041e 	bne	r2,zero,808f2c <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  808f1c:	e0ffff17 	ldw	r3,-4(fp)
  808f20:	00800304 	movi	r2,12
  808f24:	18800005 	stb	r2,0(r3)
        return;
  808f28:	00003306 	br	808ff8 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  808f2c:	d0a04f03 	ldbu	r2,-32452(gp)
  808f30:	10803fcc 	andi	r2,r2,255
  808f34:	1005003a 	cmpeq	r2,r2,zero
  808f38:	1000041e 	bne	r2,zero,808f4c <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  808f3c:	e0ffff17 	ldw	r3,-4(fp)
  808f40:	00800484 	movi	r2,18
  808f44:	18800005 	stb	r2,0(r3)
        return;
  808f48:	00002b06 	br	808ff8 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  808f4c:	e0bffd17 	ldw	r2,-12(fp)
  808f50:	10800003 	ldbu	r2,0(r2)
  808f54:	10803fcc 	andi	r2,r2,255
  808f58:	10bfffc4 	addi	r2,r2,-1
  808f5c:	10800128 	cmpgeui	r2,r2,4
  808f60:	10000f1e 	bne	r2,zero,808fa0 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808f64:	0005303a 	rdctl	r2,status
  808f68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808f6c:	e0fffa17 	ldw	r3,-24(fp)
  808f70:	00bfff84 	movi	r2,-2
  808f74:	1884703a 	and	r2,r3,r2
  808f78:	1001703a 	wrctl	status,r2
  
  return context;
  808f7c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  808f80:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  808f84:	e13ffe17 	ldw	r4,-8(fp)
  808f88:	080a99c0 	call	80a99c <OS_StrLen>
  808f8c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  808f90:	e0bffc03 	ldbu	r2,-16(fp)
  808f94:	10800828 	cmpgeui	r2,r2,32
  808f98:	1000051e 	bne	r2,zero,808fb0 <OSEventNameSet+0xe8>
  808f9c:	00000c06 	br	808fd0 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  808fa0:	e0ffff17 	ldw	r3,-4(fp)
  808fa4:	00800044 	movi	r2,1
  808fa8:	18800005 	stb	r2,0(r3)
             return;
  808fac:	00001206 	br	808ff8 <OSEventNameSet+0x130>
  808fb0:	e0bffb17 	ldw	r2,-20(fp)
  808fb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808fb8:	e0bff917 	ldw	r2,-28(fp)
  808fbc:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  808fc0:	e0ffff17 	ldw	r3,-4(fp)
  808fc4:	008002c4 	movi	r2,11
  808fc8:	18800005 	stb	r2,0(r3)
        return;
  808fcc:	00000a06 	br	808ff8 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  808fd0:	e0bffd17 	ldw	r2,-12(fp)
  808fd4:	11000384 	addi	r4,r2,14
  808fd8:	e17ffe17 	ldw	r5,-8(fp)
  808fdc:	080a91c0 	call	80a91c <OS_StrCopy>
  808fe0:	e0bffb17 	ldw	r2,-20(fp)
  808fe4:	e0bff815 	stw	r2,-32(fp)
  808fe8:	e0bff817 	ldw	r2,-32(fp)
  808fec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  808ff0:	e0bfff17 	ldw	r2,-4(fp)
  808ff4:	10000005 	stb	zero,0(r2)
}
  808ff8:	e037883a 	mov	sp,fp
  808ffc:	dfc00117 	ldw	ra,4(sp)
  809000:	df000017 	ldw	fp,0(sp)
  809004:	dec00204 	addi	sp,sp,8
  809008:	f800283a 	ret

0080900c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80900c:	deffe704 	addi	sp,sp,-100
  809010:	dfc01815 	stw	ra,96(sp)
  809014:	df001715 	stw	fp,92(sp)
  809018:	df001704 	addi	fp,sp,92
  80901c:	e13ff615 	stw	r4,-40(fp)
  809020:	e17ff715 	stw	r5,-36(fp)
  809024:	e1bff815 	stw	r6,-32(fp)
  809028:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80902c:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  809030:	e0800217 	ldw	r2,8(fp)
  809034:	1004c03a 	cmpne	r2,r2,zero
  809038:	1000021e 	bne	r2,zero,809044 <OSEventPendMulti+0x38>
        return (0);
  80903c:	e03fff15 	stw	zero,-4(fp)
  809040:	00019906 	br	8096a8 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  809044:	e0bff617 	ldw	r2,-40(fp)
  809048:	1004c03a 	cmpne	r2,r2,zero
  80904c:	1000051e 	bne	r2,zero,809064 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  809050:	e0c00217 	ldw	r3,8(fp)
  809054:	00800104 	movi	r2,4
  809058:	18800005 	stb	r2,0(r3)
        return (0);
  80905c:	e03fff15 	stw	zero,-4(fp)
  809060:	00019106 	br	8096a8 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  809064:	e0bff717 	ldw	r2,-36(fp)
  809068:	1004c03a 	cmpne	r2,r2,zero
  80906c:	1000051e 	bne	r2,zero,809084 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  809070:	e0c00217 	ldw	r3,8(fp)
  809074:	00800104 	movi	r2,4
  809078:	18800005 	stb	r2,0(r3)
        return (0);
  80907c:	e03fff15 	stw	zero,-4(fp)
  809080:	00018906 	br	8096a8 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  809084:	e0bff817 	ldw	r2,-32(fp)
  809088:	1004c03a 	cmpne	r2,r2,zero
  80908c:	1000051e 	bne	r2,zero,8090a4 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  809090:	e0c00217 	ldw	r3,8(fp)
  809094:	00800104 	movi	r2,4
  809098:	18800005 	stb	r2,0(r3)
        return (0);
  80909c:	e03fff15 	stw	zero,-4(fp)
  8090a0:	00018106 	br	8096a8 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  8090a4:	e0bff717 	ldw	r2,-36(fp)
  8090a8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  8090ac:	e0bff617 	ldw	r2,-40(fp)
  8090b0:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  8090b4:	e0bff517 	ldw	r2,-44(fp)
  8090b8:	10800017 	ldw	r2,0(r2)
  8090bc:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  8090c0:	00001806 	br	809124 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  8090c4:	e0bff417 	ldw	r2,-48(fp)
  8090c8:	10800003 	ldbu	r2,0(r2)
  8090cc:	10803fcc 	andi	r2,r2,255
  8090d0:	e0bffe15 	stw	r2,-8(fp)
  8090d4:	e0fffe17 	ldw	r3,-8(fp)
  8090d8:	188000a0 	cmpeqi	r2,r3,2
  8090dc:	10000b1e 	bne	r2,zero,80910c <OSEventPendMulti+0x100>
  8090e0:	e0fffe17 	ldw	r3,-8(fp)
  8090e4:	188000e0 	cmpeqi	r2,r3,3
  8090e8:	1000081e 	bne	r2,zero,80910c <OSEventPendMulti+0x100>
  8090ec:	e0fffe17 	ldw	r3,-8(fp)
  8090f0:	18800060 	cmpeqi	r2,r3,1
  8090f4:	1000051e 	bne	r2,zero,80910c <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  8090f8:	e0c00217 	ldw	r3,8(fp)
  8090fc:	00800044 	movi	r2,1
  809100:	18800005 	stb	r2,0(r3)
                 return (0);
  809104:	e03fff15 	stw	zero,-4(fp)
  809108:	00016706 	br	8096a8 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80910c:	e0bff517 	ldw	r2,-44(fp)
  809110:	10800104 	addi	r2,r2,4
  809114:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  809118:	e0bff517 	ldw	r2,-44(fp)
  80911c:	10800017 	ldw	r2,0(r2)
  809120:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  809124:	e0bff417 	ldw	r2,-48(fp)
  809128:	1004c03a 	cmpne	r2,r2,zero
  80912c:	103fe51e 	bne	r2,zero,8090c4 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  809130:	d0a04f03 	ldbu	r2,-32452(gp)
  809134:	10803fcc 	andi	r2,r2,255
  809138:	1005003a 	cmpeq	r2,r2,zero
  80913c:	1000051e 	bne	r2,zero,809154 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  809140:	e0c00217 	ldw	r3,8(fp)
  809144:	00800084 	movi	r2,2
  809148:	18800005 	stb	r2,0(r3)
        return (0);
  80914c:	e03fff15 	stw	zero,-4(fp)
  809150:	00015506 	br	8096a8 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  809154:	d0a04103 	ldbu	r2,-32508(gp)
  809158:	10803fcc 	andi	r2,r2,255
  80915c:	1005003a 	cmpeq	r2,r2,zero
  809160:	1000051e 	bne	r2,zero,809178 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  809164:	e0c00217 	ldw	r3,8(fp)
  809168:	00800344 	movi	r2,13
  80916c:	18800005 	stb	r2,0(r3)
        return (0);
  809170:	e03fff15 	stw	zero,-4(fp)
  809174:	00014c06 	br	8096a8 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809178:	0005303a 	rdctl	r2,status
  80917c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809180:	e0ffef17 	ldw	r3,-68(fp)
  809184:	00bfff84 	movi	r2,-2
  809188:	1884703a 	and	r2,r3,r2
  80918c:	1001703a 	wrctl	status,r2
  
  return context;
  809190:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  809194:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  809198:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  80919c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  8091a0:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  8091a4:	e0bff617 	ldw	r2,-40(fp)
  8091a8:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  8091ac:	e0bff517 	ldw	r2,-44(fp)
  8091b0:	10800017 	ldw	r2,0(r2)
  8091b4:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8091b8:	00008f06 	br	8093f8 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  8091bc:	e0bff417 	ldw	r2,-48(fp)
  8091c0:	10800003 	ldbu	r2,0(r2)
  8091c4:	10803fcc 	andi	r2,r2,255
  8091c8:	e0bffd15 	stw	r2,-12(fp)
  8091cc:	e0fffd17 	ldw	r3,-12(fp)
  8091d0:	188000a0 	cmpeqi	r2,r3,2
  8091d4:	1000441e 	bne	r2,zero,8092e8 <OSEventPendMulti+0x2dc>
  8091d8:	e0fffd17 	ldw	r3,-12(fp)
  8091dc:	188000e0 	cmpeqi	r2,r3,3
  8091e0:	1000041e 	bne	r2,zero,8091f4 <OSEventPendMulti+0x1e8>
  8091e4:	e0fffd17 	ldw	r3,-12(fp)
  8091e8:	18800060 	cmpeqi	r2,r3,1
  8091ec:	1000211e 	bne	r2,zero,809274 <OSEventPendMulti+0x268>
  8091f0:	00006f06 	br	8093b0 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  8091f4:	e0bff417 	ldw	r2,-48(fp)
  8091f8:	1080020b 	ldhu	r2,8(r2)
  8091fc:	10bfffcc 	andi	r2,r2,65535
  809200:	1005003a 	cmpeq	r2,r2,zero
  809204:	1000171e 	bne	r2,zero,809264 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  809208:	e0bff417 	ldw	r2,-48(fp)
  80920c:	1080020b 	ldhu	r2,8(r2)
  809210:	10bfffc4 	addi	r2,r2,-1
  809214:	1007883a 	mov	r3,r2
  809218:	e0bff417 	ldw	r2,-48(fp)
  80921c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  809220:	e0fff717 	ldw	r3,-36(fp)
  809224:	e0bff417 	ldw	r2,-48(fp)
  809228:	18800015 	stw	r2,0(r3)
  80922c:	e0bff717 	ldw	r2,-36(fp)
  809230:	10800104 	addi	r2,r2,4
  809234:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  809238:	00800044 	movi	r2,1
  80923c:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  809240:	e0bff817 	ldw	r2,-32(fp)
  809244:	10000015 	stw	zero,0(r2)
  809248:	e0bff817 	ldw	r2,-32(fp)
  80924c:	10800104 	addi	r2,r2,4
  809250:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  809254:	e0bff18b 	ldhu	r2,-58(fp)
  809258:	10800044 	addi	r2,r2,1
  80925c:	e0bff18d 	sth	r2,-58(fp)
  809260:	00005f06 	br	8093e0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  809264:	e0bff103 	ldbu	r2,-60(fp)
  809268:	10800054 	ori	r2,r2,1
  80926c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  809270:	00005b06 	br	8093e0 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  809274:	e0bff417 	ldw	r2,-48(fp)
  809278:	10800117 	ldw	r2,4(r2)
  80927c:	1005003a 	cmpeq	r2,r2,zero
  809280:	1000151e 	bne	r2,zero,8092d8 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  809284:	e0bff417 	ldw	r2,-48(fp)
  809288:	10c00117 	ldw	r3,4(r2)
  80928c:	e0bff817 	ldw	r2,-32(fp)
  809290:	10c00015 	stw	r3,0(r2)
  809294:	e0bff817 	ldw	r2,-32(fp)
  809298:	10800104 	addi	r2,r2,4
  80929c:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  8092a0:	e0bff417 	ldw	r2,-48(fp)
  8092a4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  8092a8:	e0fff717 	ldw	r3,-36(fp)
  8092ac:	e0bff417 	ldw	r2,-48(fp)
  8092b0:	18800015 	stw	r2,0(r3)
  8092b4:	e0bff717 	ldw	r2,-36(fp)
  8092b8:	10800104 	addi	r2,r2,4
  8092bc:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  8092c0:	00800044 	movi	r2,1
  8092c4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  8092c8:	e0bff18b 	ldhu	r2,-58(fp)
  8092cc:	10800044 	addi	r2,r2,1
  8092d0:	e0bff18d 	sth	r2,-58(fp)
  8092d4:	00004206 	br	8093e0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  8092d8:	e0bff103 	ldbu	r2,-60(fp)
  8092dc:	10800094 	ori	r2,r2,2
  8092e0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  8092e4:	00003e06 	br	8093e0 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  8092e8:	e0bff417 	ldw	r2,-48(fp)
  8092ec:	10800117 	ldw	r2,4(r2)
  8092f0:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  8092f4:	e0bff317 	ldw	r2,-52(fp)
  8092f8:	1080058b 	ldhu	r2,22(r2)
  8092fc:	10bfffcc 	andi	r2,r2,65535
  809300:	1005003a 	cmpeq	r2,r2,zero
  809304:	1000261e 	bne	r2,zero,8093a0 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  809308:	e0bff317 	ldw	r2,-52(fp)
  80930c:	11000417 	ldw	r4,16(r2)
  809310:	20c00017 	ldw	r3,0(r4)
  809314:	e0bff817 	ldw	r2,-32(fp)
  809318:	10c00015 	stw	r3,0(r2)
  80931c:	e0bff817 	ldw	r2,-32(fp)
  809320:	10800104 	addi	r2,r2,4
  809324:	e0bff815 	stw	r2,-32(fp)
  809328:	20c00104 	addi	r3,r4,4
  80932c:	e0bff317 	ldw	r2,-52(fp)
  809330:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  809334:	e0bff317 	ldw	r2,-52(fp)
  809338:	10c00417 	ldw	r3,16(r2)
  80933c:	e0bff317 	ldw	r2,-52(fp)
  809340:	10800217 	ldw	r2,8(r2)
  809344:	1880041e 	bne	r3,r2,809358 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  809348:	e0bff317 	ldw	r2,-52(fp)
  80934c:	10c00117 	ldw	r3,4(r2)
  809350:	e0bff317 	ldw	r2,-52(fp)
  809354:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  809358:	e0bff317 	ldw	r2,-52(fp)
  80935c:	1080058b 	ldhu	r2,22(r2)
  809360:	10bfffc4 	addi	r2,r2,-1
  809364:	1007883a 	mov	r3,r2
  809368:	e0bff317 	ldw	r2,-52(fp)
  80936c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  809370:	e0fff717 	ldw	r3,-36(fp)
  809374:	e0bff417 	ldw	r2,-48(fp)
  809378:	18800015 	stw	r2,0(r3)
  80937c:	e0bff717 	ldw	r2,-36(fp)
  809380:	10800104 	addi	r2,r2,4
  809384:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  809388:	00800044 	movi	r2,1
  80938c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  809390:	e0bff18b 	ldhu	r2,-58(fp)
  809394:	10800044 	addi	r2,r2,1
  809398:	e0bff18d 	sth	r2,-58(fp)
  80939c:	00001006 	br	8093e0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  8093a0:	e0bff103 	ldbu	r2,-60(fp)
  8093a4:	10800114 	ori	r2,r2,4
  8093a8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  8093ac:	00000c06 	br	8093e0 <OSEventPendMulti+0x3d4>
  8093b0:	e0bff017 	ldw	r2,-64(fp)
  8093b4:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8093b8:	e0bfee17 	ldw	r2,-72(fp)
  8093bc:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  8093c0:	e0bff717 	ldw	r2,-36(fp)
  8093c4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  8093c8:	e0c00217 	ldw	r3,8(fp)
  8093cc:	00800044 	movi	r2,1
  8093d0:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  8093d4:	e0bff18b 	ldhu	r2,-58(fp)
  8093d8:	e0bfff15 	stw	r2,-4(fp)
  8093dc:	0000b206 	br	8096a8 <OSEventPendMulti+0x69c>
        }
        pevents++;
  8093e0:	e0bff517 	ldw	r2,-44(fp)
  8093e4:	10800104 	addi	r2,r2,4
  8093e8:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  8093ec:	e0bff517 	ldw	r2,-44(fp)
  8093f0:	10800017 	ldw	r2,0(r2)
  8093f4:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8093f8:	e0bff417 	ldw	r2,-48(fp)
  8093fc:	1004c03a 	cmpne	r2,r2,zero
  809400:	103f6e1e 	bne	r2,zero,8091bc <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  809404:	e0bff203 	ldbu	r2,-56(fp)
  809408:	10800058 	cmpnei	r2,r2,1
  80940c:	10000b1e 	bne	r2,zero,80943c <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  809410:	e0bff717 	ldw	r2,-36(fp)
  809414:	10000015 	stw	zero,0(r2)
  809418:	e0bff017 	ldw	r2,-64(fp)
  80941c:	e0bfed15 	stw	r2,-76(fp)
  809420:	e0bfed17 	ldw	r2,-76(fp)
  809424:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  809428:	e0800217 	ldw	r2,8(fp)
  80942c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  809430:	e0fff18b 	ldhu	r3,-58(fp)
  809434:	e0ffff15 	stw	r3,-4(fp)
  809438:	00009b06 	br	8096a8 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80943c:	d1205017 	ldw	r4,-32448(gp)
  809440:	d0a05017 	ldw	r2,-32448(gp)
  809444:	10c00c03 	ldbu	r3,48(r2)
  809448:	e0bff103 	ldbu	r2,-60(fp)
  80944c:	1884b03a 	or	r2,r3,r2
  809450:	1007883a 	mov	r3,r2
  809454:	00bfe004 	movi	r2,-128
  809458:	1884b03a 	or	r2,r3,r2
  80945c:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  809460:	d0a05017 	ldw	r2,-32448(gp)
  809464:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  809468:	d0e05017 	ldw	r3,-32448(gp)
  80946c:	e0bff90b 	ldhu	r2,-28(fp)
  809470:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  809474:	e13ff617 	ldw	r4,-40(fp)
  809478:	080a03c0 	call	80a03c <OS_EventTaskWaitMulti>
  80947c:	e0bff017 	ldw	r2,-64(fp)
  809480:	e0bfec15 	stw	r2,-80(fp)
  809484:	e0bfec17 	ldw	r2,-80(fp)
  809488:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80948c:	080a7d80 	call	80a7d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809490:	0005303a 	rdctl	r2,status
  809494:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809498:	e0ffeb17 	ldw	r3,-84(fp)
  80949c:	00bfff84 	movi	r2,-2
  8094a0:	1884703a 	and	r2,r3,r2
  8094a4:	1001703a 	wrctl	status,r2
  
  return context;
  8094a8:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  8094ac:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  8094b0:	d0a05017 	ldw	r2,-32448(gp)
  8094b4:	10800c43 	ldbu	r2,49(r2)
  8094b8:	10803fcc 	andi	r2,r2,255
  8094bc:	e0bffc15 	stw	r2,-16(fp)
  8094c0:	e0fffc17 	ldw	r3,-16(fp)
  8094c4:	1805003a 	cmpeq	r2,r3,zero
  8094c8:	1000041e 	bne	r2,zero,8094dc <OSEventPendMulti+0x4d0>
  8094cc:	e0fffc17 	ldw	r3,-16(fp)
  8094d0:	188000a0 	cmpeqi	r2,r3,2
  8094d4:	1000011e 	bne	r2,zero,8094dc <OSEventPendMulti+0x4d0>
  8094d8:	00001906 	br	809540 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  8094dc:	d0a05017 	ldw	r2,-32448(gp)
  8094e0:	10800717 	ldw	r2,28(r2)
  8094e4:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  8094e8:	e0bff417 	ldw	r2,-48(fp)
  8094ec:	1005003a 	cmpeq	r2,r2,zero
  8094f0:	10000c1e 	bne	r2,zero,809524 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  8094f4:	e0fff717 	ldw	r3,-36(fp)
  8094f8:	e0bff417 	ldw	r2,-48(fp)
  8094fc:	18800015 	stw	r2,0(r3)
  809500:	e0bff717 	ldw	r2,-36(fp)
  809504:	10800104 	addi	r2,r2,4
  809508:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80950c:	e0bff717 	ldw	r2,-36(fp)
  809510:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  809514:	e0bff18b 	ldhu	r2,-58(fp)
  809518:	10800044 	addi	r2,r2,1
  80951c:	e0bff18d 	sth	r2,-58(fp)
  809520:	00000a06 	br	80954c <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  809524:	d0a05017 	ldw	r2,-32448(gp)
  809528:	00c00044 	movi	r3,1
  80952c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  809530:	d1205017 	ldw	r4,-32448(gp)
  809534:	e17ff617 	ldw	r5,-40(fp)
  809538:	080a2480 	call	80a248 <OS_EventTaskRemoveMulti>
             }
			 break;
  80953c:	00000306 	br	80954c <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  809540:	d1205017 	ldw	r4,-32448(gp)
  809544:	e17ff617 	ldw	r5,-40(fp)
  809548:	080a2480 	call	80a248 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80954c:	d0a05017 	ldw	r2,-32448(gp)
  809550:	10800c43 	ldbu	r2,49(r2)
  809554:	10803fcc 	andi	r2,r2,255
  809558:	e0bffb15 	stw	r2,-20(fp)
  80955c:	e0fffb17 	ldw	r3,-20(fp)
  809560:	1805003a 	cmpeq	r2,r3,zero
  809564:	1000041e 	bne	r2,zero,809578 <OSEventPendMulti+0x56c>
  809568:	e0fffb17 	ldw	r3,-20(fp)
  80956c:	188000a0 	cmpeqi	r2,r3,2
  809570:	10002c1e 	bne	r2,zero,809624 <OSEventPendMulti+0x618>
  809574:	00003406 	br	809648 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  809578:	e0bff417 	ldw	r2,-48(fp)
  80957c:	10800003 	ldbu	r2,0(r2)
  809580:	10803fcc 	andi	r2,r2,255
  809584:	e0bffa15 	stw	r2,-24(fp)
  809588:	e0fffa17 	ldw	r3,-24(fp)
  80958c:	18800050 	cmplti	r2,r3,1
  809590:	1000151e 	bne	r2,zero,8095e8 <OSEventPendMulti+0x5dc>
  809594:	e0fffa17 	ldw	r3,-24(fp)
  809598:	188000d0 	cmplti	r2,r3,3
  80959c:	10000a1e 	bne	r2,zero,8095c8 <OSEventPendMulti+0x5bc>
  8095a0:	e0fffa17 	ldw	r3,-24(fp)
  8095a4:	188000e0 	cmpeqi	r2,r3,3
  8095a8:	1000011e 	bne	r2,zero,8095b0 <OSEventPendMulti+0x5a4>
  8095ac:	00000e06 	br	8095e8 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  8095b0:	e0bff817 	ldw	r2,-32(fp)
  8095b4:	10000015 	stw	zero,0(r2)
  8095b8:	e0bff817 	ldw	r2,-32(fp)
  8095bc:	10800104 	addi	r2,r2,4
  8095c0:	e0bff815 	stw	r2,-32(fp)
                      break;
  8095c4:	00001406 	br	809618 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  8095c8:	d0a05017 	ldw	r2,-32448(gp)
  8095cc:	10c00917 	ldw	r3,36(r2)
  8095d0:	e0bff817 	ldw	r2,-32(fp)
  8095d4:	10c00015 	stw	r3,0(r2)
  8095d8:	e0bff817 	ldw	r2,-32(fp)
  8095dc:	10800104 	addi	r2,r2,4
  8095e0:	e0bff815 	stw	r2,-32(fp)
                      break;
  8095e4:	00000c06 	br	809618 <OSEventPendMulti+0x60c>
  8095e8:	e0bff017 	ldw	r2,-64(fp)
  8095ec:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8095f0:	e0bfea17 	ldw	r2,-88(fp)
  8095f4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  8095f8:	e0bff717 	ldw	r2,-36(fp)
  8095fc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  809600:	e0c00217 	ldw	r3,8(fp)
  809604:	00800044 	movi	r2,1
  809608:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  80960c:	e0bff18b 	ldhu	r2,-58(fp)
  809610:	e0bfff15 	stw	r2,-4(fp)
  809614:	00002406 	br	8096a8 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  809618:	e0800217 	ldw	r2,8(fp)
  80961c:	10000005 	stb	zero,0(r2)
             break;
  809620:	00001106 	br	809668 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  809624:	e0bff817 	ldw	r2,-32(fp)
  809628:	10000015 	stw	zero,0(r2)
  80962c:	e0bff817 	ldw	r2,-32(fp)
  809630:	10800104 	addi	r2,r2,4
  809634:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  809638:	e0c00217 	ldw	r3,8(fp)
  80963c:	00800384 	movi	r2,14
  809640:	18800005 	stb	r2,0(r3)
             break;
  809644:	00000806 	br	809668 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  809648:	e0bff817 	ldw	r2,-32(fp)
  80964c:	10000015 	stw	zero,0(r2)
  809650:	e0bff817 	ldw	r2,-32(fp)
  809654:	10800104 	addi	r2,r2,4
  809658:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80965c:	e0c00217 	ldw	r3,8(fp)
  809660:	00800284 	movi	r2,10
  809664:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  809668:	d0a05017 	ldw	r2,-32448(gp)
  80966c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  809670:	d0a05017 	ldw	r2,-32448(gp)
  809674:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  809678:	d0a05017 	ldw	r2,-32448(gp)
  80967c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  809680:	d0a05017 	ldw	r2,-32448(gp)
  809684:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  809688:	d0a05017 	ldw	r2,-32448(gp)
  80968c:	10000915 	stw	zero,36(r2)
  809690:	e0bff017 	ldw	r2,-64(fp)
  809694:	e0bfe915 	stw	r2,-92(fp)
  809698:	e0bfe917 	ldw	r2,-92(fp)
  80969c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  8096a0:	e0fff18b 	ldhu	r3,-58(fp)
  8096a4:	e0ffff15 	stw	r3,-4(fp)
  8096a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8096ac:	e037883a 	mov	sp,fp
  8096b0:	dfc00117 	ldw	ra,4(sp)
  8096b4:	df000017 	ldw	fp,0(sp)
  8096b8:	dec00204 	addi	sp,sp,8
  8096bc:	f800283a 	ret

008096c0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  8096c0:	defffe04 	addi	sp,sp,-8
  8096c4:	dfc00115 	stw	ra,4(sp)
  8096c8:	df000015 	stw	fp,0(sp)
  8096cc:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  8096d0:	08147dc0 	call	8147dc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  8096d4:	080a4900 	call	80a490 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  8096d8:	080a4d40 	call	80a4d4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  8096dc:	080a6380 	call	80a638 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  8096e0:	080a3b40 	call	80a3b4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  8096e4:	080c6e80 	call	80c6e8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  8096e8:	080d0c00 	call	80d0c0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  8096ec:	080e4180 	call	80e418 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  8096f0:	080a5400 	call	80a540 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  8096f4:	080a5bc0 	call	80a5bc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  8096f8:	08147f80 	call	8147f8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  8096fc:	080aec00 	call	80aec0 <OSDebugInit>
#endif
}
  809700:	e037883a 	mov	sp,fp
  809704:	dfc00117 	ldw	ra,4(sp)
  809708:	df000017 	ldw	fp,0(sp)
  80970c:	dec00204 	addi	sp,sp,8
  809710:	f800283a 	ret

00809714 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  809714:	defffc04 	addi	sp,sp,-16
  809718:	df000315 	stw	fp,12(sp)
  80971c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  809720:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  809724:	d0a04143 	ldbu	r2,-32507(gp)
  809728:	10803fcc 	andi	r2,r2,255
  80972c:	10800058 	cmpnei	r2,r2,1
  809730:	1000131e 	bne	r2,zero,809780 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809734:	0005303a 	rdctl	r2,status
  809738:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80973c:	e0fffe17 	ldw	r3,-8(fp)
  809740:	00bfff84 	movi	r2,-2
  809744:	1884703a 	and	r2,r3,r2
  809748:	1001703a 	wrctl	status,r2
  
  return context;
  80974c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  809750:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  809754:	d0a04f03 	ldbu	r2,-32452(gp)
  809758:	10803fcc 	andi	r2,r2,255
  80975c:	10803fe0 	cmpeqi	r2,r2,255
  809760:	1000031e 	bne	r2,zero,809770 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  809764:	d0a04f03 	ldbu	r2,-32452(gp)
  809768:	10800044 	addi	r2,r2,1
  80976c:	d0a04f05 	stb	r2,-32452(gp)
  809770:	e0bfff17 	ldw	r2,-4(fp)
  809774:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809778:	e0bffd17 	ldw	r2,-12(fp)
  80977c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  809780:	e037883a 	mov	sp,fp
  809784:	df000017 	ldw	fp,0(sp)
  809788:	dec00104 	addi	sp,sp,4
  80978c:	f800283a 	ret

00809790 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  809790:	defffb04 	addi	sp,sp,-20
  809794:	dfc00415 	stw	ra,16(sp)
  809798:	df000315 	stw	fp,12(sp)
  80979c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8097a0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  8097a4:	d0a04143 	ldbu	r2,-32507(gp)
  8097a8:	10803fcc 	andi	r2,r2,255
  8097ac:	10800058 	cmpnei	r2,r2,1
  8097b0:	1000321e 	bne	r2,zero,80987c <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8097b4:	0005303a 	rdctl	r2,status
  8097b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8097bc:	e0fffe17 	ldw	r3,-8(fp)
  8097c0:	00bfff84 	movi	r2,-2
  8097c4:	1884703a 	and	r2,r3,r2
  8097c8:	1001703a 	wrctl	status,r2
  
  return context;
  8097cc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8097d0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  8097d4:	d0a04f03 	ldbu	r2,-32452(gp)
  8097d8:	10803fcc 	andi	r2,r2,255
  8097dc:	1005003a 	cmpeq	r2,r2,zero
  8097e0:	1000031e 	bne	r2,zero,8097f0 <OSIntExit+0x60>
            OSIntNesting--;
  8097e4:	d0a04f03 	ldbu	r2,-32452(gp)
  8097e8:	10bfffc4 	addi	r2,r2,-1
  8097ec:	d0a04f05 	stb	r2,-32452(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  8097f0:	d0a04f03 	ldbu	r2,-32452(gp)
  8097f4:	10803fcc 	andi	r2,r2,255
  8097f8:	1004c03a 	cmpne	r2,r2,zero
  8097fc:	10001b1e 	bne	r2,zero,80986c <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  809800:	d0a04103 	ldbu	r2,-32508(gp)
  809804:	10803fcc 	andi	r2,r2,255
  809808:	1004c03a 	cmpne	r2,r2,zero
  80980c:	1000171e 	bne	r2,zero,80986c <OSIntExit+0xdc>
                OS_SchedNew();
  809810:	080a8ac0 	call	80a8ac <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  809814:	d0a04303 	ldbu	r2,-32500(gp)
  809818:	d0e04343 	ldbu	r3,-32499(gp)
  80981c:	11003fcc 	andi	r4,r2,255
  809820:	18803fcc 	andi	r2,r3,255
  809824:	20801126 	beq	r4,r2,80986c <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  809828:	d0a04303 	ldbu	r2,-32500(gp)
  80982c:	10803fcc 	andi	r2,r2,255
  809830:	00c02234 	movhi	r3,136
  809834:	18d6ab04 	addi	r3,r3,23212
  809838:	1085883a 	add	r2,r2,r2
  80983c:	1085883a 	add	r2,r2,r2
  809840:	10c5883a 	add	r2,r2,r3
  809844:	10800017 	ldw	r2,0(r2)
  809848:	d0a04b15 	stw	r2,-32468(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80984c:	d0e04b17 	ldw	r3,-32468(gp)
  809850:	18800e17 	ldw	r2,56(r3)
  809854:	10800044 	addi	r2,r2,1
  809858:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80985c:	d0a04617 	ldw	r2,-32488(gp)
  809860:	10800044 	addi	r2,r2,1
  809864:	d0a04615 	stw	r2,-32488(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  809868:	08143680 	call	814368 <OSCtxSw>
  80986c:	e0bfff17 	ldw	r2,-4(fp)
  809870:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809874:	e0bffd17 	ldw	r2,-12(fp)
  809878:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80987c:	e037883a 	mov	sp,fp
  809880:	dfc00117 	ldw	ra,4(sp)
  809884:	df000017 	ldw	fp,0(sp)
  809888:	dec00204 	addi	sp,sp,8
  80988c:	f800283a 	ret

00809890 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  809890:	defffc04 	addi	sp,sp,-16
  809894:	df000315 	stw	fp,12(sp)
  809898:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80989c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  8098a0:	d0a04143 	ldbu	r2,-32507(gp)
  8098a4:	10803fcc 	andi	r2,r2,255
  8098a8:	10800058 	cmpnei	r2,r2,1
  8098ac:	1000171e 	bne	r2,zero,80990c <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8098b0:	0005303a 	rdctl	r2,status
  8098b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8098b8:	e0fffe17 	ldw	r3,-8(fp)
  8098bc:	00bfff84 	movi	r2,-2
  8098c0:	1884703a 	and	r2,r3,r2
  8098c4:	1001703a 	wrctl	status,r2
  
  return context;
  8098c8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8098cc:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  8098d0:	d0a04f03 	ldbu	r2,-32452(gp)
  8098d4:	10803fcc 	andi	r2,r2,255
  8098d8:	1004c03a 	cmpne	r2,r2,zero
  8098dc:	1000071e 	bne	r2,zero,8098fc <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  8098e0:	d0a04103 	ldbu	r2,-32508(gp)
  8098e4:	10803fcc 	andi	r2,r2,255
  8098e8:	10803fe0 	cmpeqi	r2,r2,255
  8098ec:	1000031e 	bne	r2,zero,8098fc <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  8098f0:	d0a04103 	ldbu	r2,-32508(gp)
  8098f4:	10800044 	addi	r2,r2,1
  8098f8:	d0a04105 	stb	r2,-32508(gp)
  8098fc:	e0bfff17 	ldw	r2,-4(fp)
  809900:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809904:	e0bffd17 	ldw	r2,-12(fp)
  809908:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80990c:	e037883a 	mov	sp,fp
  809910:	df000017 	ldw	fp,0(sp)
  809914:	dec00104 	addi	sp,sp,4
  809918:	f800283a 	ret

0080991c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80991c:	defff804 	addi	sp,sp,-32
  809920:	dfc00715 	stw	ra,28(sp)
  809924:	df000615 	stw	fp,24(sp)
  809928:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80992c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  809930:	d0a04143 	ldbu	r2,-32507(gp)
  809934:	10803fcc 	andi	r2,r2,255
  809938:	10800058 	cmpnei	r2,r2,1
  80993c:	10002b1e 	bne	r2,zero,8099ec <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809940:	0005303a 	rdctl	r2,status
  809944:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809948:	e0fffe17 	ldw	r3,-8(fp)
  80994c:	00bfff84 	movi	r2,-2
  809950:	1884703a 	and	r2,r3,r2
  809954:	1001703a 	wrctl	status,r2
  
  return context;
  809958:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80995c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  809960:	d0a04103 	ldbu	r2,-32508(gp)
  809964:	10803fcc 	andi	r2,r2,255
  809968:	1005003a 	cmpeq	r2,r2,zero
  80996c:	10001b1e 	bne	r2,zero,8099dc <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  809970:	d0a04103 	ldbu	r2,-32508(gp)
  809974:	10bfffc4 	addi	r2,r2,-1
  809978:	d0a04105 	stb	r2,-32508(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80997c:	d0a04103 	ldbu	r2,-32508(gp)
  809980:	10803fcc 	andi	r2,r2,255
  809984:	1004c03a 	cmpne	r2,r2,zero
  809988:	10000f1e 	bne	r2,zero,8099c8 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80998c:	d0a04f03 	ldbu	r2,-32452(gp)
  809990:	10803fcc 	andi	r2,r2,255
  809994:	1004c03a 	cmpne	r2,r2,zero
  809998:	1000061e 	bne	r2,zero,8099b4 <OSSchedUnlock+0x98>
  80999c:	e0bfff17 	ldw	r2,-4(fp)
  8099a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8099a4:	e0bffd17 	ldw	r2,-12(fp)
  8099a8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  8099ac:	080a7d80 	call	80a7d8 <OS_Sched>
  8099b0:	00000e06 	br	8099ec <OSSchedUnlock+0xd0>
  8099b4:	e0bfff17 	ldw	r2,-4(fp)
  8099b8:	e0bffc15 	stw	r2,-16(fp)
  8099bc:	e0bffc17 	ldw	r2,-16(fp)
  8099c0:	1001703a 	wrctl	status,r2
  8099c4:	00000906 	br	8099ec <OSSchedUnlock+0xd0>
  8099c8:	e0bfff17 	ldw	r2,-4(fp)
  8099cc:	e0bffb15 	stw	r2,-20(fp)
  8099d0:	e0bffb17 	ldw	r2,-20(fp)
  8099d4:	1001703a 	wrctl	status,r2
  8099d8:	00000406 	br	8099ec <OSSchedUnlock+0xd0>
  8099dc:	e0bfff17 	ldw	r2,-4(fp)
  8099e0:	e0bffa15 	stw	r2,-24(fp)
  8099e4:	e0bffa17 	ldw	r2,-24(fp)
  8099e8:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  8099ec:	e037883a 	mov	sp,fp
  8099f0:	dfc00117 	ldw	ra,4(sp)
  8099f4:	df000017 	ldw	fp,0(sp)
  8099f8:	dec00204 	addi	sp,sp,8
  8099fc:	f800283a 	ret

00809a00 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  809a00:	defffe04 	addi	sp,sp,-8
  809a04:	dfc00115 	stw	ra,4(sp)
  809a08:	df000015 	stw	fp,0(sp)
  809a0c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  809a10:	d0a04143 	ldbu	r2,-32507(gp)
  809a14:	10803fcc 	andi	r2,r2,255
  809a18:	1004c03a 	cmpne	r2,r2,zero
  809a1c:	10000f1e 	bne	r2,zero,809a5c <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  809a20:	080a8ac0 	call	80a8ac <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  809a24:	d0a04303 	ldbu	r2,-32500(gp)
  809a28:	d0a04345 	stb	r2,-32499(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  809a2c:	d0a04303 	ldbu	r2,-32500(gp)
  809a30:	10803fcc 	andi	r2,r2,255
  809a34:	00c02234 	movhi	r3,136
  809a38:	18d6ab04 	addi	r3,r3,23212
  809a3c:	1085883a 	add	r2,r2,r2
  809a40:	1085883a 	add	r2,r2,r2
  809a44:	10c5883a 	add	r2,r2,r3
  809a48:	10800017 	ldw	r2,0(r2)
  809a4c:	d0a04b15 	stw	r2,-32468(gp)
        OSTCBCur      = OSTCBHighRdy;
  809a50:	d0a04b17 	ldw	r2,-32468(gp)
  809a54:	d0a05015 	stw	r2,-32448(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  809a58:	08143f40 	call	8143f4 <OSStartHighRdy>
    }
}
  809a5c:	e037883a 	mov	sp,fp
  809a60:	dfc00117 	ldw	ra,4(sp)
  809a64:	df000017 	ldw	fp,0(sp)
  809a68:	dec00204 	addi	sp,sp,8
  809a6c:	f800283a 	ret

00809a70 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  809a70:	defff904 	addi	sp,sp,-28
  809a74:	dfc00615 	stw	ra,24(sp)
  809a78:	df000515 	stw	fp,20(sp)
  809a7c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  809a80:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  809a84:	01000084 	movi	r4,2
  809a88:	0810acc0 	call	810acc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809a8c:	0005303a 	rdctl	r2,status
  809a90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809a94:	e0fffe17 	ldw	r3,-8(fp)
  809a98:	00bfff84 	movi	r2,-2
  809a9c:	1884703a 	and	r2,r3,r2
  809aa0:	1001703a 	wrctl	status,r2
  
  return context;
  809aa4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  809aa8:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  809aac:	d0204215 	stw	zero,-32504(gp)
  809ab0:	e0bfff17 	ldw	r2,-4(fp)
  809ab4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809ab8:	e0bffd17 	ldw	r2,-12(fp)
  809abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  809ac0:	01001904 	movi	r4,100
  809ac4:	0810acc0 	call	810acc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809ac8:	0005303a 	rdctl	r2,status
  809acc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809ad0:	e0fffc17 	ldw	r3,-16(fp)
  809ad4:	00bfff84 	movi	r2,-2
  809ad8:	1884703a 	and	r2,r3,r2
  809adc:	1001703a 	wrctl	status,r2
  
  return context;
  809ae0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  809ae4:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  809ae8:	d0a04217 	ldw	r2,-32504(gp)
  809aec:	d0a04715 	stw	r2,-32484(gp)
    OSStatRdy    = OS_TRUE;
  809af0:	00800044 	movi	r2,1
  809af4:	d0a05305 	stb	r2,-32436(gp)
  809af8:	e0bfff17 	ldw	r2,-4(fp)
  809afc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809b00:	e0bffb17 	ldw	r2,-20(fp)
  809b04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  809b08:	e037883a 	mov	sp,fp
  809b0c:	dfc00117 	ldw	ra,4(sp)
  809b10:	df000017 	ldw	fp,0(sp)
  809b14:	dec00204 	addi	sp,sp,8
  809b18:	f800283a 	ret

00809b1c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  809b1c:	defff604 	addi	sp,sp,-40
  809b20:	dfc00915 	stw	ra,36(sp)
  809b24:	df000815 	stw	fp,32(sp)
  809b28:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  809b2c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  809b30:	08147c00 	call	8147c0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809b34:	0005303a 	rdctl	r2,status
  809b38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809b3c:	e0fffb17 	ldw	r3,-20(fp)
  809b40:	00bfff84 	movi	r2,-2
  809b44:	1884703a 	and	r2,r3,r2
  809b48:	1001703a 	wrctl	status,r2
  
  return context;
  809b4c:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  809b50:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  809b54:	d0a05117 	ldw	r2,-32444(gp)
  809b58:	10800044 	addi	r2,r2,1
  809b5c:	d0a05115 	stw	r2,-32444(gp)
  809b60:	e0bffc17 	ldw	r2,-16(fp)
  809b64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809b68:	e0bffa17 	ldw	r2,-24(fp)
  809b6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  809b70:	d0a04143 	ldbu	r2,-32507(gp)
  809b74:	10803fcc 	andi	r2,r2,255
  809b78:	10800058 	cmpnei	r2,r2,1
  809b7c:	1000721e 	bne	r2,zero,809d48 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  809b80:	d0a04503 	ldbu	r2,-32492(gp)
  809b84:	10803fcc 	andi	r2,r2,255
  809b88:	e0bfff15 	stw	r2,-4(fp)
  809b8c:	e0ffff17 	ldw	r3,-4(fp)
  809b90:	18800060 	cmpeqi	r2,r3,1
  809b94:	10000a1e 	bne	r2,zero,809bc0 <OSTimeTick+0xa4>
  809b98:	e0ffff17 	ldw	r3,-4(fp)
  809b9c:	188000a0 	cmpeqi	r2,r3,2
  809ba0:	1000091e 	bne	r2,zero,809bc8 <OSTimeTick+0xac>
  809ba4:	e0ffff17 	ldw	r3,-4(fp)
  809ba8:	1805003a 	cmpeq	r2,r3,zero
  809bac:	1000011e 	bne	r2,zero,809bb4 <OSTimeTick+0x98>
  809bb0:	00000a06 	br	809bdc <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  809bb4:	00800044 	movi	r2,1
  809bb8:	e0bffd05 	stb	r2,-12(fp)
                 break;
  809bbc:	00000a06 	br	809be8 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  809bc0:	e03ffd05 	stb	zero,-12(fp)
                 break;
  809bc4:	00000806 	br	809be8 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  809bc8:	00800044 	movi	r2,1
  809bcc:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  809bd0:	00800044 	movi	r2,1
  809bd4:	d0a04505 	stb	r2,-32492(gp)
                 break;
  809bd8:	00000306 	br	809be8 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  809bdc:	00800044 	movi	r2,1
  809be0:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  809be4:	d0204505 	stb	zero,-32492(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  809be8:	e0bffd03 	ldbu	r2,-12(fp)
  809bec:	1005003a 	cmpeq	r2,r2,zero
  809bf0:	1000551e 	bne	r2,zero,809d48 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  809bf4:	d0a04417 	ldw	r2,-32496(gp)
  809bf8:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  809bfc:	00004d06 	br	809d34 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809c00:	0005303a 	rdctl	r2,status
  809c04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809c08:	e0fff917 	ldw	r3,-28(fp)
  809c0c:	00bfff84 	movi	r2,-2
  809c10:	1884703a 	and	r2,r3,r2
  809c14:	1001703a 	wrctl	status,r2
  
  return context;
  809c18:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  809c1c:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  809c20:	e0bffe17 	ldw	r2,-8(fp)
  809c24:	10800b8b 	ldhu	r2,46(r2)
  809c28:	10bfffcc 	andi	r2,r2,65535
  809c2c:	1005003a 	cmpeq	r2,r2,zero
  809c30:	1000391e 	bne	r2,zero,809d18 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  809c34:	e0bffe17 	ldw	r2,-8(fp)
  809c38:	10800b8b 	ldhu	r2,46(r2)
  809c3c:	10bfffc4 	addi	r2,r2,-1
  809c40:	1007883a 	mov	r3,r2
  809c44:	e0bffe17 	ldw	r2,-8(fp)
  809c48:	10c00b8d 	sth	r3,46(r2)
  809c4c:	e0bffe17 	ldw	r2,-8(fp)
  809c50:	10800b8b 	ldhu	r2,46(r2)
  809c54:	10bfffcc 	andi	r2,r2,65535
  809c58:	1004c03a 	cmpne	r2,r2,zero
  809c5c:	10002e1e 	bne	r2,zero,809d18 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  809c60:	e0bffe17 	ldw	r2,-8(fp)
  809c64:	10800c03 	ldbu	r2,48(r2)
  809c68:	10803fcc 	andi	r2,r2,255
  809c6c:	10800dcc 	andi	r2,r2,55
  809c70:	1005003a 	cmpeq	r2,r2,zero
  809c74:	10000b1e 	bne	r2,zero,809ca4 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  809c78:	e0bffe17 	ldw	r2,-8(fp)
  809c7c:	10c00c03 	ldbu	r3,48(r2)
  809c80:	00bff204 	movi	r2,-56
  809c84:	1884703a 	and	r2,r3,r2
  809c88:	1007883a 	mov	r3,r2
  809c8c:	e0bffe17 	ldw	r2,-8(fp)
  809c90:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  809c94:	e0fffe17 	ldw	r3,-8(fp)
  809c98:	00800044 	movi	r2,1
  809c9c:	18800c45 	stb	r2,49(r3)
  809ca0:	00000206 	br	809cac <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  809ca4:	e0bffe17 	ldw	r2,-8(fp)
  809ca8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  809cac:	e0bffe17 	ldw	r2,-8(fp)
  809cb0:	10800c03 	ldbu	r2,48(r2)
  809cb4:	10803fcc 	andi	r2,r2,255
  809cb8:	1080020c 	andi	r2,r2,8
  809cbc:	1004c03a 	cmpne	r2,r2,zero
  809cc0:	1000151e 	bne	r2,zero,809d18 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  809cc4:	e0bffe17 	ldw	r2,-8(fp)
  809cc8:	10c00d83 	ldbu	r3,54(r2)
  809ccc:	d0a04d03 	ldbu	r2,-32460(gp)
  809cd0:	1884b03a 	or	r2,r3,r2
  809cd4:	d0a04d05 	stb	r2,-32460(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  809cd8:	e0bffe17 	ldw	r2,-8(fp)
  809cdc:	10800d03 	ldbu	r2,52(r2)
  809ce0:	11003fcc 	andi	r4,r2,255
  809ce4:	e0bffe17 	ldw	r2,-8(fp)
  809ce8:	10800d03 	ldbu	r2,52(r2)
  809cec:	10c03fcc 	andi	r3,r2,255
  809cf0:	d0a04d44 	addi	r2,gp,-32459
  809cf4:	1885883a 	add	r2,r3,r2
  809cf8:	10c00003 	ldbu	r3,0(r2)
  809cfc:	e0bffe17 	ldw	r2,-8(fp)
  809d00:	10800d43 	ldbu	r2,53(r2)
  809d04:	1884b03a 	or	r2,r3,r2
  809d08:	1007883a 	mov	r3,r2
  809d0c:	d0a04d44 	addi	r2,gp,-32459
  809d10:	2085883a 	add	r2,r4,r2
  809d14:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  809d18:	e0bffe17 	ldw	r2,-8(fp)
  809d1c:	10800517 	ldw	r2,20(r2)
  809d20:	e0bffe15 	stw	r2,-8(fp)
  809d24:	e0bffc17 	ldw	r2,-16(fp)
  809d28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809d2c:	e0bff817 	ldw	r2,-32(fp)
  809d30:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  809d34:	e0bffe17 	ldw	r2,-8(fp)
  809d38:	10800c83 	ldbu	r2,50(r2)
  809d3c:	10803fcc 	andi	r2,r2,255
  809d40:	10800518 	cmpnei	r2,r2,20
  809d44:	103fae1e 	bne	r2,zero,809c00 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  809d48:	e037883a 	mov	sp,fp
  809d4c:	dfc00117 	ldw	ra,4(sp)
  809d50:	df000017 	ldw	fp,0(sp)
  809d54:	dec00204 	addi	sp,sp,8
  809d58:	f800283a 	ret

00809d5c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  809d5c:	deffff04 	addi	sp,sp,-4
  809d60:	df000015 	stw	fp,0(sp)
  809d64:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  809d68:	00804784 	movi	r2,286
}
  809d6c:	e037883a 	mov	sp,fp
  809d70:	df000017 	ldw	fp,0(sp)
  809d74:	dec00104 	addi	sp,sp,4
  809d78:	f800283a 	ret

00809d7c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  809d7c:	deffff04 	addi	sp,sp,-4
  809d80:	df000015 	stw	fp,0(sp)
  809d84:	d839883a 	mov	fp,sp
}
  809d88:	e037883a 	mov	sp,fp
  809d8c:	df000017 	ldw	fp,0(sp)
  809d90:	dec00104 	addi	sp,sp,4
  809d94:	f800283a 	ret

00809d98 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  809d98:	defff804 	addi	sp,sp,-32
  809d9c:	dfc00715 	stw	ra,28(sp)
  809da0:	df000615 	stw	fp,24(sp)
  809da4:	df000604 	addi	fp,sp,24
  809da8:	e13ffc15 	stw	r4,-16(fp)
  809dac:	e17ffd15 	stw	r5,-12(fp)
  809db0:	e1bffe05 	stb	r6,-8(fp)
  809db4:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  809db8:	e0bffc17 	ldw	r2,-16(fp)
  809dbc:	10800283 	ldbu	r2,10(r2)
  809dc0:	10c03fcc 	andi	r3,r2,255
  809dc4:	00802074 	movhi	r2,129
  809dc8:	1094dc04 	addi	r2,r2,21360
  809dcc:	10c5883a 	add	r2,r2,r3
  809dd0:	10800003 	ldbu	r2,0(r2)
  809dd4:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  809dd8:	e0fffa83 	ldbu	r3,-22(fp)
  809ddc:	e0bffc17 	ldw	r2,-16(fp)
  809de0:	1885883a 	add	r2,r3,r2
  809de4:	10800204 	addi	r2,r2,8
  809de8:	108000c3 	ldbu	r2,3(r2)
  809dec:	10c03fcc 	andi	r3,r2,255
  809df0:	00802074 	movhi	r2,129
  809df4:	1094dc04 	addi	r2,r2,21360
  809df8:	10c5883a 	add	r2,r2,r3
  809dfc:	10800003 	ldbu	r2,0(r2)
  809e00:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  809e04:	e0bffa83 	ldbu	r2,-22(fp)
  809e08:	100490fa 	slli	r2,r2,3
  809e0c:	1007883a 	mov	r3,r2
  809e10:	e0bffa43 	ldbu	r2,-23(fp)
  809e14:	1885883a 	add	r2,r3,r2
  809e18:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  809e1c:	e0bffa03 	ldbu	r2,-24(fp)
  809e20:	00c02234 	movhi	r3,136
  809e24:	18d6ab04 	addi	r3,r3,23212
  809e28:	1085883a 	add	r2,r2,r2
  809e2c:	1085883a 	add	r2,r2,r2
  809e30:	10c5883a 	add	r2,r2,r3
  809e34:	10800017 	ldw	r2,0(r2)
  809e38:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  809e3c:	e0bffb17 	ldw	r2,-20(fp)
  809e40:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  809e44:	e0fffb17 	ldw	r3,-20(fp)
  809e48:	e0bffd17 	ldw	r2,-12(fp)
  809e4c:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  809e50:	e0bffb17 	ldw	r2,-20(fp)
  809e54:	10800c03 	ldbu	r2,48(r2)
  809e58:	1007883a 	mov	r3,r2
  809e5c:	e0bffe03 	ldbu	r2,-8(fp)
  809e60:	0084303a 	nor	r2,zero,r2
  809e64:	1884703a 	and	r2,r3,r2
  809e68:	1007883a 	mov	r3,r2
  809e6c:	e0bffb17 	ldw	r2,-20(fp)
  809e70:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  809e74:	e0fffb17 	ldw	r3,-20(fp)
  809e78:	e0bfff03 	ldbu	r2,-4(fp)
  809e7c:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  809e80:	e0bffb17 	ldw	r2,-20(fp)
  809e84:	10800c03 	ldbu	r2,48(r2)
  809e88:	10803fcc 	andi	r2,r2,255
  809e8c:	1080020c 	andi	r2,r2,8
  809e90:	1004c03a 	cmpne	r2,r2,zero
  809e94:	1000111e 	bne	r2,zero,809edc <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  809e98:	e0bffb17 	ldw	r2,-20(fp)
  809e9c:	10c00d83 	ldbu	r3,54(r2)
  809ea0:	d0a04d03 	ldbu	r2,-32460(gp)
  809ea4:	1884b03a 	or	r2,r3,r2
  809ea8:	d0a04d05 	stb	r2,-32460(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  809eac:	e13ffa83 	ldbu	r4,-22(fp)
  809eb0:	e0fffa83 	ldbu	r3,-22(fp)
  809eb4:	d0a04d44 	addi	r2,gp,-32459
  809eb8:	1885883a 	add	r2,r3,r2
  809ebc:	10c00003 	ldbu	r3,0(r2)
  809ec0:	e0bffb17 	ldw	r2,-20(fp)
  809ec4:	10800d43 	ldbu	r2,53(r2)
  809ec8:	1884b03a 	or	r2,r3,r2
  809ecc:	1007883a 	mov	r3,r2
  809ed0:	d0a04d44 	addi	r2,gp,-32459
  809ed4:	2085883a 	add	r2,r4,r2
  809ed8:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  809edc:	e13ffb17 	ldw	r4,-20(fp)
  809ee0:	e17ffc17 	ldw	r5,-16(fp)
  809ee4:	080a1900 	call	80a190 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  809ee8:	e0bffb17 	ldw	r2,-20(fp)
  809eec:	10800817 	ldw	r2,32(r2)
  809ef0:	1005003a 	cmpeq	r2,r2,zero
  809ef4:	1000071e 	bne	r2,zero,809f14 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  809ef8:	e0bffb17 	ldw	r2,-20(fp)
  809efc:	11400817 	ldw	r5,32(r2)
  809f00:	e13ffb17 	ldw	r4,-20(fp)
  809f04:	080a2480 	call	80a248 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  809f08:	e0fffb17 	ldw	r3,-20(fp)
  809f0c:	e0bffc17 	ldw	r2,-16(fp)
  809f10:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  809f14:	e0bffa03 	ldbu	r2,-24(fp)
}
  809f18:	e037883a 	mov	sp,fp
  809f1c:	dfc00117 	ldw	ra,4(sp)
  809f20:	df000017 	ldw	fp,0(sp)
  809f24:	dec00204 	addi	sp,sp,8
  809f28:	f800283a 	ret

00809f2c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  809f2c:	defffd04 	addi	sp,sp,-12
  809f30:	df000215 	stw	fp,8(sp)
  809f34:	df000204 	addi	fp,sp,8
  809f38:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  809f3c:	d0e05017 	ldw	r3,-32448(gp)
  809f40:	e0bfff17 	ldw	r2,-4(fp)
  809f44:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  809f48:	d0a05017 	ldw	r2,-32448(gp)
  809f4c:	10800d03 	ldbu	r2,52(r2)
  809f50:	11003fcc 	andi	r4,r2,255
  809f54:	d0a05017 	ldw	r2,-32448(gp)
  809f58:	10800d03 	ldbu	r2,52(r2)
  809f5c:	10c03fcc 	andi	r3,r2,255
  809f60:	e0bfff17 	ldw	r2,-4(fp)
  809f64:	1885883a 	add	r2,r3,r2
  809f68:	10800204 	addi	r2,r2,8
  809f6c:	10c000c3 	ldbu	r3,3(r2)
  809f70:	d0a05017 	ldw	r2,-32448(gp)
  809f74:	10800d43 	ldbu	r2,53(r2)
  809f78:	1884b03a 	or	r2,r3,r2
  809f7c:	1007883a 	mov	r3,r2
  809f80:	e0bfff17 	ldw	r2,-4(fp)
  809f84:	2085883a 	add	r2,r4,r2
  809f88:	10800204 	addi	r2,r2,8
  809f8c:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  809f90:	e0bfff17 	ldw	r2,-4(fp)
  809f94:	10c00283 	ldbu	r3,10(r2)
  809f98:	d0a05017 	ldw	r2,-32448(gp)
  809f9c:	10800d83 	ldbu	r2,54(r2)
  809fa0:	1884b03a 	or	r2,r3,r2
  809fa4:	1007883a 	mov	r3,r2
  809fa8:	e0bfff17 	ldw	r2,-4(fp)
  809fac:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  809fb0:	d0a05017 	ldw	r2,-32448(gp)
  809fb4:	10800d03 	ldbu	r2,52(r2)
  809fb8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  809fbc:	e13ffe03 	ldbu	r4,-8(fp)
  809fc0:	e0fffe03 	ldbu	r3,-8(fp)
  809fc4:	d0a04d44 	addi	r2,gp,-32459
  809fc8:	1885883a 	add	r2,r3,r2
  809fcc:	10800003 	ldbu	r2,0(r2)
  809fd0:	1007883a 	mov	r3,r2
  809fd4:	d0a05017 	ldw	r2,-32448(gp)
  809fd8:	10800d43 	ldbu	r2,53(r2)
  809fdc:	0084303a 	nor	r2,zero,r2
  809fe0:	1884703a 	and	r2,r3,r2
  809fe4:	1007883a 	mov	r3,r2
  809fe8:	d0a04d44 	addi	r2,gp,-32459
  809fec:	2085883a 	add	r2,r4,r2
  809ff0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  809ff4:	e0fffe03 	ldbu	r3,-8(fp)
  809ff8:	d0a04d44 	addi	r2,gp,-32459
  809ffc:	1885883a 	add	r2,r3,r2
  80a000:	10800003 	ldbu	r2,0(r2)
  80a004:	10803fcc 	andi	r2,r2,255
  80a008:	1004c03a 	cmpne	r2,r2,zero
  80a00c:	1000071e 	bne	r2,zero,80a02c <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80a010:	d0a05017 	ldw	r2,-32448(gp)
  80a014:	10800d83 	ldbu	r2,54(r2)
  80a018:	0084303a 	nor	r2,zero,r2
  80a01c:	1007883a 	mov	r3,r2
  80a020:	d0a04d03 	ldbu	r2,-32460(gp)
  80a024:	1884703a 	and	r2,r3,r2
  80a028:	d0a04d05 	stb	r2,-32460(gp)
    }
}
  80a02c:	e037883a 	mov	sp,fp
  80a030:	df000017 	ldw	fp,0(sp)
  80a034:	dec00104 	addi	sp,sp,4
  80a038:	f800283a 	ret

0080a03c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80a03c:	defffb04 	addi	sp,sp,-20
  80a040:	df000415 	stw	fp,16(sp)
  80a044:	df000404 	addi	fp,sp,16
  80a048:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80a04c:	d0a05017 	ldw	r2,-32448(gp)
  80a050:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80a054:	d0e05017 	ldw	r3,-32448(gp)
  80a058:	e0bfff17 	ldw	r2,-4(fp)
  80a05c:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  80a060:	e0bfff17 	ldw	r2,-4(fp)
  80a064:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80a068:	e0bffe17 	ldw	r2,-8(fp)
  80a06c:	10800017 	ldw	r2,0(r2)
  80a070:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80a074:	00002006 	br	80a0f8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80a078:	d0a05017 	ldw	r2,-32448(gp)
  80a07c:	10800d03 	ldbu	r2,52(r2)
  80a080:	11003fcc 	andi	r4,r2,255
  80a084:	d0a05017 	ldw	r2,-32448(gp)
  80a088:	10800d03 	ldbu	r2,52(r2)
  80a08c:	10c03fcc 	andi	r3,r2,255
  80a090:	e0bffd17 	ldw	r2,-12(fp)
  80a094:	1885883a 	add	r2,r3,r2
  80a098:	10800204 	addi	r2,r2,8
  80a09c:	10c000c3 	ldbu	r3,3(r2)
  80a0a0:	d0a05017 	ldw	r2,-32448(gp)
  80a0a4:	10800d43 	ldbu	r2,53(r2)
  80a0a8:	1884b03a 	or	r2,r3,r2
  80a0ac:	1007883a 	mov	r3,r2
  80a0b0:	e0bffd17 	ldw	r2,-12(fp)
  80a0b4:	2085883a 	add	r2,r4,r2
  80a0b8:	10800204 	addi	r2,r2,8
  80a0bc:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80a0c0:	e0bffd17 	ldw	r2,-12(fp)
  80a0c4:	10c00283 	ldbu	r3,10(r2)
  80a0c8:	d0a05017 	ldw	r2,-32448(gp)
  80a0cc:	10800d83 	ldbu	r2,54(r2)
  80a0d0:	1884b03a 	or	r2,r3,r2
  80a0d4:	1007883a 	mov	r3,r2
  80a0d8:	e0bffd17 	ldw	r2,-12(fp)
  80a0dc:	10c00285 	stb	r3,10(r2)
        pevents++;
  80a0e0:	e0bffe17 	ldw	r2,-8(fp)
  80a0e4:	10800104 	addi	r2,r2,4
  80a0e8:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  80a0ec:	e0bffe17 	ldw	r2,-8(fp)
  80a0f0:	10800017 	ldw	r2,0(r2)
  80a0f4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80a0f8:	e0bffd17 	ldw	r2,-12(fp)
  80a0fc:	1004c03a 	cmpne	r2,r2,zero
  80a100:	103fdd1e 	bne	r2,zero,80a078 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80a104:	d0a05017 	ldw	r2,-32448(gp)
  80a108:	10800d03 	ldbu	r2,52(r2)
  80a10c:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80a110:	e13ffc03 	ldbu	r4,-16(fp)
  80a114:	e0fffc03 	ldbu	r3,-16(fp)
  80a118:	d0a04d44 	addi	r2,gp,-32459
  80a11c:	1885883a 	add	r2,r3,r2
  80a120:	10800003 	ldbu	r2,0(r2)
  80a124:	1007883a 	mov	r3,r2
  80a128:	d0a05017 	ldw	r2,-32448(gp)
  80a12c:	10800d43 	ldbu	r2,53(r2)
  80a130:	0084303a 	nor	r2,zero,r2
  80a134:	1884703a 	and	r2,r3,r2
  80a138:	1007883a 	mov	r3,r2
  80a13c:	d0a04d44 	addi	r2,gp,-32459
  80a140:	2085883a 	add	r2,r4,r2
  80a144:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80a148:	e0fffc03 	ldbu	r3,-16(fp)
  80a14c:	d0a04d44 	addi	r2,gp,-32459
  80a150:	1885883a 	add	r2,r3,r2
  80a154:	10800003 	ldbu	r2,0(r2)
  80a158:	10803fcc 	andi	r2,r2,255
  80a15c:	1004c03a 	cmpne	r2,r2,zero
  80a160:	1000071e 	bne	r2,zero,80a180 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80a164:	d0a05017 	ldw	r2,-32448(gp)
  80a168:	10800d83 	ldbu	r2,54(r2)
  80a16c:	0084303a 	nor	r2,zero,r2
  80a170:	1007883a 	mov	r3,r2
  80a174:	d0a04d03 	ldbu	r2,-32460(gp)
  80a178:	1884703a 	and	r2,r3,r2
  80a17c:	d0a04d05 	stb	r2,-32460(gp)
    }
}
  80a180:	e037883a 	mov	sp,fp
  80a184:	df000017 	ldw	fp,0(sp)
  80a188:	dec00104 	addi	sp,sp,4
  80a18c:	f800283a 	ret

0080a190 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80a190:	defffc04 	addi	sp,sp,-16
  80a194:	df000315 	stw	fp,12(sp)
  80a198:	df000304 	addi	fp,sp,12
  80a19c:	e13ffe15 	stw	r4,-8(fp)
  80a1a0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80a1a4:	e0bffe17 	ldw	r2,-8(fp)
  80a1a8:	10800d03 	ldbu	r2,52(r2)
  80a1ac:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80a1b0:	e13ffd03 	ldbu	r4,-12(fp)
  80a1b4:	e0fffd03 	ldbu	r3,-12(fp)
  80a1b8:	e0bfff17 	ldw	r2,-4(fp)
  80a1bc:	1885883a 	add	r2,r3,r2
  80a1c0:	10800204 	addi	r2,r2,8
  80a1c4:	108000c3 	ldbu	r2,3(r2)
  80a1c8:	1007883a 	mov	r3,r2
  80a1cc:	e0bffe17 	ldw	r2,-8(fp)
  80a1d0:	10800d43 	ldbu	r2,53(r2)
  80a1d4:	0084303a 	nor	r2,zero,r2
  80a1d8:	1884703a 	and	r2,r3,r2
  80a1dc:	1007883a 	mov	r3,r2
  80a1e0:	e0bfff17 	ldw	r2,-4(fp)
  80a1e4:	2085883a 	add	r2,r4,r2
  80a1e8:	10800204 	addi	r2,r2,8
  80a1ec:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80a1f0:	e0fffd03 	ldbu	r3,-12(fp)
  80a1f4:	e0bfff17 	ldw	r2,-4(fp)
  80a1f8:	1885883a 	add	r2,r3,r2
  80a1fc:	10800204 	addi	r2,r2,8
  80a200:	108000c3 	ldbu	r2,3(r2)
  80a204:	10803fcc 	andi	r2,r2,255
  80a208:	1004c03a 	cmpne	r2,r2,zero
  80a20c:	10000a1e 	bne	r2,zero,80a238 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80a210:	e0bfff17 	ldw	r2,-4(fp)
  80a214:	10800283 	ldbu	r2,10(r2)
  80a218:	1007883a 	mov	r3,r2
  80a21c:	e0bffe17 	ldw	r2,-8(fp)
  80a220:	10800d83 	ldbu	r2,54(r2)
  80a224:	0084303a 	nor	r2,zero,r2
  80a228:	1884703a 	and	r2,r3,r2
  80a22c:	1007883a 	mov	r3,r2
  80a230:	e0bfff17 	ldw	r2,-4(fp)
  80a234:	10c00285 	stb	r3,10(r2)
    }
}
  80a238:	e037883a 	mov	sp,fp
  80a23c:	df000017 	ldw	fp,0(sp)
  80a240:	dec00104 	addi	sp,sp,4
  80a244:	f800283a 	ret

0080a248 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80a248:	defffa04 	addi	sp,sp,-24
  80a24c:	df000515 	stw	fp,20(sp)
  80a250:	df000504 	addi	fp,sp,20
  80a254:	e13ffe15 	stw	r4,-8(fp)
  80a258:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80a25c:	e0bffe17 	ldw	r2,-8(fp)
  80a260:	10800d03 	ldbu	r2,52(r2)
  80a264:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80a268:	e0bffe17 	ldw	r2,-8(fp)
  80a26c:	10800d83 	ldbu	r2,54(r2)
  80a270:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  80a274:	e0bffe17 	ldw	r2,-8(fp)
  80a278:	10800d43 	ldbu	r2,53(r2)
  80a27c:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  80a280:	e0bfff17 	ldw	r2,-4(fp)
  80a284:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80a288:	e0bffd17 	ldw	r2,-12(fp)
  80a28c:	10800017 	ldw	r2,0(r2)
  80a290:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80a294:	00002606 	br	80a330 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80a298:	e13ffb83 	ldbu	r4,-18(fp)
  80a29c:	e0fffb83 	ldbu	r3,-18(fp)
  80a2a0:	e0bffc17 	ldw	r2,-16(fp)
  80a2a4:	1885883a 	add	r2,r3,r2
  80a2a8:	10800204 	addi	r2,r2,8
  80a2ac:	108000c3 	ldbu	r2,3(r2)
  80a2b0:	1007883a 	mov	r3,r2
  80a2b4:	e0bffb03 	ldbu	r2,-20(fp)
  80a2b8:	0084303a 	nor	r2,zero,r2
  80a2bc:	1884703a 	and	r2,r3,r2
  80a2c0:	1007883a 	mov	r3,r2
  80a2c4:	e0bffc17 	ldw	r2,-16(fp)
  80a2c8:	2085883a 	add	r2,r4,r2
  80a2cc:	10800204 	addi	r2,r2,8
  80a2d0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80a2d4:	e0fffb83 	ldbu	r3,-18(fp)
  80a2d8:	e0bffc17 	ldw	r2,-16(fp)
  80a2dc:	1885883a 	add	r2,r3,r2
  80a2e0:	10800204 	addi	r2,r2,8
  80a2e4:	108000c3 	ldbu	r2,3(r2)
  80a2e8:	10803fcc 	andi	r2,r2,255
  80a2ec:	1004c03a 	cmpne	r2,r2,zero
  80a2f0:	1000091e 	bne	r2,zero,80a318 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  80a2f4:	e0bffc17 	ldw	r2,-16(fp)
  80a2f8:	10800283 	ldbu	r2,10(r2)
  80a2fc:	1007883a 	mov	r3,r2
  80a300:	e0bffb43 	ldbu	r2,-19(fp)
  80a304:	0084303a 	nor	r2,zero,r2
  80a308:	1884703a 	and	r2,r3,r2
  80a30c:	1007883a 	mov	r3,r2
  80a310:	e0bffc17 	ldw	r2,-16(fp)
  80a314:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80a318:	e0bffd17 	ldw	r2,-12(fp)
  80a31c:	10800104 	addi	r2,r2,4
  80a320:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  80a324:	e0bffd17 	ldw	r2,-12(fp)
  80a328:	10800017 	ldw	r2,0(r2)
  80a32c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80a330:	e0bffc17 	ldw	r2,-16(fp)
  80a334:	1004c03a 	cmpne	r2,r2,zero
  80a338:	103fd71e 	bne	r2,zero,80a298 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80a33c:	e037883a 	mov	sp,fp
  80a340:	df000017 	ldw	fp,0(sp)
  80a344:	dec00104 	addi	sp,sp,4
  80a348:	f800283a 	ret

0080a34c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80a34c:	defffc04 	addi	sp,sp,-16
  80a350:	df000315 	stw	fp,12(sp)
  80a354:	df000304 	addi	fp,sp,12
  80a358:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80a35c:	e0bfff17 	ldw	r2,-4(fp)
  80a360:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80a364:	e0bfff17 	ldw	r2,-4(fp)
  80a368:	108002c4 	addi	r2,r2,11
  80a36c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80a370:	e03ffd05 	stb	zero,-12(fp)
  80a374:	00000806 	br	80a398 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80a378:	e0bffe17 	ldw	r2,-8(fp)
  80a37c:	10000005 	stb	zero,0(r2)
  80a380:	e0bffe17 	ldw	r2,-8(fp)
  80a384:	10800044 	addi	r2,r2,1
  80a388:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80a38c:	e0bffd03 	ldbu	r2,-12(fp)
  80a390:	10800044 	addi	r2,r2,1
  80a394:	e0bffd05 	stb	r2,-12(fp)
  80a398:	e0bffd03 	ldbu	r2,-12(fp)
  80a39c:	108000f0 	cmpltui	r2,r2,3
  80a3a0:	103ff51e 	bne	r2,zero,80a378 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  80a3a4:	e037883a 	mov	sp,fp
  80a3a8:	df000017 	ldw	fp,0(sp)
  80a3ac:	dec00104 	addi	sp,sp,4
  80a3b0:	f800283a 	ret

0080a3b4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80a3b4:	defffb04 	addi	sp,sp,-20
  80a3b8:	dfc00415 	stw	ra,16(sp)
  80a3bc:	df000315 	stw	fp,12(sp)
  80a3c0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80a3c4:	01002234 	movhi	r4,136
  80a3c8:	21129704 	addi	r4,r4,19036
  80a3cc:	0142d004 	movi	r5,2880
  80a3d0:	080a7180 	call	80a718 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80a3d4:	00802234 	movhi	r2,136
  80a3d8:	10929704 	addi	r2,r2,19036
  80a3dc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80a3e0:	00802234 	movhi	r2,136
  80a3e4:	1092a304 	addi	r2,r2,19084
  80a3e8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80a3ec:	e03fff0d 	sth	zero,-4(fp)
  80a3f0:	00001306 	br	80a440 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80a3f4:	e0bffe17 	ldw	r2,-8(fp)
  80a3f8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80a3fc:	e0fffe17 	ldw	r3,-8(fp)
  80a400:	e0bffd17 	ldw	r2,-12(fp)
  80a404:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80a408:	e0fffe17 	ldw	r3,-8(fp)
  80a40c:	00800fc4 	movi	r2,63
  80a410:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80a414:	e0bffe17 	ldw	r2,-8(fp)
  80a418:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80a41c:	e0bffe17 	ldw	r2,-8(fp)
  80a420:	10800c04 	addi	r2,r2,48
  80a424:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80a428:	e0bffd17 	ldw	r2,-12(fp)
  80a42c:	10800c04 	addi	r2,r2,48
  80a430:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80a434:	e0bfff0b 	ldhu	r2,-4(fp)
  80a438:	10800044 	addi	r2,r2,1
  80a43c:	e0bfff0d 	sth	r2,-4(fp)
  80a440:	e0bfff0b 	ldhu	r2,-4(fp)
  80a444:	10800ef0 	cmpltui	r2,r2,59
  80a448:	103fea1e 	bne	r2,zero,80a3f4 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80a44c:	e0bffe17 	ldw	r2,-8(fp)
  80a450:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80a454:	e0bffe17 	ldw	r2,-8(fp)
  80a458:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80a45c:	e0fffe17 	ldw	r3,-8(fp)
  80a460:	00800fc4 	movi	r2,63
  80a464:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80a468:	e0bffe17 	ldw	r2,-8(fp)
  80a46c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80a470:	00802234 	movhi	r2,136
  80a474:	10929704 	addi	r2,r2,19036
  80a478:	d0a04e15 	stw	r2,-32456(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80a47c:	e037883a 	mov	sp,fp
  80a480:	dfc00117 	ldw	ra,4(sp)
  80a484:	df000017 	ldw	fp,0(sp)
  80a488:	dec00204 	addi	sp,sp,8
  80a48c:	f800283a 	ret

0080a490 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80a490:	deffff04 	addi	sp,sp,-4
  80a494:	df000015 	stw	fp,0(sp)
  80a498:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80a49c:	d0205115 	stw	zero,-32444(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80a4a0:	d0204f05 	stb	zero,-32452(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80a4a4:	d0204105 	stb	zero,-32508(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80a4a8:	d0204945 	stb	zero,-32475(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80a4ac:	d0204145 	stb	zero,-32507(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80a4b0:	d0204615 	stw	zero,-32488(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80a4b4:	d0204215 	stw	zero,-32504(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80a4b8:	d0205415 	stw	zero,-32432(gp)
    OSIdleCtrMax  = 0L;
  80a4bc:	d0204715 	stw	zero,-32484(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80a4c0:	d0205305 	stb	zero,-32436(gp)
#endif
}
  80a4c4:	e037883a 	mov	sp,fp
  80a4c8:	df000017 	ldw	fp,0(sp)
  80a4cc:	dec00104 	addi	sp,sp,4
  80a4d0:	f800283a 	ret

0080a4d4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80a4d4:	defffd04 	addi	sp,sp,-12
  80a4d8:	df000215 	stw	fp,8(sp)
  80a4dc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80a4e0:	d0204d05 	stb	zero,-32460(gp)
    prdytbl       = &OSRdyTbl[0];
  80a4e4:	d0a04d44 	addi	r2,gp,-32459
  80a4e8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80a4ec:	e03fff05 	stb	zero,-4(fp)
  80a4f0:	00000806 	br	80a514 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  80a4f4:	e0bffe17 	ldw	r2,-8(fp)
  80a4f8:	10000005 	stb	zero,0(r2)
  80a4fc:	e0bffe17 	ldw	r2,-8(fp)
  80a500:	10800044 	addi	r2,r2,1
  80a504:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80a508:	e0bfff03 	ldbu	r2,-4(fp)
  80a50c:	10800044 	addi	r2,r2,1
  80a510:	e0bfff05 	stb	r2,-4(fp)
  80a514:	e0bfff03 	ldbu	r2,-4(fp)
  80a518:	108000f0 	cmpltui	r2,r2,3
  80a51c:	103ff51e 	bne	r2,zero,80a4f4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80a520:	d0204345 	stb	zero,-32499(gp)
    OSPrioHighRdy = 0;
  80a524:	d0204305 	stb	zero,-32500(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80a528:	d0204b15 	stw	zero,-32468(gp)
    OSTCBCur      = (OS_TCB *)0;
  80a52c:	d0205015 	stw	zero,-32448(gp)
}
  80a530:	e037883a 	mov	sp,fp
  80a534:	df000017 	ldw	fp,0(sp)
  80a538:	dec00104 	addi	sp,sp,4
  80a53c:	f800283a 	ret

0080a540 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80a540:	defff804 	addi	sp,sp,-32
  80a544:	dfc00715 	stw	ra,28(sp)
  80a548:	df000615 	stw	fp,24(sp)
  80a54c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80a550:	01802234 	movhi	r6,136
  80a554:	31929604 	addi	r6,r6,19032
  80a558:	00bfffd4 	movui	r2,65535
  80a55c:	d8800015 	stw	r2,0(sp)
  80a560:	00802234 	movhi	r2,136
  80a564:	10909704 	addi	r2,r2,16988
  80a568:	d8800115 	stw	r2,4(sp)
  80a56c:	00808004 	movi	r2,512
  80a570:	d8800215 	stw	r2,8(sp)
  80a574:	d8000315 	stw	zero,12(sp)
  80a578:	008000c4 	movi	r2,3
  80a57c:	d8800415 	stw	r2,16(sp)
  80a580:	01002074 	movhi	r4,129
  80a584:	212a7d04 	addi	r4,r4,-22028
  80a588:	000b883a 	mov	r5,zero
  80a58c:	01c00504 	movi	r7,20
  80a590:	080f7d40 	call	80f7d4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  80a594:	01402074 	movhi	r5,129
  80a598:	29551c04 	addi	r5,r5,21616
  80a59c:	01000504 	movi	r4,20
  80a5a0:	e1bfff04 	addi	r6,fp,-4
  80a5a4:	08101080 	call	810108 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80a5a8:	e037883a 	mov	sp,fp
  80a5ac:	dfc00117 	ldw	ra,4(sp)
  80a5b0:	df000017 	ldw	fp,0(sp)
  80a5b4:	dec00204 	addi	sp,sp,8
  80a5b8:	f800283a 	ret

0080a5bc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80a5bc:	defff804 	addi	sp,sp,-32
  80a5c0:	dfc00715 	stw	ra,28(sp)
  80a5c4:	df000615 	stw	fp,24(sp)
  80a5c8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80a5cc:	01802234 	movhi	r6,136
  80a5d0:	31901e04 	addi	r6,r6,16504
  80a5d4:	00bfff94 	movui	r2,65534
  80a5d8:	d8800015 	stw	r2,0(sp)
  80a5dc:	00802234 	movhi	r2,136
  80a5e0:	108e1f04 	addi	r2,r2,14460
  80a5e4:	d8800115 	stw	r2,4(sp)
  80a5e8:	00808004 	movi	r2,512
  80a5ec:	d8800215 	stw	r2,8(sp)
  80a5f0:	d8000315 	stw	zero,12(sp)
  80a5f4:	008000c4 	movi	r2,3
  80a5f8:	d8800415 	stw	r2,16(sp)
  80a5fc:	01002074 	movhi	r4,129
  80a600:	212a9404 	addi	r4,r4,-21936
  80a604:	000b883a 	mov	r5,zero
  80a608:	01c004c4 	movi	r7,19
  80a60c:	080f7d40 	call	80f7d4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80a610:	01402074 	movhi	r5,129
  80a614:	29552004 	addi	r5,r5,21632
  80a618:	010004c4 	movi	r4,19
  80a61c:	e1bfff04 	addi	r6,fp,-4
  80a620:	08101080 	call	810108 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  80a624:	e037883a 	mov	sp,fp
  80a628:	dfc00117 	ldw	ra,4(sp)
  80a62c:	df000017 	ldw	fp,0(sp)
  80a630:	dec00204 	addi	sp,sp,8
  80a634:	f800283a 	ret

0080a638 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80a638:	defffb04 	addi	sp,sp,-20
  80a63c:	dfc00415 	stw	ra,16(sp)
  80a640:	df000315 	stw	fp,12(sp)
  80a644:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80a648:	01002234 	movhi	r4,136
  80a64c:	21156704 	addi	r4,r4,21916
  80a650:	01414404 	movi	r5,1296
  80a654:	080a7180 	call	80a718 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80a658:	01002234 	movhi	r4,136
  80a65c:	2116ab04 	addi	r4,r4,23212
  80a660:	01401504 	movi	r5,84
  80a664:	080a7180 	call	80a718 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80a668:	00802234 	movhi	r2,136
  80a66c:	10956704 	addi	r2,r2,21916
  80a670:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  80a674:	00802234 	movhi	r2,136
  80a678:	10958204 	addi	r2,r2,22024
  80a67c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80a680:	e03fff05 	stb	zero,-4(fp)
  80a684:	00001106 	br	80a6cc <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80a688:	e0fffe17 	ldw	r3,-8(fp)
  80a68c:	e0bffd17 	ldw	r2,-12(fp)
  80a690:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80a694:	e0fffe17 	ldw	r3,-8(fp)
  80a698:	00800fc4 	movi	r2,63
  80a69c:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80a6a0:	e0bffe17 	ldw	r2,-8(fp)
  80a6a4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80a6a8:	e0bffe17 	ldw	r2,-8(fp)
  80a6ac:	10801b04 	addi	r2,r2,108
  80a6b0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80a6b4:	e0bffd17 	ldw	r2,-12(fp)
  80a6b8:	10801b04 	addi	r2,r2,108
  80a6bc:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80a6c0:	e0bfff03 	ldbu	r2,-4(fp)
  80a6c4:	10800044 	addi	r2,r2,1
  80a6c8:	e0bfff05 	stb	r2,-4(fp)
  80a6cc:	e0bfff03 	ldbu	r2,-4(fp)
  80a6d0:	108002f0 	cmpltui	r2,r2,11
  80a6d4:	103fec1e 	bne	r2,zero,80a688 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80a6d8:	e0bffe17 	ldw	r2,-8(fp)
  80a6dc:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80a6e0:	e0fffe17 	ldw	r3,-8(fp)
  80a6e4:	00800fc4 	movi	r2,63
  80a6e8:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80a6ec:	e0bffe17 	ldw	r2,-8(fp)
  80a6f0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80a6f4:	d0204415 	stw	zero,-32496(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80a6f8:	00802234 	movhi	r2,136
  80a6fc:	10956704 	addi	r2,r2,21916
  80a700:	d0a04815 	stw	r2,-32480(gp)
}
  80a704:	e037883a 	mov	sp,fp
  80a708:	dfc00117 	ldw	ra,4(sp)
  80a70c:	df000017 	ldw	fp,0(sp)
  80a710:	dec00204 	addi	sp,sp,8
  80a714:	f800283a 	ret

0080a718 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  80a718:	defffd04 	addi	sp,sp,-12
  80a71c:	df000215 	stw	fp,8(sp)
  80a720:	df000204 	addi	fp,sp,8
  80a724:	e13ffe15 	stw	r4,-8(fp)
  80a728:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  80a72c:	00000806 	br	80a750 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80a730:	e0bffe17 	ldw	r2,-8(fp)
  80a734:	10000005 	stb	zero,0(r2)
  80a738:	e0bffe17 	ldw	r2,-8(fp)
  80a73c:	10800044 	addi	r2,r2,1
  80a740:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80a744:	e0bfff0b 	ldhu	r2,-4(fp)
  80a748:	10bfffc4 	addi	r2,r2,-1
  80a74c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80a750:	e0bfff0b 	ldhu	r2,-4(fp)
  80a754:	1004c03a 	cmpne	r2,r2,zero
  80a758:	103ff51e 	bne	r2,zero,80a730 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  80a75c:	e037883a 	mov	sp,fp
  80a760:	df000017 	ldw	fp,0(sp)
  80a764:	dec00104 	addi	sp,sp,4
  80a768:	f800283a 	ret

0080a76c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  80a76c:	defffc04 	addi	sp,sp,-16
  80a770:	df000315 	stw	fp,12(sp)
  80a774:	df000304 	addi	fp,sp,12
  80a778:	e13ffd15 	stw	r4,-12(fp)
  80a77c:	e17ffe15 	stw	r5,-8(fp)
  80a780:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  80a784:	00000d06 	br	80a7bc <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  80a788:	e0bffe17 	ldw	r2,-8(fp)
  80a78c:	10c00003 	ldbu	r3,0(r2)
  80a790:	e0bffd17 	ldw	r2,-12(fp)
  80a794:	10c00005 	stb	r3,0(r2)
  80a798:	e0bffd17 	ldw	r2,-12(fp)
  80a79c:	10800044 	addi	r2,r2,1
  80a7a0:	e0bffd15 	stw	r2,-12(fp)
  80a7a4:	e0bffe17 	ldw	r2,-8(fp)
  80a7a8:	10800044 	addi	r2,r2,1
  80a7ac:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80a7b0:	e0bfff0b 	ldhu	r2,-4(fp)
  80a7b4:	10bfffc4 	addi	r2,r2,-1
  80a7b8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  80a7bc:	e0bfff0b 	ldhu	r2,-4(fp)
  80a7c0:	1004c03a 	cmpne	r2,r2,zero
  80a7c4:	103ff01e 	bne	r2,zero,80a788 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  80a7c8:	e037883a 	mov	sp,fp
  80a7cc:	df000017 	ldw	fp,0(sp)
  80a7d0:	dec00104 	addi	sp,sp,4
  80a7d4:	f800283a 	ret

0080a7d8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80a7d8:	defffb04 	addi	sp,sp,-20
  80a7dc:	dfc00415 	stw	ra,16(sp)
  80a7e0:	df000315 	stw	fp,12(sp)
  80a7e4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80a7e8:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a7ec:	0005303a 	rdctl	r2,status
  80a7f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a7f4:	e0fffe17 	ldw	r3,-8(fp)
  80a7f8:	00bfff84 	movi	r2,-2
  80a7fc:	1884703a 	and	r2,r3,r2
  80a800:	1001703a 	wrctl	status,r2
  
  return context;
  80a804:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80a808:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80a80c:	d0a04f03 	ldbu	r2,-32452(gp)
  80a810:	10803fcc 	andi	r2,r2,255
  80a814:	1004c03a 	cmpne	r2,r2,zero
  80a818:	10001b1e 	bne	r2,zero,80a888 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  80a81c:	d0a04103 	ldbu	r2,-32508(gp)
  80a820:	10803fcc 	andi	r2,r2,255
  80a824:	1004c03a 	cmpne	r2,r2,zero
  80a828:	1000171e 	bne	r2,zero,80a888 <OS_Sched+0xb0>
            OS_SchedNew();
  80a82c:	080a8ac0 	call	80a8ac <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80a830:	d0a04303 	ldbu	r2,-32500(gp)
  80a834:	d0e04343 	ldbu	r3,-32499(gp)
  80a838:	11003fcc 	andi	r4,r2,255
  80a83c:	18803fcc 	andi	r2,r3,255
  80a840:	20801126 	beq	r4,r2,80a888 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  80a844:	d0a04303 	ldbu	r2,-32500(gp)
  80a848:	10803fcc 	andi	r2,r2,255
  80a84c:	00c02234 	movhi	r3,136
  80a850:	18d6ab04 	addi	r3,r3,23212
  80a854:	1085883a 	add	r2,r2,r2
  80a858:	1085883a 	add	r2,r2,r2
  80a85c:	10c5883a 	add	r2,r2,r3
  80a860:	10800017 	ldw	r2,0(r2)
  80a864:	d0a04b15 	stw	r2,-32468(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80a868:	d0e04b17 	ldw	r3,-32468(gp)
  80a86c:	18800e17 	ldw	r2,56(r3)
  80a870:	10800044 	addi	r2,r2,1
  80a874:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80a878:	d0a04617 	ldw	r2,-32488(gp)
  80a87c:	10800044 	addi	r2,r2,1
  80a880:	d0a04615 	stw	r2,-32488(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  80a884:	08143680 	call	814368 <OSCtxSw>
  80a888:	e0bfff17 	ldw	r2,-4(fp)
  80a88c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a890:	e0bffd17 	ldw	r2,-12(fp)
  80a894:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80a898:	e037883a 	mov	sp,fp
  80a89c:	dfc00117 	ldw	ra,4(sp)
  80a8a0:	df000017 	ldw	fp,0(sp)
  80a8a4:	dec00204 	addi	sp,sp,8
  80a8a8:	f800283a 	ret

0080a8ac <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80a8ac:	defffe04 	addi	sp,sp,-8
  80a8b0:	df000115 	stw	fp,4(sp)
  80a8b4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80a8b8:	d0a04d03 	ldbu	r2,-32460(gp)
  80a8bc:	10c03fcc 	andi	r3,r2,255
  80a8c0:	00802074 	movhi	r2,129
  80a8c4:	1094dc04 	addi	r2,r2,21360
  80a8c8:	10c5883a 	add	r2,r2,r3
  80a8cc:	10800003 	ldbu	r2,0(r2)
  80a8d0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80a8d4:	e0bfff03 	ldbu	r2,-4(fp)
  80a8d8:	100490fa 	slli	r2,r2,3
  80a8dc:	1009883a 	mov	r4,r2
  80a8e0:	e0ffff03 	ldbu	r3,-4(fp)
  80a8e4:	d0a04d44 	addi	r2,gp,-32459
  80a8e8:	1885883a 	add	r2,r3,r2
  80a8ec:	10800003 	ldbu	r2,0(r2)
  80a8f0:	10c03fcc 	andi	r3,r2,255
  80a8f4:	00802074 	movhi	r2,129
  80a8f8:	1094dc04 	addi	r2,r2,21360
  80a8fc:	10c5883a 	add	r2,r2,r3
  80a900:	10800003 	ldbu	r2,0(r2)
  80a904:	2085883a 	add	r2,r4,r2
  80a908:	d0a04305 	stb	r2,-32500(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80a90c:	e037883a 	mov	sp,fp
  80a910:	df000017 	ldw	fp,0(sp)
  80a914:	dec00104 	addi	sp,sp,4
  80a918:	f800283a 	ret

0080a91c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  80a91c:	defffc04 	addi	sp,sp,-16
  80a920:	df000315 	stw	fp,12(sp)
  80a924:	df000304 	addi	fp,sp,12
  80a928:	e13ffe15 	stw	r4,-8(fp)
  80a92c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80a930:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80a934:	00000d06 	br	80a96c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  80a938:	e0bfff17 	ldw	r2,-4(fp)
  80a93c:	10c00003 	ldbu	r3,0(r2)
  80a940:	e0bffe17 	ldw	r2,-8(fp)
  80a944:	10c00005 	stb	r3,0(r2)
  80a948:	e0bffe17 	ldw	r2,-8(fp)
  80a94c:	10800044 	addi	r2,r2,1
  80a950:	e0bffe15 	stw	r2,-8(fp)
  80a954:	e0bfff17 	ldw	r2,-4(fp)
  80a958:	10800044 	addi	r2,r2,1
  80a95c:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80a960:	e0bffd03 	ldbu	r2,-12(fp)
  80a964:	10800044 	addi	r2,r2,1
  80a968:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80a96c:	e0bfff17 	ldw	r2,-4(fp)
  80a970:	10800003 	ldbu	r2,0(r2)
  80a974:	10803fcc 	andi	r2,r2,255
  80a978:	1004c03a 	cmpne	r2,r2,zero
  80a97c:	103fee1e 	bne	r2,zero,80a938 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  80a980:	e0bffe17 	ldw	r2,-8(fp)
  80a984:	10000005 	stb	zero,0(r2)
    return (len);
  80a988:	e0bffd03 	ldbu	r2,-12(fp)
}
  80a98c:	e037883a 	mov	sp,fp
  80a990:	df000017 	ldw	fp,0(sp)
  80a994:	dec00104 	addi	sp,sp,4
  80a998:	f800283a 	ret

0080a99c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  80a99c:	defffd04 	addi	sp,sp,-12
  80a9a0:	df000215 	stw	fp,8(sp)
  80a9a4:	df000204 	addi	fp,sp,8
  80a9a8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80a9ac:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80a9b0:	00000606 	br	80a9cc <OS_StrLen+0x30>
        psrc++;
  80a9b4:	e0bfff17 	ldw	r2,-4(fp)
  80a9b8:	10800044 	addi	r2,r2,1
  80a9bc:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80a9c0:	e0bffe03 	ldbu	r2,-8(fp)
  80a9c4:	10800044 	addi	r2,r2,1
  80a9c8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80a9cc:	e0bfff17 	ldw	r2,-4(fp)
  80a9d0:	10800003 	ldbu	r2,0(r2)
  80a9d4:	10803fcc 	andi	r2,r2,255
  80a9d8:	1004c03a 	cmpne	r2,r2,zero
  80a9dc:	103ff51e 	bne	r2,zero,80a9b4 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  80a9e0:	e0bffe03 	ldbu	r2,-8(fp)
}
  80a9e4:	e037883a 	mov	sp,fp
  80a9e8:	df000017 	ldw	fp,0(sp)
  80a9ec:	dec00104 	addi	sp,sp,4
  80a9f0:	f800283a 	ret

0080a9f4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80a9f4:	defffa04 	addi	sp,sp,-24
  80a9f8:	dfc00515 	stw	ra,20(sp)
  80a9fc:	df000415 	stw	fp,16(sp)
  80aa00:	df000404 	addi	fp,sp,16
  80aa04:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80aa08:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aa0c:	0005303a 	rdctl	r2,status
  80aa10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aa14:	e0fffd17 	ldw	r3,-12(fp)
  80aa18:	00bfff84 	movi	r2,-2
  80aa1c:	1884703a 	and	r2,r3,r2
  80aa20:	1001703a 	wrctl	status,r2
  
  return context;
  80aa24:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  80aa28:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  80aa2c:	d0a04217 	ldw	r2,-32504(gp)
  80aa30:	10800044 	addi	r2,r2,1
  80aa34:	d0a04215 	stw	r2,-32504(gp)
  80aa38:	e0bffe17 	ldw	r2,-8(fp)
  80aa3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aa40:	e0bffc17 	ldw	r2,-16(fp)
  80aa44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80aa48:	08148140 	call	814814 <OSTaskIdleHook>
    }
  80aa4c:	003fef06 	br	80aa0c <OS_TaskIdle+0x18>

0080aa50 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  80aa50:	defffa04 	addi	sp,sp,-24
  80aa54:	dfc00515 	stw	ra,20(sp)
  80aa58:	df000415 	stw	fp,16(sp)
  80aa5c:	df000404 	addi	fp,sp,16
  80aa60:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80aa64:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80aa68:	00000206 	br	80aa74 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  80aa6c:	01003204 	movi	r4,200
  80aa70:	0810acc0 	call	810acc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80aa74:	d0a05303 	ldbu	r2,-32436(gp)
  80aa78:	10803fcc 	andi	r2,r2,255
  80aa7c:	1005003a 	cmpeq	r2,r2,zero
  80aa80:	103ffa1e 	bne	r2,zero,80aa6c <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  80aa84:	d1204717 	ldw	r4,-32484(gp)
  80aa88:	01401904 	movi	r5,100
  80aa8c:	0814f480 	call	814f48 <__udivsi3>
  80aa90:	d0a04715 	stw	r2,-32484(gp)
    if (OSIdleCtrMax == 0L) {
  80aa94:	d0a04717 	ldw	r2,-32484(gp)
  80aa98:	1004c03a 	cmpne	r2,r2,zero
  80aa9c:	1000031e 	bne	r2,zero,80aaac <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  80aaa0:	d0204905 	stb	zero,-32476(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  80aaa4:	01003fc4 	movi	r4,255
  80aaa8:	08106e00 	call	8106e0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aaac:	0005303a 	rdctl	r2,status
  80aab0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aab4:	e0fffd17 	ldw	r3,-12(fp)
  80aab8:	00bfff84 	movi	r2,-2
  80aabc:	1884703a 	and	r2,r3,r2
  80aac0:	1001703a 	wrctl	status,r2
  
  return context;
  80aac4:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  80aac8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80aacc:	d0a04217 	ldw	r2,-32504(gp)
  80aad0:	d0a05415 	stw	r2,-32432(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  80aad4:	d0204215 	stw	zero,-32504(gp)
  80aad8:	e0bffe17 	ldw	r2,-8(fp)
  80aadc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aae0:	e0bffc17 	ldw	r2,-16(fp)
  80aae4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  80aae8:	d1205417 	ldw	r4,-32432(gp)
  80aaec:	d1604717 	ldw	r5,-32484(gp)
  80aaf0:	0814f480 	call	814f48 <__udivsi3>
  80aaf4:	1007883a 	mov	r3,r2
  80aaf8:	00801904 	movi	r2,100
  80aafc:	10c5c83a 	sub	r2,r2,r3
  80ab00:	d0a04905 	stb	r2,-32476(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80ab04:	08147a40 	call	8147a4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  80ab08:	080ab180 	call	80ab18 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  80ab0c:	01001904 	movi	r4,100
  80ab10:	0810acc0 	call	810acc <OSTimeDly>
    }
  80ab14:	003fe506 	br	80aaac <OS_TaskStat+0x5c>

0080ab18 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  80ab18:	defffa04 	addi	sp,sp,-24
  80ab1c:	dfc00515 	stw	ra,20(sp)
  80ab20:	df000415 	stw	fp,16(sp)
  80ab24:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80ab28:	e03ffc05 	stb	zero,-16(fp)
  80ab2c:	00002406 	br	80abc0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80ab30:	e13ffc03 	ldbu	r4,-16(fp)
  80ab34:	e17ffe04 	addi	r5,fp,-8
  80ab38:	08104e40 	call	8104e4 <OSTaskStkChk>
  80ab3c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  80ab40:	e0bffc43 	ldbu	r2,-15(fp)
  80ab44:	1004c03a 	cmpne	r2,r2,zero
  80ab48:	10001a1e 	bne	r2,zero,80abb4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  80ab4c:	e0bffc03 	ldbu	r2,-16(fp)
  80ab50:	00c02234 	movhi	r3,136
  80ab54:	18d6ab04 	addi	r3,r3,23212
  80ab58:	1085883a 	add	r2,r2,r2
  80ab5c:	1085883a 	add	r2,r2,r2
  80ab60:	10c5883a 	add	r2,r2,r3
  80ab64:	10800017 	ldw	r2,0(r2)
  80ab68:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  80ab6c:	e0bffd17 	ldw	r2,-12(fp)
  80ab70:	1005003a 	cmpeq	r2,r2,zero
  80ab74:	10000f1e 	bne	r2,zero,80abb4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  80ab78:	e0bffd17 	ldw	r2,-12(fp)
  80ab7c:	10800060 	cmpeqi	r2,r2,1
  80ab80:	10000c1e 	bne	r2,zero,80abb4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80ab84:	e0bffd17 	ldw	r2,-12(fp)
  80ab88:	10c00217 	ldw	r3,8(r2)
  80ab8c:	e0bffd17 	ldw	r2,-12(fp)
  80ab90:	10800317 	ldw	r2,12(r2)
  80ab94:	1085883a 	add	r2,r2,r2
  80ab98:	1085883a 	add	r2,r2,r2
  80ab9c:	1887883a 	add	r3,r3,r2
  80aba0:	e0bffd17 	ldw	r2,-12(fp)
  80aba4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  80aba8:	e0ffff17 	ldw	r3,-4(fp)
  80abac:	e0bffd17 	ldw	r2,-12(fp)
  80abb0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80abb4:	e0bffc03 	ldbu	r2,-16(fp)
  80abb8:	10800044 	addi	r2,r2,1
  80abbc:	e0bffc05 	stb	r2,-16(fp)
  80abc0:	e0bffc03 	ldbu	r2,-16(fp)
  80abc4:	10800570 	cmpltui	r2,r2,21
  80abc8:	103fd91e 	bne	r2,zero,80ab30 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  80abcc:	e037883a 	mov	sp,fp
  80abd0:	dfc00117 	ldw	ra,4(sp)
  80abd4:	df000017 	ldw	fp,0(sp)
  80abd8:	dec00204 	addi	sp,sp,8
  80abdc:	f800283a 	ret

0080abe0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80abe0:	defff104 	addi	sp,sp,-60
  80abe4:	dfc00e15 	stw	ra,56(sp)
  80abe8:	df000d15 	stw	fp,52(sp)
  80abec:	df000d04 	addi	fp,sp,52
  80abf0:	e17ffb15 	stw	r5,-20(fp)
  80abf4:	e1bffc15 	stw	r6,-16(fp)
  80abf8:	e0800417 	ldw	r2,16(fp)
  80abfc:	e13ffa05 	stb	r4,-24(fp)
  80ac00:	e1fffd0d 	sth	r7,-12(fp)
  80ac04:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80ac08:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ac0c:	0005303a 	rdctl	r2,status
  80ac10:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ac14:	e0fff717 	ldw	r3,-36(fp)
  80ac18:	00bfff84 	movi	r2,-2
  80ac1c:	1884703a 	and	r2,r3,r2
  80ac20:	1001703a 	wrctl	status,r2
  
  return context;
  80ac24:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  80ac28:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  80ac2c:	d0a04817 	ldw	r2,-32480(gp)
  80ac30:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  80ac34:	e0bff917 	ldw	r2,-28(fp)
  80ac38:	1005003a 	cmpeq	r2,r2,zero
  80ac3c:	1000941e 	bne	r2,zero,80ae90 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80ac40:	e0bff917 	ldw	r2,-28(fp)
  80ac44:	10800517 	ldw	r2,20(r2)
  80ac48:	d0a04815 	stw	r2,-32480(gp)
  80ac4c:	e0bff817 	ldw	r2,-32(fp)
  80ac50:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ac54:	e0bff617 	ldw	r2,-40(fp)
  80ac58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  80ac5c:	e0fff917 	ldw	r3,-28(fp)
  80ac60:	e0bffb17 	ldw	r2,-20(fp)
  80ac64:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  80ac68:	e0fff917 	ldw	r3,-28(fp)
  80ac6c:	e0bffa03 	ldbu	r2,-24(fp)
  80ac70:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  80ac74:	e0bff917 	ldw	r2,-28(fp)
  80ac78:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  80ac7c:	e0bff917 	ldw	r2,-28(fp)
  80ac80:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  80ac84:	e0bff917 	ldw	r2,-28(fp)
  80ac88:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  80ac8c:	e0fff917 	ldw	r3,-28(fp)
  80ac90:	e0800317 	ldw	r2,12(fp)
  80ac94:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  80ac98:	e0fff917 	ldw	r3,-28(fp)
  80ac9c:	e0800217 	ldw	r2,8(fp)
  80aca0:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  80aca4:	e0fff917 	ldw	r3,-28(fp)
  80aca8:	e0bffc17 	ldw	r2,-16(fp)
  80acac:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80acb0:	e0fff917 	ldw	r3,-28(fp)
  80acb4:	e0bffe0b 	ldhu	r2,-8(fp)
  80acb8:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  80acbc:	e0fff917 	ldw	r3,-28(fp)
  80acc0:	e0bffd0b 	ldhu	r2,-12(fp)
  80acc4:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  80acc8:	e0bff917 	ldw	r2,-28(fp)
  80accc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80acd0:	e0bffa03 	ldbu	r2,-24(fp)
  80acd4:	1004d0fa 	srli	r2,r2,3
  80acd8:	1007883a 	mov	r3,r2
  80acdc:	e0bff917 	ldw	r2,-28(fp)
  80ace0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  80ace4:	e0bffa03 	ldbu	r2,-24(fp)
  80ace8:	108001cc 	andi	r2,r2,7
  80acec:	1007883a 	mov	r3,r2
  80acf0:	e0bff917 	ldw	r2,-28(fp)
  80acf4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  80acf8:	e0bff917 	ldw	r2,-28(fp)
  80acfc:	10800d03 	ldbu	r2,52(r2)
  80ad00:	10c03fcc 	andi	r3,r2,255
  80ad04:	00800044 	movi	r2,1
  80ad08:	10c4983a 	sll	r2,r2,r3
  80ad0c:	1007883a 	mov	r3,r2
  80ad10:	e0bff917 	ldw	r2,-28(fp)
  80ad14:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80ad18:	e0bff917 	ldw	r2,-28(fp)
  80ad1c:	10800cc3 	ldbu	r2,51(r2)
  80ad20:	10c03fcc 	andi	r3,r2,255
  80ad24:	00800044 	movi	r2,1
  80ad28:	10c4983a 	sll	r2,r2,r3
  80ad2c:	1007883a 	mov	r3,r2
  80ad30:	e0bff917 	ldw	r2,-28(fp)
  80ad34:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80ad38:	e0bff917 	ldw	r2,-28(fp)
  80ad3c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80ad40:	e0bff917 	ldw	r2,-28(fp)
  80ad44:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  80ad48:	e0bff917 	ldw	r2,-28(fp)
  80ad4c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80ad50:	e0bff917 	ldw	r2,-28(fp)
  80ad54:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  80ad58:	e0bff917 	ldw	r2,-28(fp)
  80ad5c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80ad60:	e0bff917 	ldw	r2,-28(fp)
  80ad64:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  80ad68:	e0bff917 	ldw	r2,-28(fp)
  80ad6c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80ad70:	e0bff917 	ldw	r2,-28(fp)
  80ad74:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  80ad78:	e0bff917 	ldw	r2,-28(fp)
  80ad7c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80ad80:	e0fff917 	ldw	r3,-28(fp)
  80ad84:	00800fc4 	movi	r2,63
  80ad88:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80ad8c:	e0bff917 	ldw	r2,-28(fp)
  80ad90:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  80ad94:	e13ff917 	ldw	r4,-28(fp)
  80ad98:	08148300 	call	814830 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  80ad9c:	e13ff917 	ldw	r4,-28(fp)
  80ada0:	08147480 	call	814748 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ada4:	0005303a 	rdctl	r2,status
  80ada8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80adac:	e0fff517 	ldw	r3,-44(fp)
  80adb0:	00bfff84 	movi	r2,-2
  80adb4:	1884703a 	and	r2,r3,r2
  80adb8:	1001703a 	wrctl	status,r2
  
  return context;
  80adbc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80adc0:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  80adc4:	e0bffa03 	ldbu	r2,-24(fp)
  80adc8:	00c02234 	movhi	r3,136
  80adcc:	18d6ab04 	addi	r3,r3,23212
  80add0:	1085883a 	add	r2,r2,r2
  80add4:	1085883a 	add	r2,r2,r2
  80add8:	10c7883a 	add	r3,r2,r3
  80addc:	e0bff917 	ldw	r2,-28(fp)
  80ade0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  80ade4:	d0e04417 	ldw	r3,-32496(gp)
  80ade8:	e0bff917 	ldw	r2,-28(fp)
  80adec:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80adf0:	e0bff917 	ldw	r2,-28(fp)
  80adf4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80adf8:	d0a04417 	ldw	r2,-32496(gp)
  80adfc:	1005003a 	cmpeq	r2,r2,zero
  80ae00:	1000031e 	bne	r2,zero,80ae10 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  80ae04:	d0e04417 	ldw	r3,-32496(gp)
  80ae08:	e0bff917 	ldw	r2,-28(fp)
  80ae0c:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  80ae10:	e0bff917 	ldw	r2,-28(fp)
  80ae14:	d0a04415 	stw	r2,-32496(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  80ae18:	e0bff917 	ldw	r2,-28(fp)
  80ae1c:	10c00d83 	ldbu	r3,54(r2)
  80ae20:	d0a04d03 	ldbu	r2,-32460(gp)
  80ae24:	1884b03a 	or	r2,r3,r2
  80ae28:	d0a04d05 	stb	r2,-32460(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80ae2c:	e0bff917 	ldw	r2,-28(fp)
  80ae30:	10800d03 	ldbu	r2,52(r2)
  80ae34:	11003fcc 	andi	r4,r2,255
  80ae38:	e0bff917 	ldw	r2,-28(fp)
  80ae3c:	10800d03 	ldbu	r2,52(r2)
  80ae40:	10c03fcc 	andi	r3,r2,255
  80ae44:	d0a04d44 	addi	r2,gp,-32459
  80ae48:	1885883a 	add	r2,r3,r2
  80ae4c:	10c00003 	ldbu	r3,0(r2)
  80ae50:	e0bff917 	ldw	r2,-28(fp)
  80ae54:	10800d43 	ldbu	r2,53(r2)
  80ae58:	1884b03a 	or	r2,r3,r2
  80ae5c:	1007883a 	mov	r3,r2
  80ae60:	d0a04d44 	addi	r2,gp,-32459
  80ae64:	2085883a 	add	r2,r4,r2
  80ae68:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  80ae6c:	d0a04943 	ldbu	r2,-32475(gp)
  80ae70:	10800044 	addi	r2,r2,1
  80ae74:	d0a04945 	stb	r2,-32475(gp)
  80ae78:	e0bff817 	ldw	r2,-32(fp)
  80ae7c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ae80:	e0bff417 	ldw	r2,-48(fp)
  80ae84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80ae88:	e03fff15 	stw	zero,-4(fp)
  80ae8c:	00000606 	br	80aea8 <OS_TCBInit+0x2c8>
  80ae90:	e0bff817 	ldw	r2,-32(fp)
  80ae94:	e0bff315 	stw	r2,-52(fp)
  80ae98:	e0bff317 	ldw	r2,-52(fp)
  80ae9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  80aea0:	00801084 	movi	r2,66
  80aea4:	e0bfff15 	stw	r2,-4(fp)
  80aea8:	e0bfff17 	ldw	r2,-4(fp)
}
  80aeac:	e037883a 	mov	sp,fp
  80aeb0:	dfc00117 	ldw	ra,4(sp)
  80aeb4:	df000017 	ldw	fp,0(sp)
  80aeb8:	dec00204 	addi	sp,sp,8
  80aebc:	f800283a 	ret

0080aec0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  80aec0:	defffe04 	addi	sp,sp,-8
  80aec4:	df000115 	stw	fp,4(sp)
  80aec8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80aecc:	d0a00f04 	addi	r2,gp,-32708
  80aed0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80aed4:	d0a01004 	addi	r2,gp,-32704
  80aed8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80aedc:	d0a01184 	addi	r2,gp,-32698
  80aee0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80aee4:	d0a01204 	addi	r2,gp,-32696
  80aee8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80aeec:	d0a01104 	addi	r2,gp,-32700
  80aef0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80aef4:	d0a01284 	addi	r2,gp,-32694
  80aef8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80aefc:	d0a01304 	addi	r2,gp,-32692
  80af00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80af04:	d0a01384 	addi	r2,gp,-32690
  80af08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80af0c:	d0a01404 	addi	r2,gp,-32688
  80af10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80af14:	d0a01484 	addi	r2,gp,-32686
  80af18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80af1c:	d0a01504 	addi	r2,gp,-32684
  80af20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80af24:	d0a01584 	addi	r2,gp,-32682
  80af28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80af2c:	d0a01604 	addi	r2,gp,-32680
  80af30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80af34:	d0a01684 	addi	r2,gp,-32678
  80af38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80af3c:	d0a01704 	addi	r2,gp,-32676
  80af40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80af44:	d0a01784 	addi	r2,gp,-32674
  80af48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80af4c:	d0a01804 	addi	r2,gp,-32672
  80af50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  80af54:	d0a01884 	addi	r2,gp,-32670
  80af58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80af5c:	d0a01904 	addi	r2,gp,-32668
  80af60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  80af64:	d0a01984 	addi	r2,gp,-32666
  80af68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80af6c:	d0a01a04 	addi	r2,gp,-32664
  80af70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  80af74:	d0a01a84 	addi	r2,gp,-32662
  80af78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80af7c:	d0a01b04 	addi	r2,gp,-32660
  80af80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  80af84:	d0a01b84 	addi	r2,gp,-32658
  80af88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80af8c:	d0a01c04 	addi	r2,gp,-32656
  80af90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  80af94:	d0a01c84 	addi	r2,gp,-32654
  80af98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80af9c:	d0a01d04 	addi	r2,gp,-32652
  80afa0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  80afa4:	d0a01d84 	addi	r2,gp,-32650
  80afa8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80afac:	d0a01e04 	addi	r2,gp,-32648
  80afb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80afb4:	d0a01e84 	addi	r2,gp,-32646
  80afb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80afbc:	d0a01f04 	addi	r2,gp,-32644
  80afc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80afc4:	d0a01f84 	addi	r2,gp,-32642
  80afc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80afcc:	d0a02004 	addi	r2,gp,-32640
  80afd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80afd4:	d0a02084 	addi	r2,gp,-32638
  80afd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80afdc:	d0a02104 	addi	r2,gp,-32636
  80afe0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80afe4:	d0a02184 	addi	r2,gp,-32634
  80afe8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80afec:	d0a02204 	addi	r2,gp,-32632
  80aff0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80aff4:	d0a02284 	addi	r2,gp,-32630
  80aff8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80affc:	d0a02304 	addi	r2,gp,-32628
  80b000:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80b004:	d0a02384 	addi	r2,gp,-32626
  80b008:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80b00c:	d0a02404 	addi	r2,gp,-32624
  80b010:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80b014:	d0a02484 	addi	r2,gp,-32622
  80b018:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80b01c:	d0a02504 	addi	r2,gp,-32620
  80b020:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80b024:	d0a02584 	addi	r2,gp,-32618
  80b028:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80b02c:	d0a02604 	addi	r2,gp,-32616
  80b030:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80b034:	d0a02b04 	addi	r2,gp,-32596
  80b038:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80b03c:	e037883a 	mov	sp,fp
  80b040:	df000017 	ldw	fp,0(sp)
  80b044:	dec00104 	addi	sp,sp,4
  80b048:	f800283a 	ret

0080b04c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80b04c:	defff104 	addi	sp,sp,-60
  80b050:	df000e15 	stw	fp,56(sp)
  80b054:	df000e04 	addi	fp,sp,56
  80b058:	e13ffa15 	stw	r4,-24(fp)
  80b05c:	e1fffd15 	stw	r7,-12(fp)
  80b060:	e17ffb0d 	sth	r5,-20(fp)
  80b064:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80b068:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80b06c:	e0bffd17 	ldw	r2,-12(fp)
  80b070:	1004c03a 	cmpne	r2,r2,zero
  80b074:	1000021e 	bne	r2,zero,80b080 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80b078:	e03fff15 	stw	zero,-4(fp)
  80b07c:	0000bb06 	br	80b36c <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80b080:	e0bffa17 	ldw	r2,-24(fp)
  80b084:	1004c03a 	cmpne	r2,r2,zero
  80b088:	1000051e 	bne	r2,zero,80b0a0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80b08c:	e0fffd17 	ldw	r3,-12(fp)
  80b090:	00801b84 	movi	r2,110
  80b094:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b098:	e03fff15 	stw	zero,-4(fp)
  80b09c:	0000b306 	br	80b36c <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80b0a0:	e0bffa17 	ldw	r2,-24(fp)
  80b0a4:	10800003 	ldbu	r2,0(r2)
  80b0a8:	10803fcc 	andi	r2,r2,255
  80b0ac:	10800160 	cmpeqi	r2,r2,5
  80b0b0:	1000051e 	bne	r2,zero,80b0c8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80b0b4:	e0fffd17 	ldw	r3,-12(fp)
  80b0b8:	00800044 	movi	r2,1
  80b0bc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80b0c0:	e03fff15 	stw	zero,-4(fp)
  80b0c4:	0000a906 	br	80b36c <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80b0c8:	e0fffc03 	ldbu	r3,-16(fp)
  80b0cc:	00bfe004 	movi	r2,-128
  80b0d0:	1884703a 	and	r2,r3,r2
  80b0d4:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80b0d8:	e0bff943 	ldbu	r2,-27(fp)
  80b0dc:	1005003a 	cmpeq	r2,r2,zero
  80b0e0:	1000061e 	bne	r2,zero,80b0fc <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80b0e4:	e0bffc03 	ldbu	r2,-16(fp)
  80b0e8:	10801fcc 	andi	r2,r2,127
  80b0ec:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80b0f0:	00800044 	movi	r2,1
  80b0f4:	e0bff905 	stb	r2,-28(fp)
  80b0f8:	00000106 	br	80b100 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80b0fc:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80b100:	e0bffd17 	ldw	r2,-12(fp)
  80b104:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b108:	0005303a 	rdctl	r2,status
  80b10c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b110:	e0fff717 	ldw	r3,-36(fp)
  80b114:	00bfff84 	movi	r2,-2
  80b118:	1884703a 	and	r2,r3,r2
  80b11c:	1001703a 	wrctl	status,r2
  
  return context;
  80b120:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80b124:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80b128:	e0bffc03 	ldbu	r2,-16(fp)
  80b12c:	e0bffe15 	stw	r2,-8(fp)
  80b130:	e0fffe17 	ldw	r3,-8(fp)
  80b134:	18800060 	cmpeqi	r2,r3,1
  80b138:	1000651e 	bne	r2,zero,80b2d0 <OSFlagAccept+0x284>
  80b13c:	e0fffe17 	ldw	r3,-8(fp)
  80b140:	18800088 	cmpgei	r2,r3,2
  80b144:	1000041e 	bne	r2,zero,80b158 <OSFlagAccept+0x10c>
  80b148:	e0fffe17 	ldw	r3,-8(fp)
  80b14c:	1805003a 	cmpeq	r2,r3,zero
  80b150:	1000421e 	bne	r2,zero,80b25c <OSFlagAccept+0x210>
  80b154:	00007b06 	br	80b344 <OSFlagAccept+0x2f8>
  80b158:	e0fffe17 	ldw	r3,-8(fp)
  80b15c:	188000a0 	cmpeqi	r2,r3,2
  80b160:	1000041e 	bne	r2,zero,80b174 <OSFlagAccept+0x128>
  80b164:	e0fffe17 	ldw	r3,-8(fp)
  80b168:	188000e0 	cmpeqi	r2,r3,3
  80b16c:	10001e1e 	bne	r2,zero,80b1e8 <OSFlagAccept+0x19c>
  80b170:	00007406 	br	80b344 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80b174:	e0bffa17 	ldw	r2,-24(fp)
  80b178:	10c0020b 	ldhu	r3,8(r2)
  80b17c:	e0bffb0b 	ldhu	r2,-20(fp)
  80b180:	1884703a 	and	r2,r3,r2
  80b184:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80b188:	e0fff98b 	ldhu	r3,-26(fp)
  80b18c:	e0bffb0b 	ldhu	r2,-20(fp)
  80b190:	18800d1e 	bne	r3,r2,80b1c8 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80b194:	e0bff903 	ldbu	r2,-28(fp)
  80b198:	10800058 	cmpnei	r2,r2,1
  80b19c:	10000d1e 	bne	r2,zero,80b1d4 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80b1a0:	e0bffa17 	ldw	r2,-24(fp)
  80b1a4:	1080020b 	ldhu	r2,8(r2)
  80b1a8:	1007883a 	mov	r3,r2
  80b1ac:	e0bff98b 	ldhu	r2,-26(fp)
  80b1b0:	0084303a 	nor	r2,zero,r2
  80b1b4:	1884703a 	and	r2,r3,r2
  80b1b8:	1007883a 	mov	r3,r2
  80b1bc:	e0bffa17 	ldw	r2,-24(fp)
  80b1c0:	10c0020d 	sth	r3,8(r2)
  80b1c4:	00000306 	br	80b1d4 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80b1c8:	e0fffd17 	ldw	r3,-12(fp)
  80b1cc:	00801c04 	movi	r2,112
  80b1d0:	18800005 	stb	r2,0(r3)
  80b1d4:	e0bff817 	ldw	r2,-32(fp)
  80b1d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b1dc:	e0bff617 	ldw	r2,-40(fp)
  80b1e0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80b1e4:	00005f06 	br	80b364 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80b1e8:	e0bffa17 	ldw	r2,-24(fp)
  80b1ec:	10c0020b 	ldhu	r3,8(r2)
  80b1f0:	e0bffb0b 	ldhu	r2,-20(fp)
  80b1f4:	1884703a 	and	r2,r3,r2
  80b1f8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80b1fc:	e0bff98b 	ldhu	r2,-26(fp)
  80b200:	1005003a 	cmpeq	r2,r2,zero
  80b204:	10000d1e 	bne	r2,zero,80b23c <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80b208:	e0bff903 	ldbu	r2,-28(fp)
  80b20c:	10800058 	cmpnei	r2,r2,1
  80b210:	10000d1e 	bne	r2,zero,80b248 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80b214:	e0bffa17 	ldw	r2,-24(fp)
  80b218:	1080020b 	ldhu	r2,8(r2)
  80b21c:	1007883a 	mov	r3,r2
  80b220:	e0bff98b 	ldhu	r2,-26(fp)
  80b224:	0084303a 	nor	r2,zero,r2
  80b228:	1884703a 	and	r2,r3,r2
  80b22c:	1007883a 	mov	r3,r2
  80b230:	e0bffa17 	ldw	r2,-24(fp)
  80b234:	10c0020d 	sth	r3,8(r2)
  80b238:	00000306 	br	80b248 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80b23c:	e0fffd17 	ldw	r3,-12(fp)
  80b240:	00801c04 	movi	r2,112
  80b244:	18800005 	stb	r2,0(r3)
  80b248:	e0bff817 	ldw	r2,-32(fp)
  80b24c:	e0bff515 	stw	r2,-44(fp)
  80b250:	e0bff517 	ldw	r2,-44(fp)
  80b254:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80b258:	00004206 	br	80b364 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80b25c:	e0bffa17 	ldw	r2,-24(fp)
  80b260:	1080020b 	ldhu	r2,8(r2)
  80b264:	0084303a 	nor	r2,zero,r2
  80b268:	1007883a 	mov	r3,r2
  80b26c:	e0bffb0b 	ldhu	r2,-20(fp)
  80b270:	1884703a 	and	r2,r3,r2
  80b274:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80b278:	e0fff98b 	ldhu	r3,-26(fp)
  80b27c:	e0bffb0b 	ldhu	r2,-20(fp)
  80b280:	18800b1e 	bne	r3,r2,80b2b0 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80b284:	e0bff903 	ldbu	r2,-28(fp)
  80b288:	10800058 	cmpnei	r2,r2,1
  80b28c:	10000b1e 	bne	r2,zero,80b2bc <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80b290:	e0bffa17 	ldw	r2,-24(fp)
  80b294:	10c0020b 	ldhu	r3,8(r2)
  80b298:	e0bff98b 	ldhu	r2,-26(fp)
  80b29c:	1884b03a 	or	r2,r3,r2
  80b2a0:	1007883a 	mov	r3,r2
  80b2a4:	e0bffa17 	ldw	r2,-24(fp)
  80b2a8:	10c0020d 	sth	r3,8(r2)
  80b2ac:	00000306 	br	80b2bc <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80b2b0:	e0fffd17 	ldw	r3,-12(fp)
  80b2b4:	00801c04 	movi	r2,112
  80b2b8:	18800005 	stb	r2,0(r3)
  80b2bc:	e0bff817 	ldw	r2,-32(fp)
  80b2c0:	e0bff415 	stw	r2,-48(fp)
  80b2c4:	e0bff417 	ldw	r2,-48(fp)
  80b2c8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80b2cc:	00002506 	br	80b364 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80b2d0:	e0bffa17 	ldw	r2,-24(fp)
  80b2d4:	1080020b 	ldhu	r2,8(r2)
  80b2d8:	0084303a 	nor	r2,zero,r2
  80b2dc:	1007883a 	mov	r3,r2
  80b2e0:	e0bffb0b 	ldhu	r2,-20(fp)
  80b2e4:	1884703a 	and	r2,r3,r2
  80b2e8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80b2ec:	e0bff98b 	ldhu	r2,-26(fp)
  80b2f0:	1005003a 	cmpeq	r2,r2,zero
  80b2f4:	10000b1e 	bne	r2,zero,80b324 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80b2f8:	e0bff903 	ldbu	r2,-28(fp)
  80b2fc:	10800058 	cmpnei	r2,r2,1
  80b300:	10000b1e 	bne	r2,zero,80b330 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80b304:	e0bffa17 	ldw	r2,-24(fp)
  80b308:	10c0020b 	ldhu	r3,8(r2)
  80b30c:	e0bff98b 	ldhu	r2,-26(fp)
  80b310:	1884b03a 	or	r2,r3,r2
  80b314:	1007883a 	mov	r3,r2
  80b318:	e0bffa17 	ldw	r2,-24(fp)
  80b31c:	10c0020d 	sth	r3,8(r2)
  80b320:	00000306 	br	80b330 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80b324:	e0fffd17 	ldw	r3,-12(fp)
  80b328:	00801c04 	movi	r2,112
  80b32c:	18800005 	stb	r2,0(r3)
  80b330:	e0bff817 	ldw	r2,-32(fp)
  80b334:	e0bff315 	stw	r2,-52(fp)
  80b338:	e0bff317 	ldw	r2,-52(fp)
  80b33c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80b340:	00000806 	br	80b364 <OSFlagAccept+0x318>
  80b344:	e0bff817 	ldw	r2,-32(fp)
  80b348:	e0bff215 	stw	r2,-56(fp)
  80b34c:	e0bff217 	ldw	r2,-56(fp)
  80b350:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80b354:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80b358:	e0fffd17 	ldw	r3,-12(fp)
  80b35c:	00801bc4 	movi	r2,111
  80b360:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80b364:	e0bff98b 	ldhu	r2,-26(fp)
  80b368:	e0bfff15 	stw	r2,-4(fp)
  80b36c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b370:	e037883a 	mov	sp,fp
  80b374:	df000017 	ldw	fp,0(sp)
  80b378:	dec00104 	addi	sp,sp,4
  80b37c:	f800283a 	ret

0080b380 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80b380:	defff704 	addi	sp,sp,-36
  80b384:	df000815 	stw	fp,32(sp)
  80b388:	df000804 	addi	fp,sp,32
  80b38c:	e17ffe15 	stw	r5,-8(fp)
  80b390:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80b394:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80b398:	e0bffe17 	ldw	r2,-8(fp)
  80b39c:	1004c03a 	cmpne	r2,r2,zero
  80b3a0:	1000021e 	bne	r2,zero,80b3ac <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80b3a4:	e03fff15 	stw	zero,-4(fp)
  80b3a8:	00003f06 	br	80b4a8 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80b3ac:	00802074 	movhi	r2,129
  80b3b0:	109c3504 	addi	r2,r2,28884
  80b3b4:	10800003 	ldbu	r2,0(r2)
  80b3b8:	10803fcc 	andi	r2,r2,255
  80b3bc:	1005003a 	cmpeq	r2,r2,zero
  80b3c0:	1000051e 	bne	r2,zero,80b3d8 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80b3c4:	e0fffe17 	ldw	r3,-8(fp)
  80b3c8:	00800404 	movi	r2,16
  80b3cc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80b3d0:	e03fff15 	stw	zero,-4(fp)
  80b3d4:	00003406 	br	80b4a8 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b3d8:	0005303a 	rdctl	r2,status
  80b3dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b3e0:	e0fffa17 	ldw	r3,-24(fp)
  80b3e4:	00bfff84 	movi	r2,-2
  80b3e8:	1884703a 	and	r2,r3,r2
  80b3ec:	1001703a 	wrctl	status,r2
  
  return context;
  80b3f0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80b3f4:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80b3f8:	00802074 	movhi	r2,129
  80b3fc:	109c3804 	addi	r2,r2,28896
  80b400:	10800017 	ldw	r2,0(r2)
  80b404:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80b408:	e0bffc17 	ldw	r2,-16(fp)
  80b40c:	1005003a 	cmpeq	r2,r2,zero
  80b410:	10001c1e 	bne	r2,zero,80b484 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80b414:	00802074 	movhi	r2,129
  80b418:	109c3804 	addi	r2,r2,28896
  80b41c:	10800017 	ldw	r2,0(r2)
  80b420:	10800117 	ldw	r2,4(r2)
  80b424:	1007883a 	mov	r3,r2
  80b428:	00802074 	movhi	r2,129
  80b42c:	109c3804 	addi	r2,r2,28896
  80b430:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80b434:	e0fffc17 	ldw	r3,-16(fp)
  80b438:	00800144 	movi	r2,5
  80b43c:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80b440:	e0fffc17 	ldw	r3,-16(fp)
  80b444:	e0bffd0b 	ldhu	r2,-12(fp)
  80b448:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80b44c:	e0bffc17 	ldw	r2,-16(fp)
  80b450:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80b454:	e0fffc17 	ldw	r3,-16(fp)
  80b458:	00800fc4 	movi	r2,63
  80b45c:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80b460:	e0bffc17 	ldw	r2,-16(fp)
  80b464:	100002c5 	stb	zero,11(r2)
  80b468:	e0bffb17 	ldw	r2,-20(fp)
  80b46c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b470:	e0bff917 	ldw	r2,-28(fp)
  80b474:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80b478:	e0bffe17 	ldw	r2,-8(fp)
  80b47c:	10000005 	stb	zero,0(r2)
  80b480:	00000706 	br	80b4a0 <OSFlagCreate+0x120>
  80b484:	e0bffb17 	ldw	r2,-20(fp)
  80b488:	e0bff815 	stw	r2,-32(fp)
  80b48c:	e0bff817 	ldw	r2,-32(fp)
  80b490:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80b494:	e0fffe17 	ldw	r3,-8(fp)
  80b498:	00801c84 	movi	r2,114
  80b49c:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80b4a0:	e0bffc17 	ldw	r2,-16(fp)
  80b4a4:	e0bfff15 	stw	r2,-4(fp)
  80b4a8:	e0bfff17 	ldw	r2,-4(fp)
}
  80b4ac:	e037883a 	mov	sp,fp
  80b4b0:	df000017 	ldw	fp,0(sp)
  80b4b4:	dec00104 	addi	sp,sp,4
  80b4b8:	f800283a 	ret

0080b4bc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80b4bc:	defff004 	addi	sp,sp,-64
  80b4c0:	dfc00f15 	stw	ra,60(sp)
  80b4c4:	df000e15 	stw	fp,56(sp)
  80b4c8:	df000e04 	addi	fp,sp,56
  80b4cc:	e13ffb15 	stw	r4,-20(fp)
  80b4d0:	e1bffd15 	stw	r6,-12(fp)
  80b4d4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80b4d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80b4dc:	e0bffd17 	ldw	r2,-12(fp)
  80b4e0:	1004c03a 	cmpne	r2,r2,zero
  80b4e4:	1000031e 	bne	r2,zero,80b4f4 <OSFlagDel+0x38>
        return (pgrp);
  80b4e8:	e0bffb17 	ldw	r2,-20(fp)
  80b4ec:	e0bfff15 	stw	r2,-4(fp)
  80b4f0:	00009606 	br	80b74c <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80b4f4:	e0bffb17 	ldw	r2,-20(fp)
  80b4f8:	1004c03a 	cmpne	r2,r2,zero
  80b4fc:	1000061e 	bne	r2,zero,80b518 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80b500:	e0fffd17 	ldw	r3,-12(fp)
  80b504:	00801b84 	movi	r2,110
  80b508:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80b50c:	e0fffb17 	ldw	r3,-20(fp)
  80b510:	e0ffff15 	stw	r3,-4(fp)
  80b514:	00008d06 	br	80b74c <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80b518:	00802074 	movhi	r2,129
  80b51c:	109c3504 	addi	r2,r2,28884
  80b520:	10800003 	ldbu	r2,0(r2)
  80b524:	10803fcc 	andi	r2,r2,255
  80b528:	1005003a 	cmpeq	r2,r2,zero
  80b52c:	1000061e 	bne	r2,zero,80b548 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80b530:	e0fffd17 	ldw	r3,-12(fp)
  80b534:	008003c4 	movi	r2,15
  80b538:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80b53c:	e0bffb17 	ldw	r2,-20(fp)
  80b540:	e0bfff15 	stw	r2,-4(fp)
  80b544:	00008106 	br	80b74c <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80b548:	e0bffb17 	ldw	r2,-20(fp)
  80b54c:	10800003 	ldbu	r2,0(r2)
  80b550:	10803fcc 	andi	r2,r2,255
  80b554:	10800160 	cmpeqi	r2,r2,5
  80b558:	1000061e 	bne	r2,zero,80b574 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80b55c:	e0fffd17 	ldw	r3,-12(fp)
  80b560:	00800044 	movi	r2,1
  80b564:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80b568:	e0fffb17 	ldw	r3,-20(fp)
  80b56c:	e0ffff15 	stw	r3,-4(fp)
  80b570:	00007606 	br	80b74c <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b574:	0005303a 	rdctl	r2,status
  80b578:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b57c:	e0fff617 	ldw	r3,-40(fp)
  80b580:	00bfff84 	movi	r2,-2
  80b584:	1884703a 	and	r2,r3,r2
  80b588:	1001703a 	wrctl	status,r2
  
  return context;
  80b58c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80b590:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80b594:	e0bffb17 	ldw	r2,-20(fp)
  80b598:	10800117 	ldw	r2,4(r2)
  80b59c:	1005003a 	cmpeq	r2,r2,zero
  80b5a0:	1000031e 	bne	r2,zero,80b5b0 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80b5a4:	00800044 	movi	r2,1
  80b5a8:	e0bffa05 	stb	r2,-24(fp)
  80b5ac:	00000106 	br	80b5b4 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80b5b0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80b5b4:	e0bffc03 	ldbu	r2,-16(fp)
  80b5b8:	e0bffe15 	stw	r2,-8(fp)
  80b5bc:	e0fffe17 	ldw	r3,-8(fp)
  80b5c0:	1805003a 	cmpeq	r2,r3,zero
  80b5c4:	1000041e 	bne	r2,zero,80b5d8 <OSFlagDel+0x11c>
  80b5c8:	e0fffe17 	ldw	r3,-8(fp)
  80b5cc:	18800060 	cmpeqi	r2,r3,1
  80b5d0:	1000281e 	bne	r2,zero,80b674 <OSFlagDel+0x1b8>
  80b5d4:	00005206 	br	80b720 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80b5d8:	e0bffa03 	ldbu	r2,-24(fp)
  80b5dc:	1004c03a 	cmpne	r2,r2,zero
  80b5e0:	10001a1e 	bne	r2,zero,80b64c <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80b5e4:	e0fffb17 	ldw	r3,-20(fp)
  80b5e8:	00800fc4 	movi	r2,63
  80b5ec:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80b5f0:	e0bffb17 	ldw	r2,-20(fp)
  80b5f4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80b5f8:	e0bffb17 	ldw	r2,-20(fp)
  80b5fc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80b600:	00802074 	movhi	r2,129
  80b604:	109c3804 	addi	r2,r2,28896
  80b608:	10c00017 	ldw	r3,0(r2)
  80b60c:	e0bffb17 	ldw	r2,-20(fp)
  80b610:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80b614:	e0bffb17 	ldw	r2,-20(fp)
  80b618:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80b61c:	00c02074 	movhi	r3,129
  80b620:	18dc3804 	addi	r3,r3,28896
  80b624:	e0bffb17 	ldw	r2,-20(fp)
  80b628:	18800015 	stw	r2,0(r3)
  80b62c:	e0bff717 	ldw	r2,-36(fp)
  80b630:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b634:	e0bff517 	ldw	r2,-44(fp)
  80b638:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80b63c:	e0bffd17 	ldw	r2,-12(fp)
  80b640:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80b644:	e03ff815 	stw	zero,-32(fp)
  80b648:	00003e06 	br	80b744 <OSFlagDel+0x288>
  80b64c:	e0bff717 	ldw	r2,-36(fp)
  80b650:	e0bff415 	stw	r2,-48(fp)
  80b654:	e0bff417 	ldw	r2,-48(fp)
  80b658:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80b65c:	e0fffd17 	ldw	r3,-12(fp)
  80b660:	00801244 	movi	r2,73
  80b664:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80b668:	e0bffb17 	ldw	r2,-20(fp)
  80b66c:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80b670:	00003406 	br	80b744 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80b674:	e0bffb17 	ldw	r2,-20(fp)
  80b678:	10800117 	ldw	r2,4(r2)
  80b67c:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80b680:	00000606 	br	80b69c <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80b684:	e13ff917 	ldw	r4,-28(fp)
  80b688:	000b883a 	mov	r5,zero
  80b68c:	080c7cc0 	call	80c7cc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80b690:	e0bff917 	ldw	r2,-28(fp)
  80b694:	10800017 	ldw	r2,0(r2)
  80b698:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80b69c:	e0bff917 	ldw	r2,-28(fp)
  80b6a0:	1004c03a 	cmpne	r2,r2,zero
  80b6a4:	103ff71e 	bne	r2,zero,80b684 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80b6a8:	e0fffb17 	ldw	r3,-20(fp)
  80b6ac:	00800fc4 	movi	r2,63
  80b6b0:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80b6b4:	e0bffb17 	ldw	r2,-20(fp)
  80b6b8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80b6bc:	e0bffb17 	ldw	r2,-20(fp)
  80b6c0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80b6c4:	00802074 	movhi	r2,129
  80b6c8:	109c3804 	addi	r2,r2,28896
  80b6cc:	10c00017 	ldw	r3,0(r2)
  80b6d0:	e0bffb17 	ldw	r2,-20(fp)
  80b6d4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80b6d8:	e0bffb17 	ldw	r2,-20(fp)
  80b6dc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80b6e0:	00c02074 	movhi	r3,129
  80b6e4:	18dc3804 	addi	r3,r3,28896
  80b6e8:	e0bffb17 	ldw	r2,-20(fp)
  80b6ec:	18800015 	stw	r2,0(r3)
  80b6f0:	e0bff717 	ldw	r2,-36(fp)
  80b6f4:	e0bff315 	stw	r2,-52(fp)
  80b6f8:	e0bff317 	ldw	r2,-52(fp)
  80b6fc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80b700:	e0bffa03 	ldbu	r2,-24(fp)
  80b704:	10800058 	cmpnei	r2,r2,1
  80b708:	1000011e 	bne	r2,zero,80b710 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80b70c:	080a7d80 	call	80a7d8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80b710:	e0bffd17 	ldw	r2,-12(fp)
  80b714:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80b718:	e03ff815 	stw	zero,-32(fp)
             break;
  80b71c:	00000906 	br	80b744 <OSFlagDel+0x288>
  80b720:	e0bff717 	ldw	r2,-36(fp)
  80b724:	e0bff215 	stw	r2,-56(fp)
  80b728:	e0bff217 	ldw	r2,-56(fp)
  80b72c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80b730:	e0fffd17 	ldw	r3,-12(fp)
  80b734:	008001c4 	movi	r2,7
  80b738:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80b73c:	e0bffb17 	ldw	r2,-20(fp)
  80b740:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80b744:	e0bff817 	ldw	r2,-32(fp)
  80b748:	e0bfff15 	stw	r2,-4(fp)
  80b74c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b750:	e037883a 	mov	sp,fp
  80b754:	dfc00117 	ldw	ra,4(sp)
  80b758:	df000017 	ldw	fp,0(sp)
  80b75c:	dec00204 	addi	sp,sp,8
  80b760:	f800283a 	ret

0080b764 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80b764:	defff504 	addi	sp,sp,-44
  80b768:	dfc00a15 	stw	ra,40(sp)
  80b76c:	df000915 	stw	fp,36(sp)
  80b770:	df000904 	addi	fp,sp,36
  80b774:	e13ffc15 	stw	r4,-16(fp)
  80b778:	e17ffd15 	stw	r5,-12(fp)
  80b77c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b780:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80b784:	e0bffe17 	ldw	r2,-8(fp)
  80b788:	1004c03a 	cmpne	r2,r2,zero
  80b78c:	1000021e 	bne	r2,zero,80b798 <OSFlagNameGet+0x34>
        return (0);
  80b790:	e03fff15 	stw	zero,-4(fp)
  80b794:	00003e06 	br	80b890 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80b798:	e0bffc17 	ldw	r2,-16(fp)
  80b79c:	1004c03a 	cmpne	r2,r2,zero
  80b7a0:	1000051e 	bne	r2,zero,80b7b8 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80b7a4:	e0fffe17 	ldw	r3,-8(fp)
  80b7a8:	00801b84 	movi	r2,110
  80b7ac:	18800005 	stb	r2,0(r3)
        return (0);
  80b7b0:	e03fff15 	stw	zero,-4(fp)
  80b7b4:	00003606 	br	80b890 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80b7b8:	e0bffd17 	ldw	r2,-12(fp)
  80b7bc:	1004c03a 	cmpne	r2,r2,zero
  80b7c0:	1000051e 	bne	r2,zero,80b7d8 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80b7c4:	e0fffe17 	ldw	r3,-8(fp)
  80b7c8:	00800304 	movi	r2,12
  80b7cc:	18800005 	stb	r2,0(r3)
        return (0);
  80b7d0:	e03fff15 	stw	zero,-4(fp)
  80b7d4:	00002e06 	br	80b890 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80b7d8:	00802074 	movhi	r2,129
  80b7dc:	109c3504 	addi	r2,r2,28884
  80b7e0:	10800003 	ldbu	r2,0(r2)
  80b7e4:	10803fcc 	andi	r2,r2,255
  80b7e8:	1005003a 	cmpeq	r2,r2,zero
  80b7ec:	1000051e 	bne	r2,zero,80b804 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80b7f0:	e0fffe17 	ldw	r3,-8(fp)
  80b7f4:	00800444 	movi	r2,17
  80b7f8:	18800005 	stb	r2,0(r3)
        return (0);
  80b7fc:	e03fff15 	stw	zero,-4(fp)
  80b800:	00002306 	br	80b890 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b804:	0005303a 	rdctl	r2,status
  80b808:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b80c:	e0fff917 	ldw	r3,-28(fp)
  80b810:	00bfff84 	movi	r2,-2
  80b814:	1884703a 	and	r2,r3,r2
  80b818:	1001703a 	wrctl	status,r2
  
  return context;
  80b81c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80b820:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80b824:	e0bffc17 	ldw	r2,-16(fp)
  80b828:	10800003 	ldbu	r2,0(r2)
  80b82c:	10803fcc 	andi	r2,r2,255
  80b830:	10800160 	cmpeqi	r2,r2,5
  80b834:	1000091e 	bne	r2,zero,80b85c <OSFlagNameGet+0xf8>
  80b838:	e0bffa17 	ldw	r2,-24(fp)
  80b83c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b840:	e0bff817 	ldw	r2,-32(fp)
  80b844:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80b848:	e0fffe17 	ldw	r3,-8(fp)
  80b84c:	00800044 	movi	r2,1
  80b850:	18800005 	stb	r2,0(r3)
        return (0);
  80b854:	e03fff15 	stw	zero,-4(fp)
  80b858:	00000d06 	br	80b890 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80b85c:	e0bffc17 	ldw	r2,-16(fp)
  80b860:	11400284 	addi	r5,r2,10
  80b864:	e13ffd17 	ldw	r4,-12(fp)
  80b868:	080a91c0 	call	80a91c <OS_StrCopy>
  80b86c:	e0bffb05 	stb	r2,-20(fp)
  80b870:	e0bffa17 	ldw	r2,-24(fp)
  80b874:	e0bff715 	stw	r2,-36(fp)
  80b878:	e0bff717 	ldw	r2,-36(fp)
  80b87c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80b880:	e0bffe17 	ldw	r2,-8(fp)
  80b884:	10000005 	stb	zero,0(r2)
    return (len);
  80b888:	e0bffb03 	ldbu	r2,-20(fp)
  80b88c:	e0bfff15 	stw	r2,-4(fp)
  80b890:	e0bfff17 	ldw	r2,-4(fp)
}
  80b894:	e037883a 	mov	sp,fp
  80b898:	dfc00117 	ldw	ra,4(sp)
  80b89c:	df000017 	ldw	fp,0(sp)
  80b8a0:	dec00204 	addi	sp,sp,8
  80b8a4:	f800283a 	ret

0080b8a8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80b8a8:	defff504 	addi	sp,sp,-44
  80b8ac:	dfc00a15 	stw	ra,40(sp)
  80b8b0:	df000915 	stw	fp,36(sp)
  80b8b4:	df000904 	addi	fp,sp,36
  80b8b8:	e13ffd15 	stw	r4,-12(fp)
  80b8bc:	e17ffe15 	stw	r5,-8(fp)
  80b8c0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b8c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80b8c8:	e0bfff17 	ldw	r2,-4(fp)
  80b8cc:	1005003a 	cmpeq	r2,r2,zero
  80b8d0:	1000451e 	bne	r2,zero,80b9e8 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80b8d4:	e0bffd17 	ldw	r2,-12(fp)
  80b8d8:	1004c03a 	cmpne	r2,r2,zero
  80b8dc:	1000041e 	bne	r2,zero,80b8f0 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80b8e0:	e0ffff17 	ldw	r3,-4(fp)
  80b8e4:	00801b84 	movi	r2,110
  80b8e8:	18800005 	stb	r2,0(r3)
        return;
  80b8ec:	00003e06 	br	80b9e8 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80b8f0:	e0bffe17 	ldw	r2,-8(fp)
  80b8f4:	1004c03a 	cmpne	r2,r2,zero
  80b8f8:	1000041e 	bne	r2,zero,80b90c <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80b8fc:	e0ffff17 	ldw	r3,-4(fp)
  80b900:	00800304 	movi	r2,12
  80b904:	18800005 	stb	r2,0(r3)
        return;
  80b908:	00003706 	br	80b9e8 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80b90c:	00802074 	movhi	r2,129
  80b910:	109c3504 	addi	r2,r2,28884
  80b914:	10800003 	ldbu	r2,0(r2)
  80b918:	10803fcc 	andi	r2,r2,255
  80b91c:	1005003a 	cmpeq	r2,r2,zero
  80b920:	1000041e 	bne	r2,zero,80b934 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80b924:	e0ffff17 	ldw	r3,-4(fp)
  80b928:	00800484 	movi	r2,18
  80b92c:	18800005 	stb	r2,0(r3)
        return;
  80b930:	00002d06 	br	80b9e8 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b934:	0005303a 	rdctl	r2,status
  80b938:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b93c:	e0fffa17 	ldw	r3,-24(fp)
  80b940:	00bfff84 	movi	r2,-2
  80b944:	1884703a 	and	r2,r3,r2
  80b948:	1001703a 	wrctl	status,r2
  
  return context;
  80b94c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80b950:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80b954:	e0bffd17 	ldw	r2,-12(fp)
  80b958:	10800003 	ldbu	r2,0(r2)
  80b95c:	10803fcc 	andi	r2,r2,255
  80b960:	10800160 	cmpeqi	r2,r2,5
  80b964:	1000081e 	bne	r2,zero,80b988 <OSFlagNameSet+0xe0>
  80b968:	e0bffb17 	ldw	r2,-20(fp)
  80b96c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b970:	e0bff917 	ldw	r2,-28(fp)
  80b974:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80b978:	e0ffff17 	ldw	r3,-4(fp)
  80b97c:	00800044 	movi	r2,1
  80b980:	18800005 	stb	r2,0(r3)
        return;
  80b984:	00001806 	br	80b9e8 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80b988:	e13ffe17 	ldw	r4,-8(fp)
  80b98c:	080a99c0 	call	80a99c <OS_StrLen>
  80b990:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80b994:	e0bffc03 	ldbu	r2,-16(fp)
  80b998:	10800830 	cmpltui	r2,r2,32
  80b99c:	1000081e 	bne	r2,zero,80b9c0 <OSFlagNameSet+0x118>
  80b9a0:	e0bffb17 	ldw	r2,-20(fp)
  80b9a4:	e0bff815 	stw	r2,-32(fp)
  80b9a8:	e0bff817 	ldw	r2,-32(fp)
  80b9ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  80b9b0:	e0ffff17 	ldw	r3,-4(fp)
  80b9b4:	00801cc4 	movi	r2,115
  80b9b8:	18800005 	stb	r2,0(r3)
        return;
  80b9bc:	00000a06 	br	80b9e8 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  80b9c0:	e0bffd17 	ldw	r2,-12(fp)
  80b9c4:	11000284 	addi	r4,r2,10
  80b9c8:	e17ffe17 	ldw	r5,-8(fp)
  80b9cc:	080a91c0 	call	80a91c <OS_StrCopy>
  80b9d0:	e0bffb17 	ldw	r2,-20(fp)
  80b9d4:	e0bff715 	stw	r2,-36(fp)
  80b9d8:	e0bff717 	ldw	r2,-36(fp)
  80b9dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80b9e0:	e0bfff17 	ldw	r2,-4(fp)
  80b9e4:	10000005 	stb	zero,0(r2)
    return;
}
  80b9e8:	e037883a 	mov	sp,fp
  80b9ec:	dfc00117 	ldw	ra,4(sp)
  80b9f0:	df000017 	ldw	fp,0(sp)
  80b9f4:	dec00204 	addi	sp,sp,8
  80b9f8:	f800283a 	ret

0080b9fc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  80b9fc:	deffe004 	addi	sp,sp,-128
  80ba00:	dfc01f15 	stw	ra,124(sp)
  80ba04:	df001e15 	stw	fp,120(sp)
  80ba08:	df001e04 	addi	fp,sp,120
  80ba0c:	e13ff915 	stw	r4,-28(fp)
  80ba10:	e17ffa0d 	sth	r5,-24(fp)
  80ba14:	e1bffb05 	stb	r6,-20(fp)
  80ba18:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80ba1c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80ba20:	e0800217 	ldw	r2,8(fp)
  80ba24:	1004c03a 	cmpne	r2,r2,zero
  80ba28:	1000021e 	bne	r2,zero,80ba34 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  80ba2c:	e03fff15 	stw	zero,-4(fp)
  80ba30:	00017d06 	br	80c028 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80ba34:	e0bff917 	ldw	r2,-28(fp)
  80ba38:	1004c03a 	cmpne	r2,r2,zero
  80ba3c:	1000051e 	bne	r2,zero,80ba54 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80ba40:	e0c00217 	ldw	r3,8(fp)
  80ba44:	00801b84 	movi	r2,110
  80ba48:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80ba4c:	e03fff15 	stw	zero,-4(fp)
  80ba50:	00017506 	br	80c028 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80ba54:	00802074 	movhi	r2,129
  80ba58:	109c3504 	addi	r2,r2,28884
  80ba5c:	10800003 	ldbu	r2,0(r2)
  80ba60:	10803fcc 	andi	r2,r2,255
  80ba64:	1005003a 	cmpeq	r2,r2,zero
  80ba68:	1000051e 	bne	r2,zero,80ba80 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  80ba6c:	e0c00217 	ldw	r3,8(fp)
  80ba70:	00800084 	movi	r2,2
  80ba74:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80ba78:	e03fff15 	stw	zero,-4(fp)
  80ba7c:	00016a06 	br	80c028 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  80ba80:	00802074 	movhi	r2,129
  80ba84:	109c2704 	addi	r2,r2,28828
  80ba88:	10800003 	ldbu	r2,0(r2)
  80ba8c:	10803fcc 	andi	r2,r2,255
  80ba90:	1005003a 	cmpeq	r2,r2,zero
  80ba94:	1000051e 	bne	r2,zero,80baac <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  80ba98:	e0c00217 	ldw	r3,8(fp)
  80ba9c:	00800344 	movi	r2,13
  80baa0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80baa4:	e03fff15 	stw	zero,-4(fp)
  80baa8:	00015f06 	br	80c028 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80baac:	e0bff917 	ldw	r2,-28(fp)
  80bab0:	10800003 	ldbu	r2,0(r2)
  80bab4:	10803fcc 	andi	r2,r2,255
  80bab8:	10800160 	cmpeqi	r2,r2,5
  80babc:	1000051e 	bne	r2,zero,80bad4 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  80bac0:	e0c00217 	ldw	r3,8(fp)
  80bac4:	00800044 	movi	r2,1
  80bac8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80bacc:	e03fff15 	stw	zero,-4(fp)
  80bad0:	00015506 	br	80c028 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80bad4:	e0fffb03 	ldbu	r3,-20(fp)
  80bad8:	00bfe004 	movi	r2,-128
  80badc:	1884703a 	and	r2,r3,r2
  80bae0:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  80bae4:	e0bff283 	ldbu	r2,-54(fp)
  80bae8:	1005003a 	cmpeq	r2,r2,zero
  80baec:	1000071e 	bne	r2,zero,80bb0c <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80baf0:	00c01fc4 	movi	r3,127
  80baf4:	e0bffb03 	ldbu	r2,-20(fp)
  80baf8:	10c4703a 	and	r2,r2,r3
  80bafc:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  80bb00:	00800044 	movi	r2,1
  80bb04:	e0bff205 	stb	r2,-56(fp)
  80bb08:	00000106 	br	80bb10 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  80bb0c:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb10:	0005303a 	rdctl	r2,status
  80bb14:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb18:	e0fff017 	ldw	r3,-64(fp)
  80bb1c:	00bfff84 	movi	r2,-2
  80bb20:	1884703a 	and	r2,r3,r2
  80bb24:	1001703a 	wrctl	status,r2
  
  return context;
  80bb28:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80bb2c:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  80bb30:	e0bffb03 	ldbu	r2,-20(fp)
  80bb34:	e0bffe15 	stw	r2,-8(fp)
  80bb38:	e0fffe17 	ldw	r3,-8(fp)
  80bb3c:	18800060 	cmpeqi	r2,r3,1
  80bb40:	1000981e 	bne	r2,zero,80bda4 <OSFlagPend+0x3a8>
  80bb44:	e0fffe17 	ldw	r3,-8(fp)
  80bb48:	18800088 	cmpgei	r2,r3,2
  80bb4c:	1000041e 	bne	r2,zero,80bb60 <OSFlagPend+0x164>
  80bb50:	e0fffe17 	ldw	r3,-8(fp)
  80bb54:	1805003a 	cmpeq	r2,r3,zero
  80bb58:	1000641e 	bne	r2,zero,80bcec <OSFlagPend+0x2f0>
  80bb5c:	0000bf06 	br	80be5c <OSFlagPend+0x460>
  80bb60:	e0fffe17 	ldw	r3,-8(fp)
  80bb64:	188000a0 	cmpeqi	r2,r3,2
  80bb68:	1000041e 	bne	r2,zero,80bb7c <OSFlagPend+0x180>
  80bb6c:	e0fffe17 	ldw	r3,-8(fp)
  80bb70:	188000e0 	cmpeqi	r2,r3,3
  80bb74:	10002f1e 	bne	r2,zero,80bc34 <OSFlagPend+0x238>
  80bb78:	0000b806 	br	80be5c <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  80bb7c:	e0bff917 	ldw	r2,-28(fp)
  80bb80:	10c0020b 	ldhu	r3,8(r2)
  80bb84:	e0bffa0b 	ldhu	r2,-24(fp)
  80bb88:	1884703a 	and	r2,r3,r2
  80bb8c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80bb90:	e0fff30b 	ldhu	r3,-52(fp)
  80bb94:	e0bffa0b 	ldhu	r2,-24(fp)
  80bb98:	18801a1e 	bne	r3,r2,80bc04 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80bb9c:	e0bff203 	ldbu	r2,-56(fp)
  80bba0:	10800058 	cmpnei	r2,r2,1
  80bba4:	1000091e 	bne	r2,zero,80bbcc <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80bba8:	e0bff917 	ldw	r2,-28(fp)
  80bbac:	1080020b 	ldhu	r2,8(r2)
  80bbb0:	1007883a 	mov	r3,r2
  80bbb4:	e0bff30b 	ldhu	r2,-52(fp)
  80bbb8:	0084303a 	nor	r2,zero,r2
  80bbbc:	1884703a 	and	r2,r3,r2
  80bbc0:	1007883a 	mov	r3,r2
  80bbc4:	e0bff917 	ldw	r2,-28(fp)
  80bbc8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80bbcc:	00802074 	movhi	r2,129
  80bbd0:	109c3604 	addi	r2,r2,28888
  80bbd4:	10c00017 	ldw	r3,0(r2)
  80bbd8:	e0bff30b 	ldhu	r2,-52(fp)
  80bbdc:	18800b0d 	sth	r2,44(r3)
  80bbe0:	e0bff117 	ldw	r2,-60(fp)
  80bbe4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bbe8:	e0bfef17 	ldw	r2,-68(fp)
  80bbec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80bbf0:	e0800217 	ldw	r2,8(fp)
  80bbf4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80bbf8:	e0bff30b 	ldhu	r2,-52(fp)
  80bbfc:	e0bfff15 	stw	r2,-4(fp)
  80bc00:	00010906 	br	80c028 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80bc04:	e1bffa0b 	ldhu	r6,-24(fp)
  80bc08:	e1fffb03 	ldbu	r7,-20(fp)
  80bc0c:	e0bffc0b 	ldhu	r2,-16(fp)
  80bc10:	e17ff404 	addi	r5,fp,-48
  80bc14:	d8800015 	stw	r2,0(sp)
  80bc18:	e13ff917 	ldw	r4,-28(fp)
  80bc1c:	080c5240 	call	80c524 <OS_FlagBlock>
  80bc20:	e0bff117 	ldw	r2,-60(fp)
  80bc24:	e0bfee15 	stw	r2,-72(fp)
  80bc28:	e0bfee17 	ldw	r2,-72(fp)
  80bc2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80bc30:	00009506 	br	80be88 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80bc34:	e0bff917 	ldw	r2,-28(fp)
  80bc38:	10c0020b 	ldhu	r3,8(r2)
  80bc3c:	e0bffa0b 	ldhu	r2,-24(fp)
  80bc40:	1884703a 	and	r2,r3,r2
  80bc44:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80bc48:	e0bff30b 	ldhu	r2,-52(fp)
  80bc4c:	1005003a 	cmpeq	r2,r2,zero
  80bc50:	10001a1e 	bne	r2,zero,80bcbc <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80bc54:	e0bff203 	ldbu	r2,-56(fp)
  80bc58:	10800058 	cmpnei	r2,r2,1
  80bc5c:	1000091e 	bne	r2,zero,80bc84 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80bc60:	e0bff917 	ldw	r2,-28(fp)
  80bc64:	1080020b 	ldhu	r2,8(r2)
  80bc68:	1007883a 	mov	r3,r2
  80bc6c:	e0bff30b 	ldhu	r2,-52(fp)
  80bc70:	0084303a 	nor	r2,zero,r2
  80bc74:	1884703a 	and	r2,r3,r2
  80bc78:	1007883a 	mov	r3,r2
  80bc7c:	e0bff917 	ldw	r2,-28(fp)
  80bc80:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80bc84:	00802074 	movhi	r2,129
  80bc88:	109c3604 	addi	r2,r2,28888
  80bc8c:	10c00017 	ldw	r3,0(r2)
  80bc90:	e0bff30b 	ldhu	r2,-52(fp)
  80bc94:	18800b0d 	sth	r2,44(r3)
  80bc98:	e0bff117 	ldw	r2,-60(fp)
  80bc9c:	e0bfed15 	stw	r2,-76(fp)
  80bca0:	e0bfed17 	ldw	r2,-76(fp)
  80bca4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80bca8:	e0800217 	ldw	r2,8(fp)
  80bcac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80bcb0:	e0fff30b 	ldhu	r3,-52(fp)
  80bcb4:	e0ffff15 	stw	r3,-4(fp)
  80bcb8:	0000db06 	br	80c028 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80bcbc:	e1bffa0b 	ldhu	r6,-24(fp)
  80bcc0:	e1fffb03 	ldbu	r7,-20(fp)
  80bcc4:	e0bffc0b 	ldhu	r2,-16(fp)
  80bcc8:	e17ff404 	addi	r5,fp,-48
  80bccc:	d8800015 	stw	r2,0(sp)
  80bcd0:	e13ff917 	ldw	r4,-28(fp)
  80bcd4:	080c5240 	call	80c524 <OS_FlagBlock>
  80bcd8:	e0bff117 	ldw	r2,-60(fp)
  80bcdc:	e0bfec15 	stw	r2,-80(fp)
  80bce0:	e0bfec17 	ldw	r2,-80(fp)
  80bce4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80bce8:	00006706 	br	80be88 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80bcec:	e0bff917 	ldw	r2,-28(fp)
  80bcf0:	1080020b 	ldhu	r2,8(r2)
  80bcf4:	0084303a 	nor	r2,zero,r2
  80bcf8:	1007883a 	mov	r3,r2
  80bcfc:	e0bffa0b 	ldhu	r2,-24(fp)
  80bd00:	1884703a 	and	r2,r3,r2
  80bd04:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80bd08:	e0fff30b 	ldhu	r3,-52(fp)
  80bd0c:	e0bffa0b 	ldhu	r2,-24(fp)
  80bd10:	1880181e 	bne	r3,r2,80bd74 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80bd14:	e0bff203 	ldbu	r2,-56(fp)
  80bd18:	10800058 	cmpnei	r2,r2,1
  80bd1c:	1000071e 	bne	r2,zero,80bd3c <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80bd20:	e0bff917 	ldw	r2,-28(fp)
  80bd24:	10c0020b 	ldhu	r3,8(r2)
  80bd28:	e0bff30b 	ldhu	r2,-52(fp)
  80bd2c:	1884b03a 	or	r2,r3,r2
  80bd30:	1007883a 	mov	r3,r2
  80bd34:	e0bff917 	ldw	r2,-28(fp)
  80bd38:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80bd3c:	00802074 	movhi	r2,129
  80bd40:	109c3604 	addi	r2,r2,28888
  80bd44:	10c00017 	ldw	r3,0(r2)
  80bd48:	e0bff30b 	ldhu	r2,-52(fp)
  80bd4c:	18800b0d 	sth	r2,44(r3)
  80bd50:	e0bff117 	ldw	r2,-60(fp)
  80bd54:	e0bfeb15 	stw	r2,-84(fp)
  80bd58:	e0bfeb17 	ldw	r2,-84(fp)
  80bd5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80bd60:	e0800217 	ldw	r2,8(fp)
  80bd64:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80bd68:	e0bff30b 	ldhu	r2,-52(fp)
  80bd6c:	e0bfff15 	stw	r2,-4(fp)
  80bd70:	0000ad06 	br	80c028 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80bd74:	e1bffa0b 	ldhu	r6,-24(fp)
  80bd78:	e1fffb03 	ldbu	r7,-20(fp)
  80bd7c:	e0bffc0b 	ldhu	r2,-16(fp)
  80bd80:	e17ff404 	addi	r5,fp,-48
  80bd84:	d8800015 	stw	r2,0(sp)
  80bd88:	e13ff917 	ldw	r4,-28(fp)
  80bd8c:	080c5240 	call	80c524 <OS_FlagBlock>
  80bd90:	e0bff117 	ldw	r2,-60(fp)
  80bd94:	e0bfea15 	stw	r2,-88(fp)
  80bd98:	e0bfea17 	ldw	r2,-88(fp)
  80bd9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80bda0:	00003906 	br	80be88 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80bda4:	e0bff917 	ldw	r2,-28(fp)
  80bda8:	1080020b 	ldhu	r2,8(r2)
  80bdac:	0084303a 	nor	r2,zero,r2
  80bdb0:	1007883a 	mov	r3,r2
  80bdb4:	e0bffa0b 	ldhu	r2,-24(fp)
  80bdb8:	1884703a 	and	r2,r3,r2
  80bdbc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80bdc0:	e0bff30b 	ldhu	r2,-52(fp)
  80bdc4:	1005003a 	cmpeq	r2,r2,zero
  80bdc8:	1000181e 	bne	r2,zero,80be2c <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80bdcc:	e0bff203 	ldbu	r2,-56(fp)
  80bdd0:	10800058 	cmpnei	r2,r2,1
  80bdd4:	1000071e 	bne	r2,zero,80bdf4 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80bdd8:	e0bff917 	ldw	r2,-28(fp)
  80bddc:	10c0020b 	ldhu	r3,8(r2)
  80bde0:	e0bff30b 	ldhu	r2,-52(fp)
  80bde4:	1884b03a 	or	r2,r3,r2
  80bde8:	1007883a 	mov	r3,r2
  80bdec:	e0bff917 	ldw	r2,-28(fp)
  80bdf0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80bdf4:	00802074 	movhi	r2,129
  80bdf8:	109c3604 	addi	r2,r2,28888
  80bdfc:	10c00017 	ldw	r3,0(r2)
  80be00:	e0bff30b 	ldhu	r2,-52(fp)
  80be04:	18800b0d 	sth	r2,44(r3)
  80be08:	e0bff117 	ldw	r2,-60(fp)
  80be0c:	e0bfe915 	stw	r2,-92(fp)
  80be10:	e0bfe917 	ldw	r2,-92(fp)
  80be14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80be18:	e0800217 	ldw	r2,8(fp)
  80be1c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80be20:	e0fff30b 	ldhu	r3,-52(fp)
  80be24:	e0ffff15 	stw	r3,-4(fp)
  80be28:	00007f06 	br	80c028 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80be2c:	e1bffa0b 	ldhu	r6,-24(fp)
  80be30:	e1fffb03 	ldbu	r7,-20(fp)
  80be34:	e0bffc0b 	ldhu	r2,-16(fp)
  80be38:	e17ff404 	addi	r5,fp,-48
  80be3c:	d8800015 	stw	r2,0(sp)
  80be40:	e13ff917 	ldw	r4,-28(fp)
  80be44:	080c5240 	call	80c524 <OS_FlagBlock>
  80be48:	e0bff117 	ldw	r2,-60(fp)
  80be4c:	e0bfe815 	stw	r2,-96(fp)
  80be50:	e0bfe817 	ldw	r2,-96(fp)
  80be54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80be58:	00000b06 	br	80be88 <OSFlagPend+0x48c>
  80be5c:	e0bff117 	ldw	r2,-60(fp)
  80be60:	e0bfe715 	stw	r2,-100(fp)
  80be64:	e0bfe717 	ldw	r2,-100(fp)
  80be68:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80be6c:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  80be70:	e0c00217 	ldw	r3,8(fp)
  80be74:	00801bc4 	movi	r2,111
  80be78:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  80be7c:	e0bff30b 	ldhu	r2,-52(fp)
  80be80:	e0bfff15 	stw	r2,-4(fp)
  80be84:	00006806 	br	80c028 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  80be88:	080a7d80 	call	80a7d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80be8c:	0005303a 	rdctl	r2,status
  80be90:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80be94:	e0ffe617 	ldw	r3,-104(fp)
  80be98:	00bfff84 	movi	r2,-2
  80be9c:	1884703a 	and	r2,r3,r2
  80bea0:	1001703a 	wrctl	status,r2
  
  return context;
  80bea4:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  80bea8:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  80beac:	00802074 	movhi	r2,129
  80beb0:	109c3604 	addi	r2,r2,28888
  80beb4:	10800017 	ldw	r2,0(r2)
  80beb8:	10800c43 	ldbu	r2,49(r2)
  80bebc:	10803fcc 	andi	r2,r2,255
  80bec0:	1005003a 	cmpeq	r2,r2,zero
  80bec4:	1000221e 	bne	r2,zero,80bf50 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  80bec8:	00802074 	movhi	r2,129
  80becc:	109c3604 	addi	r2,r2,28888
  80bed0:	10800017 	ldw	r2,0(r2)
  80bed4:	10800c43 	ldbu	r2,49(r2)
  80bed8:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80bedc:	00802074 	movhi	r2,129
  80bee0:	109c3604 	addi	r2,r2,28888
  80bee4:	10800017 	ldw	r2,0(r2)
  80bee8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  80beec:	e13ff404 	addi	r4,fp,-48
  80bef0:	080c8dc0 	call	80c8dc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  80bef4:	00802074 	movhi	r2,129
  80bef8:	109c3604 	addi	r2,r2,28888
  80befc:	10800017 	ldw	r2,0(r2)
  80bf00:	10000c05 	stb	zero,48(r2)
  80bf04:	e0bff117 	ldw	r2,-60(fp)
  80bf08:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bf0c:	e0bfe517 	ldw	r2,-108(fp)
  80bf10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  80bf14:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  80bf18:	e0bff243 	ldbu	r2,-55(fp)
  80bf1c:	108000a0 	cmpeqi	r2,r2,2
  80bf20:	1000011e 	bne	r2,zero,80bf28 <OSFlagPend+0x52c>
  80bf24:	00000406 	br	80bf38 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  80bf28:	e0c00217 	ldw	r3,8(fp)
  80bf2c:	00800384 	movi	r2,14
  80bf30:	18800005 	stb	r2,0(r3)
                 break;
  80bf34:	00000306 	br	80bf44 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  80bf38:	e0c00217 	ldw	r3,8(fp)
  80bf3c:	00800284 	movi	r2,10
  80bf40:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  80bf44:	e0fff30b 	ldhu	r3,-52(fp)
  80bf48:	e0ffff15 	stw	r3,-4(fp)
  80bf4c:	00003606 	br	80c028 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  80bf50:	00802074 	movhi	r2,129
  80bf54:	109c3604 	addi	r2,r2,28888
  80bf58:	10800017 	ldw	r2,0(r2)
  80bf5c:	10800b0b 	ldhu	r2,44(r2)
  80bf60:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  80bf64:	e0bff203 	ldbu	r2,-56(fp)
  80bf68:	10800058 	cmpnei	r2,r2,1
  80bf6c:	1000261e 	bne	r2,zero,80c008 <OSFlagPend+0x60c>
        switch (wait_type) {
  80bf70:	e0bffb03 	ldbu	r2,-20(fp)
  80bf74:	e0bffd15 	stw	r2,-12(fp)
  80bf78:	e0fffd17 	ldw	r3,-12(fp)
  80bf7c:	1804803a 	cmplt	r2,r3,zero
  80bf80:	1000181e 	bne	r2,zero,80bfe4 <OSFlagPend+0x5e8>
  80bf84:	e0fffd17 	ldw	r3,-12(fp)
  80bf88:	18800090 	cmplti	r2,r3,2
  80bf8c:	10000d1e 	bne	r2,zero,80bfc4 <OSFlagPend+0x5c8>
  80bf90:	e0fffd17 	ldw	r3,-12(fp)
  80bf94:	18800108 	cmpgei	r2,r3,4
  80bf98:	1000121e 	bne	r2,zero,80bfe4 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  80bf9c:	e0bff917 	ldw	r2,-28(fp)
  80bfa0:	1080020b 	ldhu	r2,8(r2)
  80bfa4:	1007883a 	mov	r3,r2
  80bfa8:	e0bff30b 	ldhu	r2,-52(fp)
  80bfac:	0084303a 	nor	r2,zero,r2
  80bfb0:	1884703a 	and	r2,r3,r2
  80bfb4:	1007883a 	mov	r3,r2
  80bfb8:	e0bff917 	ldw	r2,-28(fp)
  80bfbc:	10c0020d 	sth	r3,8(r2)
                 break;
  80bfc0:	00001106 	br	80c008 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  80bfc4:	e0bff917 	ldw	r2,-28(fp)
  80bfc8:	10c0020b 	ldhu	r3,8(r2)
  80bfcc:	e0bff30b 	ldhu	r2,-52(fp)
  80bfd0:	1884b03a 	or	r2,r3,r2
  80bfd4:	1007883a 	mov	r3,r2
  80bfd8:	e0bff917 	ldw	r2,-28(fp)
  80bfdc:	10c0020d 	sth	r3,8(r2)
                 break;
  80bfe0:	00000906 	br	80c008 <OSFlagPend+0x60c>
  80bfe4:	e0bff117 	ldw	r2,-60(fp)
  80bfe8:	e0bfe415 	stw	r2,-112(fp)
  80bfec:	e0bfe417 	ldw	r2,-112(fp)
  80bff0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80bff4:	e0c00217 	ldw	r3,8(fp)
  80bff8:	00801bc4 	movi	r2,111
  80bffc:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80c000:	e03fff15 	stw	zero,-4(fp)
  80c004:	00000806 	br	80c028 <OSFlagPend+0x62c>
  80c008:	e0bff117 	ldw	r2,-60(fp)
  80c00c:	e0bfe315 	stw	r2,-116(fp)
  80c010:	e0bfe317 	ldw	r2,-116(fp)
  80c014:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  80c018:	e0800217 	ldw	r2,8(fp)
  80c01c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  80c020:	e0bff30b 	ldhu	r2,-52(fp)
  80c024:	e0bfff15 	stw	r2,-4(fp)
  80c028:	e0bfff17 	ldw	r2,-4(fp)
}
  80c02c:	e037883a 	mov	sp,fp
  80c030:	dfc00117 	ldw	ra,4(sp)
  80c034:	df000017 	ldw	fp,0(sp)
  80c038:	dec00204 	addi	sp,sp,8
  80c03c:	f800283a 	ret

0080c040 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  80c040:	defffb04 	addi	sp,sp,-20
  80c044:	df000415 	stw	fp,16(sp)
  80c048:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80c04c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c050:	0005303a 	rdctl	r2,status
  80c054:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c058:	e0fffd17 	ldw	r3,-12(fp)
  80c05c:	00bfff84 	movi	r2,-2
  80c060:	1884703a 	and	r2,r3,r2
  80c064:	1001703a 	wrctl	status,r2
  
  return context;
  80c068:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80c06c:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  80c070:	00802074 	movhi	r2,129
  80c074:	109c3604 	addi	r2,r2,28888
  80c078:	10800017 	ldw	r2,0(r2)
  80c07c:	10800b0b 	ldhu	r2,44(r2)
  80c080:	e0bfff0d 	sth	r2,-4(fp)
  80c084:	e0bffe17 	ldw	r2,-8(fp)
  80c088:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c08c:	e0bffc17 	ldw	r2,-16(fp)
  80c090:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  80c094:	e0bfff0b 	ldhu	r2,-4(fp)
}
  80c098:	e037883a 	mov	sp,fp
  80c09c:	df000017 	ldw	fp,0(sp)
  80c0a0:	dec00104 	addi	sp,sp,4
  80c0a4:	f800283a 	ret

0080c0a8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  80c0a8:	deffed04 	addi	sp,sp,-76
  80c0ac:	dfc01215 	stw	ra,72(sp)
  80c0b0:	df001115 	stw	fp,68(sp)
  80c0b4:	df001104 	addi	fp,sp,68
  80c0b8:	e13ff915 	stw	r4,-28(fp)
  80c0bc:	e1fffc15 	stw	r7,-16(fp)
  80c0c0:	e17ffa0d 	sth	r5,-24(fp)
  80c0c4:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  80c0c8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80c0cc:	e0bffc17 	ldw	r2,-16(fp)
  80c0d0:	1004c03a 	cmpne	r2,r2,zero
  80c0d4:	1000021e 	bne	r2,zero,80c0e0 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  80c0d8:	e03fff15 	stw	zero,-4(fp)
  80c0dc:	0000d606 	br	80c438 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  80c0e0:	e0bff917 	ldw	r2,-28(fp)
  80c0e4:	1004c03a 	cmpne	r2,r2,zero
  80c0e8:	1000051e 	bne	r2,zero,80c100 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80c0ec:	e0fffc17 	ldw	r3,-16(fp)
  80c0f0:	00801b84 	movi	r2,110
  80c0f4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80c0f8:	e03fff15 	stw	zero,-4(fp)
  80c0fc:	0000ce06 	br	80c438 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80c100:	e0bff917 	ldw	r2,-28(fp)
  80c104:	10800003 	ldbu	r2,0(r2)
  80c108:	10803fcc 	andi	r2,r2,255
  80c10c:	10800160 	cmpeqi	r2,r2,5
  80c110:	1000051e 	bne	r2,zero,80c128 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  80c114:	e0fffc17 	ldw	r3,-16(fp)
  80c118:	00800044 	movi	r2,1
  80c11c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80c120:	e03fff15 	stw	zero,-4(fp)
  80c124:	0000c406 	br	80c438 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c128:	0005303a 	rdctl	r2,status
  80c12c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c130:	e0fff417 	ldw	r3,-48(fp)
  80c134:	00bfff84 	movi	r2,-2
  80c138:	1884703a 	and	r2,r3,r2
  80c13c:	1001703a 	wrctl	status,r2
  
  return context;
  80c140:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80c144:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  80c148:	e0bffb03 	ldbu	r2,-20(fp)
  80c14c:	e0bffe15 	stw	r2,-8(fp)
  80c150:	e0fffe17 	ldw	r3,-8(fp)
  80c154:	1805003a 	cmpeq	r2,r3,zero
  80c158:	1000041e 	bne	r2,zero,80c16c <OSFlagPost+0xc4>
  80c15c:	e0fffe17 	ldw	r3,-8(fp)
  80c160:	18800060 	cmpeqi	r2,r3,1
  80c164:	10000b1e 	bne	r2,zero,80c194 <OSFlagPost+0xec>
  80c168:	00001206 	br	80c1b4 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  80c16c:	e0bff917 	ldw	r2,-28(fp)
  80c170:	1080020b 	ldhu	r2,8(r2)
  80c174:	1007883a 	mov	r3,r2
  80c178:	e0bffa0b 	ldhu	r2,-24(fp)
  80c17c:	0084303a 	nor	r2,zero,r2
  80c180:	1884703a 	and	r2,r3,r2
  80c184:	1007883a 	mov	r3,r2
  80c188:	e0bff917 	ldw	r2,-28(fp)
  80c18c:	10c0020d 	sth	r3,8(r2)
             break;
  80c190:	00001106 	br	80c1d8 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  80c194:	e0bff917 	ldw	r2,-28(fp)
  80c198:	10c0020b 	ldhu	r3,8(r2)
  80c19c:	e0bffa0b 	ldhu	r2,-24(fp)
  80c1a0:	1884b03a 	or	r2,r3,r2
  80c1a4:	1007883a 	mov	r3,r2
  80c1a8:	e0bff917 	ldw	r2,-28(fp)
  80c1ac:	10c0020d 	sth	r3,8(r2)
             break;
  80c1b0:	00000906 	br	80c1d8 <OSFlagPost+0x130>
  80c1b4:	e0bff517 	ldw	r2,-44(fp)
  80c1b8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c1bc:	e0bff317 	ldw	r2,-52(fp)
  80c1c0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  80c1c4:	e0fffc17 	ldw	r3,-16(fp)
  80c1c8:	00801c44 	movi	r2,113
  80c1cc:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  80c1d0:	e03fff15 	stw	zero,-4(fp)
  80c1d4:	00009806 	br	80c438 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  80c1d8:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80c1dc:	e0bff917 	ldw	r2,-28(fp)
  80c1e0:	10800117 	ldw	r2,4(r2)
  80c1e4:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80c1e8:	00007506 	br	80c3c0 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  80c1ec:	e0bff817 	ldw	r2,-32(fp)
  80c1f0:	10800483 	ldbu	r2,18(r2)
  80c1f4:	10803fcc 	andi	r2,r2,255
  80c1f8:	e0bffd15 	stw	r2,-12(fp)
  80c1fc:	e0fffd17 	ldw	r3,-12(fp)
  80c200:	18800060 	cmpeqi	r2,r3,1
  80c204:	10004d1e 	bne	r2,zero,80c33c <OSFlagPost+0x294>
  80c208:	e0fffd17 	ldw	r3,-12(fp)
  80c20c:	18800088 	cmpgei	r2,r3,2
  80c210:	1000041e 	bne	r2,zero,80c224 <OSFlagPost+0x17c>
  80c214:	e0fffd17 	ldw	r3,-12(fp)
  80c218:	1805003a 	cmpeq	r2,r3,zero
  80c21c:	1000301e 	bne	r2,zero,80c2e0 <OSFlagPost+0x238>
  80c220:	00005b06 	br	80c390 <OSFlagPost+0x2e8>
  80c224:	e0fffd17 	ldw	r3,-12(fp)
  80c228:	188000a0 	cmpeqi	r2,r3,2
  80c22c:	1000041e 	bne	r2,zero,80c240 <OSFlagPost+0x198>
  80c230:	e0fffd17 	ldw	r3,-12(fp)
  80c234:	188000e0 	cmpeqi	r2,r3,3
  80c238:	1000161e 	bne	r2,zero,80c294 <OSFlagPost+0x1ec>
  80c23c:	00005406 	br	80c390 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80c240:	e0bff917 	ldw	r2,-28(fp)
  80c244:	10c0020b 	ldhu	r3,8(r2)
  80c248:	e0bff817 	ldw	r2,-32(fp)
  80c24c:	1080040b 	ldhu	r2,16(r2)
  80c250:	1884703a 	and	r2,r3,r2
  80c254:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80c258:	e0bff817 	ldw	r2,-32(fp)
  80c25c:	1080040b 	ldhu	r2,16(r2)
  80c260:	10ffffcc 	andi	r3,r2,65535
  80c264:	e0bff68b 	ldhu	r2,-38(fp)
  80c268:	1880521e 	bne	r3,r2,80c3b4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80c26c:	e17ff68b 	ldhu	r5,-38(fp)
  80c270:	e13ff817 	ldw	r4,-32(fp)
  80c274:	080c7cc0 	call	80c7cc <OS_FlagTaskRdy>
  80c278:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80c27c:	e0bff603 	ldbu	r2,-40(fp)
  80c280:	10800058 	cmpnei	r2,r2,1
  80c284:	10004b1e 	bne	r2,zero,80c3b4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80c288:	00800044 	movi	r2,1
  80c28c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80c290:	00004806 	br	80c3b4 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80c294:	e0bff917 	ldw	r2,-28(fp)
  80c298:	10c0020b 	ldhu	r3,8(r2)
  80c29c:	e0bff817 	ldw	r2,-32(fp)
  80c2a0:	1080040b 	ldhu	r2,16(r2)
  80c2a4:	1884703a 	and	r2,r3,r2
  80c2a8:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80c2ac:	e0bff68b 	ldhu	r2,-38(fp)
  80c2b0:	1005003a 	cmpeq	r2,r2,zero
  80c2b4:	10003f1e 	bne	r2,zero,80c3b4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80c2b8:	e17ff68b 	ldhu	r5,-38(fp)
  80c2bc:	e13ff817 	ldw	r4,-32(fp)
  80c2c0:	080c7cc0 	call	80c7cc <OS_FlagTaskRdy>
  80c2c4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80c2c8:	e0bff603 	ldbu	r2,-40(fp)
  80c2cc:	10800058 	cmpnei	r2,r2,1
  80c2d0:	1000381e 	bne	r2,zero,80c3b4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80c2d4:	00800044 	movi	r2,1
  80c2d8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80c2dc:	00003506 	br	80c3b4 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80c2e0:	e0bff917 	ldw	r2,-28(fp)
  80c2e4:	1080020b 	ldhu	r2,8(r2)
  80c2e8:	0084303a 	nor	r2,zero,r2
  80c2ec:	1007883a 	mov	r3,r2
  80c2f0:	e0bff817 	ldw	r2,-32(fp)
  80c2f4:	1080040b 	ldhu	r2,16(r2)
  80c2f8:	1884703a 	and	r2,r3,r2
  80c2fc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80c300:	e0bff817 	ldw	r2,-32(fp)
  80c304:	1080040b 	ldhu	r2,16(r2)
  80c308:	10ffffcc 	andi	r3,r2,65535
  80c30c:	e0bff68b 	ldhu	r2,-38(fp)
  80c310:	1880281e 	bne	r3,r2,80c3b4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80c314:	e17ff68b 	ldhu	r5,-38(fp)
  80c318:	e13ff817 	ldw	r4,-32(fp)
  80c31c:	080c7cc0 	call	80c7cc <OS_FlagTaskRdy>
  80c320:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80c324:	e0bff603 	ldbu	r2,-40(fp)
  80c328:	10800058 	cmpnei	r2,r2,1
  80c32c:	1000211e 	bne	r2,zero,80c3b4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80c330:	00800044 	movi	r2,1
  80c334:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80c338:	00001e06 	br	80c3b4 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80c33c:	e0bff917 	ldw	r2,-28(fp)
  80c340:	1080020b 	ldhu	r2,8(r2)
  80c344:	0084303a 	nor	r2,zero,r2
  80c348:	1007883a 	mov	r3,r2
  80c34c:	e0bff817 	ldw	r2,-32(fp)
  80c350:	1080040b 	ldhu	r2,16(r2)
  80c354:	1884703a 	and	r2,r3,r2
  80c358:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80c35c:	e0bff68b 	ldhu	r2,-38(fp)
  80c360:	1005003a 	cmpeq	r2,r2,zero
  80c364:	1000131e 	bne	r2,zero,80c3b4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80c368:	e17ff68b 	ldhu	r5,-38(fp)
  80c36c:	e13ff817 	ldw	r4,-32(fp)
  80c370:	080c7cc0 	call	80c7cc <OS_FlagTaskRdy>
  80c374:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80c378:	e0bff603 	ldbu	r2,-40(fp)
  80c37c:	10800058 	cmpnei	r2,r2,1
  80c380:	10000c1e 	bne	r2,zero,80c3b4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80c384:	00800044 	movi	r2,1
  80c388:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80c38c:	00000906 	br	80c3b4 <OSFlagPost+0x30c>
  80c390:	e0bff517 	ldw	r2,-44(fp)
  80c394:	e0bff215 	stw	r2,-56(fp)
  80c398:	e0bff217 	ldw	r2,-56(fp)
  80c39c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80c3a0:	e0fffc17 	ldw	r3,-16(fp)
  80c3a4:	00801bc4 	movi	r2,111
  80c3a8:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80c3ac:	e03fff15 	stw	zero,-4(fp)
  80c3b0:	00002106 	br	80c438 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  80c3b4:	e0bff817 	ldw	r2,-32(fp)
  80c3b8:	10800017 	ldw	r2,0(r2)
  80c3bc:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80c3c0:	e0bff817 	ldw	r2,-32(fp)
  80c3c4:	1004c03a 	cmpne	r2,r2,zero
  80c3c8:	103f881e 	bne	r2,zero,80c1ec <OSFlagPost+0x144>
  80c3cc:	e0bff517 	ldw	r2,-44(fp)
  80c3d0:	e0bff115 	stw	r2,-60(fp)
  80c3d4:	e0bff117 	ldw	r2,-60(fp)
  80c3d8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  80c3dc:	e0bff783 	ldbu	r2,-34(fp)
  80c3e0:	10800058 	cmpnei	r2,r2,1
  80c3e4:	1000011e 	bne	r2,zero,80c3ec <OSFlagPost+0x344>
        OS_Sched();
  80c3e8:	080a7d80 	call	80a7d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c3ec:	0005303a 	rdctl	r2,status
  80c3f0:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c3f4:	e0fff017 	ldw	r3,-64(fp)
  80c3f8:	00bfff84 	movi	r2,-2
  80c3fc:	1884703a 	and	r2,r3,r2
  80c400:	1001703a 	wrctl	status,r2
  
  return context;
  80c404:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  80c408:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  80c40c:	e0bff917 	ldw	r2,-28(fp)
  80c410:	1080020b 	ldhu	r2,8(r2)
  80c414:	e0bff70d 	sth	r2,-36(fp)
  80c418:	e0bff517 	ldw	r2,-44(fp)
  80c41c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c420:	e0bfef17 	ldw	r2,-68(fp)
  80c424:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  80c428:	e0bffc17 	ldw	r2,-16(fp)
  80c42c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  80c430:	e0bff70b 	ldhu	r2,-36(fp)
  80c434:	e0bfff15 	stw	r2,-4(fp)
  80c438:	e0bfff17 	ldw	r2,-4(fp)
}
  80c43c:	e037883a 	mov	sp,fp
  80c440:	dfc00117 	ldw	ra,4(sp)
  80c444:	df000017 	ldw	fp,0(sp)
  80c448:	dec00204 	addi	sp,sp,8
  80c44c:	f800283a 	ret

0080c450 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  80c450:	defff804 	addi	sp,sp,-32
  80c454:	df000715 	stw	fp,28(sp)
  80c458:	df000704 	addi	fp,sp,28
  80c45c:	e13ffd15 	stw	r4,-12(fp)
  80c460:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  80c464:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  80c468:	e0bffe17 	ldw	r2,-8(fp)
  80c46c:	1004c03a 	cmpne	r2,r2,zero
  80c470:	1000021e 	bne	r2,zero,80c47c <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  80c474:	e03fff15 	stw	zero,-4(fp)
  80c478:	00002506 	br	80c510 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  80c47c:	e0bffd17 	ldw	r2,-12(fp)
  80c480:	1004c03a 	cmpne	r2,r2,zero
  80c484:	1000051e 	bne	r2,zero,80c49c <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80c488:	e0fffe17 	ldw	r3,-8(fp)
  80c48c:	00801b84 	movi	r2,110
  80c490:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80c494:	e03fff15 	stw	zero,-4(fp)
  80c498:	00001d06 	br	80c510 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  80c49c:	e0bffd17 	ldw	r2,-12(fp)
  80c4a0:	10800003 	ldbu	r2,0(r2)
  80c4a4:	10803fcc 	andi	r2,r2,255
  80c4a8:	10800160 	cmpeqi	r2,r2,5
  80c4ac:	1000051e 	bne	r2,zero,80c4c4 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80c4b0:	e0fffe17 	ldw	r3,-8(fp)
  80c4b4:	00800044 	movi	r2,1
  80c4b8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80c4bc:	e03fff15 	stw	zero,-4(fp)
  80c4c0:	00001306 	br	80c510 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c4c4:	0005303a 	rdctl	r2,status
  80c4c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c4cc:	e0fffa17 	ldw	r3,-24(fp)
  80c4d0:	00bfff84 	movi	r2,-2
  80c4d4:	1884703a 	and	r2,r3,r2
  80c4d8:	1001703a 	wrctl	status,r2
  
  return context;
  80c4dc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80c4e0:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  80c4e4:	e0bffd17 	ldw	r2,-12(fp)
  80c4e8:	1080020b 	ldhu	r2,8(r2)
  80c4ec:	e0bffc0d 	sth	r2,-16(fp)
  80c4f0:	e0bffb17 	ldw	r2,-20(fp)
  80c4f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c4f8:	e0bff917 	ldw	r2,-28(fp)
  80c4fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80c500:	e0bffe17 	ldw	r2,-8(fp)
  80c504:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  80c508:	e0bffc0b 	ldhu	r2,-16(fp)
  80c50c:	e0bfff15 	stw	r2,-4(fp)
  80c510:	e0bfff17 	ldw	r2,-4(fp)
}
  80c514:	e037883a 	mov	sp,fp
  80c518:	df000017 	ldw	fp,0(sp)
  80c51c:	dec00104 	addi	sp,sp,4
  80c520:	f800283a 	ret

0080c524 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  80c524:	defff804 	addi	sp,sp,-32
  80c528:	df000715 	stw	fp,28(sp)
  80c52c:	df000704 	addi	fp,sp,28
  80c530:	e13ffb15 	stw	r4,-20(fp)
  80c534:	e17ffc15 	stw	r5,-16(fp)
  80c538:	e0800117 	ldw	r2,4(fp)
  80c53c:	e1bffd0d 	sth	r6,-12(fp)
  80c540:	e1fffe05 	stb	r7,-8(fp)
  80c544:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  80c548:	00802074 	movhi	r2,129
  80c54c:	109c3604 	addi	r2,r2,28888
  80c550:	10c00017 	ldw	r3,0(r2)
  80c554:	00802074 	movhi	r2,129
  80c558:	109c3604 	addi	r2,r2,28888
  80c55c:	10800017 	ldw	r2,0(r2)
  80c560:	10800c03 	ldbu	r2,48(r2)
  80c564:	10800814 	ori	r2,r2,32
  80c568:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  80c56c:	00802074 	movhi	r2,129
  80c570:	109c3604 	addi	r2,r2,28888
  80c574:	10800017 	ldw	r2,0(r2)
  80c578:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  80c57c:	00802074 	movhi	r2,129
  80c580:	109c3604 	addi	r2,r2,28888
  80c584:	10c00017 	ldw	r3,0(r2)
  80c588:	e0bfff0b 	ldhu	r2,-4(fp)
  80c58c:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  80c590:	00802074 	movhi	r2,129
  80c594:	109c3604 	addi	r2,r2,28888
  80c598:	10c00017 	ldw	r3,0(r2)
  80c59c:	e0bffc17 	ldw	r2,-16(fp)
  80c5a0:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  80c5a4:	e0fffc17 	ldw	r3,-16(fp)
  80c5a8:	e0bffd0b 	ldhu	r2,-12(fp)
  80c5ac:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  80c5b0:	e0fffc17 	ldw	r3,-16(fp)
  80c5b4:	e0bffe03 	ldbu	r2,-8(fp)
  80c5b8:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  80c5bc:	00802074 	movhi	r2,129
  80c5c0:	109c3604 	addi	r2,r2,28888
  80c5c4:	10c00017 	ldw	r3,0(r2)
  80c5c8:	e0bffc17 	ldw	r2,-16(fp)
  80c5cc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  80c5d0:	e0bffb17 	ldw	r2,-20(fp)
  80c5d4:	10c00117 	ldw	r3,4(r2)
  80c5d8:	e0bffc17 	ldw	r2,-16(fp)
  80c5dc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  80c5e0:	e0bffc17 	ldw	r2,-16(fp)
  80c5e4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  80c5e8:	e0fffc17 	ldw	r3,-16(fp)
  80c5ec:	e0bffb17 	ldw	r2,-20(fp)
  80c5f0:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80c5f4:	e0bffb17 	ldw	r2,-20(fp)
  80c5f8:	10800117 	ldw	r2,4(r2)
  80c5fc:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  80c600:	e0bffa17 	ldw	r2,-24(fp)
  80c604:	1005003a 	cmpeq	r2,r2,zero
  80c608:	1000031e 	bne	r2,zero,80c618 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  80c60c:	e0fffa17 	ldw	r3,-24(fp)
  80c610:	e0bffc17 	ldw	r2,-16(fp)
  80c614:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  80c618:	e0fffb17 	ldw	r3,-20(fp)
  80c61c:	e0bffc17 	ldw	r2,-16(fp)
  80c620:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  80c624:	00802074 	movhi	r2,129
  80c628:	109c3604 	addi	r2,r2,28888
  80c62c:	10800017 	ldw	r2,0(r2)
  80c630:	10800d03 	ldbu	r2,52(r2)
  80c634:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80c638:	e13ff903 	ldbu	r4,-28(fp)
  80c63c:	e0fff903 	ldbu	r3,-28(fp)
  80c640:	00802074 	movhi	r2,129
  80c644:	109c3344 	addi	r2,r2,28877
  80c648:	10c5883a 	add	r2,r2,r3
  80c64c:	10800003 	ldbu	r2,0(r2)
  80c650:	1007883a 	mov	r3,r2
  80c654:	00802074 	movhi	r2,129
  80c658:	109c3604 	addi	r2,r2,28888
  80c65c:	10800017 	ldw	r2,0(r2)
  80c660:	10800d43 	ldbu	r2,53(r2)
  80c664:	0084303a 	nor	r2,zero,r2
  80c668:	1884703a 	and	r2,r3,r2
  80c66c:	1007883a 	mov	r3,r2
  80c670:	00802074 	movhi	r2,129
  80c674:	109c3344 	addi	r2,r2,28877
  80c678:	1105883a 	add	r2,r2,r4
  80c67c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  80c680:	e0fff903 	ldbu	r3,-28(fp)
  80c684:	00802074 	movhi	r2,129
  80c688:	109c3344 	addi	r2,r2,28877
  80c68c:	10c5883a 	add	r2,r2,r3
  80c690:	10800003 	ldbu	r2,0(r2)
  80c694:	10803fcc 	andi	r2,r2,255
  80c698:	1004c03a 	cmpne	r2,r2,zero
  80c69c:	10000e1e 	bne	r2,zero,80c6d8 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80c6a0:	00802074 	movhi	r2,129
  80c6a4:	109c3604 	addi	r2,r2,28888
  80c6a8:	10800017 	ldw	r2,0(r2)
  80c6ac:	10800d83 	ldbu	r2,54(r2)
  80c6b0:	0084303a 	nor	r2,zero,r2
  80c6b4:	1007883a 	mov	r3,r2
  80c6b8:	00802074 	movhi	r2,129
  80c6bc:	109c3304 	addi	r2,r2,28876
  80c6c0:	10800003 	ldbu	r2,0(r2)
  80c6c4:	1884703a 	and	r2,r3,r2
  80c6c8:	1007883a 	mov	r3,r2
  80c6cc:	00802074 	movhi	r2,129
  80c6d0:	109c3304 	addi	r2,r2,28876
  80c6d4:	10c00005 	stb	r3,0(r2)
    }
}
  80c6d8:	e037883a 	mov	sp,fp
  80c6dc:	df000017 	ldw	fp,0(sp)
  80c6e0:	dec00104 	addi	sp,sp,4
  80c6e4:	f800283a 	ret

0080c6e8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  80c6e8:	defffb04 	addi	sp,sp,-20
  80c6ec:	dfc00415 	stw	ra,16(sp)
  80c6f0:	df000315 	stw	fp,12(sp)
  80c6f4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  80c6f8:	01002234 	movhi	r4,136
  80c6fc:	210a3704 	addi	r4,r4,10460
  80c700:	0140dc04 	movi	r5,880
  80c704:	080a7180 	call	80a718 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  80c708:	00802234 	movhi	r2,136
  80c70c:	108a3704 	addi	r2,r2,10460
  80c710:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  80c714:	00802234 	movhi	r2,136
  80c718:	108a4204 	addi	r2,r2,10504
  80c71c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80c720:	e03fff0d 	sth	zero,-4(fp)
  80c724:	00001306 	br	80c774 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80c728:	e0bffe17 	ldw	r2,-8(fp)
  80c72c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  80c730:	e0fffe17 	ldw	r3,-8(fp)
  80c734:	e0bffd17 	ldw	r2,-12(fp)
  80c738:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  80c73c:	e0fffe17 	ldw	r3,-8(fp)
  80c740:	00800fc4 	movi	r2,63
  80c744:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80c748:	e0bffe17 	ldw	r2,-8(fp)
  80c74c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  80c750:	e0bffe17 	ldw	r2,-8(fp)
  80c754:	10800b04 	addi	r2,r2,44
  80c758:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  80c75c:	e0bffd17 	ldw	r2,-12(fp)
  80c760:	10800b04 	addi	r2,r2,44
  80c764:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80c768:	e0bfff0b 	ldhu	r2,-4(fp)
  80c76c:	10800044 	addi	r2,r2,1
  80c770:	e0bfff0d 	sth	r2,-4(fp)
  80c774:	e0bfff0b 	ldhu	r2,-4(fp)
  80c778:	108004f0 	cmpltui	r2,r2,19
  80c77c:	103fea1e 	bne	r2,zero,80c728 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80c780:	e0bffe17 	ldw	r2,-8(fp)
  80c784:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  80c788:	e0bffe17 	ldw	r2,-8(fp)
  80c78c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  80c790:	e0fffe17 	ldw	r3,-8(fp)
  80c794:	00800fc4 	movi	r2,63
  80c798:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80c79c:	e0bffe17 	ldw	r2,-8(fp)
  80c7a0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  80c7a4:	00c02074 	movhi	r3,129
  80c7a8:	18dc3804 	addi	r3,r3,28896
  80c7ac:	00802234 	movhi	r2,136
  80c7b0:	108a3704 	addi	r2,r2,10460
  80c7b4:	18800015 	stw	r2,0(r3)
#endif
}
  80c7b8:	e037883a 	mov	sp,fp
  80c7bc:	dfc00117 	ldw	ra,4(sp)
  80c7c0:	df000017 	ldw	fp,0(sp)
  80c7c4:	dec00204 	addi	sp,sp,8
  80c7c8:	f800283a 	ret

0080c7cc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  80c7cc:	defffa04 	addi	sp,sp,-24
  80c7d0:	dfc00515 	stw	ra,20(sp)
  80c7d4:	df000415 	stw	fp,16(sp)
  80c7d8:	df000404 	addi	fp,sp,16
  80c7dc:	e13ffe15 	stw	r4,-8(fp)
  80c7e0:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  80c7e4:	e0bffe17 	ldw	r2,-8(fp)
  80c7e8:	10800217 	ldw	r2,8(r2)
  80c7ec:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  80c7f0:	e0bffd17 	ldw	r2,-12(fp)
  80c7f4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  80c7f8:	e0fffd17 	ldw	r3,-12(fp)
  80c7fc:	e0bfff0b 	ldhu	r2,-4(fp)
  80c800:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  80c804:	e0bffd17 	ldw	r2,-12(fp)
  80c808:	10c00c03 	ldbu	r3,48(r2)
  80c80c:	00bff7c4 	movi	r2,-33
  80c810:	1884703a 	and	r2,r3,r2
  80c814:	1007883a 	mov	r3,r2
  80c818:	e0bffd17 	ldw	r2,-12(fp)
  80c81c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  80c820:	e0bffd17 	ldw	r2,-12(fp)
  80c824:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  80c828:	e0bffd17 	ldw	r2,-12(fp)
  80c82c:	10800c03 	ldbu	r2,48(r2)
  80c830:	10803fcc 	andi	r2,r2,255
  80c834:	1004c03a 	cmpne	r2,r2,zero
  80c838:	10001f1e 	bne	r2,zero,80c8b8 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  80c83c:	e0bffd17 	ldw	r2,-12(fp)
  80c840:	10c00d83 	ldbu	r3,54(r2)
  80c844:	00802074 	movhi	r2,129
  80c848:	109c3304 	addi	r2,r2,28876
  80c84c:	10800003 	ldbu	r2,0(r2)
  80c850:	1884b03a 	or	r2,r3,r2
  80c854:	1007883a 	mov	r3,r2
  80c858:	00802074 	movhi	r2,129
  80c85c:	109c3304 	addi	r2,r2,28876
  80c860:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80c864:	e0bffd17 	ldw	r2,-12(fp)
  80c868:	10800d03 	ldbu	r2,52(r2)
  80c86c:	11003fcc 	andi	r4,r2,255
  80c870:	e0bffd17 	ldw	r2,-12(fp)
  80c874:	10800d03 	ldbu	r2,52(r2)
  80c878:	10c03fcc 	andi	r3,r2,255
  80c87c:	00802074 	movhi	r2,129
  80c880:	109c3344 	addi	r2,r2,28877
  80c884:	10c5883a 	add	r2,r2,r3
  80c888:	10c00003 	ldbu	r3,0(r2)
  80c88c:	e0bffd17 	ldw	r2,-12(fp)
  80c890:	10800d43 	ldbu	r2,53(r2)
  80c894:	1884b03a 	or	r2,r3,r2
  80c898:	1007883a 	mov	r3,r2
  80c89c:	00802074 	movhi	r2,129
  80c8a0:	109c3344 	addi	r2,r2,28877
  80c8a4:	1105883a 	add	r2,r2,r4
  80c8a8:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  80c8ac:	00800044 	movi	r2,1
  80c8b0:	e0bffc05 	stb	r2,-16(fp)
  80c8b4:	00000106 	br	80c8bc <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  80c8b8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  80c8bc:	e13ffe17 	ldw	r4,-8(fp)
  80c8c0:	080c8dc0 	call	80c8dc <OS_FlagUnlink>
    return (sched);
  80c8c4:	e0bffc03 	ldbu	r2,-16(fp)
}
  80c8c8:	e037883a 	mov	sp,fp
  80c8cc:	dfc00117 	ldw	ra,4(sp)
  80c8d0:	df000017 	ldw	fp,0(sp)
  80c8d4:	dec00204 	addi	sp,sp,8
  80c8d8:	f800283a 	ret

0080c8dc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  80c8dc:	defffa04 	addi	sp,sp,-24
  80c8e0:	df000515 	stw	fp,20(sp)
  80c8e4:	df000504 	addi	fp,sp,20
  80c8e8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  80c8ec:	e0bfff17 	ldw	r2,-4(fp)
  80c8f0:	10800117 	ldw	r2,4(r2)
  80c8f4:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80c8f8:	e0bfff17 	ldw	r2,-4(fp)
  80c8fc:	10800017 	ldw	r2,0(r2)
  80c900:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  80c904:	e0bffc17 	ldw	r2,-16(fp)
  80c908:	1004c03a 	cmpne	r2,r2,zero
  80c90c:	10000c1e 	bne	r2,zero,80c940 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  80c910:	e0bfff17 	ldw	r2,-4(fp)
  80c914:	10800317 	ldw	r2,12(r2)
  80c918:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  80c91c:	e0fffd17 	ldw	r3,-12(fp)
  80c920:	e0bffb17 	ldw	r2,-20(fp)
  80c924:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  80c928:	e0bffb17 	ldw	r2,-20(fp)
  80c92c:	1005003a 	cmpeq	r2,r2,zero
  80c930:	10000c1e 	bne	r2,zero,80c964 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  80c934:	e0bffb17 	ldw	r2,-20(fp)
  80c938:	10000115 	stw	zero,4(r2)
  80c93c:	00000906 	br	80c964 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  80c940:	e0fffc17 	ldw	r3,-16(fp)
  80c944:	e0bffb17 	ldw	r2,-20(fp)
  80c948:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  80c94c:	e0bffb17 	ldw	r2,-20(fp)
  80c950:	1005003a 	cmpeq	r2,r2,zero
  80c954:	1000031e 	bne	r2,zero,80c964 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  80c958:	e0fffb17 	ldw	r3,-20(fp)
  80c95c:	e0bffc17 	ldw	r2,-16(fp)
  80c960:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  80c964:	e0bfff17 	ldw	r2,-4(fp)
  80c968:	10800217 	ldw	r2,8(r2)
  80c96c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  80c970:	e0bffe17 	ldw	r2,-8(fp)
  80c974:	10000a15 	stw	zero,40(r2)
#endif
}
  80c978:	e037883a 	mov	sp,fp
  80c97c:	df000017 	ldw	fp,0(sp)
  80c980:	dec00104 	addi	sp,sp,4
  80c984:	f800283a 	ret

0080c988 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  80c988:	defff304 	addi	sp,sp,-52
  80c98c:	df000c15 	stw	fp,48(sp)
  80c990:	df000c04 	addi	fp,sp,48
  80c994:	e13ffb15 	stw	r4,-20(fp)
  80c998:	e17ffc15 	stw	r5,-16(fp)
  80c99c:	e1bffd15 	stw	r6,-12(fp)
  80c9a0:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80c9a4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80c9a8:	e0bffe17 	ldw	r2,-8(fp)
  80c9ac:	1004c03a 	cmpne	r2,r2,zero
  80c9b0:	1000021e 	bne	r2,zero,80c9bc <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  80c9b4:	e03fff15 	stw	zero,-4(fp)
  80c9b8:	00007506 	br	80cb90 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  80c9bc:	e0bffb17 	ldw	r2,-20(fp)
  80c9c0:	1004c03a 	cmpne	r2,r2,zero
  80c9c4:	1000051e 	bne	r2,zero,80c9dc <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80c9c8:	e0fffe17 	ldw	r3,-8(fp)
  80c9cc:	00801884 	movi	r2,98
  80c9d0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80c9d4:	e03fff15 	stw	zero,-4(fp)
  80c9d8:	00006d06 	br	80cb90 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  80c9dc:	e0bffb17 	ldw	r2,-20(fp)
  80c9e0:	108000cc 	andi	r2,r2,3
  80c9e4:	1005003a 	cmpeq	r2,r2,zero
  80c9e8:	1000051e 	bne	r2,zero,80ca00 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80c9ec:	e0fffe17 	ldw	r3,-8(fp)
  80c9f0:	00801884 	movi	r2,98
  80c9f4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80c9f8:	e03fff15 	stw	zero,-4(fp)
  80c9fc:	00006406 	br	80cb90 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  80ca00:	e0bffc17 	ldw	r2,-16(fp)
  80ca04:	108000a8 	cmpgeui	r2,r2,2
  80ca08:	1000051e 	bne	r2,zero,80ca20 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  80ca0c:	e0fffe17 	ldw	r3,-8(fp)
  80ca10:	008016c4 	movi	r2,91
  80ca14:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80ca18:	e03fff15 	stw	zero,-4(fp)
  80ca1c:	00005c06 	br	80cb90 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  80ca20:	e0bffd17 	ldw	r2,-12(fp)
  80ca24:	10800128 	cmpgeui	r2,r2,4
  80ca28:	1000051e 	bne	r2,zero,80ca40 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  80ca2c:	e0fffe17 	ldw	r3,-8(fp)
  80ca30:	00801704 	movi	r2,92
  80ca34:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80ca38:	e03fff15 	stw	zero,-4(fp)
  80ca3c:	00005406 	br	80cb90 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ca40:	0005303a 	rdctl	r2,status
  80ca44:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca48:	e0fff517 	ldw	r3,-44(fp)
  80ca4c:	00bfff84 	movi	r2,-2
  80ca50:	1884703a 	and	r2,r3,r2
  80ca54:	1001703a 	wrctl	status,r2
  
  return context;
  80ca58:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80ca5c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  80ca60:	00802074 	movhi	r2,129
  80ca64:	109c3004 	addi	r2,r2,28864
  80ca68:	10800017 	ldw	r2,0(r2)
  80ca6c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  80ca70:	00802074 	movhi	r2,129
  80ca74:	109c3004 	addi	r2,r2,28864
  80ca78:	10800017 	ldw	r2,0(r2)
  80ca7c:	1005003a 	cmpeq	r2,r2,zero
  80ca80:	1000081e 	bne	r2,zero,80caa4 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  80ca84:	00802074 	movhi	r2,129
  80ca88:	109c3004 	addi	r2,r2,28864
  80ca8c:	10800017 	ldw	r2,0(r2)
  80ca90:	10800117 	ldw	r2,4(r2)
  80ca94:	1007883a 	mov	r3,r2
  80ca98:	00802074 	movhi	r2,129
  80ca9c:	109c3004 	addi	r2,r2,28864
  80caa0:	10c00015 	stw	r3,0(r2)
  80caa4:	e0bff617 	ldw	r2,-40(fp)
  80caa8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80caac:	e0bff417 	ldw	r2,-48(fp)
  80cab0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  80cab4:	e0bffa17 	ldw	r2,-24(fp)
  80cab8:	1004c03a 	cmpne	r2,r2,zero
  80cabc:	1000051e 	bne	r2,zero,80cad4 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  80cac0:	e0fffe17 	ldw	r3,-8(fp)
  80cac4:	00801684 	movi	r2,90
  80cac8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80cacc:	e03fff15 	stw	zero,-4(fp)
  80cad0:	00002f06 	br	80cb90 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  80cad4:	e0bffb17 	ldw	r2,-20(fp)
  80cad8:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  80cadc:	e0bffb17 	ldw	r2,-20(fp)
  80cae0:	1007883a 	mov	r3,r2
  80cae4:	e0bffd17 	ldw	r2,-12(fp)
  80cae8:	1885883a 	add	r2,r3,r2
  80caec:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  80caf0:	e03ff715 	stw	zero,-36(fp)
  80caf4:	00000d06 	br	80cb2c <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  80caf8:	e0fff817 	ldw	r3,-32(fp)
  80cafc:	e0bff917 	ldw	r2,-28(fp)
  80cb00:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  80cb04:	e0bff917 	ldw	r2,-28(fp)
  80cb08:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  80cb0c:	e0bff917 	ldw	r2,-28(fp)
  80cb10:	1007883a 	mov	r3,r2
  80cb14:	e0bffd17 	ldw	r2,-12(fp)
  80cb18:	1885883a 	add	r2,r3,r2
  80cb1c:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  80cb20:	e0bff717 	ldw	r2,-36(fp)
  80cb24:	10800044 	addi	r2,r2,1
  80cb28:	e0bff715 	stw	r2,-36(fp)
  80cb2c:	e0bffc17 	ldw	r2,-16(fp)
  80cb30:	10ffffc4 	addi	r3,r2,-1
  80cb34:	e0bff717 	ldw	r2,-36(fp)
  80cb38:	10ffef36 	bltu	r2,r3,80caf8 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  80cb3c:	e0bff817 	ldw	r2,-32(fp)
  80cb40:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  80cb44:	e0fffa17 	ldw	r3,-24(fp)
  80cb48:	e0bffb17 	ldw	r2,-20(fp)
  80cb4c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  80cb50:	e0fffa17 	ldw	r3,-24(fp)
  80cb54:	e0bffb17 	ldw	r2,-20(fp)
  80cb58:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  80cb5c:	e0fffa17 	ldw	r3,-24(fp)
  80cb60:	e0bffc17 	ldw	r2,-16(fp)
  80cb64:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  80cb68:	e0fffa17 	ldw	r3,-24(fp)
  80cb6c:	e0bffc17 	ldw	r2,-16(fp)
  80cb70:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  80cb74:	e0fffa17 	ldw	r3,-24(fp)
  80cb78:	e0bffd17 	ldw	r2,-12(fp)
  80cb7c:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  80cb80:	e0bffe17 	ldw	r2,-8(fp)
  80cb84:	10000005 	stb	zero,0(r2)
    return (pmem);
  80cb88:	e0bffa17 	ldw	r2,-24(fp)
  80cb8c:	e0bfff15 	stw	r2,-4(fp)
  80cb90:	e0bfff17 	ldw	r2,-4(fp)
}
  80cb94:	e037883a 	mov	sp,fp
  80cb98:	df000017 	ldw	fp,0(sp)
  80cb9c:	dec00104 	addi	sp,sp,4
  80cba0:	f800283a 	ret

0080cba4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  80cba4:	defff704 	addi	sp,sp,-36
  80cba8:	df000815 	stw	fp,32(sp)
  80cbac:	df000804 	addi	fp,sp,32
  80cbb0:	e13ffd15 	stw	r4,-12(fp)
  80cbb4:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80cbb8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80cbbc:	e0bffe17 	ldw	r2,-8(fp)
  80cbc0:	1004c03a 	cmpne	r2,r2,zero
  80cbc4:	1000021e 	bne	r2,zero,80cbd0 <OSMemGet+0x2c>
        return ((void *)0);
  80cbc8:	e03fff15 	stw	zero,-4(fp)
  80cbcc:	00003106 	br	80cc94 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  80cbd0:	e0bffd17 	ldw	r2,-12(fp)
  80cbd4:	1004c03a 	cmpne	r2,r2,zero
  80cbd8:	1000051e 	bne	r2,zero,80cbf0 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80cbdc:	e0fffe17 	ldw	r3,-8(fp)
  80cbe0:	00801804 	movi	r2,96
  80cbe4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80cbe8:	e03fff15 	stw	zero,-4(fp)
  80cbec:	00002906 	br	80cc94 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cbf0:	0005303a 	rdctl	r2,status
  80cbf4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cbf8:	e0fffa17 	ldw	r3,-24(fp)
  80cbfc:	00bfff84 	movi	r2,-2
  80cc00:	1884703a 	and	r2,r3,r2
  80cc04:	1001703a 	wrctl	status,r2
  
  return context;
  80cc08:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80cc0c:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80cc10:	e0bffd17 	ldw	r2,-12(fp)
  80cc14:	10800417 	ldw	r2,16(r2)
  80cc18:	1005003a 	cmpeq	r2,r2,zero
  80cc1c:	1000151e 	bne	r2,zero,80cc74 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  80cc20:	e0bffd17 	ldw	r2,-12(fp)
  80cc24:	10800117 	ldw	r2,4(r2)
  80cc28:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  80cc2c:	e0bffc17 	ldw	r2,-16(fp)
  80cc30:	10c00017 	ldw	r3,0(r2)
  80cc34:	e0bffd17 	ldw	r2,-12(fp)
  80cc38:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  80cc3c:	e0bffd17 	ldw	r2,-12(fp)
  80cc40:	10800417 	ldw	r2,16(r2)
  80cc44:	10ffffc4 	addi	r3,r2,-1
  80cc48:	e0bffd17 	ldw	r2,-12(fp)
  80cc4c:	10c00415 	stw	r3,16(r2)
  80cc50:	e0bffb17 	ldw	r2,-20(fp)
  80cc54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cc58:	e0bff917 	ldw	r2,-28(fp)
  80cc5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  80cc60:	e0bffe17 	ldw	r2,-8(fp)
  80cc64:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  80cc68:	e0bffc17 	ldw	r2,-16(fp)
  80cc6c:	e0bfff15 	stw	r2,-4(fp)
  80cc70:	00000806 	br	80cc94 <OSMemGet+0xf0>
  80cc74:	e0bffb17 	ldw	r2,-20(fp)
  80cc78:	e0bff815 	stw	r2,-32(fp)
  80cc7c:	e0bff817 	ldw	r2,-32(fp)
  80cc80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  80cc84:	e0fffe17 	ldw	r3,-8(fp)
  80cc88:	00801744 	movi	r2,93
  80cc8c:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  80cc90:	e03fff15 	stw	zero,-4(fp)
  80cc94:	e0bfff17 	ldw	r2,-4(fp)
}
  80cc98:	e037883a 	mov	sp,fp
  80cc9c:	df000017 	ldw	fp,0(sp)
  80cca0:	dec00104 	addi	sp,sp,4
  80cca4:	f800283a 	ret

0080cca8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80cca8:	defff604 	addi	sp,sp,-40
  80ccac:	dfc00915 	stw	ra,36(sp)
  80ccb0:	df000815 	stw	fp,32(sp)
  80ccb4:	df000804 	addi	fp,sp,32
  80ccb8:	e13ffc15 	stw	r4,-16(fp)
  80ccbc:	e17ffd15 	stw	r5,-12(fp)
  80ccc0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ccc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ccc8:	e0bffe17 	ldw	r2,-8(fp)
  80cccc:	1004c03a 	cmpne	r2,r2,zero
  80ccd0:	1000021e 	bne	r2,zero,80ccdc <OSMemNameGet+0x34>
        return (0);
  80ccd4:	e03fff15 	stw	zero,-4(fp)
  80ccd8:	00003006 	br	80cd9c <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80ccdc:	e0bffc17 	ldw	r2,-16(fp)
  80cce0:	1004c03a 	cmpne	r2,r2,zero
  80cce4:	1000051e 	bne	r2,zero,80ccfc <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80cce8:	e0fffe17 	ldw	r3,-8(fp)
  80ccec:	00801804 	movi	r2,96
  80ccf0:	18800005 	stb	r2,0(r3)
        return (0);
  80ccf4:	e03fff15 	stw	zero,-4(fp)
  80ccf8:	00002806 	br	80cd9c <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ccfc:	e0bffd17 	ldw	r2,-12(fp)
  80cd00:	1004c03a 	cmpne	r2,r2,zero
  80cd04:	1000051e 	bne	r2,zero,80cd1c <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80cd08:	e0fffe17 	ldw	r3,-8(fp)
  80cd0c:	00800304 	movi	r2,12
  80cd10:	18800005 	stb	r2,0(r3)
        return (0);
  80cd14:	e03fff15 	stw	zero,-4(fp)
  80cd18:	00002006 	br	80cd9c <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80cd1c:	00802074 	movhi	r2,129
  80cd20:	109c3504 	addi	r2,r2,28884
  80cd24:	10800003 	ldbu	r2,0(r2)
  80cd28:	10803fcc 	andi	r2,r2,255
  80cd2c:	1005003a 	cmpeq	r2,r2,zero
  80cd30:	1000051e 	bne	r2,zero,80cd48 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80cd34:	e0fffe17 	ldw	r3,-8(fp)
  80cd38:	00800444 	movi	r2,17
  80cd3c:	18800005 	stb	r2,0(r3)
        return (0);
  80cd40:	e03fff15 	stw	zero,-4(fp)
  80cd44:	00001506 	br	80cd9c <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cd48:	0005303a 	rdctl	r2,status
  80cd4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cd50:	e0fff917 	ldw	r3,-28(fp)
  80cd54:	00bfff84 	movi	r2,-2
  80cd58:	1884703a 	and	r2,r3,r2
  80cd5c:	1001703a 	wrctl	status,r2
  
  return context;
  80cd60:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80cd64:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  80cd68:	e0bffc17 	ldw	r2,-16(fp)
  80cd6c:	11400504 	addi	r5,r2,20
  80cd70:	e13ffd17 	ldw	r4,-12(fp)
  80cd74:	080a91c0 	call	80a91c <OS_StrCopy>
  80cd78:	e0bffb05 	stb	r2,-20(fp)
  80cd7c:	e0bffa17 	ldw	r2,-24(fp)
  80cd80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cd84:	e0bff817 	ldw	r2,-32(fp)
  80cd88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80cd8c:	e0bffe17 	ldw	r2,-8(fp)
  80cd90:	10000005 	stb	zero,0(r2)
    return (len);
  80cd94:	e0bffb03 	ldbu	r2,-20(fp)
  80cd98:	e0bfff15 	stw	r2,-4(fp)
  80cd9c:	e0bfff17 	ldw	r2,-4(fp)
}
  80cda0:	e037883a 	mov	sp,fp
  80cda4:	dfc00117 	ldw	ra,4(sp)
  80cda8:	df000017 	ldw	fp,0(sp)
  80cdac:	dec00204 	addi	sp,sp,8
  80cdb0:	f800283a 	ret

0080cdb4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80cdb4:	defff604 	addi	sp,sp,-40
  80cdb8:	dfc00915 	stw	ra,36(sp)
  80cdbc:	df000815 	stw	fp,32(sp)
  80cdc0:	df000804 	addi	fp,sp,32
  80cdc4:	e13ffd15 	stw	r4,-12(fp)
  80cdc8:	e17ffe15 	stw	r5,-8(fp)
  80cdcc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80cdd0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80cdd4:	e0bfff17 	ldw	r2,-4(fp)
  80cdd8:	1005003a 	cmpeq	r2,r2,zero
  80cddc:	1000381e 	bne	r2,zero,80cec0 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80cde0:	e0bffd17 	ldw	r2,-12(fp)
  80cde4:	1004c03a 	cmpne	r2,r2,zero
  80cde8:	1000041e 	bne	r2,zero,80cdfc <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80cdec:	e0ffff17 	ldw	r3,-4(fp)
  80cdf0:	00801804 	movi	r2,96
  80cdf4:	18800005 	stb	r2,0(r3)
        return;
  80cdf8:	00003106 	br	80cec0 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80cdfc:	e0bffe17 	ldw	r2,-8(fp)
  80ce00:	1004c03a 	cmpne	r2,r2,zero
  80ce04:	1000041e 	bne	r2,zero,80ce18 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80ce08:	e0ffff17 	ldw	r3,-4(fp)
  80ce0c:	00800304 	movi	r2,12
  80ce10:	18800005 	stb	r2,0(r3)
        return;
  80ce14:	00002a06 	br	80cec0 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ce18:	00802074 	movhi	r2,129
  80ce1c:	109c3504 	addi	r2,r2,28884
  80ce20:	10800003 	ldbu	r2,0(r2)
  80ce24:	10803fcc 	andi	r2,r2,255
  80ce28:	1005003a 	cmpeq	r2,r2,zero
  80ce2c:	1000041e 	bne	r2,zero,80ce40 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80ce30:	e0ffff17 	ldw	r3,-4(fp)
  80ce34:	00800484 	movi	r2,18
  80ce38:	18800005 	stb	r2,0(r3)
        return;
  80ce3c:	00002006 	br	80cec0 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ce40:	0005303a 	rdctl	r2,status
  80ce44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ce48:	e0fffa17 	ldw	r3,-24(fp)
  80ce4c:	00bfff84 	movi	r2,-2
  80ce50:	1884703a 	and	r2,r3,r2
  80ce54:	1001703a 	wrctl	status,r2
  
  return context;
  80ce58:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80ce5c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80ce60:	e13ffe17 	ldw	r4,-8(fp)
  80ce64:	080a99c0 	call	80a99c <OS_StrLen>
  80ce68:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  80ce6c:	e0bffc03 	ldbu	r2,-16(fp)
  80ce70:	10800830 	cmpltui	r2,r2,32
  80ce74:	1000081e 	bne	r2,zero,80ce98 <OSMemNameSet+0xe4>
  80ce78:	e0bffb17 	ldw	r2,-20(fp)
  80ce7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ce80:	e0bff917 	ldw	r2,-28(fp)
  80ce84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  80ce88:	e0ffff17 	ldw	r3,-4(fp)
  80ce8c:	008018c4 	movi	r2,99
  80ce90:	18800005 	stb	r2,0(r3)
        return;
  80ce94:	00000a06 	br	80cec0 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  80ce98:	e0bffd17 	ldw	r2,-12(fp)
  80ce9c:	11000504 	addi	r4,r2,20
  80cea0:	e17ffe17 	ldw	r5,-8(fp)
  80cea4:	080a91c0 	call	80a91c <OS_StrCopy>
  80cea8:	e0bffb17 	ldw	r2,-20(fp)
  80ceac:	e0bff815 	stw	r2,-32(fp)
  80ceb0:	e0bff817 	ldw	r2,-32(fp)
  80ceb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ceb8:	e0bfff17 	ldw	r2,-4(fp)
  80cebc:	10000005 	stb	zero,0(r2)
}
  80cec0:	e037883a 	mov	sp,fp
  80cec4:	dfc00117 	ldw	ra,4(sp)
  80cec8:	df000017 	ldw	fp,0(sp)
  80cecc:	dec00204 	addi	sp,sp,8
  80ced0:	f800283a 	ret

0080ced4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  80ced4:	defff804 	addi	sp,sp,-32
  80ced8:	df000715 	stw	fp,28(sp)
  80cedc:	df000704 	addi	fp,sp,28
  80cee0:	e13ffd15 	stw	r4,-12(fp)
  80cee4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80cee8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80ceec:	e0bffd17 	ldw	r2,-12(fp)
  80cef0:	1004c03a 	cmpne	r2,r2,zero
  80cef4:	1000031e 	bne	r2,zero,80cf04 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80cef8:	00801804 	movi	r2,96
  80cefc:	e0bfff15 	stw	r2,-4(fp)
  80cf00:	00002b06 	br	80cfb0 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  80cf04:	e0bffe17 	ldw	r2,-8(fp)
  80cf08:	1004c03a 	cmpne	r2,r2,zero
  80cf0c:	1000031e 	bne	r2,zero,80cf1c <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  80cf10:	008017c4 	movi	r2,95
  80cf14:	e0bfff15 	stw	r2,-4(fp)
  80cf18:	00002506 	br	80cfb0 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cf1c:	0005303a 	rdctl	r2,status
  80cf20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cf24:	e0fffb17 	ldw	r3,-20(fp)
  80cf28:	00bfff84 	movi	r2,-2
  80cf2c:	1884703a 	and	r2,r3,r2
  80cf30:	1001703a 	wrctl	status,r2
  
  return context;
  80cf34:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80cf38:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  80cf3c:	e0bffd17 	ldw	r2,-12(fp)
  80cf40:	10c00417 	ldw	r3,16(r2)
  80cf44:	e0bffd17 	ldw	r2,-12(fp)
  80cf48:	10800317 	ldw	r2,12(r2)
  80cf4c:	18800736 	bltu	r3,r2,80cf6c <OSMemPut+0x98>
  80cf50:	e0bffc17 	ldw	r2,-16(fp)
  80cf54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cf58:	e0bffa17 	ldw	r2,-24(fp)
  80cf5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  80cf60:	00801784 	movi	r2,94
  80cf64:	e0bfff15 	stw	r2,-4(fp)
  80cf68:	00001106 	br	80cfb0 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  80cf6c:	e0fffe17 	ldw	r3,-8(fp)
  80cf70:	e0bffd17 	ldw	r2,-12(fp)
  80cf74:	10800117 	ldw	r2,4(r2)
  80cf78:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  80cf7c:	e0fffd17 	ldw	r3,-12(fp)
  80cf80:	e0bffe17 	ldw	r2,-8(fp)
  80cf84:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  80cf88:	e0bffd17 	ldw	r2,-12(fp)
  80cf8c:	10800417 	ldw	r2,16(r2)
  80cf90:	10c00044 	addi	r3,r2,1
  80cf94:	e0bffd17 	ldw	r2,-12(fp)
  80cf98:	10c00415 	stw	r3,16(r2)
  80cf9c:	e0bffc17 	ldw	r2,-16(fp)
  80cfa0:	e0bff915 	stw	r2,-28(fp)
  80cfa4:	e0bff917 	ldw	r2,-28(fp)
  80cfa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  80cfac:	e03fff15 	stw	zero,-4(fp)
  80cfb0:	e0bfff17 	ldw	r2,-4(fp)
}
  80cfb4:	e037883a 	mov	sp,fp
  80cfb8:	df000017 	ldw	fp,0(sp)
  80cfbc:	dec00104 	addi	sp,sp,4
  80cfc0:	f800283a 	ret

0080cfc4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  80cfc4:	defff904 	addi	sp,sp,-28
  80cfc8:	df000615 	stw	fp,24(sp)
  80cfcc:	df000604 	addi	fp,sp,24
  80cfd0:	e13ffd15 	stw	r4,-12(fp)
  80cfd4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80cfd8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80cfdc:	e0bffd17 	ldw	r2,-12(fp)
  80cfe0:	1004c03a 	cmpne	r2,r2,zero
  80cfe4:	1000031e 	bne	r2,zero,80cff4 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80cfe8:	00801804 	movi	r2,96
  80cfec:	e0bfff15 	stw	r2,-4(fp)
  80cff0:	00002e06 	br	80d0ac <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  80cff4:	e0bffe17 	ldw	r2,-8(fp)
  80cff8:	1004c03a 	cmpne	r2,r2,zero
  80cffc:	1000031e 	bne	r2,zero,80d00c <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  80d000:	00801844 	movi	r2,97
  80d004:	e0bfff15 	stw	r2,-4(fp)
  80d008:	00002806 	br	80d0ac <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d00c:	0005303a 	rdctl	r2,status
  80d010:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d014:	e0fffb17 	ldw	r3,-20(fp)
  80d018:	00bfff84 	movi	r2,-2
  80d01c:	1884703a 	and	r2,r3,r2
  80d020:	1001703a 	wrctl	status,r2
  
  return context;
  80d024:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80d028:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  80d02c:	e0bffd17 	ldw	r2,-12(fp)
  80d030:	10c00017 	ldw	r3,0(r2)
  80d034:	e0bffe17 	ldw	r2,-8(fp)
  80d038:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  80d03c:	e0bffd17 	ldw	r2,-12(fp)
  80d040:	10c00117 	ldw	r3,4(r2)
  80d044:	e0bffe17 	ldw	r2,-8(fp)
  80d048:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  80d04c:	e0bffd17 	ldw	r2,-12(fp)
  80d050:	10c00217 	ldw	r3,8(r2)
  80d054:	e0bffe17 	ldw	r2,-8(fp)
  80d058:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  80d05c:	e0bffd17 	ldw	r2,-12(fp)
  80d060:	10c00317 	ldw	r3,12(r2)
  80d064:	e0bffe17 	ldw	r2,-8(fp)
  80d068:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  80d06c:	e0bffd17 	ldw	r2,-12(fp)
  80d070:	10c00417 	ldw	r3,16(r2)
  80d074:	e0bffe17 	ldw	r2,-8(fp)
  80d078:	10c00415 	stw	r3,16(r2)
  80d07c:	e0bffc17 	ldw	r2,-16(fp)
  80d080:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d084:	e0bffa17 	ldw	r2,-24(fp)
  80d088:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  80d08c:	e0bffe17 	ldw	r2,-8(fp)
  80d090:	10c00317 	ldw	r3,12(r2)
  80d094:	e0bffe17 	ldw	r2,-8(fp)
  80d098:	10800417 	ldw	r2,16(r2)
  80d09c:	1887c83a 	sub	r3,r3,r2
  80d0a0:	e0bffe17 	ldw	r2,-8(fp)
  80d0a4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  80d0a8:	e03fff15 	stw	zero,-4(fp)
  80d0ac:	e0bfff17 	ldw	r2,-4(fp)
}
  80d0b0:	e037883a 	mov	sp,fp
  80d0b4:	df000017 	ldw	fp,0(sp)
  80d0b8:	dec00104 	addi	sp,sp,4
  80d0bc:	f800283a 	ret

0080d0c0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  80d0c0:	defffc04 	addi	sp,sp,-16
  80d0c4:	dfc00315 	stw	ra,12(sp)
  80d0c8:	df000215 	stw	fp,8(sp)
  80d0cc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  80d0d0:	01002234 	movhi	r4,136
  80d0d4:	210b1304 	addi	r4,r4,11340
  80d0d8:	01430c04 	movi	r5,3120
  80d0dc:	080a7180 	call	80a718 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  80d0e0:	00802234 	movhi	r2,136
  80d0e4:	108b1304 	addi	r2,r2,11340
  80d0e8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80d0ec:	e03ffe0d 	sth	zero,-8(fp)
  80d0f0:	00001306 	br	80d140 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  80d0f4:	e0bffe0b 	ldhu	r2,-8(fp)
  80d0f8:	10800d24 	muli	r2,r2,52
  80d0fc:	1007883a 	mov	r3,r2
  80d100:	00802234 	movhi	r2,136
  80d104:	108b2004 	addi	r2,r2,11392
  80d108:	1887883a 	add	r3,r3,r2
  80d10c:	e0bfff17 	ldw	r2,-4(fp)
  80d110:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  80d114:	e0ffff17 	ldw	r3,-4(fp)
  80d118:	00800fc4 	movi	r2,63
  80d11c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  80d120:	e0bfff17 	ldw	r2,-4(fp)
  80d124:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  80d128:	e0bfff17 	ldw	r2,-4(fp)
  80d12c:	10800d04 	addi	r2,r2,52
  80d130:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80d134:	e0bffe0b 	ldhu	r2,-8(fp)
  80d138:	10800044 	addi	r2,r2,1
  80d13c:	e0bffe0d 	sth	r2,-8(fp)
  80d140:	e0bffe0b 	ldhu	r2,-8(fp)
  80d144:	10800ef0 	cmpltui	r2,r2,59
  80d148:	103fea1e 	bne	r2,zero,80d0f4 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  80d14c:	e0bfff17 	ldw	r2,-4(fp)
  80d150:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  80d154:	e0ffff17 	ldw	r3,-4(fp)
  80d158:	00800fc4 	movi	r2,63
  80d15c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  80d160:	e0bfff17 	ldw	r2,-4(fp)
  80d164:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  80d168:	00c02074 	movhi	r3,129
  80d16c:	18dc3004 	addi	r3,r3,28864
  80d170:	00802234 	movhi	r2,136
  80d174:	108b1304 	addi	r2,r2,11340
  80d178:	18800015 	stw	r2,0(r3)
#endif
}
  80d17c:	e037883a 	mov	sp,fp
  80d180:	dfc00117 	ldw	ra,4(sp)
  80d184:	df000017 	ldw	fp,0(sp)
  80d188:	dec00204 	addi	sp,sp,8
  80d18c:	f800283a 	ret

0080d190 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  80d190:	defff704 	addi	sp,sp,-36
  80d194:	df000815 	stw	fp,32(sp)
  80d198:	df000804 	addi	fp,sp,32
  80d19c:	e13ffd15 	stw	r4,-12(fp)
  80d1a0:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d1a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d1a8:	e0bffe17 	ldw	r2,-8(fp)
  80d1ac:	1004c03a 	cmpne	r2,r2,zero
  80d1b0:	1000021e 	bne	r2,zero,80d1bc <OSQAccept+0x2c>
        return ((void *)0);
  80d1b4:	e03fff15 	stw	zero,-4(fp)
  80d1b8:	00004506 	br	80d2d0 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80d1bc:	e0bffd17 	ldw	r2,-12(fp)
  80d1c0:	1004c03a 	cmpne	r2,r2,zero
  80d1c4:	1000051e 	bne	r2,zero,80d1dc <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80d1c8:	e0fffe17 	ldw	r3,-8(fp)
  80d1cc:	00800104 	movi	r2,4
  80d1d0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80d1d4:	e03fff15 	stw	zero,-4(fp)
  80d1d8:	00003d06 	br	80d2d0 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80d1dc:	e0bffd17 	ldw	r2,-12(fp)
  80d1e0:	10800003 	ldbu	r2,0(r2)
  80d1e4:	10803fcc 	andi	r2,r2,255
  80d1e8:	108000a0 	cmpeqi	r2,r2,2
  80d1ec:	1000051e 	bne	r2,zero,80d204 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80d1f0:	e0fffe17 	ldw	r3,-8(fp)
  80d1f4:	00800044 	movi	r2,1
  80d1f8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80d1fc:	e03fff15 	stw	zero,-4(fp)
  80d200:	00003306 	br	80d2d0 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d204:	0005303a 	rdctl	r2,status
  80d208:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d20c:	e0fff917 	ldw	r3,-28(fp)
  80d210:	00bfff84 	movi	r2,-2
  80d214:	1884703a 	and	r2,r3,r2
  80d218:	1001703a 	wrctl	status,r2
  
  return context;
  80d21c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80d220:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80d224:	e0bffd17 	ldw	r2,-12(fp)
  80d228:	10800117 	ldw	r2,4(r2)
  80d22c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80d230:	e0bffb17 	ldw	r2,-20(fp)
  80d234:	1080058b 	ldhu	r2,22(r2)
  80d238:	10bfffcc 	andi	r2,r2,65535
  80d23c:	1005003a 	cmpeq	r2,r2,zero
  80d240:	1000191e 	bne	r2,zero,80d2a8 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80d244:	e0bffb17 	ldw	r2,-20(fp)
  80d248:	10c00417 	ldw	r3,16(r2)
  80d24c:	18800017 	ldw	r2,0(r3)
  80d250:	e0bffc15 	stw	r2,-16(fp)
  80d254:	18c00104 	addi	r3,r3,4
  80d258:	e0bffb17 	ldw	r2,-20(fp)
  80d25c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80d260:	e0bffb17 	ldw	r2,-20(fp)
  80d264:	1080058b 	ldhu	r2,22(r2)
  80d268:	10bfffc4 	addi	r2,r2,-1
  80d26c:	1007883a 	mov	r3,r2
  80d270:	e0bffb17 	ldw	r2,-20(fp)
  80d274:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80d278:	e0bffb17 	ldw	r2,-20(fp)
  80d27c:	10c00417 	ldw	r3,16(r2)
  80d280:	e0bffb17 	ldw	r2,-20(fp)
  80d284:	10800217 	ldw	r2,8(r2)
  80d288:	1880041e 	bne	r3,r2,80d29c <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  80d28c:	e0bffb17 	ldw	r2,-20(fp)
  80d290:	10c00117 	ldw	r3,4(r2)
  80d294:	e0bffb17 	ldw	r2,-20(fp)
  80d298:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  80d29c:	e0bffe17 	ldw	r2,-8(fp)
  80d2a0:	10000005 	stb	zero,0(r2)
  80d2a4:	00000406 	br	80d2b8 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  80d2a8:	e0fffe17 	ldw	r3,-8(fp)
  80d2ac:	008007c4 	movi	r2,31
  80d2b0:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  80d2b4:	e03ffc15 	stw	zero,-16(fp)
  80d2b8:	e0bffa17 	ldw	r2,-24(fp)
  80d2bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d2c0:	e0bff817 	ldw	r2,-32(fp)
  80d2c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  80d2c8:	e0bffc17 	ldw	r2,-16(fp)
  80d2cc:	e0bfff15 	stw	r2,-4(fp)
  80d2d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d2d4:	e037883a 	mov	sp,fp
  80d2d8:	df000017 	ldw	fp,0(sp)
  80d2dc:	dec00104 	addi	sp,sp,4
  80d2e0:	f800283a 	ret

0080d2e4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  80d2e4:	defff304 	addi	sp,sp,-52
  80d2e8:	dfc00c15 	stw	ra,48(sp)
  80d2ec:	df000b15 	stw	fp,44(sp)
  80d2f0:	df000b04 	addi	fp,sp,44
  80d2f4:	e13ffd15 	stw	r4,-12(fp)
  80d2f8:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d2fc:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80d300:	00802074 	movhi	r2,129
  80d304:	109c3504 	addi	r2,r2,28884
  80d308:	10800003 	ldbu	r2,0(r2)
  80d30c:	10803fcc 	andi	r2,r2,255
  80d310:	1005003a 	cmpeq	r2,r2,zero
  80d314:	1000021e 	bne	r2,zero,80d320 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  80d318:	e03fff15 	stw	zero,-4(fp)
  80d31c:	00007006 	br	80d4e0 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d320:	0005303a 	rdctl	r2,status
  80d324:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d328:	e0fff917 	ldw	r3,-28(fp)
  80d32c:	00bfff84 	movi	r2,-2
  80d330:	1884703a 	and	r2,r3,r2
  80d334:	1001703a 	wrctl	status,r2
  
  return context;
  80d338:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80d33c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  80d340:	00802074 	movhi	r2,129
  80d344:	109c3404 	addi	r2,r2,28880
  80d348:	10800017 	ldw	r2,0(r2)
  80d34c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  80d350:	00802074 	movhi	r2,129
  80d354:	109c3404 	addi	r2,r2,28880
  80d358:	10800017 	ldw	r2,0(r2)
  80d35c:	1005003a 	cmpeq	r2,r2,zero
  80d360:	1000081e 	bne	r2,zero,80d384 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80d364:	00802074 	movhi	r2,129
  80d368:	109c3404 	addi	r2,r2,28880
  80d36c:	10800017 	ldw	r2,0(r2)
  80d370:	10800117 	ldw	r2,4(r2)
  80d374:	1007883a 	mov	r3,r2
  80d378:	00802074 	movhi	r2,129
  80d37c:	109c3404 	addi	r2,r2,28880
  80d380:	10c00015 	stw	r3,0(r2)
  80d384:	e0bffa17 	ldw	r2,-24(fp)
  80d388:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d38c:	e0bff817 	ldw	r2,-32(fp)
  80d390:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  80d394:	e0bffc17 	ldw	r2,-16(fp)
  80d398:	1005003a 	cmpeq	r2,r2,zero
  80d39c:	10004e1e 	bne	r2,zero,80d4d8 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d3a0:	0005303a 	rdctl	r2,status
  80d3a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d3a8:	e0fff717 	ldw	r3,-36(fp)
  80d3ac:	00bfff84 	movi	r2,-2
  80d3b0:	1884703a 	and	r2,r3,r2
  80d3b4:	1001703a 	wrctl	status,r2
  
  return context;
  80d3b8:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  80d3bc:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  80d3c0:	00802074 	movhi	r2,129
  80d3c4:	109c3204 	addi	r2,r2,28872
  80d3c8:	10800017 	ldw	r2,0(r2)
  80d3cc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  80d3d0:	e0bffb17 	ldw	r2,-20(fp)
  80d3d4:	1005003a 	cmpeq	r2,r2,zero
  80d3d8:	1000311e 	bne	r2,zero,80d4a0 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  80d3dc:	00802074 	movhi	r2,129
  80d3e0:	109c3204 	addi	r2,r2,28872
  80d3e4:	10800017 	ldw	r2,0(r2)
  80d3e8:	10c00017 	ldw	r3,0(r2)
  80d3ec:	00802074 	movhi	r2,129
  80d3f0:	109c3204 	addi	r2,r2,28872
  80d3f4:	10c00015 	stw	r3,0(r2)
  80d3f8:	e0bffa17 	ldw	r2,-24(fp)
  80d3fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d400:	e0bff617 	ldw	r2,-40(fp)
  80d404:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  80d408:	e0fffb17 	ldw	r3,-20(fp)
  80d40c:	e0bffd17 	ldw	r2,-12(fp)
  80d410:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  80d414:	e0bffe0b 	ldhu	r2,-8(fp)
  80d418:	1085883a 	add	r2,r2,r2
  80d41c:	1085883a 	add	r2,r2,r2
  80d420:	1007883a 	mov	r3,r2
  80d424:	e0bffd17 	ldw	r2,-12(fp)
  80d428:	1887883a 	add	r3,r3,r2
  80d42c:	e0bffb17 	ldw	r2,-20(fp)
  80d430:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  80d434:	e0fffb17 	ldw	r3,-20(fp)
  80d438:	e0bffd17 	ldw	r2,-12(fp)
  80d43c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  80d440:	e0fffb17 	ldw	r3,-20(fp)
  80d444:	e0bffd17 	ldw	r2,-12(fp)
  80d448:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  80d44c:	e0fffb17 	ldw	r3,-20(fp)
  80d450:	e0bffe0b 	ldhu	r2,-8(fp)
  80d454:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  80d458:	e0bffb17 	ldw	r2,-20(fp)
  80d45c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  80d460:	e0fffc17 	ldw	r3,-16(fp)
  80d464:	00800084 	movi	r2,2
  80d468:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  80d46c:	e0bffc17 	ldw	r2,-16(fp)
  80d470:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  80d474:	e0fffc17 	ldw	r3,-16(fp)
  80d478:	e0bffb17 	ldw	r2,-20(fp)
  80d47c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  80d480:	e0fffc17 	ldw	r3,-16(fp)
  80d484:	00800fc4 	movi	r2,63
  80d488:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  80d48c:	e0bffc17 	ldw	r2,-16(fp)
  80d490:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  80d494:	e13ffc17 	ldw	r4,-16(fp)
  80d498:	080a34c0 	call	80a34c <OS_EventWaitListInit>
  80d49c:	00000e06 	br	80d4d8 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  80d4a0:	00802074 	movhi	r2,129
  80d4a4:	109c3404 	addi	r2,r2,28880
  80d4a8:	10c00017 	ldw	r3,0(r2)
  80d4ac:	e0bffc17 	ldw	r2,-16(fp)
  80d4b0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  80d4b4:	00c02074 	movhi	r3,129
  80d4b8:	18dc3404 	addi	r3,r3,28880
  80d4bc:	e0bffc17 	ldw	r2,-16(fp)
  80d4c0:	18800015 	stw	r2,0(r3)
  80d4c4:	e0bffa17 	ldw	r2,-24(fp)
  80d4c8:	e0bff515 	stw	r2,-44(fp)
  80d4cc:	e0bff517 	ldw	r2,-44(fp)
  80d4d0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  80d4d4:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  80d4d8:	e0bffc17 	ldw	r2,-16(fp)
  80d4dc:	e0bfff15 	stw	r2,-4(fp)
  80d4e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d4e4:	e037883a 	mov	sp,fp
  80d4e8:	dfc00117 	ldw	ra,4(sp)
  80d4ec:	df000017 	ldw	fp,0(sp)
  80d4f0:	dec00204 	addi	sp,sp,8
  80d4f4:	f800283a 	ret

0080d4f8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80d4f8:	defff004 	addi	sp,sp,-64
  80d4fc:	dfc00f15 	stw	ra,60(sp)
  80d500:	df000e15 	stw	fp,56(sp)
  80d504:	df000e04 	addi	fp,sp,56
  80d508:	e13ffb15 	stw	r4,-20(fp)
  80d50c:	e1bffd15 	stw	r6,-12(fp)
  80d510:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80d514:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d518:	e0bffd17 	ldw	r2,-12(fp)
  80d51c:	1004c03a 	cmpne	r2,r2,zero
  80d520:	1000031e 	bne	r2,zero,80d530 <OSQDel+0x38>
        return (pevent);
  80d524:	e0bffb17 	ldw	r2,-20(fp)
  80d528:	e0bfff15 	stw	r2,-4(fp)
  80d52c:	0000ac06 	br	80d7e0 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80d530:	e0bffb17 	ldw	r2,-20(fp)
  80d534:	1004c03a 	cmpne	r2,r2,zero
  80d538:	1000061e 	bne	r2,zero,80d554 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80d53c:	e0fffd17 	ldw	r3,-12(fp)
  80d540:	00800104 	movi	r2,4
  80d544:	18800005 	stb	r2,0(r3)
        return (pevent);
  80d548:	e0fffb17 	ldw	r3,-20(fp)
  80d54c:	e0ffff15 	stw	r3,-4(fp)
  80d550:	0000a306 	br	80d7e0 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80d554:	e0bffb17 	ldw	r2,-20(fp)
  80d558:	10800003 	ldbu	r2,0(r2)
  80d55c:	10803fcc 	andi	r2,r2,255
  80d560:	108000a0 	cmpeqi	r2,r2,2
  80d564:	1000061e 	bne	r2,zero,80d580 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80d568:	e0fffd17 	ldw	r3,-12(fp)
  80d56c:	00800044 	movi	r2,1
  80d570:	18800005 	stb	r2,0(r3)
        return (pevent);
  80d574:	e0bffb17 	ldw	r2,-20(fp)
  80d578:	e0bfff15 	stw	r2,-4(fp)
  80d57c:	00009806 	br	80d7e0 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80d580:	00802074 	movhi	r2,129
  80d584:	109c3504 	addi	r2,r2,28884
  80d588:	10800003 	ldbu	r2,0(r2)
  80d58c:	10803fcc 	andi	r2,r2,255
  80d590:	1005003a 	cmpeq	r2,r2,zero
  80d594:	1000061e 	bne	r2,zero,80d5b0 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80d598:	e0fffd17 	ldw	r3,-12(fp)
  80d59c:	008003c4 	movi	r2,15
  80d5a0:	18800005 	stb	r2,0(r3)
        return (pevent);
  80d5a4:	e0fffb17 	ldw	r3,-20(fp)
  80d5a8:	e0ffff15 	stw	r3,-4(fp)
  80d5ac:	00008c06 	br	80d7e0 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d5b0:	0005303a 	rdctl	r2,status
  80d5b4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d5b8:	e0fff617 	ldw	r3,-40(fp)
  80d5bc:	00bfff84 	movi	r2,-2
  80d5c0:	1884703a 	and	r2,r3,r2
  80d5c4:	1001703a 	wrctl	status,r2
  
  return context;
  80d5c8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80d5cc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  80d5d0:	e0bffb17 	ldw	r2,-20(fp)
  80d5d4:	10800283 	ldbu	r2,10(r2)
  80d5d8:	10803fcc 	andi	r2,r2,255
  80d5dc:	1005003a 	cmpeq	r2,r2,zero
  80d5e0:	1000031e 	bne	r2,zero,80d5f0 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80d5e4:	00800044 	movi	r2,1
  80d5e8:	e0bffa05 	stb	r2,-24(fp)
  80d5ec:	00000106 	br	80d5f4 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80d5f0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80d5f4:	e0bffc03 	ldbu	r2,-16(fp)
  80d5f8:	e0bffe15 	stw	r2,-8(fp)
  80d5fc:	e0fffe17 	ldw	r3,-8(fp)
  80d600:	1805003a 	cmpeq	r2,r3,zero
  80d604:	1000041e 	bne	r2,zero,80d618 <OSQDel+0x120>
  80d608:	e0fffe17 	ldw	r3,-8(fp)
  80d60c:	18800060 	cmpeqi	r2,r3,1
  80d610:	1000391e 	bne	r2,zero,80d6f8 <OSQDel+0x200>
  80d614:	00006706 	br	80d7b4 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  80d618:	e0bffa03 	ldbu	r2,-24(fp)
  80d61c:	1004c03a 	cmpne	r2,r2,zero
  80d620:	1000261e 	bne	r2,zero,80d6bc <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80d624:	e0fffb17 	ldw	r3,-20(fp)
  80d628:	00800fc4 	movi	r2,63
  80d62c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80d630:	e0bffb17 	ldw	r2,-20(fp)
  80d634:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  80d638:	e0bffb17 	ldw	r2,-20(fp)
  80d63c:	10800117 	ldw	r2,4(r2)
  80d640:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  80d644:	00802074 	movhi	r2,129
  80d648:	109c3204 	addi	r2,r2,28872
  80d64c:	10c00017 	ldw	r3,0(r2)
  80d650:	e0bff817 	ldw	r2,-32(fp)
  80d654:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  80d658:	00c02074 	movhi	r3,129
  80d65c:	18dc3204 	addi	r3,r3,28872
  80d660:	e0bff817 	ldw	r2,-32(fp)
  80d664:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80d668:	e0bffb17 	ldw	r2,-20(fp)
  80d66c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80d670:	00802074 	movhi	r2,129
  80d674:	109c3404 	addi	r2,r2,28880
  80d678:	10c00017 	ldw	r3,0(r2)
  80d67c:	e0bffb17 	ldw	r2,-20(fp)
  80d680:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80d684:	e0bffb17 	ldw	r2,-20(fp)
  80d688:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80d68c:	00c02074 	movhi	r3,129
  80d690:	18dc3404 	addi	r3,r3,28880
  80d694:	e0bffb17 	ldw	r2,-20(fp)
  80d698:	18800015 	stw	r2,0(r3)
  80d69c:	e0bff717 	ldw	r2,-36(fp)
  80d6a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d6a4:	e0bff517 	ldw	r2,-44(fp)
  80d6a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80d6ac:	e0bffd17 	ldw	r2,-12(fp)
  80d6b0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  80d6b4:	e03ff915 	stw	zero,-28(fp)
  80d6b8:	00004706 	br	80d7d8 <OSQDel+0x2e0>
  80d6bc:	e0bff717 	ldw	r2,-36(fp)
  80d6c0:	e0bff415 	stw	r2,-48(fp)
  80d6c4:	e0bff417 	ldw	r2,-48(fp)
  80d6c8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80d6cc:	e0fffd17 	ldw	r3,-12(fp)
  80d6d0:	00801244 	movi	r2,73
  80d6d4:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80d6d8:	e0bffb17 	ldw	r2,-20(fp)
  80d6dc:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80d6e0:	00003d06 	br	80d7d8 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  80d6e4:	e13ffb17 	ldw	r4,-20(fp)
  80d6e8:	000b883a 	mov	r5,zero
  80d6ec:	01800104 	movi	r6,4
  80d6f0:	000f883a 	mov	r7,zero
  80d6f4:	0809d980 	call	809d98 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  80d6f8:	e0bffb17 	ldw	r2,-20(fp)
  80d6fc:	10800283 	ldbu	r2,10(r2)
  80d700:	10803fcc 	andi	r2,r2,255
  80d704:	1004c03a 	cmpne	r2,r2,zero
  80d708:	103ff61e 	bne	r2,zero,80d6e4 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80d70c:	e0fffb17 	ldw	r3,-20(fp)
  80d710:	00800fc4 	movi	r2,63
  80d714:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80d718:	e0bffb17 	ldw	r2,-20(fp)
  80d71c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  80d720:	e0bffb17 	ldw	r2,-20(fp)
  80d724:	10800117 	ldw	r2,4(r2)
  80d728:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  80d72c:	00802074 	movhi	r2,129
  80d730:	109c3204 	addi	r2,r2,28872
  80d734:	10c00017 	ldw	r3,0(r2)
  80d738:	e0bff817 	ldw	r2,-32(fp)
  80d73c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  80d740:	00c02074 	movhi	r3,129
  80d744:	18dc3204 	addi	r3,r3,28872
  80d748:	e0bff817 	ldw	r2,-32(fp)
  80d74c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80d750:	e0bffb17 	ldw	r2,-20(fp)
  80d754:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80d758:	00802074 	movhi	r2,129
  80d75c:	109c3404 	addi	r2,r2,28880
  80d760:	10c00017 	ldw	r3,0(r2)
  80d764:	e0bffb17 	ldw	r2,-20(fp)
  80d768:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80d76c:	e0bffb17 	ldw	r2,-20(fp)
  80d770:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80d774:	00c02074 	movhi	r3,129
  80d778:	18dc3404 	addi	r3,r3,28880
  80d77c:	e0bffb17 	ldw	r2,-20(fp)
  80d780:	18800015 	stw	r2,0(r3)
  80d784:	e0bff717 	ldw	r2,-36(fp)
  80d788:	e0bff315 	stw	r2,-52(fp)
  80d78c:	e0bff317 	ldw	r2,-52(fp)
  80d790:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80d794:	e0bffa03 	ldbu	r2,-24(fp)
  80d798:	10800058 	cmpnei	r2,r2,1
  80d79c:	1000011e 	bne	r2,zero,80d7a4 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80d7a0:	080a7d80 	call	80a7d8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80d7a4:	e0bffd17 	ldw	r2,-12(fp)
  80d7a8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  80d7ac:	e03ff915 	stw	zero,-28(fp)
             break;
  80d7b0:	00000906 	br	80d7d8 <OSQDel+0x2e0>
  80d7b4:	e0bff717 	ldw	r2,-36(fp)
  80d7b8:	e0bff215 	stw	r2,-56(fp)
  80d7bc:	e0bff217 	ldw	r2,-56(fp)
  80d7c0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80d7c4:	e0fffd17 	ldw	r3,-12(fp)
  80d7c8:	008001c4 	movi	r2,7
  80d7cc:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80d7d0:	e0bffb17 	ldw	r2,-20(fp)
  80d7d4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80d7d8:	e0bff917 	ldw	r2,-28(fp)
  80d7dc:	e0bfff15 	stw	r2,-4(fp)
  80d7e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d7e4:	e037883a 	mov	sp,fp
  80d7e8:	dfc00117 	ldw	ra,4(sp)
  80d7ec:	df000017 	ldw	fp,0(sp)
  80d7f0:	dec00204 	addi	sp,sp,8
  80d7f4:	f800283a 	ret

0080d7f8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  80d7f8:	defff904 	addi	sp,sp,-28
  80d7fc:	df000615 	stw	fp,24(sp)
  80d800:	df000604 	addi	fp,sp,24
  80d804:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80d808:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80d80c:	e0bffe17 	ldw	r2,-8(fp)
  80d810:	1004c03a 	cmpne	r2,r2,zero
  80d814:	1000031e 	bne	r2,zero,80d824 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  80d818:	00800104 	movi	r2,4
  80d81c:	e0bfff15 	stw	r2,-4(fp)
  80d820:	00002206 	br	80d8ac <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80d824:	e0bffe17 	ldw	r2,-8(fp)
  80d828:	10800003 	ldbu	r2,0(r2)
  80d82c:	10803fcc 	andi	r2,r2,255
  80d830:	108000a0 	cmpeqi	r2,r2,2
  80d834:	1000031e 	bne	r2,zero,80d844 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  80d838:	00800044 	movi	r2,1
  80d83c:	e0bfff15 	stw	r2,-4(fp)
  80d840:	00001a06 	br	80d8ac <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d844:	0005303a 	rdctl	r2,status
  80d848:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d84c:	e0fffb17 	ldw	r3,-20(fp)
  80d850:	00bfff84 	movi	r2,-2
  80d854:	1884703a 	and	r2,r3,r2
  80d858:	1001703a 	wrctl	status,r2
  
  return context;
  80d85c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80d860:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  80d864:	e0bffe17 	ldw	r2,-8(fp)
  80d868:	10800117 	ldw	r2,4(r2)
  80d86c:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  80d870:	e0bffd17 	ldw	r2,-12(fp)
  80d874:	10c00117 	ldw	r3,4(r2)
  80d878:	e0bffd17 	ldw	r2,-12(fp)
  80d87c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  80d880:	e0bffd17 	ldw	r2,-12(fp)
  80d884:	10c00117 	ldw	r3,4(r2)
  80d888:	e0bffd17 	ldw	r2,-12(fp)
  80d88c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  80d890:	e0bffd17 	ldw	r2,-12(fp)
  80d894:	1000058d 	sth	zero,22(r2)
  80d898:	e0bffc17 	ldw	r2,-16(fp)
  80d89c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d8a0:	e0bffa17 	ldw	r2,-24(fp)
  80d8a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80d8a8:	e03fff15 	stw	zero,-4(fp)
  80d8ac:	e0bfff17 	ldw	r2,-4(fp)
}
  80d8b0:	e037883a 	mov	sp,fp
  80d8b4:	df000017 	ldw	fp,0(sp)
  80d8b8:	dec00104 	addi	sp,sp,4
  80d8bc:	f800283a 	ret

0080d8c0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80d8c0:	defff104 	addi	sp,sp,-60
  80d8c4:	dfc00e15 	stw	ra,56(sp)
  80d8c8:	df000d15 	stw	fp,52(sp)
  80d8cc:	df000d04 	addi	fp,sp,52
  80d8d0:	e13ffb15 	stw	r4,-20(fp)
  80d8d4:	e1bffd15 	stw	r6,-12(fp)
  80d8d8:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d8dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d8e0:	e0bffd17 	ldw	r2,-12(fp)
  80d8e4:	1004c03a 	cmpne	r2,r2,zero
  80d8e8:	1000021e 	bne	r2,zero,80d8f4 <OSQPend+0x34>
        return ((void *)0);
  80d8ec:	e03fff15 	stw	zero,-4(fp)
  80d8f0:	0000b506 	br	80dbc8 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80d8f4:	e0bffb17 	ldw	r2,-20(fp)
  80d8f8:	1004c03a 	cmpne	r2,r2,zero
  80d8fc:	1000051e 	bne	r2,zero,80d914 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80d900:	e0fffd17 	ldw	r3,-12(fp)
  80d904:	00800104 	movi	r2,4
  80d908:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80d90c:	e03fff15 	stw	zero,-4(fp)
  80d910:	0000ad06 	br	80dbc8 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80d914:	e0bffb17 	ldw	r2,-20(fp)
  80d918:	10800003 	ldbu	r2,0(r2)
  80d91c:	10803fcc 	andi	r2,r2,255
  80d920:	108000a0 	cmpeqi	r2,r2,2
  80d924:	1000051e 	bne	r2,zero,80d93c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80d928:	e0fffd17 	ldw	r3,-12(fp)
  80d92c:	00800044 	movi	r2,1
  80d930:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80d934:	e03fff15 	stw	zero,-4(fp)
  80d938:	0000a306 	br	80dbc8 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80d93c:	00802074 	movhi	r2,129
  80d940:	109c3504 	addi	r2,r2,28884
  80d944:	10800003 	ldbu	r2,0(r2)
  80d948:	10803fcc 	andi	r2,r2,255
  80d94c:	1005003a 	cmpeq	r2,r2,zero
  80d950:	1000051e 	bne	r2,zero,80d968 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  80d954:	e0fffd17 	ldw	r3,-12(fp)
  80d958:	00800084 	movi	r2,2
  80d95c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80d960:	e03fff15 	stw	zero,-4(fp)
  80d964:	00009806 	br	80dbc8 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  80d968:	00802074 	movhi	r2,129
  80d96c:	109c2704 	addi	r2,r2,28828
  80d970:	10800003 	ldbu	r2,0(r2)
  80d974:	10803fcc 	andi	r2,r2,255
  80d978:	1005003a 	cmpeq	r2,r2,zero
  80d97c:	1000051e 	bne	r2,zero,80d994 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  80d980:	e0fffd17 	ldw	r3,-12(fp)
  80d984:	00800344 	movi	r2,13
  80d988:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80d98c:	e03fff15 	stw	zero,-4(fp)
  80d990:	00008d06 	br	80dbc8 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d994:	0005303a 	rdctl	r2,status
  80d998:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d99c:	e0fff717 	ldw	r3,-36(fp)
  80d9a0:	00bfff84 	movi	r2,-2
  80d9a4:	1884703a 	and	r2,r3,r2
  80d9a8:	1001703a 	wrctl	status,r2
  
  return context;
  80d9ac:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80d9b0:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80d9b4:	e0bffb17 	ldw	r2,-20(fp)
  80d9b8:	10800117 	ldw	r2,4(r2)
  80d9bc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80d9c0:	e0bff917 	ldw	r2,-28(fp)
  80d9c4:	1080058b 	ldhu	r2,22(r2)
  80d9c8:	10bfffcc 	andi	r2,r2,65535
  80d9cc:	1005003a 	cmpeq	r2,r2,zero
  80d9d0:	10001f1e 	bne	r2,zero,80da50 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80d9d4:	e0bff917 	ldw	r2,-28(fp)
  80d9d8:	10c00417 	ldw	r3,16(r2)
  80d9dc:	18800017 	ldw	r2,0(r3)
  80d9e0:	e0bffa15 	stw	r2,-24(fp)
  80d9e4:	18c00104 	addi	r3,r3,4
  80d9e8:	e0bff917 	ldw	r2,-28(fp)
  80d9ec:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80d9f0:	e0bff917 	ldw	r2,-28(fp)
  80d9f4:	1080058b 	ldhu	r2,22(r2)
  80d9f8:	10bfffc4 	addi	r2,r2,-1
  80d9fc:	1007883a 	mov	r3,r2
  80da00:	e0bff917 	ldw	r2,-28(fp)
  80da04:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80da08:	e0bff917 	ldw	r2,-28(fp)
  80da0c:	10c00417 	ldw	r3,16(r2)
  80da10:	e0bff917 	ldw	r2,-28(fp)
  80da14:	10800217 	ldw	r2,8(r2)
  80da18:	1880041e 	bne	r3,r2,80da2c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  80da1c:	e0bff917 	ldw	r2,-28(fp)
  80da20:	10c00117 	ldw	r3,4(r2)
  80da24:	e0bff917 	ldw	r2,-28(fp)
  80da28:	10c00415 	stw	r3,16(r2)
  80da2c:	e0bff817 	ldw	r2,-32(fp)
  80da30:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80da34:	e0bff617 	ldw	r2,-40(fp)
  80da38:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80da3c:	e0bffd17 	ldw	r2,-12(fp)
  80da40:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  80da44:	e0bffa17 	ldw	r2,-24(fp)
  80da48:	e0bfff15 	stw	r2,-4(fp)
  80da4c:	00005e06 	br	80dbc8 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  80da50:	00802074 	movhi	r2,129
  80da54:	109c3604 	addi	r2,r2,28888
  80da58:	10c00017 	ldw	r3,0(r2)
  80da5c:	00802074 	movhi	r2,129
  80da60:	109c3604 	addi	r2,r2,28888
  80da64:	10800017 	ldw	r2,0(r2)
  80da68:	10800c03 	ldbu	r2,48(r2)
  80da6c:	10800114 	ori	r2,r2,4
  80da70:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80da74:	00802074 	movhi	r2,129
  80da78:	109c3604 	addi	r2,r2,28888
  80da7c:	10800017 	ldw	r2,0(r2)
  80da80:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  80da84:	00802074 	movhi	r2,129
  80da88:	109c3604 	addi	r2,r2,28888
  80da8c:	10c00017 	ldw	r3,0(r2)
  80da90:	e0bffc0b 	ldhu	r2,-16(fp)
  80da94:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  80da98:	e13ffb17 	ldw	r4,-20(fp)
  80da9c:	0809f2c0 	call	809f2c <OS_EventTaskWait>
  80daa0:	e0bff817 	ldw	r2,-32(fp)
  80daa4:	e0bff515 	stw	r2,-44(fp)
  80daa8:	e0bff517 	ldw	r2,-44(fp)
  80daac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  80dab0:	080a7d80 	call	80a7d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dab4:	0005303a 	rdctl	r2,status
  80dab8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dabc:	e0fff417 	ldw	r3,-48(fp)
  80dac0:	00bfff84 	movi	r2,-2
  80dac4:	1884703a 	and	r2,r3,r2
  80dac8:	1001703a 	wrctl	status,r2
  
  return context;
  80dacc:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  80dad0:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80dad4:	00802074 	movhi	r2,129
  80dad8:	109c3604 	addi	r2,r2,28888
  80dadc:	10800017 	ldw	r2,0(r2)
  80dae0:	10800c43 	ldbu	r2,49(r2)
  80dae4:	10803fcc 	andi	r2,r2,255
  80dae8:	e0bffe15 	stw	r2,-8(fp)
  80daec:	e0fffe17 	ldw	r3,-8(fp)
  80daf0:	1805003a 	cmpeq	r2,r3,zero
  80daf4:	1000041e 	bne	r2,zero,80db08 <OSQPend+0x248>
  80daf8:	e0fffe17 	ldw	r3,-8(fp)
  80dafc:	188000a0 	cmpeqi	r2,r3,2
  80db00:	1000091e 	bne	r2,zero,80db28 <OSQPend+0x268>
  80db04:	00000d06 	br	80db3c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  80db08:	00802074 	movhi	r2,129
  80db0c:	109c3604 	addi	r2,r2,28888
  80db10:	10800017 	ldw	r2,0(r2)
  80db14:	10800917 	ldw	r2,36(r2)
  80db18:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  80db1c:	e0bffd17 	ldw	r2,-12(fp)
  80db20:	10000005 	stb	zero,0(r2)
             break;
  80db24:	00000e06 	br	80db60 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  80db28:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80db2c:	e0fffd17 	ldw	r3,-12(fp)
  80db30:	00800384 	movi	r2,14
  80db34:	18800005 	stb	r2,0(r3)
             break;
  80db38:	00000906 	br	80db60 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  80db3c:	00802074 	movhi	r2,129
  80db40:	109c3604 	addi	r2,r2,28888
  80db44:	11000017 	ldw	r4,0(r2)
  80db48:	e17ffb17 	ldw	r5,-20(fp)
  80db4c:	080a1900 	call	80a190 <OS_EventTaskRemove>
             pmsg = (void *)0;
  80db50:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  80db54:	e0fffd17 	ldw	r3,-12(fp)
  80db58:	00800284 	movi	r2,10
  80db5c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  80db60:	00802074 	movhi	r2,129
  80db64:	109c3604 	addi	r2,r2,28888
  80db68:	10800017 	ldw	r2,0(r2)
  80db6c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80db70:	00802074 	movhi	r2,129
  80db74:	109c3604 	addi	r2,r2,28888
  80db78:	10800017 	ldw	r2,0(r2)
  80db7c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  80db80:	00802074 	movhi	r2,129
  80db84:	109c3604 	addi	r2,r2,28888
  80db88:	10800017 	ldw	r2,0(r2)
  80db8c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80db90:	00802074 	movhi	r2,129
  80db94:	109c3604 	addi	r2,r2,28888
  80db98:	10800017 	ldw	r2,0(r2)
  80db9c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  80dba0:	00802074 	movhi	r2,129
  80dba4:	109c3604 	addi	r2,r2,28888
  80dba8:	10800017 	ldw	r2,0(r2)
  80dbac:	10000915 	stw	zero,36(r2)
  80dbb0:	e0bff817 	ldw	r2,-32(fp)
  80dbb4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dbb8:	e0bff317 	ldw	r2,-52(fp)
  80dbbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  80dbc0:	e0bffa17 	ldw	r2,-24(fp)
  80dbc4:	e0bfff15 	stw	r2,-4(fp)
  80dbc8:	e0bfff17 	ldw	r2,-4(fp)
}
  80dbcc:	e037883a 	mov	sp,fp
  80dbd0:	dfc00117 	ldw	ra,4(sp)
  80dbd4:	df000017 	ldw	fp,0(sp)
  80dbd8:	dec00204 	addi	sp,sp,8
  80dbdc:	f800283a 	ret

0080dbe0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80dbe0:	defff504 	addi	sp,sp,-44
  80dbe4:	dfc00a15 	stw	ra,40(sp)
  80dbe8:	df000915 	stw	fp,36(sp)
  80dbec:	df000904 	addi	fp,sp,36
  80dbf0:	e13ffc15 	stw	r4,-16(fp)
  80dbf4:	e1bffe15 	stw	r6,-8(fp)
  80dbf8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80dbfc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80dc00:	e0bffe17 	ldw	r2,-8(fp)
  80dc04:	1004c03a 	cmpne	r2,r2,zero
  80dc08:	1000021e 	bne	r2,zero,80dc14 <OSQPendAbort+0x34>
        return (0);
  80dc0c:	e03fff15 	stw	zero,-4(fp)
  80dc10:	00004c06 	br	80dd44 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80dc14:	e0bffc17 	ldw	r2,-16(fp)
  80dc18:	1004c03a 	cmpne	r2,r2,zero
  80dc1c:	1000051e 	bne	r2,zero,80dc34 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80dc20:	e0fffe17 	ldw	r3,-8(fp)
  80dc24:	00800104 	movi	r2,4
  80dc28:	18800005 	stb	r2,0(r3)
        return (0);
  80dc2c:	e03fff15 	stw	zero,-4(fp)
  80dc30:	00004406 	br	80dd44 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80dc34:	e0bffc17 	ldw	r2,-16(fp)
  80dc38:	10800003 	ldbu	r2,0(r2)
  80dc3c:	10803fcc 	andi	r2,r2,255
  80dc40:	108000a0 	cmpeqi	r2,r2,2
  80dc44:	1000051e 	bne	r2,zero,80dc5c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80dc48:	e0fffe17 	ldw	r3,-8(fp)
  80dc4c:	00800044 	movi	r2,1
  80dc50:	18800005 	stb	r2,0(r3)
        return (0);
  80dc54:	e03fff15 	stw	zero,-4(fp)
  80dc58:	00003a06 	br	80dd44 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dc5c:	0005303a 	rdctl	r2,status
  80dc60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dc64:	e0fff917 	ldw	r3,-28(fp)
  80dc68:	00bfff84 	movi	r2,-2
  80dc6c:	1884703a 	and	r2,r3,r2
  80dc70:	1001703a 	wrctl	status,r2
  
  return context;
  80dc74:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80dc78:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  80dc7c:	e0bffc17 	ldw	r2,-16(fp)
  80dc80:	10800283 	ldbu	r2,10(r2)
  80dc84:	10803fcc 	andi	r2,r2,255
  80dc88:	1005003a 	cmpeq	r2,r2,zero
  80dc8c:	1000261e 	bne	r2,zero,80dd28 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  80dc90:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  80dc94:	e0bffd03 	ldbu	r2,-12(fp)
  80dc98:	10800060 	cmpeqi	r2,r2,1
  80dc9c:	1000091e 	bne	r2,zero,80dcc4 <OSQPendAbort+0xe4>
  80dca0:	00000e06 	br	80dcdc <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80dca4:	e13ffc17 	ldw	r4,-16(fp)
  80dca8:	000b883a 	mov	r5,zero
  80dcac:	01800104 	movi	r6,4
  80dcb0:	01c00084 	movi	r7,2
  80dcb4:	0809d980 	call	809d98 <OS_EventTaskRdy>
                     nbr_tasks++;
  80dcb8:	e0bffb03 	ldbu	r2,-20(fp)
  80dcbc:	10800044 	addi	r2,r2,1
  80dcc0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  80dcc4:	e0bffc17 	ldw	r2,-16(fp)
  80dcc8:	10800283 	ldbu	r2,10(r2)
  80dccc:	10803fcc 	andi	r2,r2,255
  80dcd0:	1004c03a 	cmpne	r2,r2,zero
  80dcd4:	103ff31e 	bne	r2,zero,80dca4 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  80dcd8:	00000806 	br	80dcfc <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80dcdc:	e13ffc17 	ldw	r4,-16(fp)
  80dce0:	000b883a 	mov	r5,zero
  80dce4:	01800104 	movi	r6,4
  80dce8:	01c00084 	movi	r7,2
  80dcec:	0809d980 	call	809d98 <OS_EventTaskRdy>
                 nbr_tasks++;
  80dcf0:	e0bffb03 	ldbu	r2,-20(fp)
  80dcf4:	10800044 	addi	r2,r2,1
  80dcf8:	e0bffb05 	stb	r2,-20(fp)
  80dcfc:	e0bffa17 	ldw	r2,-24(fp)
  80dd00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dd04:	e0bff817 	ldw	r2,-32(fp)
  80dd08:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  80dd0c:	080a7d80 	call	80a7d8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80dd10:	e0fffe17 	ldw	r3,-8(fp)
  80dd14:	00800384 	movi	r2,14
  80dd18:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  80dd1c:	e0bffb03 	ldbu	r2,-20(fp)
  80dd20:	e0bfff15 	stw	r2,-4(fp)
  80dd24:	00000706 	br	80dd44 <OSQPendAbort+0x164>
  80dd28:	e0bffa17 	ldw	r2,-24(fp)
  80dd2c:	e0bff715 	stw	r2,-36(fp)
  80dd30:	e0bff717 	ldw	r2,-36(fp)
  80dd34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80dd38:	e0bffe17 	ldw	r2,-8(fp)
  80dd3c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  80dd40:	e03fff15 	stw	zero,-4(fp)
  80dd44:	e0bfff17 	ldw	r2,-4(fp)
}
  80dd48:	e037883a 	mov	sp,fp
  80dd4c:	dfc00117 	ldw	ra,4(sp)
  80dd50:	df000017 	ldw	fp,0(sp)
  80dd54:	dec00204 	addi	sp,sp,8
  80dd58:	f800283a 	ret

0080dd5c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  80dd5c:	defff504 	addi	sp,sp,-44
  80dd60:	dfc00a15 	stw	ra,40(sp)
  80dd64:	df000915 	stw	fp,36(sp)
  80dd68:	df000904 	addi	fp,sp,36
  80dd6c:	e13ffd15 	stw	r4,-12(fp)
  80dd70:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80dd74:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80dd78:	e0bffd17 	ldw	r2,-12(fp)
  80dd7c:	1004c03a 	cmpne	r2,r2,zero
  80dd80:	1000031e 	bne	r2,zero,80dd90 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  80dd84:	00800104 	movi	r2,4
  80dd88:	e0bfff15 	stw	r2,-4(fp)
  80dd8c:	00004d06 	br	80dec4 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80dd90:	e0bffd17 	ldw	r2,-12(fp)
  80dd94:	10800003 	ldbu	r2,0(r2)
  80dd98:	10803fcc 	andi	r2,r2,255
  80dd9c:	108000a0 	cmpeqi	r2,r2,2
  80dda0:	1000031e 	bne	r2,zero,80ddb0 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  80dda4:	00800044 	movi	r2,1
  80dda8:	e0bfff15 	stw	r2,-4(fp)
  80ddac:	00004506 	br	80dec4 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ddb0:	0005303a 	rdctl	r2,status
  80ddb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ddb8:	e0fffa17 	ldw	r3,-24(fp)
  80ddbc:	00bfff84 	movi	r2,-2
  80ddc0:	1884703a 	and	r2,r3,r2
  80ddc4:	1001703a 	wrctl	status,r2
  
  return context;
  80ddc8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80ddcc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  80ddd0:	e0bffd17 	ldw	r2,-12(fp)
  80ddd4:	10800283 	ldbu	r2,10(r2)
  80ddd8:	10803fcc 	andi	r2,r2,255
  80dddc:	1005003a 	cmpeq	r2,r2,zero
  80dde0:	10000c1e 	bne	r2,zero,80de14 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80dde4:	e13ffd17 	ldw	r4,-12(fp)
  80dde8:	e17ffe17 	ldw	r5,-8(fp)
  80ddec:	01800104 	movi	r6,4
  80ddf0:	000f883a 	mov	r7,zero
  80ddf4:	0809d980 	call	809d98 <OS_EventTaskRdy>
  80ddf8:	e0bffb17 	ldw	r2,-20(fp)
  80ddfc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80de00:	e0bff917 	ldw	r2,-28(fp)
  80de04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  80de08:	080a7d80 	call	80a7d8 <OS_Sched>
        return (OS_ERR_NONE);
  80de0c:	e03fff15 	stw	zero,-4(fp)
  80de10:	00002c06 	br	80dec4 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  80de14:	e0bffd17 	ldw	r2,-12(fp)
  80de18:	10800117 	ldw	r2,4(r2)
  80de1c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  80de20:	e0bffc17 	ldw	r2,-16(fp)
  80de24:	10c0058b 	ldhu	r3,22(r2)
  80de28:	e0bffc17 	ldw	r2,-16(fp)
  80de2c:	1080050b 	ldhu	r2,20(r2)
  80de30:	18ffffcc 	andi	r3,r3,65535
  80de34:	10bfffcc 	andi	r2,r2,65535
  80de38:	18800736 	bltu	r3,r2,80de58 <OSQPost+0xfc>
  80de3c:	e0bffb17 	ldw	r2,-20(fp)
  80de40:	e0bff815 	stw	r2,-32(fp)
  80de44:	e0bff817 	ldw	r2,-32(fp)
  80de48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80de4c:	00800784 	movi	r2,30
  80de50:	e0bfff15 	stw	r2,-4(fp)
  80de54:	00001b06 	br	80dec4 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  80de58:	e0bffc17 	ldw	r2,-16(fp)
  80de5c:	10c00317 	ldw	r3,12(r2)
  80de60:	e0bffe17 	ldw	r2,-8(fp)
  80de64:	18800015 	stw	r2,0(r3)
  80de68:	18c00104 	addi	r3,r3,4
  80de6c:	e0bffc17 	ldw	r2,-16(fp)
  80de70:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  80de74:	e0bffc17 	ldw	r2,-16(fp)
  80de78:	1080058b 	ldhu	r2,22(r2)
  80de7c:	10800044 	addi	r2,r2,1
  80de80:	1007883a 	mov	r3,r2
  80de84:	e0bffc17 	ldw	r2,-16(fp)
  80de88:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  80de8c:	e0bffc17 	ldw	r2,-16(fp)
  80de90:	10c00317 	ldw	r3,12(r2)
  80de94:	e0bffc17 	ldw	r2,-16(fp)
  80de98:	10800217 	ldw	r2,8(r2)
  80de9c:	1880041e 	bne	r3,r2,80deb0 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  80dea0:	e0bffc17 	ldw	r2,-16(fp)
  80dea4:	10c00117 	ldw	r3,4(r2)
  80dea8:	e0bffc17 	ldw	r2,-16(fp)
  80deac:	10c00315 	stw	r3,12(r2)
  80deb0:	e0bffb17 	ldw	r2,-20(fp)
  80deb4:	e0bff715 	stw	r2,-36(fp)
  80deb8:	e0bff717 	ldw	r2,-36(fp)
  80debc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80dec0:	e03fff15 	stw	zero,-4(fp)
  80dec4:	e0bfff17 	ldw	r2,-4(fp)
}
  80dec8:	e037883a 	mov	sp,fp
  80decc:	dfc00117 	ldw	ra,4(sp)
  80ded0:	df000017 	ldw	fp,0(sp)
  80ded4:	dec00204 	addi	sp,sp,8
  80ded8:	f800283a 	ret

0080dedc <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  80dedc:	defff504 	addi	sp,sp,-44
  80dee0:	dfc00a15 	stw	ra,40(sp)
  80dee4:	df000915 	stw	fp,36(sp)
  80dee8:	df000904 	addi	fp,sp,36
  80deec:	e13ffd15 	stw	r4,-12(fp)
  80def0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80def4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80def8:	e0bffd17 	ldw	r2,-12(fp)
  80defc:	1004c03a 	cmpne	r2,r2,zero
  80df00:	1000031e 	bne	r2,zero,80df10 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  80df04:	00800104 	movi	r2,4
  80df08:	e0bfff15 	stw	r2,-4(fp)
  80df0c:	00004f06 	br	80e04c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80df10:	e0bffd17 	ldw	r2,-12(fp)
  80df14:	10800003 	ldbu	r2,0(r2)
  80df18:	10803fcc 	andi	r2,r2,255
  80df1c:	108000a0 	cmpeqi	r2,r2,2
  80df20:	1000031e 	bne	r2,zero,80df30 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  80df24:	00800044 	movi	r2,1
  80df28:	e0bfff15 	stw	r2,-4(fp)
  80df2c:	00004706 	br	80e04c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df30:	0005303a 	rdctl	r2,status
  80df34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df38:	e0fffa17 	ldw	r3,-24(fp)
  80df3c:	00bfff84 	movi	r2,-2
  80df40:	1884703a 	and	r2,r3,r2
  80df44:	1001703a 	wrctl	status,r2
  
  return context;
  80df48:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80df4c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  80df50:	e0bffd17 	ldw	r2,-12(fp)
  80df54:	10800283 	ldbu	r2,10(r2)
  80df58:	10803fcc 	andi	r2,r2,255
  80df5c:	1005003a 	cmpeq	r2,r2,zero
  80df60:	10000c1e 	bne	r2,zero,80df94 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80df64:	e13ffd17 	ldw	r4,-12(fp)
  80df68:	e17ffe17 	ldw	r5,-8(fp)
  80df6c:	01800104 	movi	r6,4
  80df70:	000f883a 	mov	r7,zero
  80df74:	0809d980 	call	809d98 <OS_EventTaskRdy>
  80df78:	e0bffb17 	ldw	r2,-20(fp)
  80df7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80df80:	e0bff917 	ldw	r2,-28(fp)
  80df84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  80df88:	080a7d80 	call	80a7d8 <OS_Sched>
        return (OS_ERR_NONE);
  80df8c:	e03fff15 	stw	zero,-4(fp)
  80df90:	00002e06 	br	80e04c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80df94:	e0bffd17 	ldw	r2,-12(fp)
  80df98:	10800117 	ldw	r2,4(r2)
  80df9c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80dfa0:	e0bffc17 	ldw	r2,-16(fp)
  80dfa4:	10c0058b 	ldhu	r3,22(r2)
  80dfa8:	e0bffc17 	ldw	r2,-16(fp)
  80dfac:	1080050b 	ldhu	r2,20(r2)
  80dfb0:	18ffffcc 	andi	r3,r3,65535
  80dfb4:	10bfffcc 	andi	r2,r2,65535
  80dfb8:	18800736 	bltu	r3,r2,80dfd8 <OSQPostFront+0xfc>
  80dfbc:	e0bffb17 	ldw	r2,-20(fp)
  80dfc0:	e0bff815 	stw	r2,-32(fp)
  80dfc4:	e0bff817 	ldw	r2,-32(fp)
  80dfc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80dfcc:	00800784 	movi	r2,30
  80dfd0:	e0bfff15 	stw	r2,-4(fp)
  80dfd4:	00001d06 	br	80e04c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  80dfd8:	e0bffc17 	ldw	r2,-16(fp)
  80dfdc:	10c00417 	ldw	r3,16(r2)
  80dfe0:	e0bffc17 	ldw	r2,-16(fp)
  80dfe4:	10800117 	ldw	r2,4(r2)
  80dfe8:	1880041e 	bne	r3,r2,80dffc <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  80dfec:	e0bffc17 	ldw	r2,-16(fp)
  80dff0:	10c00217 	ldw	r3,8(r2)
  80dff4:	e0bffc17 	ldw	r2,-16(fp)
  80dff8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  80dffc:	e0bffc17 	ldw	r2,-16(fp)
  80e000:	10800417 	ldw	r2,16(r2)
  80e004:	10ffff04 	addi	r3,r2,-4
  80e008:	e0bffc17 	ldw	r2,-16(fp)
  80e00c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  80e010:	e0bffc17 	ldw	r2,-16(fp)
  80e014:	10c00417 	ldw	r3,16(r2)
  80e018:	e0bffe17 	ldw	r2,-8(fp)
  80e01c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80e020:	e0bffc17 	ldw	r2,-16(fp)
  80e024:	1080058b 	ldhu	r2,22(r2)
  80e028:	10800044 	addi	r2,r2,1
  80e02c:	1007883a 	mov	r3,r2
  80e030:	e0bffc17 	ldw	r2,-16(fp)
  80e034:	10c0058d 	sth	r3,22(r2)
  80e038:	e0bffb17 	ldw	r2,-20(fp)
  80e03c:	e0bff715 	stw	r2,-36(fp)
  80e040:	e0bff717 	ldw	r2,-36(fp)
  80e044:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80e048:	e03fff15 	stw	zero,-4(fp)
  80e04c:	e0bfff17 	ldw	r2,-4(fp)
}
  80e050:	e037883a 	mov	sp,fp
  80e054:	dfc00117 	ldw	ra,4(sp)
  80e058:	df000017 	ldw	fp,0(sp)
  80e05c:	dec00204 	addi	sp,sp,8
  80e060:	f800283a 	ret

0080e064 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  80e064:	defff404 	addi	sp,sp,-48
  80e068:	dfc00b15 	stw	ra,44(sp)
  80e06c:	df000a15 	stw	fp,40(sp)
  80e070:	df000a04 	addi	fp,sp,40
  80e074:	e13ffc15 	stw	r4,-16(fp)
  80e078:	e17ffd15 	stw	r5,-12(fp)
  80e07c:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80e080:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80e084:	e0bffc17 	ldw	r2,-16(fp)
  80e088:	1004c03a 	cmpne	r2,r2,zero
  80e08c:	1000031e 	bne	r2,zero,80e09c <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  80e090:	00800104 	movi	r2,4
  80e094:	e0bfff15 	stw	r2,-4(fp)
  80e098:	00007906 	br	80e280 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80e09c:	e0bffc17 	ldw	r2,-16(fp)
  80e0a0:	10800003 	ldbu	r2,0(r2)
  80e0a4:	10803fcc 	andi	r2,r2,255
  80e0a8:	108000a0 	cmpeqi	r2,r2,2
  80e0ac:	1000031e 	bne	r2,zero,80e0bc <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  80e0b0:	00800044 	movi	r2,1
  80e0b4:	e0bfff15 	stw	r2,-4(fp)
  80e0b8:	00007106 	br	80e280 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e0bc:	0005303a 	rdctl	r2,status
  80e0c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e0c4:	e0fff917 	ldw	r3,-28(fp)
  80e0c8:	00bfff84 	movi	r2,-2
  80e0cc:	1884703a 	and	r2,r3,r2
  80e0d0:	1001703a 	wrctl	status,r2
  
  return context;
  80e0d4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80e0d8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  80e0dc:	e0bffc17 	ldw	r2,-16(fp)
  80e0e0:	10800283 	ldbu	r2,10(r2)
  80e0e4:	10803fcc 	andi	r2,r2,255
  80e0e8:	1005003a 	cmpeq	r2,r2,zero
  80e0ec:	1000211e 	bne	r2,zero,80e174 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  80e0f0:	e0bffe03 	ldbu	r2,-8(fp)
  80e0f4:	1080004c 	andi	r2,r2,1
  80e0f8:	10803fcc 	andi	r2,r2,255
  80e0fc:	1005003a 	cmpeq	r2,r2,zero
  80e100:	10000c1e 	bne	r2,zero,80e134 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80e104:	00000506 	br	80e11c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80e108:	e13ffc17 	ldw	r4,-16(fp)
  80e10c:	e17ffd17 	ldw	r5,-12(fp)
  80e110:	01800104 	movi	r6,4
  80e114:	000f883a 	mov	r7,zero
  80e118:	0809d980 	call	809d98 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80e11c:	e0bffc17 	ldw	r2,-16(fp)
  80e120:	10800283 	ldbu	r2,10(r2)
  80e124:	10803fcc 	andi	r2,r2,255
  80e128:	1004c03a 	cmpne	r2,r2,zero
  80e12c:	103ff61e 	bne	r2,zero,80e108 <OSQPostOpt+0xa4>
  80e130:	00000506 	br	80e148 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80e134:	e13ffc17 	ldw	r4,-16(fp)
  80e138:	e17ffd17 	ldw	r5,-12(fp)
  80e13c:	01800104 	movi	r6,4
  80e140:	000f883a 	mov	r7,zero
  80e144:	0809d980 	call	809d98 <OS_EventTaskRdy>
  80e148:	e0bffa17 	ldw	r2,-24(fp)
  80e14c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e150:	e0bff817 	ldw	r2,-32(fp)
  80e154:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  80e158:	e0bffe03 	ldbu	r2,-8(fp)
  80e15c:	1080010c 	andi	r2,r2,4
  80e160:	1004c03a 	cmpne	r2,r2,zero
  80e164:	1000011e 	bne	r2,zero,80e16c <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  80e168:	080a7d80 	call	80a7d8 <OS_Sched>
        }
        return (OS_ERR_NONE);
  80e16c:	e03fff15 	stw	zero,-4(fp)
  80e170:	00004306 	br	80e280 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80e174:	e0bffc17 	ldw	r2,-16(fp)
  80e178:	10800117 	ldw	r2,4(r2)
  80e17c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80e180:	e0bffb17 	ldw	r2,-20(fp)
  80e184:	10c0058b 	ldhu	r3,22(r2)
  80e188:	e0bffb17 	ldw	r2,-20(fp)
  80e18c:	1080050b 	ldhu	r2,20(r2)
  80e190:	18ffffcc 	andi	r3,r3,65535
  80e194:	10bfffcc 	andi	r2,r2,65535
  80e198:	18800736 	bltu	r3,r2,80e1b8 <OSQPostOpt+0x154>
  80e19c:	e0bffa17 	ldw	r2,-24(fp)
  80e1a0:	e0bff715 	stw	r2,-36(fp)
  80e1a4:	e0bff717 	ldw	r2,-36(fp)
  80e1a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80e1ac:	00800784 	movi	r2,30
  80e1b0:	e0bfff15 	stw	r2,-4(fp)
  80e1b4:	00003206 	br	80e280 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  80e1b8:	e0bffe03 	ldbu	r2,-8(fp)
  80e1bc:	1080008c 	andi	r2,r2,2
  80e1c0:	1005003a 	cmpeq	r2,r2,zero
  80e1c4:	1000131e 	bne	r2,zero,80e214 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  80e1c8:	e0bffb17 	ldw	r2,-20(fp)
  80e1cc:	10c00417 	ldw	r3,16(r2)
  80e1d0:	e0bffb17 	ldw	r2,-20(fp)
  80e1d4:	10800117 	ldw	r2,4(r2)
  80e1d8:	1880041e 	bne	r3,r2,80e1ec <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  80e1dc:	e0bffb17 	ldw	r2,-20(fp)
  80e1e0:	10c00217 	ldw	r3,8(r2)
  80e1e4:	e0bffb17 	ldw	r2,-20(fp)
  80e1e8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  80e1ec:	e0bffb17 	ldw	r2,-20(fp)
  80e1f0:	10800417 	ldw	r2,16(r2)
  80e1f4:	10ffff04 	addi	r3,r2,-4
  80e1f8:	e0bffb17 	ldw	r2,-20(fp)
  80e1fc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  80e200:	e0bffb17 	ldw	r2,-20(fp)
  80e204:	10c00417 	ldw	r3,16(r2)
  80e208:	e0bffd17 	ldw	r2,-12(fp)
  80e20c:	18800015 	stw	r2,0(r3)
  80e210:	00001006 	br	80e254 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  80e214:	e0bffb17 	ldw	r2,-20(fp)
  80e218:	10c00317 	ldw	r3,12(r2)
  80e21c:	e0bffd17 	ldw	r2,-12(fp)
  80e220:	18800015 	stw	r2,0(r3)
  80e224:	18c00104 	addi	r3,r3,4
  80e228:	e0bffb17 	ldw	r2,-20(fp)
  80e22c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  80e230:	e0bffb17 	ldw	r2,-20(fp)
  80e234:	10c00317 	ldw	r3,12(r2)
  80e238:	e0bffb17 	ldw	r2,-20(fp)
  80e23c:	10800217 	ldw	r2,8(r2)
  80e240:	1880041e 	bne	r3,r2,80e254 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  80e244:	e0bffb17 	ldw	r2,-20(fp)
  80e248:	10c00117 	ldw	r3,4(r2)
  80e24c:	e0bffb17 	ldw	r2,-20(fp)
  80e250:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80e254:	e0bffb17 	ldw	r2,-20(fp)
  80e258:	1080058b 	ldhu	r2,22(r2)
  80e25c:	10800044 	addi	r2,r2,1
  80e260:	1007883a 	mov	r3,r2
  80e264:	e0bffb17 	ldw	r2,-20(fp)
  80e268:	10c0058d 	sth	r3,22(r2)
  80e26c:	e0bffa17 	ldw	r2,-24(fp)
  80e270:	e0bff615 	stw	r2,-40(fp)
  80e274:	e0bff617 	ldw	r2,-40(fp)
  80e278:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80e27c:	e03fff15 	stw	zero,-4(fp)
  80e280:	e0bfff17 	ldw	r2,-4(fp)
}
  80e284:	e037883a 	mov	sp,fp
  80e288:	dfc00117 	ldw	ra,4(sp)
  80e28c:	df000017 	ldw	fp,0(sp)
  80e290:	dec00204 	addi	sp,sp,8
  80e294:	f800283a 	ret

0080e298 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  80e298:	defff504 	addi	sp,sp,-44
  80e29c:	df000a15 	stw	fp,40(sp)
  80e2a0:	df000a04 	addi	fp,sp,40
  80e2a4:	e13ffd15 	stw	r4,-12(fp)
  80e2a8:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80e2ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80e2b0:	e0bffd17 	ldw	r2,-12(fp)
  80e2b4:	1004c03a 	cmpne	r2,r2,zero
  80e2b8:	1000031e 	bne	r2,zero,80e2c8 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  80e2bc:	00800104 	movi	r2,4
  80e2c0:	e0bfff15 	stw	r2,-4(fp)
  80e2c4:	00004f06 	br	80e404 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  80e2c8:	e0bffe17 	ldw	r2,-8(fp)
  80e2cc:	1004c03a 	cmpne	r2,r2,zero
  80e2d0:	1000031e 	bne	r2,zero,80e2e0 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  80e2d4:	00800244 	movi	r2,9
  80e2d8:	e0bfff15 	stw	r2,-4(fp)
  80e2dc:	00004906 	br	80e404 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80e2e0:	e0bffd17 	ldw	r2,-12(fp)
  80e2e4:	10800003 	ldbu	r2,0(r2)
  80e2e8:	10803fcc 	andi	r2,r2,255
  80e2ec:	108000a0 	cmpeqi	r2,r2,2
  80e2f0:	1000031e 	bne	r2,zero,80e300 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  80e2f4:	00800044 	movi	r2,1
  80e2f8:	e0bfff15 	stw	r2,-4(fp)
  80e2fc:	00004106 	br	80e404 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e300:	0005303a 	rdctl	r2,status
  80e304:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e308:	e0fff717 	ldw	r3,-36(fp)
  80e30c:	00bfff84 	movi	r2,-2
  80e310:	1884703a 	and	r2,r3,r2
  80e314:	1001703a 	wrctl	status,r2
  
  return context;
  80e318:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80e31c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  80e320:	e0bffd17 	ldw	r2,-12(fp)
  80e324:	10c00283 	ldbu	r3,10(r2)
  80e328:	e0bffe17 	ldw	r2,-8(fp)
  80e32c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  80e330:	e0bffd17 	ldw	r2,-12(fp)
  80e334:	108002c4 	addi	r2,r2,11
  80e338:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  80e33c:	e0bffe17 	ldw	r2,-8(fp)
  80e340:	10800204 	addi	r2,r2,8
  80e344:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80e348:	e03ffb05 	stb	zero,-20(fp)
  80e34c:	00000d06 	br	80e384 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  80e350:	e0bffa17 	ldw	r2,-24(fp)
  80e354:	10c00003 	ldbu	r3,0(r2)
  80e358:	e0bff917 	ldw	r2,-28(fp)
  80e35c:	10c00005 	stb	r3,0(r2)
  80e360:	e0bff917 	ldw	r2,-28(fp)
  80e364:	10800044 	addi	r2,r2,1
  80e368:	e0bff915 	stw	r2,-28(fp)
  80e36c:	e0bffa17 	ldw	r2,-24(fp)
  80e370:	10800044 	addi	r2,r2,1
  80e374:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80e378:	e0bffb03 	ldbu	r2,-20(fp)
  80e37c:	10800044 	addi	r2,r2,1
  80e380:	e0bffb05 	stb	r2,-20(fp)
  80e384:	e0bffb03 	ldbu	r2,-20(fp)
  80e388:	108000f0 	cmpltui	r2,r2,3
  80e38c:	103ff01e 	bne	r2,zero,80e350 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  80e390:	e0bffd17 	ldw	r2,-12(fp)
  80e394:	10800117 	ldw	r2,4(r2)
  80e398:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  80e39c:	e0bffc17 	ldw	r2,-16(fp)
  80e3a0:	1080058b 	ldhu	r2,22(r2)
  80e3a4:	10bfffcc 	andi	r2,r2,65535
  80e3a8:	1005003a 	cmpeq	r2,r2,zero
  80e3ac:	1000061e 	bne	r2,zero,80e3c8 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  80e3b0:	e0bffc17 	ldw	r2,-16(fp)
  80e3b4:	10800417 	ldw	r2,16(r2)
  80e3b8:	10c00017 	ldw	r3,0(r2)
  80e3bc:	e0bffe17 	ldw	r2,-8(fp)
  80e3c0:	10c00015 	stw	r3,0(r2)
  80e3c4:	00000206 	br	80e3d0 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  80e3c8:	e0bffe17 	ldw	r2,-8(fp)
  80e3cc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  80e3d0:	e0bffc17 	ldw	r2,-16(fp)
  80e3d4:	10c0058b 	ldhu	r3,22(r2)
  80e3d8:	e0bffe17 	ldw	r2,-8(fp)
  80e3dc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  80e3e0:	e0bffc17 	ldw	r2,-16(fp)
  80e3e4:	10c0050b 	ldhu	r3,20(r2)
  80e3e8:	e0bffe17 	ldw	r2,-8(fp)
  80e3ec:	10c0018d 	sth	r3,6(r2)
  80e3f0:	e0bff817 	ldw	r2,-32(fp)
  80e3f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e3f8:	e0bff617 	ldw	r2,-40(fp)
  80e3fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80e400:	e03fff15 	stw	zero,-4(fp)
  80e404:	e0bfff17 	ldw	r2,-4(fp)
}
  80e408:	e037883a 	mov	sp,fp
  80e40c:	df000017 	ldw	fp,0(sp)
  80e410:	dec00104 	addi	sp,sp,4
  80e414:	f800283a 	ret

0080e418 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  80e418:	defffb04 	addi	sp,sp,-20
  80e41c:	dfc00415 	stw	ra,16(sp)
  80e420:	df000315 	stw	fp,12(sp)
  80e424:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  80e428:	01002234 	movhi	r4,136
  80e42c:	21101f04 	addi	r4,r4,16508
  80e430:	01407804 	movi	r5,480
  80e434:	080a7180 	call	80a718 <OS_MemClr>
    pq1 = &OSQTbl[0];
  80e438:	00802234 	movhi	r2,136
  80e43c:	10901f04 	addi	r2,r2,16508
  80e440:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  80e444:	00802234 	movhi	r2,136
  80e448:	10902504 	addi	r2,r2,16532
  80e44c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  80e450:	e03fff0d 	sth	zero,-4(fp)
  80e454:	00000c06 	br	80e488 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  80e458:	e0fffe17 	ldw	r3,-8(fp)
  80e45c:	e0bffd17 	ldw	r2,-12(fp)
  80e460:	18800015 	stw	r2,0(r3)
        pq1++;
  80e464:	e0bffe17 	ldw	r2,-8(fp)
  80e468:	10800604 	addi	r2,r2,24
  80e46c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  80e470:	e0bffd17 	ldw	r2,-12(fp)
  80e474:	10800604 	addi	r2,r2,24
  80e478:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  80e47c:	e0bfff0b 	ldhu	r2,-4(fp)
  80e480:	10800044 	addi	r2,r2,1
  80e484:	e0bfff0d 	sth	r2,-4(fp)
  80e488:	e0bfff0b 	ldhu	r2,-4(fp)
  80e48c:	108004f0 	cmpltui	r2,r2,19
  80e490:	103ff11e 	bne	r2,zero,80e458 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  80e494:	e0bffe17 	ldw	r2,-8(fp)
  80e498:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  80e49c:	00c02074 	movhi	r3,129
  80e4a0:	18dc3204 	addi	r3,r3,28872
  80e4a4:	00802234 	movhi	r2,136
  80e4a8:	10901f04 	addi	r2,r2,16508
  80e4ac:	18800015 	stw	r2,0(r3)
#endif
}
  80e4b0:	e037883a 	mov	sp,fp
  80e4b4:	dfc00117 	ldw	ra,4(sp)
  80e4b8:	df000017 	ldw	fp,0(sp)
  80e4bc:	dec00204 	addi	sp,sp,8
  80e4c0:	f800283a 	ret

0080e4c4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  80e4c4:	defff904 	addi	sp,sp,-28
  80e4c8:	df000615 	stw	fp,24(sp)
  80e4cc:	df000604 	addi	fp,sp,24
  80e4d0:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80e4d4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80e4d8:	e0bffe17 	ldw	r2,-8(fp)
  80e4dc:	1004c03a 	cmpne	r2,r2,zero
  80e4e0:	1000021e 	bne	r2,zero,80e4ec <OSSemAccept+0x28>
        return (0);
  80e4e4:	e03fff15 	stw	zero,-4(fp)
  80e4e8:	00002106 	br	80e570 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80e4ec:	e0bffe17 	ldw	r2,-8(fp)
  80e4f0:	10800003 	ldbu	r2,0(r2)
  80e4f4:	10803fcc 	andi	r2,r2,255
  80e4f8:	108000e0 	cmpeqi	r2,r2,3
  80e4fc:	1000021e 	bne	r2,zero,80e508 <OSSemAccept+0x44>
        return (0);
  80e500:	e03fff15 	stw	zero,-4(fp)
  80e504:	00001a06 	br	80e570 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e508:	0005303a 	rdctl	r2,status
  80e50c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e510:	e0fffb17 	ldw	r3,-20(fp)
  80e514:	00bfff84 	movi	r2,-2
  80e518:	1884703a 	and	r2,r3,r2
  80e51c:	1001703a 	wrctl	status,r2
  
  return context;
  80e520:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80e524:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  80e528:	e0bffe17 	ldw	r2,-8(fp)
  80e52c:	1080020b 	ldhu	r2,8(r2)
  80e530:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  80e534:	e0bffd0b 	ldhu	r2,-12(fp)
  80e538:	1005003a 	cmpeq	r2,r2,zero
  80e53c:	1000061e 	bne	r2,zero,80e558 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  80e540:	e0bffe17 	ldw	r2,-8(fp)
  80e544:	1080020b 	ldhu	r2,8(r2)
  80e548:	10bfffc4 	addi	r2,r2,-1
  80e54c:	1007883a 	mov	r3,r2
  80e550:	e0bffe17 	ldw	r2,-8(fp)
  80e554:	10c0020d 	sth	r3,8(r2)
  80e558:	e0bffc17 	ldw	r2,-16(fp)
  80e55c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e560:	e0bffa17 	ldw	r2,-24(fp)
  80e564:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  80e568:	e0bffd0b 	ldhu	r2,-12(fp)
  80e56c:	e0bfff15 	stw	r2,-4(fp)
  80e570:	e0bfff17 	ldw	r2,-4(fp)
}
  80e574:	e037883a 	mov	sp,fp
  80e578:	df000017 	ldw	fp,0(sp)
  80e57c:	dec00104 	addi	sp,sp,4
  80e580:	f800283a 	ret

0080e584 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  80e584:	defff804 	addi	sp,sp,-32
  80e588:	dfc00715 	stw	ra,28(sp)
  80e58c:	df000615 	stw	fp,24(sp)
  80e590:	df000604 	addi	fp,sp,24
  80e594:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80e598:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80e59c:	00802074 	movhi	r2,129
  80e5a0:	109c3504 	addi	r2,r2,28884
  80e5a4:	10800003 	ldbu	r2,0(r2)
  80e5a8:	10803fcc 	andi	r2,r2,255
  80e5ac:	1005003a 	cmpeq	r2,r2,zero
  80e5b0:	1000021e 	bne	r2,zero,80e5bc <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  80e5b4:	e03fff15 	stw	zero,-4(fp)
  80e5b8:	00003106 	br	80e680 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e5bc:	0005303a 	rdctl	r2,status
  80e5c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e5c4:	e0fffb17 	ldw	r3,-20(fp)
  80e5c8:	00bfff84 	movi	r2,-2
  80e5cc:	1884703a 	and	r2,r3,r2
  80e5d0:	1001703a 	wrctl	status,r2
  
  return context;
  80e5d4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80e5d8:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  80e5dc:	00802074 	movhi	r2,129
  80e5e0:	109c3404 	addi	r2,r2,28880
  80e5e4:	10800017 	ldw	r2,0(r2)
  80e5e8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  80e5ec:	00802074 	movhi	r2,129
  80e5f0:	109c3404 	addi	r2,r2,28880
  80e5f4:	10800017 	ldw	r2,0(r2)
  80e5f8:	1005003a 	cmpeq	r2,r2,zero
  80e5fc:	1000081e 	bne	r2,zero,80e620 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80e600:	00802074 	movhi	r2,129
  80e604:	109c3404 	addi	r2,r2,28880
  80e608:	10800017 	ldw	r2,0(r2)
  80e60c:	10800117 	ldw	r2,4(r2)
  80e610:	1007883a 	mov	r3,r2
  80e614:	00802074 	movhi	r2,129
  80e618:	109c3404 	addi	r2,r2,28880
  80e61c:	10c00015 	stw	r3,0(r2)
  80e620:	e0bffc17 	ldw	r2,-16(fp)
  80e624:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e628:	e0bffa17 	ldw	r2,-24(fp)
  80e62c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  80e630:	e0bffd17 	ldw	r2,-12(fp)
  80e634:	1005003a 	cmpeq	r2,r2,zero
  80e638:	10000f1e 	bne	r2,zero,80e678 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  80e63c:	e0fffd17 	ldw	r3,-12(fp)
  80e640:	008000c4 	movi	r2,3
  80e644:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  80e648:	e0fffd17 	ldw	r3,-12(fp)
  80e64c:	e0bffe0b 	ldhu	r2,-8(fp)
  80e650:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  80e654:	e0bffd17 	ldw	r2,-12(fp)
  80e658:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  80e65c:	e0fffd17 	ldw	r3,-12(fp)
  80e660:	00800fc4 	movi	r2,63
  80e664:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  80e668:	e0bffd17 	ldw	r2,-12(fp)
  80e66c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  80e670:	e13ffd17 	ldw	r4,-12(fp)
  80e674:	080a34c0 	call	80a34c <OS_EventWaitListInit>
    }
    return (pevent);
  80e678:	e0bffd17 	ldw	r2,-12(fp)
  80e67c:	e0bfff15 	stw	r2,-4(fp)
  80e680:	e0bfff17 	ldw	r2,-4(fp)
}
  80e684:	e037883a 	mov	sp,fp
  80e688:	dfc00117 	ldw	ra,4(sp)
  80e68c:	df000017 	ldw	fp,0(sp)
  80e690:	dec00204 	addi	sp,sp,8
  80e694:	f800283a 	ret

0080e698 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80e698:	defff104 	addi	sp,sp,-60
  80e69c:	dfc00e15 	stw	ra,56(sp)
  80e6a0:	df000d15 	stw	fp,52(sp)
  80e6a4:	df000d04 	addi	fp,sp,52
  80e6a8:	e13ffb15 	stw	r4,-20(fp)
  80e6ac:	e1bffd15 	stw	r6,-12(fp)
  80e6b0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80e6b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80e6b8:	e0bffd17 	ldw	r2,-12(fp)
  80e6bc:	1004c03a 	cmpne	r2,r2,zero
  80e6c0:	1000031e 	bne	r2,zero,80e6d0 <OSSemDel+0x38>
        return (pevent);
  80e6c4:	e0bffb17 	ldw	r2,-20(fp)
  80e6c8:	e0bfff15 	stw	r2,-4(fp)
  80e6cc:	00009406 	br	80e920 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80e6d0:	e0bffb17 	ldw	r2,-20(fp)
  80e6d4:	1004c03a 	cmpne	r2,r2,zero
  80e6d8:	1000061e 	bne	r2,zero,80e6f4 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80e6dc:	e0fffd17 	ldw	r3,-12(fp)
  80e6e0:	00800104 	movi	r2,4
  80e6e4:	18800005 	stb	r2,0(r3)
        return (pevent);
  80e6e8:	e0fffb17 	ldw	r3,-20(fp)
  80e6ec:	e0ffff15 	stw	r3,-4(fp)
  80e6f0:	00008b06 	br	80e920 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  80e6f4:	e0bffb17 	ldw	r2,-20(fp)
  80e6f8:	10800003 	ldbu	r2,0(r2)
  80e6fc:	10803fcc 	andi	r2,r2,255
  80e700:	108000e0 	cmpeqi	r2,r2,3
  80e704:	1000061e 	bne	r2,zero,80e720 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80e708:	e0fffd17 	ldw	r3,-12(fp)
  80e70c:	00800044 	movi	r2,1
  80e710:	18800005 	stb	r2,0(r3)
        return (pevent);
  80e714:	e0bffb17 	ldw	r2,-20(fp)
  80e718:	e0bfff15 	stw	r2,-4(fp)
  80e71c:	00008006 	br	80e920 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80e720:	00802074 	movhi	r2,129
  80e724:	109c3504 	addi	r2,r2,28884
  80e728:	10800003 	ldbu	r2,0(r2)
  80e72c:	10803fcc 	andi	r2,r2,255
  80e730:	1005003a 	cmpeq	r2,r2,zero
  80e734:	1000061e 	bne	r2,zero,80e750 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  80e738:	e0fffd17 	ldw	r3,-12(fp)
  80e73c:	008003c4 	movi	r2,15
  80e740:	18800005 	stb	r2,0(r3)
        return (pevent);
  80e744:	e0fffb17 	ldw	r3,-20(fp)
  80e748:	e0ffff15 	stw	r3,-4(fp)
  80e74c:	00007406 	br	80e920 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e750:	0005303a 	rdctl	r2,status
  80e754:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e758:	e0fff717 	ldw	r3,-36(fp)
  80e75c:	00bfff84 	movi	r2,-2
  80e760:	1884703a 	and	r2,r3,r2
  80e764:	1001703a 	wrctl	status,r2
  
  return context;
  80e768:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80e76c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  80e770:	e0bffb17 	ldw	r2,-20(fp)
  80e774:	10800283 	ldbu	r2,10(r2)
  80e778:	10803fcc 	andi	r2,r2,255
  80e77c:	1005003a 	cmpeq	r2,r2,zero
  80e780:	1000031e 	bne	r2,zero,80e790 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80e784:	00800044 	movi	r2,1
  80e788:	e0bffa05 	stb	r2,-24(fp)
  80e78c:	00000106 	br	80e794 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80e790:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80e794:	e0bffc03 	ldbu	r2,-16(fp)
  80e798:	e0bffe15 	stw	r2,-8(fp)
  80e79c:	e0fffe17 	ldw	r3,-8(fp)
  80e7a0:	1805003a 	cmpeq	r2,r3,zero
  80e7a4:	1000041e 	bne	r2,zero,80e7b8 <OSSemDel+0x120>
  80e7a8:	e0fffe17 	ldw	r3,-8(fp)
  80e7ac:	18800060 	cmpeqi	r2,r3,1
  80e7b0:	10002d1e 	bne	r2,zero,80e868 <OSSemDel+0x1d0>
  80e7b4:	00004f06 	br	80e8f4 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  80e7b8:	e0bffa03 	ldbu	r2,-24(fp)
  80e7bc:	1004c03a 	cmpne	r2,r2,zero
  80e7c0:	10001a1e 	bne	r2,zero,80e82c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80e7c4:	e0fffb17 	ldw	r3,-20(fp)
  80e7c8:	00800fc4 	movi	r2,63
  80e7cc:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80e7d0:	e0bffb17 	ldw	r2,-20(fp)
  80e7d4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80e7d8:	e0bffb17 	ldw	r2,-20(fp)
  80e7dc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80e7e0:	00802074 	movhi	r2,129
  80e7e4:	109c3404 	addi	r2,r2,28880
  80e7e8:	10c00017 	ldw	r3,0(r2)
  80e7ec:	e0bffb17 	ldw	r2,-20(fp)
  80e7f0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80e7f4:	e0bffb17 	ldw	r2,-20(fp)
  80e7f8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80e7fc:	00c02074 	movhi	r3,129
  80e800:	18dc3404 	addi	r3,r3,28880
  80e804:	e0bffb17 	ldw	r2,-20(fp)
  80e808:	18800015 	stw	r2,0(r3)
  80e80c:	e0bff817 	ldw	r2,-32(fp)
  80e810:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e814:	e0bff617 	ldw	r2,-40(fp)
  80e818:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80e81c:	e0bffd17 	ldw	r2,-12(fp)
  80e820:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  80e824:	e03ff915 	stw	zero,-28(fp)
  80e828:	00003b06 	br	80e918 <OSSemDel+0x280>
  80e82c:	e0bff817 	ldw	r2,-32(fp)
  80e830:	e0bff515 	stw	r2,-44(fp)
  80e834:	e0bff517 	ldw	r2,-44(fp)
  80e838:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80e83c:	e0fffd17 	ldw	r3,-12(fp)
  80e840:	00801244 	movi	r2,73
  80e844:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80e848:	e0bffb17 	ldw	r2,-20(fp)
  80e84c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80e850:	00003106 	br	80e918 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  80e854:	e13ffb17 	ldw	r4,-20(fp)
  80e858:	000b883a 	mov	r5,zero
  80e85c:	01800044 	movi	r6,1
  80e860:	000f883a 	mov	r7,zero
  80e864:	0809d980 	call	809d98 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  80e868:	e0bffb17 	ldw	r2,-20(fp)
  80e86c:	10800283 	ldbu	r2,10(r2)
  80e870:	10803fcc 	andi	r2,r2,255
  80e874:	1004c03a 	cmpne	r2,r2,zero
  80e878:	103ff61e 	bne	r2,zero,80e854 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80e87c:	e0fffb17 	ldw	r3,-20(fp)
  80e880:	00800fc4 	movi	r2,63
  80e884:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80e888:	e0bffb17 	ldw	r2,-20(fp)
  80e88c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80e890:	e0bffb17 	ldw	r2,-20(fp)
  80e894:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80e898:	00802074 	movhi	r2,129
  80e89c:	109c3404 	addi	r2,r2,28880
  80e8a0:	10c00017 	ldw	r3,0(r2)
  80e8a4:	e0bffb17 	ldw	r2,-20(fp)
  80e8a8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80e8ac:	e0bffb17 	ldw	r2,-20(fp)
  80e8b0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80e8b4:	00c02074 	movhi	r3,129
  80e8b8:	18dc3404 	addi	r3,r3,28880
  80e8bc:	e0bffb17 	ldw	r2,-20(fp)
  80e8c0:	18800015 	stw	r2,0(r3)
  80e8c4:	e0bff817 	ldw	r2,-32(fp)
  80e8c8:	e0bff415 	stw	r2,-48(fp)
  80e8cc:	e0bff417 	ldw	r2,-48(fp)
  80e8d0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80e8d4:	e0bffa03 	ldbu	r2,-24(fp)
  80e8d8:	10800058 	cmpnei	r2,r2,1
  80e8dc:	1000011e 	bne	r2,zero,80e8e4 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80e8e0:	080a7d80 	call	80a7d8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80e8e4:	e0bffd17 	ldw	r2,-12(fp)
  80e8e8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  80e8ec:	e03ff915 	stw	zero,-28(fp)
             break;
  80e8f0:	00000906 	br	80e918 <OSSemDel+0x280>
  80e8f4:	e0bff817 	ldw	r2,-32(fp)
  80e8f8:	e0bff315 	stw	r2,-52(fp)
  80e8fc:	e0bff317 	ldw	r2,-52(fp)
  80e900:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80e904:	e0fffd17 	ldw	r3,-12(fp)
  80e908:	008001c4 	movi	r2,7
  80e90c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80e910:	e0bffb17 	ldw	r2,-20(fp)
  80e914:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80e918:	e0bff917 	ldw	r2,-28(fp)
  80e91c:	e0bfff15 	stw	r2,-4(fp)
  80e920:	e0bfff17 	ldw	r2,-4(fp)
}
  80e924:	e037883a 	mov	sp,fp
  80e928:	dfc00117 	ldw	ra,4(sp)
  80e92c:	df000017 	ldw	fp,0(sp)
  80e930:	dec00204 	addi	sp,sp,8
  80e934:	f800283a 	ret

0080e938 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80e938:	defff404 	addi	sp,sp,-48
  80e93c:	dfc00b15 	stw	ra,44(sp)
  80e940:	df000a15 	stw	fp,40(sp)
  80e944:	df000a04 	addi	fp,sp,40
  80e948:	e13ffc15 	stw	r4,-16(fp)
  80e94c:	e1bffe15 	stw	r6,-8(fp)
  80e950:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80e954:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80e958:	e0bffe17 	ldw	r2,-8(fp)
  80e95c:	1005003a 	cmpeq	r2,r2,zero
  80e960:	10008f1e 	bne	r2,zero,80eba0 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80e964:	e0bffc17 	ldw	r2,-16(fp)
  80e968:	1004c03a 	cmpne	r2,r2,zero
  80e96c:	1000041e 	bne	r2,zero,80e980 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80e970:	e0fffe17 	ldw	r3,-8(fp)
  80e974:	00800104 	movi	r2,4
  80e978:	18800005 	stb	r2,0(r3)
        return;
  80e97c:	00008806 	br	80eba0 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80e980:	e0bffc17 	ldw	r2,-16(fp)
  80e984:	10800003 	ldbu	r2,0(r2)
  80e988:	10803fcc 	andi	r2,r2,255
  80e98c:	108000e0 	cmpeqi	r2,r2,3
  80e990:	1000041e 	bne	r2,zero,80e9a4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  80e994:	e0fffe17 	ldw	r3,-8(fp)
  80e998:	00800044 	movi	r2,1
  80e99c:	18800005 	stb	r2,0(r3)
        return;
  80e9a0:	00007f06 	br	80eba0 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  80e9a4:	00802074 	movhi	r2,129
  80e9a8:	109c3504 	addi	r2,r2,28884
  80e9ac:	10800003 	ldbu	r2,0(r2)
  80e9b0:	10803fcc 	andi	r2,r2,255
  80e9b4:	1005003a 	cmpeq	r2,r2,zero
  80e9b8:	1000041e 	bne	r2,zero,80e9cc <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  80e9bc:	e0fffe17 	ldw	r3,-8(fp)
  80e9c0:	00800084 	movi	r2,2
  80e9c4:	18800005 	stb	r2,0(r3)
        return;
  80e9c8:	00007506 	br	80eba0 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  80e9cc:	00802074 	movhi	r2,129
  80e9d0:	109c2704 	addi	r2,r2,28828
  80e9d4:	10800003 	ldbu	r2,0(r2)
  80e9d8:	10803fcc 	andi	r2,r2,255
  80e9dc:	1005003a 	cmpeq	r2,r2,zero
  80e9e0:	1000041e 	bne	r2,zero,80e9f4 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  80e9e4:	e0fffe17 	ldw	r3,-8(fp)
  80e9e8:	00800344 	movi	r2,13
  80e9ec:	18800005 	stb	r2,0(r3)
        return;
  80e9f0:	00006b06 	br	80eba0 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e9f4:	0005303a 	rdctl	r2,status
  80e9f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e9fc:	e0fffa17 	ldw	r3,-24(fp)
  80ea00:	00bfff84 	movi	r2,-2
  80ea04:	1884703a 	and	r2,r3,r2
  80ea08:	1001703a 	wrctl	status,r2
  
  return context;
  80ea0c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80ea10:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  80ea14:	e0bffc17 	ldw	r2,-16(fp)
  80ea18:	1080020b 	ldhu	r2,8(r2)
  80ea1c:	10bfffcc 	andi	r2,r2,65535
  80ea20:	1005003a 	cmpeq	r2,r2,zero
  80ea24:	10000d1e 	bne	r2,zero,80ea5c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  80ea28:	e0bffc17 	ldw	r2,-16(fp)
  80ea2c:	1080020b 	ldhu	r2,8(r2)
  80ea30:	10bfffc4 	addi	r2,r2,-1
  80ea34:	1007883a 	mov	r3,r2
  80ea38:	e0bffc17 	ldw	r2,-16(fp)
  80ea3c:	10c0020d 	sth	r3,8(r2)
  80ea40:	e0bffb17 	ldw	r2,-20(fp)
  80ea44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea48:	e0bff917 	ldw	r2,-28(fp)
  80ea4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80ea50:	e0bffe17 	ldw	r2,-8(fp)
  80ea54:	10000005 	stb	zero,0(r2)
        return;
  80ea58:	00005106 	br	80eba0 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  80ea5c:	00802074 	movhi	r2,129
  80ea60:	109c3604 	addi	r2,r2,28888
  80ea64:	10c00017 	ldw	r3,0(r2)
  80ea68:	00802074 	movhi	r2,129
  80ea6c:	109c3604 	addi	r2,r2,28888
  80ea70:	10800017 	ldw	r2,0(r2)
  80ea74:	10800c03 	ldbu	r2,48(r2)
  80ea78:	10800054 	ori	r2,r2,1
  80ea7c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80ea80:	00802074 	movhi	r2,129
  80ea84:	109c3604 	addi	r2,r2,28888
  80ea88:	10800017 	ldw	r2,0(r2)
  80ea8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  80ea90:	00802074 	movhi	r2,129
  80ea94:	109c3604 	addi	r2,r2,28888
  80ea98:	10c00017 	ldw	r3,0(r2)
  80ea9c:	e0bffd0b 	ldhu	r2,-12(fp)
  80eaa0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  80eaa4:	e13ffc17 	ldw	r4,-16(fp)
  80eaa8:	0809f2c0 	call	809f2c <OS_EventTaskWait>
  80eaac:	e0bffb17 	ldw	r2,-20(fp)
  80eab0:	e0bff815 	stw	r2,-32(fp)
  80eab4:	e0bff817 	ldw	r2,-32(fp)
  80eab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  80eabc:	080a7d80 	call	80a7d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eac0:	0005303a 	rdctl	r2,status
  80eac4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eac8:	e0fff717 	ldw	r3,-36(fp)
  80eacc:	00bfff84 	movi	r2,-2
  80ead0:	1884703a 	and	r2,r3,r2
  80ead4:	1001703a 	wrctl	status,r2
  
  return context;
  80ead8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80eadc:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80eae0:	00802074 	movhi	r2,129
  80eae4:	109c3604 	addi	r2,r2,28888
  80eae8:	10800017 	ldw	r2,0(r2)
  80eaec:	10800c43 	ldbu	r2,49(r2)
  80eaf0:	10803fcc 	andi	r2,r2,255
  80eaf4:	e0bfff15 	stw	r2,-4(fp)
  80eaf8:	e0ffff17 	ldw	r3,-4(fp)
  80eafc:	1805003a 	cmpeq	r2,r3,zero
  80eb00:	1000041e 	bne	r2,zero,80eb14 <OSSemPend+0x1dc>
  80eb04:	e0ffff17 	ldw	r3,-4(fp)
  80eb08:	188000a0 	cmpeqi	r2,r3,2
  80eb0c:	1000041e 	bne	r2,zero,80eb20 <OSSemPend+0x1e8>
  80eb10:	00000706 	br	80eb30 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  80eb14:	e0bffe17 	ldw	r2,-8(fp)
  80eb18:	10000005 	stb	zero,0(r2)
             break;
  80eb1c:	00000c06 	br	80eb50 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80eb20:	e0fffe17 	ldw	r3,-8(fp)
  80eb24:	00800384 	movi	r2,14
  80eb28:	18800005 	stb	r2,0(r3)
             break;
  80eb2c:	00000806 	br	80eb50 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  80eb30:	00802074 	movhi	r2,129
  80eb34:	109c3604 	addi	r2,r2,28888
  80eb38:	11000017 	ldw	r4,0(r2)
  80eb3c:	e17ffc17 	ldw	r5,-16(fp)
  80eb40:	080a1900 	call	80a190 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  80eb44:	e0fffe17 	ldw	r3,-8(fp)
  80eb48:	00800284 	movi	r2,10
  80eb4c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  80eb50:	00802074 	movhi	r2,129
  80eb54:	109c3604 	addi	r2,r2,28888
  80eb58:	10800017 	ldw	r2,0(r2)
  80eb5c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80eb60:	00802074 	movhi	r2,129
  80eb64:	109c3604 	addi	r2,r2,28888
  80eb68:	10800017 	ldw	r2,0(r2)
  80eb6c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  80eb70:	00802074 	movhi	r2,129
  80eb74:	109c3604 	addi	r2,r2,28888
  80eb78:	10800017 	ldw	r2,0(r2)
  80eb7c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80eb80:	00802074 	movhi	r2,129
  80eb84:	109c3604 	addi	r2,r2,28888
  80eb88:	10800017 	ldw	r2,0(r2)
  80eb8c:	10000815 	stw	zero,32(r2)
  80eb90:	e0bffb17 	ldw	r2,-20(fp)
  80eb94:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eb98:	e0bff617 	ldw	r2,-40(fp)
  80eb9c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  80eba0:	e037883a 	mov	sp,fp
  80eba4:	dfc00117 	ldw	ra,4(sp)
  80eba8:	df000017 	ldw	fp,0(sp)
  80ebac:	dec00204 	addi	sp,sp,8
  80ebb0:	f800283a 	ret

0080ebb4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80ebb4:	defff504 	addi	sp,sp,-44
  80ebb8:	dfc00a15 	stw	ra,40(sp)
  80ebbc:	df000915 	stw	fp,36(sp)
  80ebc0:	df000904 	addi	fp,sp,36
  80ebc4:	e13ffc15 	stw	r4,-16(fp)
  80ebc8:	e1bffe15 	stw	r6,-8(fp)
  80ebcc:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80ebd0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80ebd4:	e0bffe17 	ldw	r2,-8(fp)
  80ebd8:	1004c03a 	cmpne	r2,r2,zero
  80ebdc:	1000021e 	bne	r2,zero,80ebe8 <OSSemPendAbort+0x34>
        return (0);
  80ebe0:	e03fff15 	stw	zero,-4(fp)
  80ebe4:	00004c06 	br	80ed18 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80ebe8:	e0bffc17 	ldw	r2,-16(fp)
  80ebec:	1004c03a 	cmpne	r2,r2,zero
  80ebf0:	1000051e 	bne	r2,zero,80ec08 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80ebf4:	e0fffe17 	ldw	r3,-8(fp)
  80ebf8:	00800104 	movi	r2,4
  80ebfc:	18800005 	stb	r2,0(r3)
        return (0);
  80ec00:	e03fff15 	stw	zero,-4(fp)
  80ec04:	00004406 	br	80ed18 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80ec08:	e0bffc17 	ldw	r2,-16(fp)
  80ec0c:	10800003 	ldbu	r2,0(r2)
  80ec10:	10803fcc 	andi	r2,r2,255
  80ec14:	108000e0 	cmpeqi	r2,r2,3
  80ec18:	1000051e 	bne	r2,zero,80ec30 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80ec1c:	e0fffe17 	ldw	r3,-8(fp)
  80ec20:	00800044 	movi	r2,1
  80ec24:	18800005 	stb	r2,0(r3)
        return (0);
  80ec28:	e03fff15 	stw	zero,-4(fp)
  80ec2c:	00003a06 	br	80ed18 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec30:	0005303a 	rdctl	r2,status
  80ec34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec38:	e0fff917 	ldw	r3,-28(fp)
  80ec3c:	00bfff84 	movi	r2,-2
  80ec40:	1884703a 	and	r2,r3,r2
  80ec44:	1001703a 	wrctl	status,r2
  
  return context;
  80ec48:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80ec4c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  80ec50:	e0bffc17 	ldw	r2,-16(fp)
  80ec54:	10800283 	ldbu	r2,10(r2)
  80ec58:	10803fcc 	andi	r2,r2,255
  80ec5c:	1005003a 	cmpeq	r2,r2,zero
  80ec60:	1000261e 	bne	r2,zero,80ecfc <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  80ec64:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  80ec68:	e0bffd03 	ldbu	r2,-12(fp)
  80ec6c:	10800060 	cmpeqi	r2,r2,1
  80ec70:	1000091e 	bne	r2,zero,80ec98 <OSSemPendAbort+0xe4>
  80ec74:	00000e06 	br	80ecb0 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  80ec78:	e13ffc17 	ldw	r4,-16(fp)
  80ec7c:	000b883a 	mov	r5,zero
  80ec80:	01800044 	movi	r6,1
  80ec84:	01c00084 	movi	r7,2
  80ec88:	0809d980 	call	809d98 <OS_EventTaskRdy>
                     nbr_tasks++;
  80ec8c:	e0bffb03 	ldbu	r2,-20(fp)
  80ec90:	10800044 	addi	r2,r2,1
  80ec94:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  80ec98:	e0bffc17 	ldw	r2,-16(fp)
  80ec9c:	10800283 	ldbu	r2,10(r2)
  80eca0:	10803fcc 	andi	r2,r2,255
  80eca4:	1004c03a 	cmpne	r2,r2,zero
  80eca8:	103ff31e 	bne	r2,zero,80ec78 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  80ecac:	00000806 	br	80ecd0 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  80ecb0:	e13ffc17 	ldw	r4,-16(fp)
  80ecb4:	000b883a 	mov	r5,zero
  80ecb8:	01800044 	movi	r6,1
  80ecbc:	01c00084 	movi	r7,2
  80ecc0:	0809d980 	call	809d98 <OS_EventTaskRdy>
                 nbr_tasks++;
  80ecc4:	e0bffb03 	ldbu	r2,-20(fp)
  80ecc8:	10800044 	addi	r2,r2,1
  80eccc:	e0bffb05 	stb	r2,-20(fp)
  80ecd0:	e0bffa17 	ldw	r2,-24(fp)
  80ecd4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ecd8:	e0bff817 	ldw	r2,-32(fp)
  80ecdc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  80ece0:	080a7d80 	call	80a7d8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80ece4:	e0fffe17 	ldw	r3,-8(fp)
  80ece8:	00800384 	movi	r2,14
  80ecec:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  80ecf0:	e0bffb03 	ldbu	r2,-20(fp)
  80ecf4:	e0bfff15 	stw	r2,-4(fp)
  80ecf8:	00000706 	br	80ed18 <OSSemPendAbort+0x164>
  80ecfc:	e0bffa17 	ldw	r2,-24(fp)
  80ed00:	e0bff715 	stw	r2,-36(fp)
  80ed04:	e0bff717 	ldw	r2,-36(fp)
  80ed08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ed0c:	e0bffe17 	ldw	r2,-8(fp)
  80ed10:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  80ed14:	e03fff15 	stw	zero,-4(fp)
  80ed18:	e0bfff17 	ldw	r2,-4(fp)
}
  80ed1c:	e037883a 	mov	sp,fp
  80ed20:	dfc00117 	ldw	ra,4(sp)
  80ed24:	df000017 	ldw	fp,0(sp)
  80ed28:	dec00204 	addi	sp,sp,8
  80ed2c:	f800283a 	ret

0080ed30 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  80ed30:	defff704 	addi	sp,sp,-36
  80ed34:	dfc00815 	stw	ra,32(sp)
  80ed38:	df000715 	stw	fp,28(sp)
  80ed3c:	df000704 	addi	fp,sp,28
  80ed40:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80ed44:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80ed48:	e0bffe17 	ldw	r2,-8(fp)
  80ed4c:	1004c03a 	cmpne	r2,r2,zero
  80ed50:	1000031e 	bne	r2,zero,80ed60 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  80ed54:	00800104 	movi	r2,4
  80ed58:	e0bfff15 	stw	r2,-4(fp)
  80ed5c:	00003806 	br	80ee40 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80ed60:	e0bffe17 	ldw	r2,-8(fp)
  80ed64:	10800003 	ldbu	r2,0(r2)
  80ed68:	10803fcc 	andi	r2,r2,255
  80ed6c:	108000e0 	cmpeqi	r2,r2,3
  80ed70:	1000031e 	bne	r2,zero,80ed80 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  80ed74:	00800044 	movi	r2,1
  80ed78:	e0bfff15 	stw	r2,-4(fp)
  80ed7c:	00003006 	br	80ee40 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed80:	0005303a 	rdctl	r2,status
  80ed84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed88:	e0fffc17 	ldw	r3,-16(fp)
  80ed8c:	00bfff84 	movi	r2,-2
  80ed90:	1884703a 	and	r2,r3,r2
  80ed94:	1001703a 	wrctl	status,r2
  
  return context;
  80ed98:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80ed9c:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  80eda0:	e0bffe17 	ldw	r2,-8(fp)
  80eda4:	10800283 	ldbu	r2,10(r2)
  80eda8:	10803fcc 	andi	r2,r2,255
  80edac:	1005003a 	cmpeq	r2,r2,zero
  80edb0:	10000c1e 	bne	r2,zero,80ede4 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  80edb4:	e13ffe17 	ldw	r4,-8(fp)
  80edb8:	000b883a 	mov	r5,zero
  80edbc:	01800044 	movi	r6,1
  80edc0:	000f883a 	mov	r7,zero
  80edc4:	0809d980 	call	809d98 <OS_EventTaskRdy>
  80edc8:	e0bffd17 	ldw	r2,-12(fp)
  80edcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80edd0:	e0bffb17 	ldw	r2,-20(fp)
  80edd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  80edd8:	080a7d80 	call	80a7d8 <OS_Sched>
        return (OS_ERR_NONE);
  80eddc:	e03fff15 	stw	zero,-4(fp)
  80ede0:	00001706 	br	80ee40 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  80ede4:	e0bffe17 	ldw	r2,-8(fp)
  80ede8:	1080020b 	ldhu	r2,8(r2)
  80edec:	10ffffcc 	andi	r3,r2,65535
  80edf0:	00bfffd4 	movui	r2,65535
  80edf4:	18800c26 	beq	r3,r2,80ee28 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  80edf8:	e0bffe17 	ldw	r2,-8(fp)
  80edfc:	1080020b 	ldhu	r2,8(r2)
  80ee00:	10800044 	addi	r2,r2,1
  80ee04:	1007883a 	mov	r3,r2
  80ee08:	e0bffe17 	ldw	r2,-8(fp)
  80ee0c:	10c0020d 	sth	r3,8(r2)
  80ee10:	e0bffd17 	ldw	r2,-12(fp)
  80ee14:	e0bffa15 	stw	r2,-24(fp)
  80ee18:	e0bffa17 	ldw	r2,-24(fp)
  80ee1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80ee20:	e03fff15 	stw	zero,-4(fp)
  80ee24:	00000606 	br	80ee40 <OSSemPost+0x110>
  80ee28:	e0bffd17 	ldw	r2,-12(fp)
  80ee2c:	e0bff915 	stw	r2,-28(fp)
  80ee30:	e0bff917 	ldw	r2,-28(fp)
  80ee34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  80ee38:	00800c84 	movi	r2,50
  80ee3c:	e0bfff15 	stw	r2,-4(fp)
  80ee40:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee44:	e037883a 	mov	sp,fp
  80ee48:	dfc00117 	ldw	ra,4(sp)
  80ee4c:	df000017 	ldw	fp,0(sp)
  80ee50:	dec00204 	addi	sp,sp,8
  80ee54:	f800283a 	ret

0080ee58 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  80ee58:	defff604 	addi	sp,sp,-40
  80ee5c:	df000915 	stw	fp,36(sp)
  80ee60:	df000904 	addi	fp,sp,36
  80ee64:	e13ffd15 	stw	r4,-12(fp)
  80ee68:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80ee6c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80ee70:	e0bffd17 	ldw	r2,-12(fp)
  80ee74:	1004c03a 	cmpne	r2,r2,zero
  80ee78:	1000031e 	bne	r2,zero,80ee88 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  80ee7c:	00800104 	movi	r2,4
  80ee80:	e0bfff15 	stw	r2,-4(fp)
  80ee84:	00003b06 	br	80ef74 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  80ee88:	e0bffe17 	ldw	r2,-8(fp)
  80ee8c:	1004c03a 	cmpne	r2,r2,zero
  80ee90:	1000031e 	bne	r2,zero,80eea0 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  80ee94:	00800244 	movi	r2,9
  80ee98:	e0bfff15 	stw	r2,-4(fp)
  80ee9c:	00003506 	br	80ef74 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  80eea0:	e0bffd17 	ldw	r2,-12(fp)
  80eea4:	10800003 	ldbu	r2,0(r2)
  80eea8:	10803fcc 	andi	r2,r2,255
  80eeac:	108000e0 	cmpeqi	r2,r2,3
  80eeb0:	1000031e 	bne	r2,zero,80eec0 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  80eeb4:	00800044 	movi	r2,1
  80eeb8:	e0bfff15 	stw	r2,-4(fp)
  80eebc:	00002d06 	br	80ef74 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eec0:	0005303a 	rdctl	r2,status
  80eec4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eec8:	e0fff817 	ldw	r3,-32(fp)
  80eecc:	00bfff84 	movi	r2,-2
  80eed0:	1884703a 	and	r2,r3,r2
  80eed4:	1001703a 	wrctl	status,r2
  
  return context;
  80eed8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80eedc:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  80eee0:	e0bffd17 	ldw	r2,-12(fp)
  80eee4:	10c00283 	ldbu	r3,10(r2)
  80eee8:	e0bffe17 	ldw	r2,-8(fp)
  80eeec:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  80eef0:	e0bffd17 	ldw	r2,-12(fp)
  80eef4:	108002c4 	addi	r2,r2,11
  80eef8:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  80eefc:	e0bffe17 	ldw	r2,-8(fp)
  80ef00:	10800084 	addi	r2,r2,2
  80ef04:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80ef08:	e03ffa05 	stb	zero,-24(fp)
  80ef0c:	00000d06 	br	80ef44 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  80ef10:	e0bffc17 	ldw	r2,-16(fp)
  80ef14:	10c00003 	ldbu	r3,0(r2)
  80ef18:	e0bffb17 	ldw	r2,-20(fp)
  80ef1c:	10c00005 	stb	r3,0(r2)
  80ef20:	e0bffb17 	ldw	r2,-20(fp)
  80ef24:	10800044 	addi	r2,r2,1
  80ef28:	e0bffb15 	stw	r2,-20(fp)
  80ef2c:	e0bffc17 	ldw	r2,-16(fp)
  80ef30:	10800044 	addi	r2,r2,1
  80ef34:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80ef38:	e0bffa03 	ldbu	r2,-24(fp)
  80ef3c:	10800044 	addi	r2,r2,1
  80ef40:	e0bffa05 	stb	r2,-24(fp)
  80ef44:	e0bffa03 	ldbu	r2,-24(fp)
  80ef48:	108000f0 	cmpltui	r2,r2,3
  80ef4c:	103ff01e 	bne	r2,zero,80ef10 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  80ef50:	e0bffd17 	ldw	r2,-12(fp)
  80ef54:	10c0020b 	ldhu	r3,8(r2)
  80ef58:	e0bffe17 	ldw	r2,-8(fp)
  80ef5c:	10c0000d 	sth	r3,0(r2)
  80ef60:	e0bff917 	ldw	r2,-28(fp)
  80ef64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ef68:	e0bff717 	ldw	r2,-36(fp)
  80ef6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80ef70:	e03fff15 	stw	zero,-4(fp)
  80ef74:	e0bfff17 	ldw	r2,-4(fp)
}
  80ef78:	e037883a 	mov	sp,fp
  80ef7c:	df000017 	ldw	fp,0(sp)
  80ef80:	dec00104 	addi	sp,sp,4
  80ef84:	f800283a 	ret

0080ef88 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  80ef88:	defff904 	addi	sp,sp,-28
  80ef8c:	df000615 	stw	fp,24(sp)
  80ef90:	df000604 	addi	fp,sp,24
  80ef94:	e13ffd15 	stw	r4,-12(fp)
  80ef98:	e1bfff15 	stw	r6,-4(fp)
  80ef9c:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80efa0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80efa4:	e0bfff17 	ldw	r2,-4(fp)
  80efa8:	1005003a 	cmpeq	r2,r2,zero
  80efac:	1000331e 	bne	r2,zero,80f07c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80efb0:	e0bffd17 	ldw	r2,-12(fp)
  80efb4:	1004c03a 	cmpne	r2,r2,zero
  80efb8:	1000041e 	bne	r2,zero,80efcc <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  80efbc:	e0ffff17 	ldw	r3,-4(fp)
  80efc0:	00800104 	movi	r2,4
  80efc4:	18800005 	stb	r2,0(r3)
        return;
  80efc8:	00002c06 	br	80f07c <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80efcc:	e0bffd17 	ldw	r2,-12(fp)
  80efd0:	10800003 	ldbu	r2,0(r2)
  80efd4:	10803fcc 	andi	r2,r2,255
  80efd8:	108000e0 	cmpeqi	r2,r2,3
  80efdc:	1000041e 	bne	r2,zero,80eff0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  80efe0:	e0ffff17 	ldw	r3,-4(fp)
  80efe4:	00800044 	movi	r2,1
  80efe8:	18800005 	stb	r2,0(r3)
        return;
  80efec:	00002306 	br	80f07c <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eff0:	0005303a 	rdctl	r2,status
  80eff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eff8:	e0fffb17 	ldw	r3,-20(fp)
  80effc:	00bfff84 	movi	r2,-2
  80f000:	1884703a 	and	r2,r3,r2
  80f004:	1001703a 	wrctl	status,r2
  
  return context;
  80f008:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80f00c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  80f010:	e0bfff17 	ldw	r2,-4(fp)
  80f014:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  80f018:	e0bffd17 	ldw	r2,-12(fp)
  80f01c:	1080020b 	ldhu	r2,8(r2)
  80f020:	10bfffcc 	andi	r2,r2,65535
  80f024:	1005003a 	cmpeq	r2,r2,zero
  80f028:	1000041e 	bne	r2,zero,80f03c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  80f02c:	e0fffd17 	ldw	r3,-12(fp)
  80f030:	e0bffe0b 	ldhu	r2,-8(fp)
  80f034:	1880020d 	sth	r2,8(r3)
  80f038:	00000c06 	br	80f06c <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  80f03c:	e0bffd17 	ldw	r2,-12(fp)
  80f040:	10800283 	ldbu	r2,10(r2)
  80f044:	10803fcc 	andi	r2,r2,255
  80f048:	1004c03a 	cmpne	r2,r2,zero
  80f04c:	1000041e 	bne	r2,zero,80f060 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  80f050:	e0fffd17 	ldw	r3,-12(fp)
  80f054:	e0bffe0b 	ldhu	r2,-8(fp)
  80f058:	1880020d 	sth	r2,8(r3)
  80f05c:	00000306 	br	80f06c <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  80f060:	e0ffff17 	ldw	r3,-4(fp)
  80f064:	00801244 	movi	r2,73
  80f068:	18800005 	stb	r2,0(r3)
  80f06c:	e0bffc17 	ldw	r2,-16(fp)
  80f070:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f074:	e0bffa17 	ldw	r2,-24(fp)
  80f078:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  80f07c:	e037883a 	mov	sp,fp
  80f080:	df000017 	ldw	fp,0(sp)
  80f084:	dec00104 	addi	sp,sp,4
  80f088:	f800283a 	ret

0080f08c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  80f08c:	defff004 	addi	sp,sp,-64
  80f090:	dfc00f15 	stw	ra,60(sp)
  80f094:	df000e15 	stw	fp,56(sp)
  80f098:	df000e04 	addi	fp,sp,56
  80f09c:	e13ffd05 	stb	r4,-12(fp)
  80f0a0:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  80f0a4:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  80f0a8:	e0bffd03 	ldbu	r2,-12(fp)
  80f0ac:	10800530 	cmpltui	r2,r2,20
  80f0b0:	1000061e 	bne	r2,zero,80f0cc <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  80f0b4:	e0bffd03 	ldbu	r2,-12(fp)
  80f0b8:	10803fe0 	cmpeqi	r2,r2,255
  80f0bc:	1000031e 	bne	r2,zero,80f0cc <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  80f0c0:	00800a84 	movi	r2,42
  80f0c4:	e0bfff15 	stw	r2,-4(fp)
  80f0c8:	00014706 	br	80f5e8 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  80f0cc:	e0bffe03 	ldbu	r2,-8(fp)
  80f0d0:	10800530 	cmpltui	r2,r2,20
  80f0d4:	1000031e 	bne	r2,zero,80f0e4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  80f0d8:	00800a84 	movi	r2,42
  80f0dc:	e0bfff15 	stw	r2,-4(fp)
  80f0e0:	00014106 	br	80f5e8 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f0e4:	0005303a 	rdctl	r2,status
  80f0e8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0ec:	e0fff617 	ldw	r3,-40(fp)
  80f0f0:	00bfff84 	movi	r2,-2
  80f0f4:	1884703a 	and	r2,r3,r2
  80f0f8:	1001703a 	wrctl	status,r2
  
  return context;
  80f0fc:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f100:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  80f104:	e0bffe03 	ldbu	r2,-8(fp)
  80f108:	00c02234 	movhi	r3,136
  80f10c:	18d6ab04 	addi	r3,r3,23212
  80f110:	1085883a 	add	r2,r2,r2
  80f114:	1085883a 	add	r2,r2,r2
  80f118:	10c5883a 	add	r2,r2,r3
  80f11c:	10800017 	ldw	r2,0(r2)
  80f120:	1005003a 	cmpeq	r2,r2,zero
  80f124:	1000071e 	bne	r2,zero,80f144 <OSTaskChangePrio+0xb8>
  80f128:	e0bff717 	ldw	r2,-36(fp)
  80f12c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f130:	e0bff517 	ldw	r2,-44(fp)
  80f134:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  80f138:	00800a04 	movi	r2,40
  80f13c:	e0bfff15 	stw	r2,-4(fp)
  80f140:	00012906 	br	80f5e8 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  80f144:	e0bffd03 	ldbu	r2,-12(fp)
  80f148:	10803fd8 	cmpnei	r2,r2,255
  80f14c:	1000051e 	bne	r2,zero,80f164 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  80f150:	00802074 	movhi	r2,129
  80f154:	109c3604 	addi	r2,r2,28888
  80f158:	10800017 	ldw	r2,0(r2)
  80f15c:	10800c83 	ldbu	r2,50(r2)
  80f160:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  80f164:	e0bffd03 	ldbu	r2,-12(fp)
  80f168:	00c02234 	movhi	r3,136
  80f16c:	18d6ab04 	addi	r3,r3,23212
  80f170:	1085883a 	add	r2,r2,r2
  80f174:	1085883a 	add	r2,r2,r2
  80f178:	10c5883a 	add	r2,r2,r3
  80f17c:	10800017 	ldw	r2,0(r2)
  80f180:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  80f184:	e0bffa17 	ldw	r2,-24(fp)
  80f188:	1004c03a 	cmpne	r2,r2,zero
  80f18c:	1000071e 	bne	r2,zero,80f1ac <OSTaskChangePrio+0x120>
  80f190:	e0bff717 	ldw	r2,-36(fp)
  80f194:	e0bff415 	stw	r2,-48(fp)
  80f198:	e0bff417 	ldw	r2,-48(fp)
  80f19c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  80f1a0:	00800a44 	movi	r2,41
  80f1a4:	e0bfff15 	stw	r2,-4(fp)
  80f1a8:	00010f06 	br	80f5e8 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  80f1ac:	e0bffa17 	ldw	r2,-24(fp)
  80f1b0:	10800058 	cmpnei	r2,r2,1
  80f1b4:	1000071e 	bne	r2,zero,80f1d4 <OSTaskChangePrio+0x148>
  80f1b8:	e0bff717 	ldw	r2,-36(fp)
  80f1bc:	e0bff315 	stw	r2,-52(fp)
  80f1c0:	e0bff317 	ldw	r2,-52(fp)
  80f1c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  80f1c8:	008010c4 	movi	r2,67
  80f1cc:	e0bfff15 	stw	r2,-4(fp)
  80f1d0:	00010506 	br	80f5e8 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  80f1d4:	e0bffe03 	ldbu	r2,-8(fp)
  80f1d8:	1004d0fa 	srli	r2,r2,3
  80f1dc:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  80f1e0:	e0bffe03 	ldbu	r2,-8(fp)
  80f1e4:	108001cc 	andi	r2,r2,7
  80f1e8:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  80f1ec:	e0fff983 	ldbu	r3,-26(fp)
  80f1f0:	00800044 	movi	r2,1
  80f1f4:	10c4983a 	sll	r2,r2,r3
  80f1f8:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  80f1fc:	e0fff943 	ldbu	r3,-27(fp)
  80f200:	00800044 	movi	r2,1
  80f204:	10c4983a 	sll	r2,r2,r3
  80f208:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  80f20c:	e0bffd03 	ldbu	r2,-12(fp)
  80f210:	00c02234 	movhi	r3,136
  80f214:	18d6ab04 	addi	r3,r3,23212
  80f218:	1085883a 	add	r2,r2,r2
  80f21c:	1085883a 	add	r2,r2,r2
  80f220:	10c5883a 	add	r2,r2,r3
  80f224:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  80f228:	e0bffe03 	ldbu	r2,-8(fp)
  80f22c:	00c02234 	movhi	r3,136
  80f230:	18d6ab04 	addi	r3,r3,23212
  80f234:	1085883a 	add	r2,r2,r2
  80f238:	1085883a 	add	r2,r2,r2
  80f23c:	10c7883a 	add	r3,r2,r3
  80f240:	e0bffa17 	ldw	r2,-24(fp)
  80f244:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  80f248:	e0bffa17 	ldw	r2,-24(fp)
  80f24c:	10800d03 	ldbu	r2,52(r2)
  80f250:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  80f254:	e0bffa17 	ldw	r2,-24(fp)
  80f258:	10800d83 	ldbu	r2,54(r2)
  80f25c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  80f260:	e0bffa17 	ldw	r2,-24(fp)
  80f264:	10800d43 	ldbu	r2,53(r2)
  80f268:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  80f26c:	e0fff903 	ldbu	r3,-28(fp)
  80f270:	00802074 	movhi	r2,129
  80f274:	109c3344 	addi	r2,r2,28877
  80f278:	10c5883a 	add	r2,r2,r3
  80f27c:	10c00003 	ldbu	r3,0(r2)
  80f280:	e0bff803 	ldbu	r2,-32(fp)
  80f284:	1884703a 	and	r2,r3,r2
  80f288:	10803fcc 	andi	r2,r2,255
  80f28c:	1005003a 	cmpeq	r2,r2,zero
  80f290:	1000381e 	bne	r2,zero,80f374 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  80f294:	e13ff903 	ldbu	r4,-28(fp)
  80f298:	e0fff903 	ldbu	r3,-28(fp)
  80f29c:	00802074 	movhi	r2,129
  80f2a0:	109c3344 	addi	r2,r2,28877
  80f2a4:	10c5883a 	add	r2,r2,r3
  80f2a8:	10800003 	ldbu	r2,0(r2)
  80f2ac:	1007883a 	mov	r3,r2
  80f2b0:	e0bff803 	ldbu	r2,-32(fp)
  80f2b4:	0084303a 	nor	r2,zero,r2
  80f2b8:	1884703a 	and	r2,r3,r2
  80f2bc:	1007883a 	mov	r3,r2
  80f2c0:	00802074 	movhi	r2,129
  80f2c4:	109c3344 	addi	r2,r2,28877
  80f2c8:	1105883a 	add	r2,r2,r4
  80f2cc:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  80f2d0:	e0fff903 	ldbu	r3,-28(fp)
  80f2d4:	00802074 	movhi	r2,129
  80f2d8:	109c3344 	addi	r2,r2,28877
  80f2dc:	10c5883a 	add	r2,r2,r3
  80f2e0:	10800003 	ldbu	r2,0(r2)
  80f2e4:	10803fcc 	andi	r2,r2,255
  80f2e8:	1004c03a 	cmpne	r2,r2,zero
  80f2ec:	10000b1e 	bne	r2,zero,80f31c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  80f2f0:	e0bff843 	ldbu	r2,-31(fp)
  80f2f4:	0084303a 	nor	r2,zero,r2
  80f2f8:	1007883a 	mov	r3,r2
  80f2fc:	00802074 	movhi	r2,129
  80f300:	109c3304 	addi	r2,r2,28876
  80f304:	10800003 	ldbu	r2,0(r2)
  80f308:	1884703a 	and	r2,r3,r2
  80f30c:	1007883a 	mov	r3,r2
  80f310:	00802074 	movhi	r2,129
  80f314:	109c3304 	addi	r2,r2,28876
  80f318:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  80f31c:	00802074 	movhi	r2,129
  80f320:	109c3304 	addi	r2,r2,28876
  80f324:	10c00003 	ldbu	r3,0(r2)
  80f328:	e0bff8c3 	ldbu	r2,-29(fp)
  80f32c:	1884b03a 	or	r2,r3,r2
  80f330:	1007883a 	mov	r3,r2
  80f334:	00802074 	movhi	r2,129
  80f338:	109c3304 	addi	r2,r2,28876
  80f33c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  80f340:	e13ff983 	ldbu	r4,-26(fp)
  80f344:	e0fff983 	ldbu	r3,-26(fp)
  80f348:	00802074 	movhi	r2,129
  80f34c:	109c3344 	addi	r2,r2,28877
  80f350:	10c5883a 	add	r2,r2,r3
  80f354:	10c00003 	ldbu	r3,0(r2)
  80f358:	e0bff883 	ldbu	r2,-30(fp)
  80f35c:	1884b03a 	or	r2,r3,r2
  80f360:	1007883a 	mov	r3,r2
  80f364:	00802074 	movhi	r2,129
  80f368:	109c3344 	addi	r2,r2,28877
  80f36c:	1105883a 	add	r2,r2,r4
  80f370:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  80f374:	e0bffa17 	ldw	r2,-24(fp)
  80f378:	10800717 	ldw	r2,28(r2)
  80f37c:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  80f380:	e0bffc17 	ldw	r2,-16(fp)
  80f384:	1005003a 	cmpeq	r2,r2,zero
  80f388:	1000341e 	bne	r2,zero,80f45c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  80f38c:	e13ff903 	ldbu	r4,-28(fp)
  80f390:	e0fff903 	ldbu	r3,-28(fp)
  80f394:	e0bffc17 	ldw	r2,-16(fp)
  80f398:	1885883a 	add	r2,r3,r2
  80f39c:	10800204 	addi	r2,r2,8
  80f3a0:	108000c3 	ldbu	r2,3(r2)
  80f3a4:	1007883a 	mov	r3,r2
  80f3a8:	e0bff803 	ldbu	r2,-32(fp)
  80f3ac:	0084303a 	nor	r2,zero,r2
  80f3b0:	1884703a 	and	r2,r3,r2
  80f3b4:	1007883a 	mov	r3,r2
  80f3b8:	e0bffc17 	ldw	r2,-16(fp)
  80f3bc:	2085883a 	add	r2,r4,r2
  80f3c0:	10800204 	addi	r2,r2,8
  80f3c4:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  80f3c8:	e0fff903 	ldbu	r3,-28(fp)
  80f3cc:	e0bffc17 	ldw	r2,-16(fp)
  80f3d0:	1885883a 	add	r2,r3,r2
  80f3d4:	10800204 	addi	r2,r2,8
  80f3d8:	108000c3 	ldbu	r2,3(r2)
  80f3dc:	10803fcc 	andi	r2,r2,255
  80f3e0:	1004c03a 	cmpne	r2,r2,zero
  80f3e4:	1000091e 	bne	r2,zero,80f40c <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  80f3e8:	e0bffc17 	ldw	r2,-16(fp)
  80f3ec:	10800283 	ldbu	r2,10(r2)
  80f3f0:	1007883a 	mov	r3,r2
  80f3f4:	e0bff843 	ldbu	r2,-31(fp)
  80f3f8:	0084303a 	nor	r2,zero,r2
  80f3fc:	1884703a 	and	r2,r3,r2
  80f400:	1007883a 	mov	r3,r2
  80f404:	e0bffc17 	ldw	r2,-16(fp)
  80f408:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  80f40c:	e0bffc17 	ldw	r2,-16(fp)
  80f410:	10c00283 	ldbu	r3,10(r2)
  80f414:	e0bff8c3 	ldbu	r2,-29(fp)
  80f418:	1884b03a 	or	r2,r3,r2
  80f41c:	1007883a 	mov	r3,r2
  80f420:	e0bffc17 	ldw	r2,-16(fp)
  80f424:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  80f428:	e13ff983 	ldbu	r4,-26(fp)
  80f42c:	e0fff983 	ldbu	r3,-26(fp)
  80f430:	e0bffc17 	ldw	r2,-16(fp)
  80f434:	1885883a 	add	r2,r3,r2
  80f438:	10800204 	addi	r2,r2,8
  80f43c:	10c000c3 	ldbu	r3,3(r2)
  80f440:	e0bff883 	ldbu	r2,-30(fp)
  80f444:	1884b03a 	or	r2,r3,r2
  80f448:	1007883a 	mov	r3,r2
  80f44c:	e0bffc17 	ldw	r2,-16(fp)
  80f450:	2085883a 	add	r2,r4,r2
  80f454:	10800204 	addi	r2,r2,8
  80f458:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  80f45c:	e0bffa17 	ldw	r2,-24(fp)
  80f460:	10800817 	ldw	r2,32(r2)
  80f464:	1005003a 	cmpeq	r2,r2,zero
  80f468:	1000441e 	bne	r2,zero,80f57c <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  80f46c:	e0bffa17 	ldw	r2,-24(fp)
  80f470:	10800817 	ldw	r2,32(r2)
  80f474:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  80f478:	e0bffb17 	ldw	r2,-20(fp)
  80f47c:	10800017 	ldw	r2,0(r2)
  80f480:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  80f484:	00003a06 	br	80f570 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  80f488:	e13ff903 	ldbu	r4,-28(fp)
  80f48c:	e0fff903 	ldbu	r3,-28(fp)
  80f490:	e0bffc17 	ldw	r2,-16(fp)
  80f494:	1885883a 	add	r2,r3,r2
  80f498:	10800204 	addi	r2,r2,8
  80f49c:	108000c3 	ldbu	r2,3(r2)
  80f4a0:	1007883a 	mov	r3,r2
  80f4a4:	e0bff803 	ldbu	r2,-32(fp)
  80f4a8:	0084303a 	nor	r2,zero,r2
  80f4ac:	1884703a 	and	r2,r3,r2
  80f4b0:	1007883a 	mov	r3,r2
  80f4b4:	e0bffc17 	ldw	r2,-16(fp)
  80f4b8:	2085883a 	add	r2,r4,r2
  80f4bc:	10800204 	addi	r2,r2,8
  80f4c0:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  80f4c4:	e0fff903 	ldbu	r3,-28(fp)
  80f4c8:	e0bffc17 	ldw	r2,-16(fp)
  80f4cc:	1885883a 	add	r2,r3,r2
  80f4d0:	10800204 	addi	r2,r2,8
  80f4d4:	108000c3 	ldbu	r2,3(r2)
  80f4d8:	10803fcc 	andi	r2,r2,255
  80f4dc:	1004c03a 	cmpne	r2,r2,zero
  80f4e0:	1000091e 	bne	r2,zero,80f508 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  80f4e4:	e0bffc17 	ldw	r2,-16(fp)
  80f4e8:	10800283 	ldbu	r2,10(r2)
  80f4ec:	1007883a 	mov	r3,r2
  80f4f0:	e0bff843 	ldbu	r2,-31(fp)
  80f4f4:	0084303a 	nor	r2,zero,r2
  80f4f8:	1884703a 	and	r2,r3,r2
  80f4fc:	1007883a 	mov	r3,r2
  80f500:	e0bffc17 	ldw	r2,-16(fp)
  80f504:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  80f508:	e0bffc17 	ldw	r2,-16(fp)
  80f50c:	10c00283 	ldbu	r3,10(r2)
  80f510:	e0bff8c3 	ldbu	r2,-29(fp)
  80f514:	1884b03a 	or	r2,r3,r2
  80f518:	1007883a 	mov	r3,r2
  80f51c:	e0bffc17 	ldw	r2,-16(fp)
  80f520:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  80f524:	e13ff983 	ldbu	r4,-26(fp)
  80f528:	e0fff983 	ldbu	r3,-26(fp)
  80f52c:	e0bffc17 	ldw	r2,-16(fp)
  80f530:	1885883a 	add	r2,r3,r2
  80f534:	10800204 	addi	r2,r2,8
  80f538:	10c000c3 	ldbu	r3,3(r2)
  80f53c:	e0bff883 	ldbu	r2,-30(fp)
  80f540:	1884b03a 	or	r2,r3,r2
  80f544:	1007883a 	mov	r3,r2
  80f548:	e0bffc17 	ldw	r2,-16(fp)
  80f54c:	2085883a 	add	r2,r4,r2
  80f550:	10800204 	addi	r2,r2,8
  80f554:	10c000c5 	stb	r3,3(r2)
            pevents++;
  80f558:	e0bffb17 	ldw	r2,-20(fp)
  80f55c:	10800104 	addi	r2,r2,4
  80f560:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  80f564:	e0bffb17 	ldw	r2,-20(fp)
  80f568:	10800017 	ldw	r2,0(r2)
  80f56c:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  80f570:	e0bffc17 	ldw	r2,-16(fp)
  80f574:	1004c03a 	cmpne	r2,r2,zero
  80f578:	103fc31e 	bne	r2,zero,80f488 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  80f57c:	e0fffa17 	ldw	r3,-24(fp)
  80f580:	e0bffe03 	ldbu	r2,-8(fp)
  80f584:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  80f588:	e0fffa17 	ldw	r3,-24(fp)
  80f58c:	e0bff983 	ldbu	r2,-26(fp)
  80f590:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  80f594:	e0fffa17 	ldw	r3,-24(fp)
  80f598:	e0bff943 	ldbu	r2,-27(fp)
  80f59c:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  80f5a0:	e0fffa17 	ldw	r3,-24(fp)
  80f5a4:	e0bff8c3 	ldbu	r2,-29(fp)
  80f5a8:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  80f5ac:	e0fffa17 	ldw	r3,-24(fp)
  80f5b0:	e0bff883 	ldbu	r2,-30(fp)
  80f5b4:	18800d45 	stb	r2,53(r3)
  80f5b8:	e0bff717 	ldw	r2,-36(fp)
  80f5bc:	e0bff215 	stw	r2,-56(fp)
  80f5c0:	e0bff217 	ldw	r2,-56(fp)
  80f5c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80f5c8:	00802074 	movhi	r2,129
  80f5cc:	109c2744 	addi	r2,r2,28829
  80f5d0:	10800003 	ldbu	r2,0(r2)
  80f5d4:	10803fcc 	andi	r2,r2,255
  80f5d8:	10800058 	cmpnei	r2,r2,1
  80f5dc:	1000011e 	bne	r2,zero,80f5e4 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  80f5e0:	080a7d80 	call	80a7d8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80f5e4:	e03fff15 	stw	zero,-4(fp)
  80f5e8:	e0bfff17 	ldw	r2,-4(fp)
}
  80f5ec:	e037883a 	mov	sp,fp
  80f5f0:	dfc00117 	ldw	ra,4(sp)
  80f5f4:	df000017 	ldw	fp,0(sp)
  80f5f8:	dec00204 	addi	sp,sp,8
  80f5fc:	f800283a 	ret

0080f600 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  80f600:	deffed04 	addi	sp,sp,-76
  80f604:	dfc01215 	stw	ra,72(sp)
  80f608:	df001115 	stw	fp,68(sp)
  80f60c:	df001104 	addi	fp,sp,68
  80f610:	e13ffb15 	stw	r4,-20(fp)
  80f614:	e17ffc15 	stw	r5,-16(fp)
  80f618:	e1bffd15 	stw	r6,-12(fp)
  80f61c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80f620:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80f624:	e0bffe03 	ldbu	r2,-8(fp)
  80f628:	10800570 	cmpltui	r2,r2,21
  80f62c:	1000031e 	bne	r2,zero,80f63c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  80f630:	00800a84 	movi	r2,42
  80f634:	e0bfff15 	stw	r2,-4(fp)
  80f638:	00006006 	br	80f7bc <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f63c:	0005303a 	rdctl	r2,status
  80f640:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f644:	e0fff717 	ldw	r3,-36(fp)
  80f648:	00bfff84 	movi	r2,-2
  80f64c:	1884703a 	and	r2,r3,r2
  80f650:	1001703a 	wrctl	status,r2
  
  return context;
  80f654:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f658:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80f65c:	00802074 	movhi	r2,129
  80f660:	109c3504 	addi	r2,r2,28884
  80f664:	10800003 	ldbu	r2,0(r2)
  80f668:	10803fcc 	andi	r2,r2,255
  80f66c:	1005003a 	cmpeq	r2,r2,zero
  80f670:	1000071e 	bne	r2,zero,80f690 <OSTaskCreate+0x90>
  80f674:	e0bff817 	ldw	r2,-32(fp)
  80f678:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f67c:	e0bff617 	ldw	r2,-40(fp)
  80f680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80f684:	00800f04 	movi	r2,60
  80f688:	e0bfff15 	stw	r2,-4(fp)
  80f68c:	00004b06 	br	80f7bc <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80f690:	e0bffe03 	ldbu	r2,-8(fp)
  80f694:	00c02234 	movhi	r3,136
  80f698:	18d6ab04 	addi	r3,r3,23212
  80f69c:	1085883a 	add	r2,r2,r2
  80f6a0:	1085883a 	add	r2,r2,r2
  80f6a4:	10c5883a 	add	r2,r2,r3
  80f6a8:	10800017 	ldw	r2,0(r2)
  80f6ac:	1004c03a 	cmpne	r2,r2,zero
  80f6b0:	10003c1e 	bne	r2,zero,80f7a4 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80f6b4:	e0bffe03 	ldbu	r2,-8(fp)
  80f6b8:	00c02234 	movhi	r3,136
  80f6bc:	18d6ab04 	addi	r3,r3,23212
  80f6c0:	1085883a 	add	r2,r2,r2
  80f6c4:	1085883a 	add	r2,r2,r2
  80f6c8:	10c7883a 	add	r3,r2,r3
  80f6cc:	00800044 	movi	r2,1
  80f6d0:	18800015 	stw	r2,0(r3)
  80f6d4:	e0bff817 	ldw	r2,-32(fp)
  80f6d8:	e0bff515 	stw	r2,-44(fp)
  80f6dc:	e0bff517 	ldw	r2,-44(fp)
  80f6e0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  80f6e4:	e13ffb17 	ldw	r4,-20(fp)
  80f6e8:	e17ffc17 	ldw	r5,-16(fp)
  80f6ec:	e1bffd17 	ldw	r6,-12(fp)
  80f6f0:	000f883a 	mov	r7,zero
  80f6f4:	08144380 	call	814438 <OSTaskStkInit>
  80f6f8:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  80f6fc:	e13ffe03 	ldbu	r4,-8(fp)
  80f700:	d8000015 	stw	zero,0(sp)
  80f704:	d8000115 	stw	zero,4(sp)
  80f708:	d8000215 	stw	zero,8(sp)
  80f70c:	e17ffa17 	ldw	r5,-24(fp)
  80f710:	000d883a 	mov	r6,zero
  80f714:	000f883a 	mov	r7,zero
  80f718:	080abe00 	call	80abe0 <OS_TCBInit>
  80f71c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  80f720:	e0bff903 	ldbu	r2,-28(fp)
  80f724:	1004c03a 	cmpne	r2,r2,zero
  80f728:	1000081e 	bne	r2,zero,80f74c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  80f72c:	00802074 	movhi	r2,129
  80f730:	109c2744 	addi	r2,r2,28829
  80f734:	10800003 	ldbu	r2,0(r2)
  80f738:	10803fcc 	andi	r2,r2,255
  80f73c:	10800058 	cmpnei	r2,r2,1
  80f740:	1000151e 	bne	r2,zero,80f798 <OSTaskCreate+0x198>
                OS_Sched();
  80f744:	080a7d80 	call	80a7d8 <OS_Sched>
  80f748:	00001306 	br	80f798 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f74c:	0005303a 	rdctl	r2,status
  80f750:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f754:	e0fff417 	ldw	r3,-48(fp)
  80f758:	00bfff84 	movi	r2,-2
  80f75c:	1884703a 	and	r2,r3,r2
  80f760:	1001703a 	wrctl	status,r2
  
  return context;
  80f764:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80f768:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  80f76c:	e0bffe03 	ldbu	r2,-8(fp)
  80f770:	00c02234 	movhi	r3,136
  80f774:	18d6ab04 	addi	r3,r3,23212
  80f778:	1085883a 	add	r2,r2,r2
  80f77c:	1085883a 	add	r2,r2,r2
  80f780:	10c5883a 	add	r2,r2,r3
  80f784:	10000015 	stw	zero,0(r2)
  80f788:	e0bff817 	ldw	r2,-32(fp)
  80f78c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f790:	e0bff317 	ldw	r2,-52(fp)
  80f794:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80f798:	e0bff903 	ldbu	r2,-28(fp)
  80f79c:	e0bfff15 	stw	r2,-4(fp)
  80f7a0:	00000606 	br	80f7bc <OSTaskCreate+0x1bc>
  80f7a4:	e0bff817 	ldw	r2,-32(fp)
  80f7a8:	e0bff215 	stw	r2,-56(fp)
  80f7ac:	e0bff217 	ldw	r2,-56(fp)
  80f7b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80f7b4:	00800a04 	movi	r2,40
  80f7b8:	e0bfff15 	stw	r2,-4(fp)
  80f7bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80f7c0:	e037883a 	mov	sp,fp
  80f7c4:	dfc00117 	ldw	ra,4(sp)
  80f7c8:	df000017 	ldw	fp,0(sp)
  80f7cc:	dec00204 	addi	sp,sp,8
  80f7d0:	f800283a 	ret

0080f7d4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  80f7d4:	deffeb04 	addi	sp,sp,-84
  80f7d8:	dfc01415 	stw	ra,80(sp)
  80f7dc:	df001315 	stw	fp,76(sp)
  80f7e0:	df001304 	addi	fp,sp,76
  80f7e4:	e13ff915 	stw	r4,-28(fp)
  80f7e8:	e17ffa15 	stw	r5,-24(fp)
  80f7ec:	e1bffb15 	stw	r6,-20(fp)
  80f7f0:	e0800217 	ldw	r2,8(fp)
  80f7f4:	e0c00617 	ldw	r3,24(fp)
  80f7f8:	e1fffc05 	stb	r7,-16(fp)
  80f7fc:	e0bffd0d 	sth	r2,-12(fp)
  80f800:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80f804:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80f808:	e0bffc03 	ldbu	r2,-16(fp)
  80f80c:	10800570 	cmpltui	r2,r2,21
  80f810:	1000031e 	bne	r2,zero,80f820 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  80f814:	00800a84 	movi	r2,42
  80f818:	e0bfff15 	stw	r2,-4(fp)
  80f81c:	00006706 	br	80f9bc <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f820:	0005303a 	rdctl	r2,status
  80f824:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f828:	e0fff517 	ldw	r3,-44(fp)
  80f82c:	00bfff84 	movi	r2,-2
  80f830:	1884703a 	and	r2,r3,r2
  80f834:	1001703a 	wrctl	status,r2
  
  return context;
  80f838:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f83c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80f840:	00802074 	movhi	r2,129
  80f844:	109c3504 	addi	r2,r2,28884
  80f848:	10800003 	ldbu	r2,0(r2)
  80f84c:	10803fcc 	andi	r2,r2,255
  80f850:	1005003a 	cmpeq	r2,r2,zero
  80f854:	1000071e 	bne	r2,zero,80f874 <OSTaskCreateExt+0xa0>
  80f858:	e0bff617 	ldw	r2,-40(fp)
  80f85c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f860:	e0bff417 	ldw	r2,-48(fp)
  80f864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80f868:	00800f04 	movi	r2,60
  80f86c:	e0bfff15 	stw	r2,-4(fp)
  80f870:	00005206 	br	80f9bc <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80f874:	e0bffc03 	ldbu	r2,-16(fp)
  80f878:	00c02234 	movhi	r3,136
  80f87c:	18d6ab04 	addi	r3,r3,23212
  80f880:	1085883a 	add	r2,r2,r2
  80f884:	1085883a 	add	r2,r2,r2
  80f888:	10c5883a 	add	r2,r2,r3
  80f88c:	10800017 	ldw	r2,0(r2)
  80f890:	1004c03a 	cmpne	r2,r2,zero
  80f894:	1000431e 	bne	r2,zero,80f9a4 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80f898:	e0bffc03 	ldbu	r2,-16(fp)
  80f89c:	00c02234 	movhi	r3,136
  80f8a0:	18d6ab04 	addi	r3,r3,23212
  80f8a4:	1085883a 	add	r2,r2,r2
  80f8a8:	1085883a 	add	r2,r2,r2
  80f8ac:	10c7883a 	add	r3,r2,r3
  80f8b0:	00800044 	movi	r2,1
  80f8b4:	18800015 	stw	r2,0(r3)
  80f8b8:	e0bff617 	ldw	r2,-40(fp)
  80f8bc:	e0bff315 	stw	r2,-52(fp)
  80f8c0:	e0bff317 	ldw	r2,-52(fp)
  80f8c4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  80f8c8:	e1bffe0b 	ldhu	r6,-8(fp)
  80f8cc:	e1000317 	ldw	r4,12(fp)
  80f8d0:	e1400417 	ldw	r5,16(fp)
  80f8d4:	0810a500 	call	810a50 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  80f8d8:	e1fffe0b 	ldhu	r7,-8(fp)
  80f8dc:	e13ff917 	ldw	r4,-28(fp)
  80f8e0:	e17ffa17 	ldw	r5,-24(fp)
  80f8e4:	e1bffb17 	ldw	r6,-20(fp)
  80f8e8:	08144380 	call	814438 <OSTaskStkInit>
  80f8ec:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  80f8f0:	e13ffc03 	ldbu	r4,-16(fp)
  80f8f4:	e1fffd0b 	ldhu	r7,-12(fp)
  80f8f8:	e0fffe0b 	ldhu	r3,-8(fp)
  80f8fc:	e0800417 	ldw	r2,16(fp)
  80f900:	d8800015 	stw	r2,0(sp)
  80f904:	e0800517 	ldw	r2,20(fp)
  80f908:	d8800115 	stw	r2,4(sp)
  80f90c:	d8c00215 	stw	r3,8(sp)
  80f910:	e17ff817 	ldw	r5,-32(fp)
  80f914:	e1800317 	ldw	r6,12(fp)
  80f918:	080abe00 	call	80abe0 <OS_TCBInit>
  80f91c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  80f920:	e0bff703 	ldbu	r2,-36(fp)
  80f924:	1004c03a 	cmpne	r2,r2,zero
  80f928:	1000081e 	bne	r2,zero,80f94c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  80f92c:	00802074 	movhi	r2,129
  80f930:	109c2744 	addi	r2,r2,28829
  80f934:	10800003 	ldbu	r2,0(r2)
  80f938:	10803fcc 	andi	r2,r2,255
  80f93c:	10800058 	cmpnei	r2,r2,1
  80f940:	1000151e 	bne	r2,zero,80f998 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  80f944:	080a7d80 	call	80a7d8 <OS_Sched>
  80f948:	00001306 	br	80f998 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f94c:	0005303a 	rdctl	r2,status
  80f950:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f954:	e0fff217 	ldw	r3,-56(fp)
  80f958:	00bfff84 	movi	r2,-2
  80f95c:	1884703a 	and	r2,r3,r2
  80f960:	1001703a 	wrctl	status,r2
  
  return context;
  80f964:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80f968:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  80f96c:	e0bffc03 	ldbu	r2,-16(fp)
  80f970:	00c02234 	movhi	r3,136
  80f974:	18d6ab04 	addi	r3,r3,23212
  80f978:	1085883a 	add	r2,r2,r2
  80f97c:	1085883a 	add	r2,r2,r2
  80f980:	10c5883a 	add	r2,r2,r3
  80f984:	10000015 	stw	zero,0(r2)
  80f988:	e0bff617 	ldw	r2,-40(fp)
  80f98c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f990:	e0bff117 	ldw	r2,-60(fp)
  80f994:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80f998:	e0bff703 	ldbu	r2,-36(fp)
  80f99c:	e0bfff15 	stw	r2,-4(fp)
  80f9a0:	00000606 	br	80f9bc <OSTaskCreateExt+0x1e8>
  80f9a4:	e0bff617 	ldw	r2,-40(fp)
  80f9a8:	e0bff015 	stw	r2,-64(fp)
  80f9ac:	e0bff017 	ldw	r2,-64(fp)
  80f9b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80f9b4:	00800a04 	movi	r2,40
  80f9b8:	e0bfff15 	stw	r2,-4(fp)
  80f9bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80f9c0:	e037883a 	mov	sp,fp
  80f9c4:	dfc00117 	ldw	ra,4(sp)
  80f9c8:	df000017 	ldw	fp,0(sp)
  80f9cc:	dec00204 	addi	sp,sp,8
  80f9d0:	f800283a 	ret

0080f9d4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  80f9d4:	defff304 	addi	sp,sp,-52
  80f9d8:	dfc00c15 	stw	ra,48(sp)
  80f9dc:	df000b15 	stw	fp,44(sp)
  80f9e0:	df000b04 	addi	fp,sp,44
  80f9e4:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  80f9e8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  80f9ec:	00802074 	movhi	r2,129
  80f9f0:	109c3504 	addi	r2,r2,28884
  80f9f4:	10800003 	ldbu	r2,0(r2)
  80f9f8:	10803fcc 	andi	r2,r2,255
  80f9fc:	1005003a 	cmpeq	r2,r2,zero
  80fa00:	1000031e 	bne	r2,zero,80fa10 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  80fa04:	00801004 	movi	r2,64
  80fa08:	e0bfff15 	stw	r2,-4(fp)
  80fa0c:	0000ee06 	br	80fdc8 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  80fa10:	e0bffe03 	ldbu	r2,-8(fp)
  80fa14:	10800518 	cmpnei	r2,r2,20
  80fa18:	1000031e 	bne	r2,zero,80fa28 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  80fa1c:	00800f84 	movi	r2,62
  80fa20:	e0bfff15 	stw	r2,-4(fp)
  80fa24:	0000e806 	br	80fdc8 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  80fa28:	e0bffe03 	ldbu	r2,-8(fp)
  80fa2c:	10800530 	cmpltui	r2,r2,20
  80fa30:	1000061e 	bne	r2,zero,80fa4c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  80fa34:	e0bffe03 	ldbu	r2,-8(fp)
  80fa38:	10803fe0 	cmpeqi	r2,r2,255
  80fa3c:	1000031e 	bne	r2,zero,80fa4c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  80fa40:	00800a84 	movi	r2,42
  80fa44:	e0bfff15 	stw	r2,-4(fp)
  80fa48:	0000df06 	br	80fdc8 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa4c:	0005303a 	rdctl	r2,status
  80fa50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa54:	e0fffa17 	ldw	r3,-24(fp)
  80fa58:	00bfff84 	movi	r2,-2
  80fa5c:	1884703a 	and	r2,r3,r2
  80fa60:	1001703a 	wrctl	status,r2
  
  return context;
  80fa64:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80fa68:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  80fa6c:	e0bffe03 	ldbu	r2,-8(fp)
  80fa70:	10803fd8 	cmpnei	r2,r2,255
  80fa74:	1000051e 	bne	r2,zero,80fa8c <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  80fa78:	00802074 	movhi	r2,129
  80fa7c:	109c3604 	addi	r2,r2,28888
  80fa80:	10800017 	ldw	r2,0(r2)
  80fa84:	10800c83 	ldbu	r2,50(r2)
  80fa88:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80fa8c:	e0bffe03 	ldbu	r2,-8(fp)
  80fa90:	00c02234 	movhi	r3,136
  80fa94:	18d6ab04 	addi	r3,r3,23212
  80fa98:	1085883a 	add	r2,r2,r2
  80fa9c:	1085883a 	add	r2,r2,r2
  80faa0:	10c5883a 	add	r2,r2,r3
  80faa4:	10800017 	ldw	r2,0(r2)
  80faa8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  80faac:	e0bffc17 	ldw	r2,-16(fp)
  80fab0:	1004c03a 	cmpne	r2,r2,zero
  80fab4:	1000071e 	bne	r2,zero,80fad4 <OSTaskDel+0x100>
  80fab8:	e0bffb17 	ldw	r2,-20(fp)
  80fabc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fac0:	e0bff917 	ldw	r2,-28(fp)
  80fac4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80fac8:	008010c4 	movi	r2,67
  80facc:	e0bfff15 	stw	r2,-4(fp)
  80fad0:	0000bd06 	br	80fdc8 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  80fad4:	e0bffc17 	ldw	r2,-16(fp)
  80fad8:	10800058 	cmpnei	r2,r2,1
  80fadc:	1000071e 	bne	r2,zero,80fafc <OSTaskDel+0x128>
  80fae0:	e0bffb17 	ldw	r2,-20(fp)
  80fae4:	e0bff815 	stw	r2,-32(fp)
  80fae8:	e0bff817 	ldw	r2,-32(fp)
  80faec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80faf0:	00800f44 	movi	r2,61
  80faf4:	e0bfff15 	stw	r2,-4(fp)
  80faf8:	0000b306 	br	80fdc8 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  80fafc:	e0bffc17 	ldw	r2,-16(fp)
  80fb00:	10800d03 	ldbu	r2,52(r2)
  80fb04:	11003fcc 	andi	r4,r2,255
  80fb08:	e0bffc17 	ldw	r2,-16(fp)
  80fb0c:	10800d03 	ldbu	r2,52(r2)
  80fb10:	10c03fcc 	andi	r3,r2,255
  80fb14:	00802074 	movhi	r2,129
  80fb18:	109c3344 	addi	r2,r2,28877
  80fb1c:	10c5883a 	add	r2,r2,r3
  80fb20:	10800003 	ldbu	r2,0(r2)
  80fb24:	1007883a 	mov	r3,r2
  80fb28:	e0bffc17 	ldw	r2,-16(fp)
  80fb2c:	10800d43 	ldbu	r2,53(r2)
  80fb30:	0084303a 	nor	r2,zero,r2
  80fb34:	1884703a 	and	r2,r3,r2
  80fb38:	1007883a 	mov	r3,r2
  80fb3c:	00802074 	movhi	r2,129
  80fb40:	109c3344 	addi	r2,r2,28877
  80fb44:	1105883a 	add	r2,r2,r4
  80fb48:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  80fb4c:	e0bffc17 	ldw	r2,-16(fp)
  80fb50:	10800d03 	ldbu	r2,52(r2)
  80fb54:	10c03fcc 	andi	r3,r2,255
  80fb58:	00802074 	movhi	r2,129
  80fb5c:	109c3344 	addi	r2,r2,28877
  80fb60:	10c5883a 	add	r2,r2,r3
  80fb64:	10800003 	ldbu	r2,0(r2)
  80fb68:	10803fcc 	andi	r2,r2,255
  80fb6c:	1004c03a 	cmpne	r2,r2,zero
  80fb70:	10000c1e 	bne	r2,zero,80fba4 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  80fb74:	e0bffc17 	ldw	r2,-16(fp)
  80fb78:	10800d83 	ldbu	r2,54(r2)
  80fb7c:	0084303a 	nor	r2,zero,r2
  80fb80:	1007883a 	mov	r3,r2
  80fb84:	00802074 	movhi	r2,129
  80fb88:	109c3304 	addi	r2,r2,28876
  80fb8c:	10800003 	ldbu	r2,0(r2)
  80fb90:	1884703a 	and	r2,r3,r2
  80fb94:	1007883a 	mov	r3,r2
  80fb98:	00802074 	movhi	r2,129
  80fb9c:	109c3304 	addi	r2,r2,28876
  80fba0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  80fba4:	e0bffc17 	ldw	r2,-16(fp)
  80fba8:	10800717 	ldw	r2,28(r2)
  80fbac:	1005003a 	cmpeq	r2,r2,zero
  80fbb0:	1000041e 	bne	r2,zero,80fbc4 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  80fbb4:	e0bffc17 	ldw	r2,-16(fp)
  80fbb8:	11400717 	ldw	r5,28(r2)
  80fbbc:	e13ffc17 	ldw	r4,-16(fp)
  80fbc0:	080a1900 	call	80a190 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  80fbc4:	e0bffc17 	ldw	r2,-16(fp)
  80fbc8:	10800817 	ldw	r2,32(r2)
  80fbcc:	1005003a 	cmpeq	r2,r2,zero
  80fbd0:	1000041e 	bne	r2,zero,80fbe4 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80fbd4:	e0bffc17 	ldw	r2,-16(fp)
  80fbd8:	11400817 	ldw	r5,32(r2)
  80fbdc:	e13ffc17 	ldw	r4,-16(fp)
  80fbe0:	080a2480 	call	80a248 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  80fbe4:	e0bffc17 	ldw	r2,-16(fp)
  80fbe8:	10800a17 	ldw	r2,40(r2)
  80fbec:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  80fbf0:	e0bffd17 	ldw	r2,-12(fp)
  80fbf4:	1005003a 	cmpeq	r2,r2,zero
  80fbf8:	1000021e 	bne	r2,zero,80fc04 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  80fbfc:	e13ffd17 	ldw	r4,-12(fp)
  80fc00:	080c8dc0 	call	80c8dc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  80fc04:	e0bffc17 	ldw	r2,-16(fp)
  80fc08:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  80fc0c:	e0bffc17 	ldw	r2,-16(fp)
  80fc10:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80fc14:	e0bffc17 	ldw	r2,-16(fp)
  80fc18:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  80fc1c:	00802074 	movhi	r2,129
  80fc20:	109c2704 	addi	r2,r2,28828
  80fc24:	10800003 	ldbu	r2,0(r2)
  80fc28:	10803fcc 	andi	r2,r2,255
  80fc2c:	10803fe0 	cmpeqi	r2,r2,255
  80fc30:	1000081e 	bne	r2,zero,80fc54 <OSTaskDel+0x280>
        OSLockNesting++;
  80fc34:	00802074 	movhi	r2,129
  80fc38:	109c2704 	addi	r2,r2,28828
  80fc3c:	10800003 	ldbu	r2,0(r2)
  80fc40:	10800044 	addi	r2,r2,1
  80fc44:	1007883a 	mov	r3,r2
  80fc48:	00802074 	movhi	r2,129
  80fc4c:	109c2704 	addi	r2,r2,28828
  80fc50:	10c00005 	stb	r3,0(r2)
  80fc54:	e0bffb17 	ldw	r2,-20(fp)
  80fc58:	e0bff715 	stw	r2,-36(fp)
  80fc5c:	e0bff717 	ldw	r2,-36(fp)
  80fc60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  80fc64:	0809d7c0 	call	809d7c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc68:	0005303a 	rdctl	r2,status
  80fc6c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fc70:	e0fff617 	ldw	r3,-40(fp)
  80fc74:	00bfff84 	movi	r2,-2
  80fc78:	1884703a 	and	r2,r3,r2
  80fc7c:	1001703a 	wrctl	status,r2
  
  return context;
  80fc80:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  80fc84:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  80fc88:	00802074 	movhi	r2,129
  80fc8c:	109c2704 	addi	r2,r2,28828
  80fc90:	10800003 	ldbu	r2,0(r2)
  80fc94:	10803fcc 	andi	r2,r2,255
  80fc98:	1005003a 	cmpeq	r2,r2,zero
  80fc9c:	1000081e 	bne	r2,zero,80fcc0 <OSTaskDel+0x2ec>
        OSLockNesting--;
  80fca0:	00802074 	movhi	r2,129
  80fca4:	109c2704 	addi	r2,r2,28828
  80fca8:	10800003 	ldbu	r2,0(r2)
  80fcac:	10bfffc4 	addi	r2,r2,-1
  80fcb0:	1007883a 	mov	r3,r2
  80fcb4:	00802074 	movhi	r2,129
  80fcb8:	109c2704 	addi	r2,r2,28828
  80fcbc:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  80fcc0:	e13ffc17 	ldw	r4,-16(fp)
  80fcc4:	08147680 	call	814768 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  80fcc8:	00802074 	movhi	r2,129
  80fccc:	109c2f44 	addi	r2,r2,28861
  80fcd0:	10800003 	ldbu	r2,0(r2)
  80fcd4:	10bfffc4 	addi	r2,r2,-1
  80fcd8:	1007883a 	mov	r3,r2
  80fcdc:	00802074 	movhi	r2,129
  80fce0:	109c2f44 	addi	r2,r2,28861
  80fce4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  80fce8:	e0bffe03 	ldbu	r2,-8(fp)
  80fcec:	00c02234 	movhi	r3,136
  80fcf0:	18d6ab04 	addi	r3,r3,23212
  80fcf4:	1085883a 	add	r2,r2,r2
  80fcf8:	1085883a 	add	r2,r2,r2
  80fcfc:	10c5883a 	add	r2,r2,r3
  80fd00:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  80fd04:	e0bffc17 	ldw	r2,-16(fp)
  80fd08:	10800617 	ldw	r2,24(r2)
  80fd0c:	1004c03a 	cmpne	r2,r2,zero
  80fd10:	1000091e 	bne	r2,zero,80fd38 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  80fd14:	e0bffc17 	ldw	r2,-16(fp)
  80fd18:	10800517 	ldw	r2,20(r2)
  80fd1c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  80fd20:	e0bffc17 	ldw	r2,-16(fp)
  80fd24:	10c00517 	ldw	r3,20(r2)
  80fd28:	00802074 	movhi	r2,129
  80fd2c:	109c2a04 	addi	r2,r2,28840
  80fd30:	10c00015 	stw	r3,0(r2)
  80fd34:	00000a06 	br	80fd60 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  80fd38:	e0bffc17 	ldw	r2,-16(fp)
  80fd3c:	10c00617 	ldw	r3,24(r2)
  80fd40:	e0bffc17 	ldw	r2,-16(fp)
  80fd44:	10800517 	ldw	r2,20(r2)
  80fd48:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  80fd4c:	e0bffc17 	ldw	r2,-16(fp)
  80fd50:	10c00517 	ldw	r3,20(r2)
  80fd54:	e0bffc17 	ldw	r2,-16(fp)
  80fd58:	10800617 	ldw	r2,24(r2)
  80fd5c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  80fd60:	00802074 	movhi	r2,129
  80fd64:	109c2e04 	addi	r2,r2,28856
  80fd68:	10c00017 	ldw	r3,0(r2)
  80fd6c:	e0bffc17 	ldw	r2,-16(fp)
  80fd70:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  80fd74:	00c02074 	movhi	r3,129
  80fd78:	18dc2e04 	addi	r3,r3,28856
  80fd7c:	e0bffc17 	ldw	r2,-16(fp)
  80fd80:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  80fd84:	e0fffc17 	ldw	r3,-16(fp)
  80fd88:	00800fc4 	movi	r2,63
  80fd8c:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80fd90:	e0bffc17 	ldw	r2,-16(fp)
  80fd94:	10001345 	stb	zero,77(r2)
  80fd98:	e0bffb17 	ldw	r2,-20(fp)
  80fd9c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fda0:	e0bff517 	ldw	r2,-44(fp)
  80fda4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80fda8:	00802074 	movhi	r2,129
  80fdac:	109c2744 	addi	r2,r2,28829
  80fdb0:	10800003 	ldbu	r2,0(r2)
  80fdb4:	10803fcc 	andi	r2,r2,255
  80fdb8:	10800058 	cmpnei	r2,r2,1
  80fdbc:	1000011e 	bne	r2,zero,80fdc4 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  80fdc0:	080a7d80 	call	80a7d8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80fdc4:	e03fff15 	stw	zero,-4(fp)
  80fdc8:	e0bfff17 	ldw	r2,-4(fp)
}
  80fdcc:	e037883a 	mov	sp,fp
  80fdd0:	dfc00117 	ldw	ra,4(sp)
  80fdd4:	df000017 	ldw	fp,0(sp)
  80fdd8:	dec00204 	addi	sp,sp,8
  80fddc:	f800283a 	ret

0080fde0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  80fde0:	defff404 	addi	sp,sp,-48
  80fde4:	df000b15 	stw	fp,44(sp)
  80fde8:	df000b04 	addi	fp,sp,44
  80fdec:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fdf0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  80fdf4:	e0bffe03 	ldbu	r2,-8(fp)
  80fdf8:	10800518 	cmpnei	r2,r2,20
  80fdfc:	1000031e 	bne	r2,zero,80fe0c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  80fe00:	00800f84 	movi	r2,62
  80fe04:	e0bfff15 	stw	r2,-4(fp)
  80fe08:	00004c06 	br	80ff3c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80fe0c:	e0bffe03 	ldbu	r2,-8(fp)
  80fe10:	10800530 	cmpltui	r2,r2,20
  80fe14:	1000061e 	bne	r2,zero,80fe30 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  80fe18:	e0bffe03 	ldbu	r2,-8(fp)
  80fe1c:	10803fe0 	cmpeqi	r2,r2,255
  80fe20:	1000031e 	bne	r2,zero,80fe30 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  80fe24:	00800a84 	movi	r2,42
  80fe28:	e0bfff15 	stw	r2,-4(fp)
  80fe2c:	00004306 	br	80ff3c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  80fe30:	e0bffe03 	ldbu	r2,-8(fp)
  80fe34:	10803fd8 	cmpnei	r2,r2,255
  80fe38:	1000141e 	bne	r2,zero,80fe8c <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe3c:	0005303a 	rdctl	r2,status
  80fe40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe44:	e0fffa17 	ldw	r3,-24(fp)
  80fe48:	00bfff84 	movi	r2,-2
  80fe4c:	1884703a 	and	r2,r3,r2
  80fe50:	1001703a 	wrctl	status,r2
  
  return context;
  80fe54:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  80fe58:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  80fe5c:	00802074 	movhi	r2,129
  80fe60:	109c3604 	addi	r2,r2,28888
  80fe64:	10800017 	ldw	r2,0(r2)
  80fe68:	10800dc3 	ldbu	r2,55(r2)
  80fe6c:	e0bffd05 	stb	r2,-12(fp)
  80fe70:	e0bffb17 	ldw	r2,-20(fp)
  80fe74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fe78:	e0bff917 	ldw	r2,-28(fp)
  80fe7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  80fe80:	e0bffd03 	ldbu	r2,-12(fp)
  80fe84:	e0bfff15 	stw	r2,-4(fp)
  80fe88:	00002c06 	br	80ff3c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe8c:	0005303a 	rdctl	r2,status
  80fe90:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe94:	e0fff817 	ldw	r3,-32(fp)
  80fe98:	00bfff84 	movi	r2,-2
  80fe9c:	1884703a 	and	r2,r3,r2
  80fea0:	1001703a 	wrctl	status,r2
  
  return context;
  80fea4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  80fea8:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  80feac:	e0bffe03 	ldbu	r2,-8(fp)
  80feb0:	00c02234 	movhi	r3,136
  80feb4:	18d6ab04 	addi	r3,r3,23212
  80feb8:	1085883a 	add	r2,r2,r2
  80febc:	1085883a 	add	r2,r2,r2
  80fec0:	10c5883a 	add	r2,r2,r3
  80fec4:	10800017 	ldw	r2,0(r2)
  80fec8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  80fecc:	e0bffc17 	ldw	r2,-16(fp)
  80fed0:	1004c03a 	cmpne	r2,r2,zero
  80fed4:	1000071e 	bne	r2,zero,80fef4 <OSTaskDelReq+0x114>
  80fed8:	e0bffb17 	ldw	r2,-20(fp)
  80fedc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fee0:	e0bff717 	ldw	r2,-36(fp)
  80fee4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  80fee8:	008010c4 	movi	r2,67
  80feec:	e0bfff15 	stw	r2,-4(fp)
  80fef0:	00001206 	br	80ff3c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  80fef4:	e0bffc17 	ldw	r2,-16(fp)
  80fef8:	10800058 	cmpnei	r2,r2,1
  80fefc:	1000071e 	bne	r2,zero,80ff1c <OSTaskDelReq+0x13c>
  80ff00:	e0bffb17 	ldw	r2,-20(fp)
  80ff04:	e0bff615 	stw	r2,-40(fp)
  80ff08:	e0bff617 	ldw	r2,-40(fp)
  80ff0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80ff10:	00800f44 	movi	r2,61
  80ff14:	e0bfff15 	stw	r2,-4(fp)
  80ff18:	00000806 	br	80ff3c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  80ff1c:	e0fffc17 	ldw	r3,-16(fp)
  80ff20:	00800fc4 	movi	r2,63
  80ff24:	18800dc5 	stb	r2,55(r3)
  80ff28:	e0bffb17 	ldw	r2,-20(fp)
  80ff2c:	e0bff515 	stw	r2,-44(fp)
  80ff30:	e0bff517 	ldw	r2,-44(fp)
  80ff34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80ff38:	e03fff15 	stw	zero,-4(fp)
  80ff3c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ff40:	e037883a 	mov	sp,fp
  80ff44:	df000017 	ldw	fp,0(sp)
  80ff48:	dec00104 	addi	sp,sp,4
  80ff4c:	f800283a 	ret

0080ff50 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80ff50:	defff304 	addi	sp,sp,-52
  80ff54:	dfc00c15 	stw	ra,48(sp)
  80ff58:	df000b15 	stw	fp,44(sp)
  80ff5c:	df000b04 	addi	fp,sp,44
  80ff60:	e17ffd15 	stw	r5,-12(fp)
  80ff64:	e1bffe15 	stw	r6,-8(fp)
  80ff68:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  80ff6c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  80ff70:	e0bffe17 	ldw	r2,-8(fp)
  80ff74:	1004c03a 	cmpne	r2,r2,zero
  80ff78:	1000021e 	bne	r2,zero,80ff84 <OSTaskNameGet+0x34>
        return (0);
  80ff7c:	e03fff15 	stw	zero,-4(fp)
  80ff80:	00005b06 	br	8100f0 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  80ff84:	e0bffc03 	ldbu	r2,-16(fp)
  80ff88:	10800570 	cmpltui	r2,r2,21
  80ff8c:	1000081e 	bne	r2,zero,80ffb0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  80ff90:	e0bffc03 	ldbu	r2,-16(fp)
  80ff94:	10803fe0 	cmpeqi	r2,r2,255
  80ff98:	1000051e 	bne	r2,zero,80ffb0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  80ff9c:	e0fffe17 	ldw	r3,-8(fp)
  80ffa0:	00800a84 	movi	r2,42
  80ffa4:	18800005 	stb	r2,0(r3)
            return (0);
  80ffa8:	e03fff15 	stw	zero,-4(fp)
  80ffac:	00005006 	br	8100f0 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  80ffb0:	e0bffd17 	ldw	r2,-12(fp)
  80ffb4:	1004c03a 	cmpne	r2,r2,zero
  80ffb8:	1000051e 	bne	r2,zero,80ffd0 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  80ffbc:	e0fffe17 	ldw	r3,-8(fp)
  80ffc0:	00800304 	movi	r2,12
  80ffc4:	18800005 	stb	r2,0(r3)
        return (0);
  80ffc8:	e03fff15 	stw	zero,-4(fp)
  80ffcc:	00004806 	br	8100f0 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  80ffd0:	00802074 	movhi	r2,129
  80ffd4:	109c3504 	addi	r2,r2,28884
  80ffd8:	10800003 	ldbu	r2,0(r2)
  80ffdc:	10803fcc 	andi	r2,r2,255
  80ffe0:	1005003a 	cmpeq	r2,r2,zero
  80ffe4:	1000051e 	bne	r2,zero,80fffc <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  80ffe8:	e0fffe17 	ldw	r3,-8(fp)
  80ffec:	00800444 	movi	r2,17
  80fff0:	18800005 	stb	r2,0(r3)
        return (0);
  80fff4:	e03fff15 	stw	zero,-4(fp)
  80fff8:	00003d06 	br	8100f0 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fffc:	0005303a 	rdctl	r2,status
  810000:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810004:	e0fff817 	ldw	r3,-32(fp)
  810008:	00bfff84 	movi	r2,-2
  81000c:	1884703a 	and	r2,r3,r2
  810010:	1001703a 	wrctl	status,r2
  
  return context;
  810014:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  810018:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  81001c:	e0bffc03 	ldbu	r2,-16(fp)
  810020:	10803fd8 	cmpnei	r2,r2,255
  810024:	1000051e 	bne	r2,zero,81003c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  810028:	00802074 	movhi	r2,129
  81002c:	109c3604 	addi	r2,r2,28888
  810030:	10800017 	ldw	r2,0(r2)
  810034:	10800c83 	ldbu	r2,50(r2)
  810038:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81003c:	e0bffc03 	ldbu	r2,-16(fp)
  810040:	00c02234 	movhi	r3,136
  810044:	18d6ab04 	addi	r3,r3,23212
  810048:	1085883a 	add	r2,r2,r2
  81004c:	1085883a 	add	r2,r2,r2
  810050:	10c5883a 	add	r2,r2,r3
  810054:	10800017 	ldw	r2,0(r2)
  810058:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  81005c:	e0bffb17 	ldw	r2,-20(fp)
  810060:	1004c03a 	cmpne	r2,r2,zero
  810064:	1000091e 	bne	r2,zero,81008c <OSTaskNameGet+0x13c>
  810068:	e0bff917 	ldw	r2,-28(fp)
  81006c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810070:	e0bff717 	ldw	r2,-36(fp)
  810074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  810078:	e0fffe17 	ldw	r3,-8(fp)
  81007c:	008010c4 	movi	r2,67
  810080:	18800005 	stb	r2,0(r3)
        return (0);
  810084:	e03fff15 	stw	zero,-4(fp)
  810088:	00001906 	br	8100f0 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  81008c:	e0bffb17 	ldw	r2,-20(fp)
  810090:	10800058 	cmpnei	r2,r2,1
  810094:	1000091e 	bne	r2,zero,8100bc <OSTaskNameGet+0x16c>
  810098:	e0bff917 	ldw	r2,-28(fp)
  81009c:	e0bff615 	stw	r2,-40(fp)
  8100a0:	e0bff617 	ldw	r2,-40(fp)
  8100a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8100a8:	e0fffe17 	ldw	r3,-8(fp)
  8100ac:	008010c4 	movi	r2,67
  8100b0:	18800005 	stb	r2,0(r3)
        return (0);
  8100b4:	e03fff15 	stw	zero,-4(fp)
  8100b8:	00000d06 	br	8100f0 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  8100bc:	e0bffb17 	ldw	r2,-20(fp)
  8100c0:	11401304 	addi	r5,r2,76
  8100c4:	e13ffd17 	ldw	r4,-12(fp)
  8100c8:	080a91c0 	call	80a91c <OS_StrCopy>
  8100cc:	e0bffa05 	stb	r2,-24(fp)
  8100d0:	e0bff917 	ldw	r2,-28(fp)
  8100d4:	e0bff515 	stw	r2,-44(fp)
  8100d8:	e0bff517 	ldw	r2,-44(fp)
  8100dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8100e0:	e0bffe17 	ldw	r2,-8(fp)
  8100e4:	10000005 	stb	zero,0(r2)
    return (len);
  8100e8:	e0bffa03 	ldbu	r2,-24(fp)
  8100ec:	e0bfff15 	stw	r2,-4(fp)
  8100f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8100f4:	e037883a 	mov	sp,fp
  8100f8:	dfc00117 	ldw	ra,4(sp)
  8100fc:	df000017 	ldw	fp,0(sp)
  810100:	dec00204 	addi	sp,sp,8
  810104:	f800283a 	ret

00810108 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  810108:	defff304 	addi	sp,sp,-52
  81010c:	dfc00c15 	stw	ra,48(sp)
  810110:	df000b15 	stw	fp,44(sp)
  810114:	df000b04 	addi	fp,sp,44
  810118:	e17ffe15 	stw	r5,-8(fp)
  81011c:	e1bfff15 	stw	r6,-4(fp)
  810120:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  810124:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  810128:	e0bfff17 	ldw	r2,-4(fp)
  81012c:	1005003a 	cmpeq	r2,r2,zero
  810130:	1000611e 	bne	r2,zero,8102b8 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  810134:	e0bffd03 	ldbu	r2,-12(fp)
  810138:	10800570 	cmpltui	r2,r2,21
  81013c:	1000071e 	bne	r2,zero,81015c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  810140:	e0bffd03 	ldbu	r2,-12(fp)
  810144:	10803fe0 	cmpeqi	r2,r2,255
  810148:	1000041e 	bne	r2,zero,81015c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  81014c:	e0ffff17 	ldw	r3,-4(fp)
  810150:	00800a84 	movi	r2,42
  810154:	18800005 	stb	r2,0(r3)
            return;
  810158:	00005706 	br	8102b8 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  81015c:	e0bffe17 	ldw	r2,-8(fp)
  810160:	1004c03a 	cmpne	r2,r2,zero
  810164:	1000041e 	bne	r2,zero,810178 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  810168:	e0ffff17 	ldw	r3,-4(fp)
  81016c:	00800304 	movi	r2,12
  810170:	18800005 	stb	r2,0(r3)
        return;
  810174:	00005006 	br	8102b8 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  810178:	00802074 	movhi	r2,129
  81017c:	109c3504 	addi	r2,r2,28884
  810180:	10800003 	ldbu	r2,0(r2)
  810184:	10803fcc 	andi	r2,r2,255
  810188:	1005003a 	cmpeq	r2,r2,zero
  81018c:	1000041e 	bne	r2,zero,8101a0 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  810190:	e0ffff17 	ldw	r3,-4(fp)
  810194:	00800484 	movi	r2,18
  810198:	18800005 	stb	r2,0(r3)
        return;
  81019c:	00004606 	br	8102b8 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8101a0:	0005303a 	rdctl	r2,status
  8101a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8101a8:	e0fff917 	ldw	r3,-28(fp)
  8101ac:	00bfff84 	movi	r2,-2
  8101b0:	1884703a 	and	r2,r3,r2
  8101b4:	1001703a 	wrctl	status,r2
  
  return context;
  8101b8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8101bc:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  8101c0:	e0bffd03 	ldbu	r2,-12(fp)
  8101c4:	10803fd8 	cmpnei	r2,r2,255
  8101c8:	1000051e 	bne	r2,zero,8101e0 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  8101cc:	00802074 	movhi	r2,129
  8101d0:	109c3604 	addi	r2,r2,28888
  8101d4:	10800017 	ldw	r2,0(r2)
  8101d8:	10800c83 	ldbu	r2,50(r2)
  8101dc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8101e0:	e0bffd03 	ldbu	r2,-12(fp)
  8101e4:	00c02234 	movhi	r3,136
  8101e8:	18d6ab04 	addi	r3,r3,23212
  8101ec:	1085883a 	add	r2,r2,r2
  8101f0:	1085883a 	add	r2,r2,r2
  8101f4:	10c5883a 	add	r2,r2,r3
  8101f8:	10800017 	ldw	r2,0(r2)
  8101fc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  810200:	e0bffb17 	ldw	r2,-20(fp)
  810204:	1004c03a 	cmpne	r2,r2,zero
  810208:	1000081e 	bne	r2,zero,81022c <OSTaskNameSet+0x124>
  81020c:	e0bffa17 	ldw	r2,-24(fp)
  810210:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810214:	e0bff817 	ldw	r2,-32(fp)
  810218:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81021c:	e0ffff17 	ldw	r3,-4(fp)
  810220:	008010c4 	movi	r2,67
  810224:	18800005 	stb	r2,0(r3)
        return;
  810228:	00002306 	br	8102b8 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  81022c:	e0bffb17 	ldw	r2,-20(fp)
  810230:	10800058 	cmpnei	r2,r2,1
  810234:	1000081e 	bne	r2,zero,810258 <OSTaskNameSet+0x150>
  810238:	e0bffa17 	ldw	r2,-24(fp)
  81023c:	e0bff715 	stw	r2,-36(fp)
  810240:	e0bff717 	ldw	r2,-36(fp)
  810244:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  810248:	e0ffff17 	ldw	r3,-4(fp)
  81024c:	008010c4 	movi	r2,67
  810250:	18800005 	stb	r2,0(r3)
        return;
  810254:	00001806 	br	8102b8 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  810258:	e13ffe17 	ldw	r4,-8(fp)
  81025c:	080a99c0 	call	80a99c <OS_StrLen>
  810260:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  810264:	e0bffc03 	ldbu	r2,-16(fp)
  810268:	10800830 	cmpltui	r2,r2,32
  81026c:	1000081e 	bne	r2,zero,810290 <OSTaskNameSet+0x188>
  810270:	e0bffa17 	ldw	r2,-24(fp)
  810274:	e0bff615 	stw	r2,-40(fp)
  810278:	e0bff617 	ldw	r2,-40(fp)
  81027c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  810280:	e0ffff17 	ldw	r3,-4(fp)
  810284:	00801044 	movi	r2,65
  810288:	18800005 	stb	r2,0(r3)
        return;
  81028c:	00000a06 	br	8102b8 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  810290:	e0bffb17 	ldw	r2,-20(fp)
  810294:	11001304 	addi	r4,r2,76
  810298:	e17ffe17 	ldw	r5,-8(fp)
  81029c:	080a91c0 	call	80a91c <OS_StrCopy>
  8102a0:	e0bffa17 	ldw	r2,-24(fp)
  8102a4:	e0bff515 	stw	r2,-44(fp)
  8102a8:	e0bff517 	ldw	r2,-44(fp)
  8102ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8102b0:	e0bfff17 	ldw	r2,-4(fp)
  8102b4:	10000005 	stb	zero,0(r2)
}
  8102b8:	e037883a 	mov	sp,fp
  8102bc:	dfc00117 	ldw	ra,4(sp)
  8102c0:	df000017 	ldw	fp,0(sp)
  8102c4:	dec00204 	addi	sp,sp,8
  8102c8:	f800283a 	ret

008102cc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  8102cc:	defff304 	addi	sp,sp,-52
  8102d0:	dfc00c15 	stw	ra,48(sp)
  8102d4:	df000b15 	stw	fp,44(sp)
  8102d8:	df000b04 	addi	fp,sp,44
  8102dc:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  8102e0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  8102e4:	e0bffe03 	ldbu	r2,-8(fp)
  8102e8:	10800530 	cmpltui	r2,r2,20
  8102ec:	1000031e 	bne	r2,zero,8102fc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  8102f0:	00800a84 	movi	r2,42
  8102f4:	e0bfff15 	stw	r2,-4(fp)
  8102f8:	00007406 	br	8104cc <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8102fc:	0005303a 	rdctl	r2,status
  810300:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810304:	e0fffb17 	ldw	r3,-20(fp)
  810308:	00bfff84 	movi	r2,-2
  81030c:	1884703a 	and	r2,r3,r2
  810310:	1001703a 	wrctl	status,r2
  
  return context;
  810314:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  810318:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  81031c:	e0bffe03 	ldbu	r2,-8(fp)
  810320:	00c02234 	movhi	r3,136
  810324:	18d6ab04 	addi	r3,r3,23212
  810328:	1085883a 	add	r2,r2,r2
  81032c:	1085883a 	add	r2,r2,r2
  810330:	10c5883a 	add	r2,r2,r3
  810334:	10800017 	ldw	r2,0(r2)
  810338:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  81033c:	e0bffd17 	ldw	r2,-12(fp)
  810340:	1004c03a 	cmpne	r2,r2,zero
  810344:	1000071e 	bne	r2,zero,810364 <OSTaskResume+0x98>
  810348:	e0bffc17 	ldw	r2,-16(fp)
  81034c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810350:	e0bffa17 	ldw	r2,-24(fp)
  810354:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  810358:	00801184 	movi	r2,70
  81035c:	e0bfff15 	stw	r2,-4(fp)
  810360:	00005a06 	br	8104cc <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  810364:	e0bffd17 	ldw	r2,-12(fp)
  810368:	10800058 	cmpnei	r2,r2,1
  81036c:	1000071e 	bne	r2,zero,81038c <OSTaskResume+0xc0>
  810370:	e0bffc17 	ldw	r2,-16(fp)
  810374:	e0bff915 	stw	r2,-28(fp)
  810378:	e0bff917 	ldw	r2,-28(fp)
  81037c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  810380:	008010c4 	movi	r2,67
  810384:	e0bfff15 	stw	r2,-4(fp)
  810388:	00005006 	br	8104cc <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  81038c:	e0bffd17 	ldw	r2,-12(fp)
  810390:	10800c03 	ldbu	r2,48(r2)
  810394:	10803fcc 	andi	r2,r2,255
  810398:	1080020c 	andi	r2,r2,8
  81039c:	1005003a 	cmpeq	r2,r2,zero
  8103a0:	1000441e 	bne	r2,zero,8104b4 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  8103a4:	e0bffd17 	ldw	r2,-12(fp)
  8103a8:	10c00c03 	ldbu	r3,48(r2)
  8103ac:	00bffdc4 	movi	r2,-9
  8103b0:	1884703a 	and	r2,r3,r2
  8103b4:	1007883a 	mov	r3,r2
  8103b8:	e0bffd17 	ldw	r2,-12(fp)
  8103bc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  8103c0:	e0bffd17 	ldw	r2,-12(fp)
  8103c4:	10800c03 	ldbu	r2,48(r2)
  8103c8:	10803fcc 	andi	r2,r2,255
  8103cc:	1004c03a 	cmpne	r2,r2,zero
  8103d0:	1000321e 	bne	r2,zero,81049c <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  8103d4:	e0bffd17 	ldw	r2,-12(fp)
  8103d8:	10800b8b 	ldhu	r2,46(r2)
  8103dc:	10bfffcc 	andi	r2,r2,65535
  8103e0:	1004c03a 	cmpne	r2,r2,zero
  8103e4:	1000281e 	bne	r2,zero,810488 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  8103e8:	e0bffd17 	ldw	r2,-12(fp)
  8103ec:	10c00d83 	ldbu	r3,54(r2)
  8103f0:	00802074 	movhi	r2,129
  8103f4:	109c3304 	addi	r2,r2,28876
  8103f8:	10800003 	ldbu	r2,0(r2)
  8103fc:	1884b03a 	or	r2,r3,r2
  810400:	1007883a 	mov	r3,r2
  810404:	00802074 	movhi	r2,129
  810408:	109c3304 	addi	r2,r2,28876
  81040c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  810410:	e0bffd17 	ldw	r2,-12(fp)
  810414:	10800d03 	ldbu	r2,52(r2)
  810418:	11003fcc 	andi	r4,r2,255
  81041c:	e0bffd17 	ldw	r2,-12(fp)
  810420:	10800d03 	ldbu	r2,52(r2)
  810424:	10c03fcc 	andi	r3,r2,255
  810428:	00802074 	movhi	r2,129
  81042c:	109c3344 	addi	r2,r2,28877
  810430:	10c5883a 	add	r2,r2,r3
  810434:	10c00003 	ldbu	r3,0(r2)
  810438:	e0bffd17 	ldw	r2,-12(fp)
  81043c:	10800d43 	ldbu	r2,53(r2)
  810440:	1884b03a 	or	r2,r3,r2
  810444:	1007883a 	mov	r3,r2
  810448:	00802074 	movhi	r2,129
  81044c:	109c3344 	addi	r2,r2,28877
  810450:	1105883a 	add	r2,r2,r4
  810454:	10c00005 	stb	r3,0(r2)
  810458:	e0bffc17 	ldw	r2,-16(fp)
  81045c:	e0bff815 	stw	r2,-32(fp)
  810460:	e0bff817 	ldw	r2,-32(fp)
  810464:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  810468:	00802074 	movhi	r2,129
  81046c:	109c2744 	addi	r2,r2,28829
  810470:	10800003 	ldbu	r2,0(r2)
  810474:	10803fcc 	andi	r2,r2,255
  810478:	10800058 	cmpnei	r2,r2,1
  81047c:	10000b1e 	bne	r2,zero,8104ac <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  810480:	080a7d80 	call	80a7d8 <OS_Sched>
  810484:	00000906 	br	8104ac <OSTaskResume+0x1e0>
  810488:	e0bffc17 	ldw	r2,-16(fp)
  81048c:	e0bff715 	stw	r2,-36(fp)
  810490:	e0bff717 	ldw	r2,-36(fp)
  810494:	1001703a 	wrctl	status,r2
  810498:	00000406 	br	8104ac <OSTaskResume+0x1e0>
  81049c:	e0bffc17 	ldw	r2,-16(fp)
  8104a0:	e0bff615 	stw	r2,-40(fp)
  8104a4:	e0bff617 	ldw	r2,-40(fp)
  8104a8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  8104ac:	e03fff15 	stw	zero,-4(fp)
  8104b0:	00000606 	br	8104cc <OSTaskResume+0x200>
  8104b4:	e0bffc17 	ldw	r2,-16(fp)
  8104b8:	e0bff515 	stw	r2,-44(fp)
  8104bc:	e0bff517 	ldw	r2,-44(fp)
  8104c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  8104c4:	00801104 	movi	r2,68
  8104c8:	e0bfff15 	stw	r2,-4(fp)
  8104cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8104d0:	e037883a 	mov	sp,fp
  8104d4:	dfc00117 	ldw	ra,4(sp)
  8104d8:	df000017 	ldw	fp,0(sp)
  8104dc:	dec00204 	addi	sp,sp,8
  8104e0:	f800283a 	ret

008104e4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  8104e4:	defff204 	addi	sp,sp,-56
  8104e8:	df000d15 	stw	fp,52(sp)
  8104ec:	df000d04 	addi	fp,sp,52
  8104f0:	e17ffe15 	stw	r5,-8(fp)
  8104f4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8104f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  8104fc:	e0bffd03 	ldbu	r2,-12(fp)
  810500:	10800570 	cmpltui	r2,r2,21
  810504:	1000061e 	bne	r2,zero,810520 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  810508:	e0bffd03 	ldbu	r2,-12(fp)
  81050c:	10803fe0 	cmpeqi	r2,r2,255
  810510:	1000031e 	bne	r2,zero,810520 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  810514:	00800a84 	movi	r2,42
  810518:	e0bfff15 	stw	r2,-4(fp)
  81051c:	00006b06 	br	8106cc <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  810520:	e0bffe17 	ldw	r2,-8(fp)
  810524:	1004c03a 	cmpne	r2,r2,zero
  810528:	1000031e 	bne	r2,zero,810538 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  81052c:	00800244 	movi	r2,9
  810530:	e0bfff15 	stw	r2,-4(fp)
  810534:	00006506 	br	8106cc <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  810538:	e0bffe17 	ldw	r2,-8(fp)
  81053c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  810540:	e0bffe17 	ldw	r2,-8(fp)
  810544:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810548:	0005303a 	rdctl	r2,status
  81054c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810550:	e0fff717 	ldw	r3,-36(fp)
  810554:	00bfff84 	movi	r2,-2
  810558:	1884703a 	and	r2,r3,r2
  81055c:	1001703a 	wrctl	status,r2
  
  return context;
  810560:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  810564:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  810568:	e0bffd03 	ldbu	r2,-12(fp)
  81056c:	10803fd8 	cmpnei	r2,r2,255
  810570:	1000051e 	bne	r2,zero,810588 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  810574:	00802074 	movhi	r2,129
  810578:	109c3604 	addi	r2,r2,28888
  81057c:	10800017 	ldw	r2,0(r2)
  810580:	10800c83 	ldbu	r2,50(r2)
  810584:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  810588:	e0bffd03 	ldbu	r2,-12(fp)
  81058c:	00c02234 	movhi	r3,136
  810590:	18d6ab04 	addi	r3,r3,23212
  810594:	1085883a 	add	r2,r2,r2
  810598:	1085883a 	add	r2,r2,r2
  81059c:	10c5883a 	add	r2,r2,r3
  8105a0:	10800017 	ldw	r2,0(r2)
  8105a4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  8105a8:	e0bffc17 	ldw	r2,-16(fp)
  8105ac:	1004c03a 	cmpne	r2,r2,zero
  8105b0:	1000071e 	bne	r2,zero,8105d0 <OSTaskStkChk+0xec>
  8105b4:	e0bff817 	ldw	r2,-32(fp)
  8105b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8105bc:	e0bff617 	ldw	r2,-40(fp)
  8105c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8105c4:	008010c4 	movi	r2,67
  8105c8:	e0bfff15 	stw	r2,-4(fp)
  8105cc:	00003f06 	br	8106cc <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8105d0:	e0bffc17 	ldw	r2,-16(fp)
  8105d4:	10800058 	cmpnei	r2,r2,1
  8105d8:	1000071e 	bne	r2,zero,8105f8 <OSTaskStkChk+0x114>
  8105dc:	e0bff817 	ldw	r2,-32(fp)
  8105e0:	e0bff515 	stw	r2,-44(fp)
  8105e4:	e0bff517 	ldw	r2,-44(fp)
  8105e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8105ec:	008010c4 	movi	r2,67
  8105f0:	e0bfff15 	stw	r2,-4(fp)
  8105f4:	00003506 	br	8106cc <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  8105f8:	e0bffc17 	ldw	r2,-16(fp)
  8105fc:	1080040b 	ldhu	r2,16(r2)
  810600:	10bfffcc 	andi	r2,r2,65535
  810604:	1080004c 	andi	r2,r2,1
  810608:	1004c03a 	cmpne	r2,r2,zero
  81060c:	1000071e 	bne	r2,zero,81062c <OSTaskStkChk+0x148>
  810610:	e0bff817 	ldw	r2,-32(fp)
  810614:	e0bff415 	stw	r2,-48(fp)
  810618:	e0bff417 	ldw	r2,-48(fp)
  81061c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  810620:	00801144 	movi	r2,69
  810624:	e0bfff15 	stw	r2,-4(fp)
  810628:	00002806 	br	8106cc <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  81062c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  810630:	e0bffc17 	ldw	r2,-16(fp)
  810634:	10800317 	ldw	r2,12(r2)
  810638:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  81063c:	e0bffc17 	ldw	r2,-16(fp)
  810640:	10800217 	ldw	r2,8(r2)
  810644:	e0bffb15 	stw	r2,-20(fp)
  810648:	e0bff817 	ldw	r2,-32(fp)
  81064c:	e0bff315 	stw	r2,-52(fp)
  810650:	e0bff317 	ldw	r2,-52(fp)
  810654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  810658:	00000306 	br	810668 <OSTaskStkChk+0x184>
        nfree++;
  81065c:	e0bffa17 	ldw	r2,-24(fp)
  810660:	10800044 	addi	r2,r2,1
  810664:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  810668:	e0bffb17 	ldw	r2,-20(fp)
  81066c:	10800017 	ldw	r2,0(r2)
  810670:	1005003a 	cmpeq	r2,r2,zero
  810674:	1007883a 	mov	r3,r2
  810678:	e0bffb17 	ldw	r2,-20(fp)
  81067c:	10800104 	addi	r2,r2,4
  810680:	e0bffb15 	stw	r2,-20(fp)
  810684:	18803fcc 	andi	r2,r3,255
  810688:	1004c03a 	cmpne	r2,r2,zero
  81068c:	103ff31e 	bne	r2,zero,81065c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  810690:	e0bffa17 	ldw	r2,-24(fp)
  810694:	1085883a 	add	r2,r2,r2
  810698:	1085883a 	add	r2,r2,r2
  81069c:	1007883a 	mov	r3,r2
  8106a0:	e0bffe17 	ldw	r2,-8(fp)
  8106a4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  8106a8:	e0fff917 	ldw	r3,-28(fp)
  8106ac:	e0bffa17 	ldw	r2,-24(fp)
  8106b0:	1885c83a 	sub	r2,r3,r2
  8106b4:	1085883a 	add	r2,r2,r2
  8106b8:	1085883a 	add	r2,r2,r2
  8106bc:	1007883a 	mov	r3,r2
  8106c0:	e0bffe17 	ldw	r2,-8(fp)
  8106c4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  8106c8:	e03fff15 	stw	zero,-4(fp)
  8106cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8106d0:	e037883a 	mov	sp,fp
  8106d4:	df000017 	ldw	fp,0(sp)
  8106d8:	dec00104 	addi	sp,sp,4
  8106dc:	f800283a 	ret

008106e0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  8106e0:	defff404 	addi	sp,sp,-48
  8106e4:	dfc00b15 	stw	ra,44(sp)
  8106e8:	df000a15 	stw	fp,40(sp)
  8106ec:	df000a04 	addi	fp,sp,40
  8106f0:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8106f4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  8106f8:	e0bffe03 	ldbu	r2,-8(fp)
  8106fc:	10800518 	cmpnei	r2,r2,20
  810700:	1000031e 	bne	r2,zero,810710 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  810704:	008011c4 	movi	r2,71
  810708:	e0bfff15 	stw	r2,-4(fp)
  81070c:	00007906 	br	8108f4 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  810710:	e0bffe03 	ldbu	r2,-8(fp)
  810714:	10800530 	cmpltui	r2,r2,20
  810718:	1000061e 	bne	r2,zero,810734 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  81071c:	e0bffe03 	ldbu	r2,-8(fp)
  810720:	10803fe0 	cmpeqi	r2,r2,255
  810724:	1000031e 	bne	r2,zero,810734 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  810728:	00800a84 	movi	r2,42
  81072c:	e0bfff15 	stw	r2,-4(fp)
  810730:	00007006 	br	8108f4 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810734:	0005303a 	rdctl	r2,status
  810738:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81073c:	e0fff917 	ldw	r3,-28(fp)
  810740:	00bfff84 	movi	r2,-2
  810744:	1884703a 	and	r2,r3,r2
  810748:	1001703a 	wrctl	status,r2
  
  return context;
  81074c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  810750:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  810754:	e0bffe03 	ldbu	r2,-8(fp)
  810758:	10803fd8 	cmpnei	r2,r2,255
  81075c:	1000081e 	bne	r2,zero,810780 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  810760:	00802074 	movhi	r2,129
  810764:	109c3604 	addi	r2,r2,28888
  810768:	10800017 	ldw	r2,0(r2)
  81076c:	10800c83 	ldbu	r2,50(r2)
  810770:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  810774:	00800044 	movi	r2,1
  810778:	e0bffd05 	stb	r2,-12(fp)
  81077c:	00000b06 	br	8107ac <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  810780:	00802074 	movhi	r2,129
  810784:	109c3604 	addi	r2,r2,28888
  810788:	10800017 	ldw	r2,0(r2)
  81078c:	10800c83 	ldbu	r2,50(r2)
  810790:	10c03fcc 	andi	r3,r2,255
  810794:	e0bffe03 	ldbu	r2,-8(fp)
  810798:	1880031e 	bne	r3,r2,8107a8 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  81079c:	00800044 	movi	r2,1
  8107a0:	e0bffd05 	stb	r2,-12(fp)
  8107a4:	00000106 	br	8107ac <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  8107a8:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8107ac:	e0bffe03 	ldbu	r2,-8(fp)
  8107b0:	00c02234 	movhi	r3,136
  8107b4:	18d6ab04 	addi	r3,r3,23212
  8107b8:	1085883a 	add	r2,r2,r2
  8107bc:	1085883a 	add	r2,r2,r2
  8107c0:	10c5883a 	add	r2,r2,r3
  8107c4:	10800017 	ldw	r2,0(r2)
  8107c8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  8107cc:	e0bffc17 	ldw	r2,-16(fp)
  8107d0:	1004c03a 	cmpne	r2,r2,zero
  8107d4:	1000071e 	bne	r2,zero,8107f4 <OSTaskSuspend+0x114>
  8107d8:	e0bffa17 	ldw	r2,-24(fp)
  8107dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8107e0:	e0bff817 	ldw	r2,-32(fp)
  8107e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  8107e8:	00801204 	movi	r2,72
  8107ec:	e0bfff15 	stw	r2,-4(fp)
  8107f0:	00004006 	br	8108f4 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  8107f4:	e0bffc17 	ldw	r2,-16(fp)
  8107f8:	10800058 	cmpnei	r2,r2,1
  8107fc:	1000071e 	bne	r2,zero,81081c <OSTaskSuspend+0x13c>
  810800:	e0bffa17 	ldw	r2,-24(fp)
  810804:	e0bff715 	stw	r2,-36(fp)
  810808:	e0bff717 	ldw	r2,-36(fp)
  81080c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  810810:	008010c4 	movi	r2,67
  810814:	e0bfff15 	stw	r2,-4(fp)
  810818:	00003606 	br	8108f4 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  81081c:	e0bffc17 	ldw	r2,-16(fp)
  810820:	10800d03 	ldbu	r2,52(r2)
  810824:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  810828:	e13ffb03 	ldbu	r4,-20(fp)
  81082c:	e0fffb03 	ldbu	r3,-20(fp)
  810830:	00802074 	movhi	r2,129
  810834:	109c3344 	addi	r2,r2,28877
  810838:	10c5883a 	add	r2,r2,r3
  81083c:	10800003 	ldbu	r2,0(r2)
  810840:	1007883a 	mov	r3,r2
  810844:	e0bffc17 	ldw	r2,-16(fp)
  810848:	10800d43 	ldbu	r2,53(r2)
  81084c:	0084303a 	nor	r2,zero,r2
  810850:	1884703a 	and	r2,r3,r2
  810854:	1007883a 	mov	r3,r2
  810858:	00802074 	movhi	r2,129
  81085c:	109c3344 	addi	r2,r2,28877
  810860:	1105883a 	add	r2,r2,r4
  810864:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  810868:	e0fffb03 	ldbu	r3,-20(fp)
  81086c:	00802074 	movhi	r2,129
  810870:	109c3344 	addi	r2,r2,28877
  810874:	10c5883a 	add	r2,r2,r3
  810878:	10800003 	ldbu	r2,0(r2)
  81087c:	10803fcc 	andi	r2,r2,255
  810880:	1004c03a 	cmpne	r2,r2,zero
  810884:	10000c1e 	bne	r2,zero,8108b8 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  810888:	e0bffc17 	ldw	r2,-16(fp)
  81088c:	10800d83 	ldbu	r2,54(r2)
  810890:	0084303a 	nor	r2,zero,r2
  810894:	1007883a 	mov	r3,r2
  810898:	00802074 	movhi	r2,129
  81089c:	109c3304 	addi	r2,r2,28876
  8108a0:	10800003 	ldbu	r2,0(r2)
  8108a4:	1884703a 	and	r2,r3,r2
  8108a8:	1007883a 	mov	r3,r2
  8108ac:	00802074 	movhi	r2,129
  8108b0:	109c3304 	addi	r2,r2,28876
  8108b4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  8108b8:	e0bffc17 	ldw	r2,-16(fp)
  8108bc:	10800c03 	ldbu	r2,48(r2)
  8108c0:	10800214 	ori	r2,r2,8
  8108c4:	1007883a 	mov	r3,r2
  8108c8:	e0bffc17 	ldw	r2,-16(fp)
  8108cc:	10c00c05 	stb	r3,48(r2)
  8108d0:	e0bffa17 	ldw	r2,-24(fp)
  8108d4:	e0bff615 	stw	r2,-40(fp)
  8108d8:	e0bff617 	ldw	r2,-40(fp)
  8108dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  8108e0:	e0bffd03 	ldbu	r2,-12(fp)
  8108e4:	10800058 	cmpnei	r2,r2,1
  8108e8:	1000011e 	bne	r2,zero,8108f0 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  8108ec:	080a7d80 	call	80a7d8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8108f0:	e03fff15 	stw	zero,-4(fp)
  8108f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8108f8:	e037883a 	mov	sp,fp
  8108fc:	dfc00117 	ldw	ra,4(sp)
  810900:	df000017 	ldw	fp,0(sp)
  810904:	dec00204 	addi	sp,sp,8
  810908:	f800283a 	ret

0081090c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  81090c:	defff504 	addi	sp,sp,-44
  810910:	dfc00a15 	stw	ra,40(sp)
  810914:	df000915 	stw	fp,36(sp)
  810918:	df000904 	addi	fp,sp,36
  81091c:	e17ffe15 	stw	r5,-8(fp)
  810920:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810924:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  810928:	e0bffd03 	ldbu	r2,-12(fp)
  81092c:	10800570 	cmpltui	r2,r2,21
  810930:	1000061e 	bne	r2,zero,81094c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  810934:	e0bffd03 	ldbu	r2,-12(fp)
  810938:	10803fe0 	cmpeqi	r2,r2,255
  81093c:	1000031e 	bne	r2,zero,81094c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  810940:	00800a84 	movi	r2,42
  810944:	e0bfff15 	stw	r2,-4(fp)
  810948:	00003b06 	br	810a38 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  81094c:	e0bffe17 	ldw	r2,-8(fp)
  810950:	1004c03a 	cmpne	r2,r2,zero
  810954:	1000031e 	bne	r2,zero,810964 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  810958:	00800244 	movi	r2,9
  81095c:	e0bfff15 	stw	r2,-4(fp)
  810960:	00003506 	br	810a38 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810964:	0005303a 	rdctl	r2,status
  810968:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81096c:	e0fffa17 	ldw	r3,-24(fp)
  810970:	00bfff84 	movi	r2,-2
  810974:	1884703a 	and	r2,r3,r2
  810978:	1001703a 	wrctl	status,r2
  
  return context;
  81097c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  810980:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  810984:	e0bffd03 	ldbu	r2,-12(fp)
  810988:	10803fd8 	cmpnei	r2,r2,255
  81098c:	1000051e 	bne	r2,zero,8109a4 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  810990:	00802074 	movhi	r2,129
  810994:	109c3604 	addi	r2,r2,28888
  810998:	10800017 	ldw	r2,0(r2)
  81099c:	10800c83 	ldbu	r2,50(r2)
  8109a0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8109a4:	e0bffd03 	ldbu	r2,-12(fp)
  8109a8:	00c02234 	movhi	r3,136
  8109ac:	18d6ab04 	addi	r3,r3,23212
  8109b0:	1085883a 	add	r2,r2,r2
  8109b4:	1085883a 	add	r2,r2,r2
  8109b8:	10c5883a 	add	r2,r2,r3
  8109bc:	10800017 	ldw	r2,0(r2)
  8109c0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  8109c4:	e0bffc17 	ldw	r2,-16(fp)
  8109c8:	1004c03a 	cmpne	r2,r2,zero
  8109cc:	1000071e 	bne	r2,zero,8109ec <OSTaskQuery+0xe0>
  8109d0:	e0bffb17 	ldw	r2,-20(fp)
  8109d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8109d8:	e0bff917 	ldw	r2,-28(fp)
  8109dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  8109e0:	00800a44 	movi	r2,41
  8109e4:	e0bfff15 	stw	r2,-4(fp)
  8109e8:	00001306 	br	810a38 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  8109ec:	e0bffc17 	ldw	r2,-16(fp)
  8109f0:	10800058 	cmpnei	r2,r2,1
  8109f4:	1000071e 	bne	r2,zero,810a14 <OSTaskQuery+0x108>
  8109f8:	e0bffb17 	ldw	r2,-20(fp)
  8109fc:	e0bff815 	stw	r2,-32(fp)
  810a00:	e0bff817 	ldw	r2,-32(fp)
  810a04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  810a08:	008010c4 	movi	r2,67
  810a0c:	e0bfff15 	stw	r2,-4(fp)
  810a10:	00000906 	br	810a38 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  810a14:	e13ffe17 	ldw	r4,-8(fp)
  810a18:	e17ffc17 	ldw	r5,-16(fp)
  810a1c:	01801b04 	movi	r6,108
  810a20:	080a76c0 	call	80a76c <OS_MemCopy>
  810a24:	e0bffb17 	ldw	r2,-20(fp)
  810a28:	e0bff715 	stw	r2,-36(fp)
  810a2c:	e0bff717 	ldw	r2,-36(fp)
  810a30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810a34:	e03fff15 	stw	zero,-4(fp)
  810a38:	e0bfff17 	ldw	r2,-4(fp)
}
  810a3c:	e037883a 	mov	sp,fp
  810a40:	dfc00117 	ldw	ra,4(sp)
  810a44:	df000017 	ldw	fp,0(sp)
  810a48:	dec00204 	addi	sp,sp,8
  810a4c:	f800283a 	ret

00810a50 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  810a50:	defffc04 	addi	sp,sp,-16
  810a54:	df000315 	stw	fp,12(sp)
  810a58:	df000304 	addi	fp,sp,12
  810a5c:	e13ffd15 	stw	r4,-12(fp)
  810a60:	e17ffe15 	stw	r5,-8(fp)
  810a64:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  810a68:	e0bfff0b 	ldhu	r2,-4(fp)
  810a6c:	1080004c 	andi	r2,r2,1
  810a70:	10803fcc 	andi	r2,r2,255
  810a74:	1005003a 	cmpeq	r2,r2,zero
  810a78:	1000101e 	bne	r2,zero,810abc <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  810a7c:	e0bfff0b 	ldhu	r2,-4(fp)
  810a80:	1080008c 	andi	r2,r2,2
  810a84:	1005003a 	cmpeq	r2,r2,zero
  810a88:	10000c1e 	bne	r2,zero,810abc <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  810a8c:	00000806 	br	810ab0 <OS_TaskStkClr+0x60>
                size--;
  810a90:	e0bffe17 	ldw	r2,-8(fp)
  810a94:	10bfffc4 	addi	r2,r2,-1
  810a98:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  810a9c:	e0bffd17 	ldw	r2,-12(fp)
  810aa0:	10000015 	stw	zero,0(r2)
  810aa4:	e0bffd17 	ldw	r2,-12(fp)
  810aa8:	10800104 	addi	r2,r2,4
  810aac:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  810ab0:	e0bffe17 	ldw	r2,-8(fp)
  810ab4:	1004c03a 	cmpne	r2,r2,zero
  810ab8:	103ff51e 	bne	r2,zero,810a90 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  810abc:	e037883a 	mov	sp,fp
  810ac0:	df000017 	ldw	fp,0(sp)
  810ac4:	dec00104 	addi	sp,sp,4
  810ac8:	f800283a 	ret

00810acc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  810acc:	defff904 	addi	sp,sp,-28
  810ad0:	dfc00615 	stw	ra,24(sp)
  810ad4:	df000515 	stw	fp,20(sp)
  810ad8:	df000504 	addi	fp,sp,20
  810adc:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810ae0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  810ae4:	00802074 	movhi	r2,129
  810ae8:	109c3504 	addi	r2,r2,28884
  810aec:	10800003 	ldbu	r2,0(r2)
  810af0:	10803fcc 	andi	r2,r2,255
  810af4:	1004c03a 	cmpne	r2,r2,zero
  810af8:	1000421e 	bne	r2,zero,810c04 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  810afc:	e0bfff0b 	ldhu	r2,-4(fp)
  810b00:	1005003a 	cmpeq	r2,r2,zero
  810b04:	10003f1e 	bne	r2,zero,810c04 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810b08:	0005303a 	rdctl	r2,status
  810b0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b10:	e0fffc17 	ldw	r3,-16(fp)
  810b14:	00bfff84 	movi	r2,-2
  810b18:	1884703a 	and	r2,r3,r2
  810b1c:	1001703a 	wrctl	status,r2
  
  return context;
  810b20:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  810b24:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  810b28:	00802074 	movhi	r2,129
  810b2c:	109c3604 	addi	r2,r2,28888
  810b30:	10800017 	ldw	r2,0(r2)
  810b34:	10800d03 	ldbu	r2,52(r2)
  810b38:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  810b3c:	e13ffe03 	ldbu	r4,-8(fp)
  810b40:	e0fffe03 	ldbu	r3,-8(fp)
  810b44:	00802074 	movhi	r2,129
  810b48:	109c3344 	addi	r2,r2,28877
  810b4c:	10c5883a 	add	r2,r2,r3
  810b50:	10800003 	ldbu	r2,0(r2)
  810b54:	1007883a 	mov	r3,r2
  810b58:	00802074 	movhi	r2,129
  810b5c:	109c3604 	addi	r2,r2,28888
  810b60:	10800017 	ldw	r2,0(r2)
  810b64:	10800d43 	ldbu	r2,53(r2)
  810b68:	0084303a 	nor	r2,zero,r2
  810b6c:	1884703a 	and	r2,r3,r2
  810b70:	1007883a 	mov	r3,r2
  810b74:	00802074 	movhi	r2,129
  810b78:	109c3344 	addi	r2,r2,28877
  810b7c:	1105883a 	add	r2,r2,r4
  810b80:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  810b84:	e0fffe03 	ldbu	r3,-8(fp)
  810b88:	00802074 	movhi	r2,129
  810b8c:	109c3344 	addi	r2,r2,28877
  810b90:	10c5883a 	add	r2,r2,r3
  810b94:	10800003 	ldbu	r2,0(r2)
  810b98:	10803fcc 	andi	r2,r2,255
  810b9c:	1004c03a 	cmpne	r2,r2,zero
  810ba0:	10000e1e 	bne	r2,zero,810bdc <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  810ba4:	00802074 	movhi	r2,129
  810ba8:	109c3604 	addi	r2,r2,28888
  810bac:	10800017 	ldw	r2,0(r2)
  810bb0:	10800d83 	ldbu	r2,54(r2)
  810bb4:	0084303a 	nor	r2,zero,r2
  810bb8:	1007883a 	mov	r3,r2
  810bbc:	00802074 	movhi	r2,129
  810bc0:	109c3304 	addi	r2,r2,28876
  810bc4:	10800003 	ldbu	r2,0(r2)
  810bc8:	1884703a 	and	r2,r3,r2
  810bcc:	1007883a 	mov	r3,r2
  810bd0:	00802074 	movhi	r2,129
  810bd4:	109c3304 	addi	r2,r2,28876
  810bd8:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  810bdc:	00802074 	movhi	r2,129
  810be0:	109c3604 	addi	r2,r2,28888
  810be4:	10c00017 	ldw	r3,0(r2)
  810be8:	e0bfff0b 	ldhu	r2,-4(fp)
  810bec:	18800b8d 	sth	r2,46(r3)
  810bf0:	e0bffd17 	ldw	r2,-12(fp)
  810bf4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810bf8:	e0bffb17 	ldw	r2,-20(fp)
  810bfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  810c00:	080a7d80 	call	80a7d8 <OS_Sched>
    }
}
  810c04:	e037883a 	mov	sp,fp
  810c08:	dfc00117 	ldw	ra,4(sp)
  810c0c:	df000017 	ldw	fp,0(sp)
  810c10:	dec00204 	addi	sp,sp,8
  810c14:	f800283a 	ret

00810c18 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  810c18:	defff604 	addi	sp,sp,-40
  810c1c:	dfc00915 	stw	ra,36(sp)
  810c20:	df000815 	stw	fp,32(sp)
  810c24:	dc000715 	stw	r16,28(sp)
  810c28:	df000704 	addi	fp,sp,28
  810c2c:	e13ffb05 	stb	r4,-20(fp)
  810c30:	e17ffc05 	stb	r5,-16(fp)
  810c34:	e1bffd05 	stb	r6,-12(fp)
  810c38:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  810c3c:	00802074 	movhi	r2,129
  810c40:	109c3504 	addi	r2,r2,28884
  810c44:	10800003 	ldbu	r2,0(r2)
  810c48:	10803fcc 	andi	r2,r2,255
  810c4c:	1005003a 	cmpeq	r2,r2,zero
  810c50:	1000031e 	bne	r2,zero,810c60 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  810c54:	00801544 	movi	r2,85
  810c58:	e0bfff15 	stw	r2,-4(fp)
  810c5c:	00004406 	br	810d70 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  810c60:	e0bffb03 	ldbu	r2,-20(fp)
  810c64:	1004c03a 	cmpne	r2,r2,zero
  810c68:	10000c1e 	bne	r2,zero,810c9c <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  810c6c:	e0bffc03 	ldbu	r2,-16(fp)
  810c70:	1004c03a 	cmpne	r2,r2,zero
  810c74:	1000091e 	bne	r2,zero,810c9c <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  810c78:	e0bffd03 	ldbu	r2,-12(fp)
  810c7c:	1004c03a 	cmpne	r2,r2,zero
  810c80:	1000061e 	bne	r2,zero,810c9c <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  810c84:	e0bffe0b 	ldhu	r2,-8(fp)
  810c88:	1004c03a 	cmpne	r2,r2,zero
  810c8c:	1000031e 	bne	r2,zero,810c9c <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  810c90:	00801504 	movi	r2,84
  810c94:	e0bfff15 	stw	r2,-4(fp)
  810c98:	00003506 	br	810d70 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  810c9c:	e0bffc03 	ldbu	r2,-16(fp)
  810ca0:	10800f30 	cmpltui	r2,r2,60
  810ca4:	1000031e 	bne	r2,zero,810cb4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  810ca8:	00801444 	movi	r2,81
  810cac:	e0bfff15 	stw	r2,-4(fp)
  810cb0:	00002f06 	br	810d70 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  810cb4:	e0bffd03 	ldbu	r2,-12(fp)
  810cb8:	10800f30 	cmpltui	r2,r2,60
  810cbc:	1000031e 	bne	r2,zero,810ccc <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  810cc0:	00801484 	movi	r2,82
  810cc4:	e0bfff15 	stw	r2,-4(fp)
  810cc8:	00002906 	br	810d70 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  810ccc:	e0bffe0b 	ldhu	r2,-8(fp)
  810cd0:	1080fa30 	cmpltui	r2,r2,1000
  810cd4:	1000031e 	bne	r2,zero,810ce4 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  810cd8:	008014c4 	movi	r2,83
  810cdc:	e0bfff15 	stw	r2,-4(fp)
  810ce0:	00002306 	br	810d70 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  810ce4:	e0bffb03 	ldbu	r2,-20(fp)
  810ce8:	10c38424 	muli	r3,r2,3600
  810cec:	e0bffc03 	ldbu	r2,-16(fp)
  810cf0:	10800f24 	muli	r2,r2,60
  810cf4:	1887883a 	add	r3,r3,r2
  810cf8:	e0bffd03 	ldbu	r2,-12(fp)
  810cfc:	1885883a 	add	r2,r3,r2
  810d00:	1400fa24 	muli	r16,r2,1000
  810d04:	e0bffe0b 	ldhu	r2,-8(fp)
  810d08:	1100fa24 	muli	r4,r2,1000
  810d0c:	0140fa04 	movi	r5,1000
  810d10:	0814f480 	call	814f48 <__udivsi3>
  810d14:	8085883a 	add	r2,r16,r2
  810d18:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  810d1c:	e0bffa17 	ldw	r2,-24(fp)
  810d20:	1004d43a 	srli	r2,r2,16
  810d24:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  810d28:	e0bffa17 	ldw	r2,-24(fp)
  810d2c:	10bfffcc 	andi	r2,r2,65535
  810d30:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  810d34:	e0bffa17 	ldw	r2,-24(fp)
  810d38:	113fffcc 	andi	r4,r2,65535
  810d3c:	0810acc0 	call	810acc <OSTimeDly>
    while (loops > 0) {
  810d40:	00000706 	br	810d60 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  810d44:	01200014 	movui	r4,32768
  810d48:	0810acc0 	call	810acc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  810d4c:	01200014 	movui	r4,32768
  810d50:	0810acc0 	call	810acc <OSTimeDly>
        loops--;
  810d54:	e0bff90b 	ldhu	r2,-28(fp)
  810d58:	10bfffc4 	addi	r2,r2,-1
  810d5c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  810d60:	e0bff90b 	ldhu	r2,-28(fp)
  810d64:	1004c03a 	cmpne	r2,r2,zero
  810d68:	103ff61e 	bne	r2,zero,810d44 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  810d6c:	e03fff15 	stw	zero,-4(fp)
  810d70:	e0bfff17 	ldw	r2,-4(fp)
}
  810d74:	e037883a 	mov	sp,fp
  810d78:	dfc00217 	ldw	ra,8(sp)
  810d7c:	df000117 	ldw	fp,4(sp)
  810d80:	dc000017 	ldw	r16,0(sp)
  810d84:	dec00304 	addi	sp,sp,12
  810d88:	f800283a 	ret

00810d8c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  810d8c:	defff404 	addi	sp,sp,-48
  810d90:	dfc00b15 	stw	ra,44(sp)
  810d94:	df000a15 	stw	fp,40(sp)
  810d98:	df000a04 	addi	fp,sp,40
  810d9c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810da0:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  810da4:	e0bffe03 	ldbu	r2,-8(fp)
  810da8:	10800530 	cmpltui	r2,r2,20
  810dac:	1000031e 	bne	r2,zero,810dbc <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  810db0:	00800a84 	movi	r2,42
  810db4:	e0bfff15 	stw	r2,-4(fp)
  810db8:	00007206 	br	810f84 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810dbc:	0005303a 	rdctl	r2,status
  810dc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810dc4:	e0fffb17 	ldw	r3,-20(fp)
  810dc8:	00bfff84 	movi	r2,-2
  810dcc:	1884703a 	and	r2,r3,r2
  810dd0:	1001703a 	wrctl	status,r2
  
  return context;
  810dd4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  810dd8:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  810ddc:	e0bffe03 	ldbu	r2,-8(fp)
  810de0:	00c02234 	movhi	r3,136
  810de4:	18d6ab04 	addi	r3,r3,23212
  810de8:	1085883a 	add	r2,r2,r2
  810dec:	1085883a 	add	r2,r2,r2
  810df0:	10c5883a 	add	r2,r2,r3
  810df4:	10800017 	ldw	r2,0(r2)
  810df8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  810dfc:	e0bffd17 	ldw	r2,-12(fp)
  810e00:	1004c03a 	cmpne	r2,r2,zero
  810e04:	1000071e 	bne	r2,zero,810e24 <OSTimeDlyResume+0x98>
  810e08:	e0bffc17 	ldw	r2,-16(fp)
  810e0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e10:	e0bffa17 	ldw	r2,-24(fp)
  810e14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  810e18:	008010c4 	movi	r2,67
  810e1c:	e0bfff15 	stw	r2,-4(fp)
  810e20:	00005806 	br	810f84 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  810e24:	e0bffd17 	ldw	r2,-12(fp)
  810e28:	10800058 	cmpnei	r2,r2,1
  810e2c:	1000071e 	bne	r2,zero,810e4c <OSTimeDlyResume+0xc0>
  810e30:	e0bffc17 	ldw	r2,-16(fp)
  810e34:	e0bff915 	stw	r2,-28(fp)
  810e38:	e0bff917 	ldw	r2,-28(fp)
  810e3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  810e40:	008010c4 	movi	r2,67
  810e44:	e0bfff15 	stw	r2,-4(fp)
  810e48:	00004e06 	br	810f84 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  810e4c:	e0bffd17 	ldw	r2,-12(fp)
  810e50:	10800b8b 	ldhu	r2,46(r2)
  810e54:	10bfffcc 	andi	r2,r2,65535
  810e58:	1004c03a 	cmpne	r2,r2,zero
  810e5c:	1000071e 	bne	r2,zero,810e7c <OSTimeDlyResume+0xf0>
  810e60:	e0bffc17 	ldw	r2,-16(fp)
  810e64:	e0bff815 	stw	r2,-32(fp)
  810e68:	e0bff817 	ldw	r2,-32(fp)
  810e6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  810e70:	00801404 	movi	r2,80
  810e74:	e0bfff15 	stw	r2,-4(fp)
  810e78:	00004206 	br	810f84 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  810e7c:	e0bffd17 	ldw	r2,-12(fp)
  810e80:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  810e84:	e0bffd17 	ldw	r2,-12(fp)
  810e88:	10800c03 	ldbu	r2,48(r2)
  810e8c:	10803fcc 	andi	r2,r2,255
  810e90:	10800dcc 	andi	r2,r2,55
  810e94:	1005003a 	cmpeq	r2,r2,zero
  810e98:	10000b1e 	bne	r2,zero,810ec8 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  810e9c:	e0bffd17 	ldw	r2,-12(fp)
  810ea0:	10c00c03 	ldbu	r3,48(r2)
  810ea4:	00bff204 	movi	r2,-56
  810ea8:	1884703a 	and	r2,r3,r2
  810eac:	1007883a 	mov	r3,r2
  810eb0:	e0bffd17 	ldw	r2,-12(fp)
  810eb4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  810eb8:	e0fffd17 	ldw	r3,-12(fp)
  810ebc:	00800044 	movi	r2,1
  810ec0:	18800c45 	stb	r2,49(r3)
  810ec4:	00000206 	br	810ed0 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  810ec8:	e0bffd17 	ldw	r2,-12(fp)
  810ecc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  810ed0:	e0bffd17 	ldw	r2,-12(fp)
  810ed4:	10800c03 	ldbu	r2,48(r2)
  810ed8:	10803fcc 	andi	r2,r2,255
  810edc:	1080020c 	andi	r2,r2,8
  810ee0:	1004c03a 	cmpne	r2,r2,zero
  810ee4:	1000221e 	bne	r2,zero,810f70 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  810ee8:	e0bffd17 	ldw	r2,-12(fp)
  810eec:	10c00d83 	ldbu	r3,54(r2)
  810ef0:	00802074 	movhi	r2,129
  810ef4:	109c3304 	addi	r2,r2,28876
  810ef8:	10800003 	ldbu	r2,0(r2)
  810efc:	1884b03a 	or	r2,r3,r2
  810f00:	1007883a 	mov	r3,r2
  810f04:	00802074 	movhi	r2,129
  810f08:	109c3304 	addi	r2,r2,28876
  810f0c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  810f10:	e0bffd17 	ldw	r2,-12(fp)
  810f14:	10800d03 	ldbu	r2,52(r2)
  810f18:	11003fcc 	andi	r4,r2,255
  810f1c:	e0bffd17 	ldw	r2,-12(fp)
  810f20:	10800d03 	ldbu	r2,52(r2)
  810f24:	10c03fcc 	andi	r3,r2,255
  810f28:	00802074 	movhi	r2,129
  810f2c:	109c3344 	addi	r2,r2,28877
  810f30:	10c5883a 	add	r2,r2,r3
  810f34:	10c00003 	ldbu	r3,0(r2)
  810f38:	e0bffd17 	ldw	r2,-12(fp)
  810f3c:	10800d43 	ldbu	r2,53(r2)
  810f40:	1884b03a 	or	r2,r3,r2
  810f44:	1007883a 	mov	r3,r2
  810f48:	00802074 	movhi	r2,129
  810f4c:	109c3344 	addi	r2,r2,28877
  810f50:	1105883a 	add	r2,r2,r4
  810f54:	10c00005 	stb	r3,0(r2)
  810f58:	e0bffc17 	ldw	r2,-16(fp)
  810f5c:	e0bff715 	stw	r2,-36(fp)
  810f60:	e0bff717 	ldw	r2,-36(fp)
  810f64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  810f68:	080a7d80 	call	80a7d8 <OS_Sched>
  810f6c:	00000406 	br	810f80 <OSTimeDlyResume+0x1f4>
  810f70:	e0bffc17 	ldw	r2,-16(fp)
  810f74:	e0bff615 	stw	r2,-40(fp)
  810f78:	e0bff617 	ldw	r2,-40(fp)
  810f7c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  810f80:	e03fff15 	stw	zero,-4(fp)
  810f84:	e0bfff17 	ldw	r2,-4(fp)
}
  810f88:	e037883a 	mov	sp,fp
  810f8c:	dfc00117 	ldw	ra,4(sp)
  810f90:	df000017 	ldw	fp,0(sp)
  810f94:	dec00204 	addi	sp,sp,8
  810f98:	f800283a 	ret

00810f9c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  810f9c:	defffb04 	addi	sp,sp,-20
  810fa0:	df000415 	stw	fp,16(sp)
  810fa4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810fa8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810fac:	0005303a 	rdctl	r2,status
  810fb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810fb4:	e0fffd17 	ldw	r3,-12(fp)
  810fb8:	00bfff84 	movi	r2,-2
  810fbc:	1884703a 	and	r2,r3,r2
  810fc0:	1001703a 	wrctl	status,r2
  
  return context;
  810fc4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  810fc8:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  810fcc:	00802074 	movhi	r2,129
  810fd0:	109c3704 	addi	r2,r2,28892
  810fd4:	10800017 	ldw	r2,0(r2)
  810fd8:	e0bfff15 	stw	r2,-4(fp)
  810fdc:	e0bffe17 	ldw	r2,-8(fp)
  810fe0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810fe4:	e0bffc17 	ldw	r2,-16(fp)
  810fe8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  810fec:	e0bfff17 	ldw	r2,-4(fp)
}
  810ff0:	e037883a 	mov	sp,fp
  810ff4:	df000017 	ldw	fp,0(sp)
  810ff8:	dec00104 	addi	sp,sp,4
  810ffc:	f800283a 	ret

00811000 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  811000:	defffb04 	addi	sp,sp,-20
  811004:	df000415 	stw	fp,16(sp)
  811008:	df000404 	addi	fp,sp,16
  81100c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811010:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811014:	0005303a 	rdctl	r2,status
  811018:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81101c:	e0fffd17 	ldw	r3,-12(fp)
  811020:	00bfff84 	movi	r2,-2
  811024:	1884703a 	and	r2,r3,r2
  811028:	1001703a 	wrctl	status,r2
  
  return context;
  81102c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  811030:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  811034:	00c02074 	movhi	r3,129
  811038:	18dc3704 	addi	r3,r3,28892
  81103c:	e0bfff17 	ldw	r2,-4(fp)
  811040:	18800015 	stw	r2,0(r3)
  811044:	e0bffe17 	ldw	r2,-8(fp)
  811048:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81104c:	e0bffc17 	ldw	r2,-16(fp)
  811050:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  811054:	e037883a 	mov	sp,fp
  811058:	df000017 	ldw	fp,0(sp)
  81105c:	dec00104 	addi	sp,sp,4
  811060:	f800283a 	ret

00811064 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  811064:	defffd04 	addi	sp,sp,-12
  811068:	dfc00215 	stw	ra,8(sp)
  81106c:	df000115 	stw	fp,4(sp)
  811070:	df000104 	addi	fp,sp,4
  811074:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_0, nios2_0);
  811078:	08143480 	call	814348 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81107c:	00800044 	movi	r2,1
  811080:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  811084:	e037883a 	mov	sp,fp
  811088:	dfc00117 	ldw	ra,4(sp)
  81108c:	df000017 	ldw	fp,0(sp)
  811090:	dec00204 	addi	sp,sp,8
  811094:	f800283a 	ret

00811098 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  811098:	defffe04 	addi	sp,sp,-8
  81109c:	dfc00115 	stw	ra,4(sp)
  8110a0:	df000015 	stw	fp,0(sp)
  8110a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8110a8:	01006474 	movhi	r4,401
  8110ac:	21241004 	addi	r4,r4,-28608
  8110b0:	000b883a 	mov	r5,zero
  8110b4:	000d883a 	mov	r6,zero
  8110b8:	01c0fa04 	movi	r7,1000
  8110bc:	08124880 	call	812488 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8110c0:	01002074 	movhi	r4,129
  8110c4:	2117b204 	addi	r4,r4,24264
  8110c8:	000b883a 	mov	r5,zero
  8110cc:	01800044 	movi	r6,1
  8110d0:	08118040 	call	811804 <altera_avalon_jtag_uart_init>
  8110d4:	01002074 	movhi	r4,129
  8110d8:	2117a804 	addi	r4,r4,24224
  8110dc:	08111240 	call	811124 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  8110e0:	01002074 	movhi	r4,129
  8110e4:	211bc304 	addi	r4,r4,28428
  8110e8:	08111240 	call	811124 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  8110ec:	01002074 	movhi	r4,129
  8110f0:	211bcf04 	addi	r4,r4,28476
  8110f4:	08111240 	call	811124 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  8110f8:	01002074 	movhi	r4,129
  8110fc:	211bdb04 	addi	r4,r4,28524
  811100:	081355c0 	call	81355c <alt_up_character_lcd_init>
  811104:	01002074 	movhi	r4,129
  811108:	211bdb04 	addi	r4,r4,28524
  81110c:	08111240 	call	811124 <alt_dev_reg>
}
  811110:	e037883a 	mov	sp,fp
  811114:	dfc00117 	ldw	ra,4(sp)
  811118:	df000017 	ldw	fp,0(sp)
  81111c:	dec00204 	addi	sp,sp,8
  811120:	f800283a 	ret

00811124 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  811124:	defffd04 	addi	sp,sp,-12
  811128:	dfc00215 	stw	ra,8(sp)
  81112c:	df000115 	stw	fp,4(sp)
  811130:	df000104 	addi	fp,sp,4
  811134:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  811138:	e13fff17 	ldw	r4,-4(fp)
  81113c:	01402074 	movhi	r5,129
  811140:	295bed04 	addi	r5,r5,28596
  811144:	0813b300 	call	813b30 <alt_dev_llist_insert>
}
  811148:	e037883a 	mov	sp,fp
  81114c:	dfc00117 	ldw	ra,4(sp)
  811150:	df000017 	ldw	fp,0(sp)
  811154:	dec00204 	addi	sp,sp,8
  811158:	f800283a 	ret

0081115c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
  81115c:	defff904 	addi	sp,sp,-28
  811160:	dfc00615 	stw	ra,24(sp)
  811164:	df000515 	stw	fp,20(sp)
  811168:	df000504 	addi	fp,sp,20
  81116c:	e13ffb15 	stw	r4,-20(fp)
  811170:	e17ffc15 	stw	r5,-16(fp)
  811174:	e1bffd15 	stw	r6,-12(fp)
  811178:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
  81117c:	e13ffb17 	ldw	r4,-20(fp)
  811180:	01400fc4 	movi	r5,63
  811184:	081134c0 	call	81134c <altera_avalon_fifo_clear_event>
  811188:	1005003a 	cmpeq	r2,r2,zero
  81118c:	1000031e 	bne	r2,zero,81119c <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
  811190:	00bfffc4 	movi	r2,-1
  811194:	e0bfff15 	stw	r2,-4(fp)
  811198:	00001906 	br	811200 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
  81119c:	e13ffb17 	ldw	r4,-20(fp)
  8111a0:	e17ffc17 	ldw	r5,-16(fp)
  8111a4:	08113b40 	call	8113b4 <altera_avalon_fifo_write_ienable>
  8111a8:	1005003a 	cmpeq	r2,r2,zero
  8111ac:	1000031e 	bne	r2,zero,8111bc <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
  8111b0:	00bfff84 	movi	r2,-2
  8111b4:	e0bfff15 	stw	r2,-4(fp)
  8111b8:	00001106 	br	811200 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
  8111bc:	e13ffb17 	ldw	r4,-20(fp)
  8111c0:	e17ffe17 	ldw	r5,-8(fp)
  8111c4:	08114140 	call	811414 <altera_avalon_fifo_write_almostfull>
  8111c8:	1005003a 	cmpeq	r2,r2,zero
  8111cc:	1000031e 	bne	r2,zero,8111dc <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  8111d0:	00bfff44 	movi	r2,-3
  8111d4:	e0bfff15 	stw	r2,-4(fp)
  8111d8:	00000906 	br	811200 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
  8111dc:	e13ffb17 	ldw	r4,-20(fp)
  8111e0:	e17ffd17 	ldw	r5,-12(fp)
  8111e4:	08114740 	call	811474 <altera_avalon_fifo_write_almostempty>
  8111e8:	1005003a 	cmpeq	r2,r2,zero
  8111ec:	1000031e 	bne	r2,zero,8111fc <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  8111f0:	00bfff44 	movi	r2,-3
  8111f4:	e0bfff15 	stw	r2,-4(fp)
  8111f8:	00000106 	br	811200 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
  8111fc:	e03fff15 	stw	zero,-4(fp)
  811200:	e0bfff17 	ldw	r2,-4(fp)
}
  811204:	e037883a 	mov	sp,fp
  811208:	dfc00117 	ldw	ra,4(sp)
  81120c:	df000017 	ldw	fp,0(sp)
  811210:	dec00204 	addi	sp,sp,8
  811214:	f800283a 	ret

00811218 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
  811218:	defffd04 	addi	sp,sp,-12
  81121c:	df000215 	stw	fp,8(sp)
  811220:	df000204 	addi	fp,sp,8
  811224:	e13ffe15 	stw	r4,-8(fp)
  811228:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
  81122c:	e0bffe17 	ldw	r2,-8(fp)
  811230:	10800104 	addi	r2,r2,4
  811234:	10800037 	ldwio	r2,0(r2)
  811238:	1007883a 	mov	r3,r2
  81123c:	e0bfff17 	ldw	r2,-4(fp)
  811240:	1884703a 	and	r2,r3,r2
}
  811244:	e037883a 	mov	sp,fp
  811248:	df000017 	ldw	fp,0(sp)
  81124c:	dec00104 	addi	sp,sp,4
  811250:	f800283a 	ret

00811254 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
  811254:	defffd04 	addi	sp,sp,-12
  811258:	df000215 	stw	fp,8(sp)
  81125c:	df000204 	addi	fp,sp,8
  811260:	e13ffe15 	stw	r4,-8(fp)
  811264:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
  811268:	e0bffe17 	ldw	r2,-8(fp)
  81126c:	10800304 	addi	r2,r2,12
  811270:	10800037 	ldwio	r2,0(r2)
  811274:	1007883a 	mov	r3,r2
  811278:	e0bfff17 	ldw	r2,-4(fp)
  81127c:	1884703a 	and	r2,r3,r2
}
  811280:	e037883a 	mov	sp,fp
  811284:	df000017 	ldw	fp,0(sp)
  811288:	dec00104 	addi	sp,sp,4
  81128c:	f800283a 	ret

00811290 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
  811290:	defffe04 	addi	sp,sp,-8
  811294:	df000115 	stw	fp,4(sp)
  811298:	df000104 	addi	fp,sp,4
  81129c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
  8112a0:	e0bfff17 	ldw	r2,-4(fp)
  8112a4:	10800404 	addi	r2,r2,16
  8112a8:	10800037 	ldwio	r2,0(r2)
}
  8112ac:	e037883a 	mov	sp,fp
  8112b0:	df000017 	ldw	fp,0(sp)
  8112b4:	dec00104 	addi	sp,sp,4
  8112b8:	f800283a 	ret

008112bc <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
  8112bc:	defffe04 	addi	sp,sp,-8
  8112c0:	df000115 	stw	fp,4(sp)
  8112c4:	df000104 	addi	fp,sp,4
  8112c8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
  8112cc:	e0bfff17 	ldw	r2,-4(fp)
  8112d0:	10800504 	addi	r2,r2,20
  8112d4:	10800037 	ldwio	r2,0(r2)
}
  8112d8:	e037883a 	mov	sp,fp
  8112dc:	df000017 	ldw	fp,0(sp)
  8112e0:	dec00104 	addi	sp,sp,4
  8112e4:	f800283a 	ret

008112e8 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
  8112e8:	defffd04 	addi	sp,sp,-12
  8112ec:	df000215 	stw	fp,8(sp)
  8112f0:	df000204 	addi	fp,sp,8
  8112f4:	e13ffe15 	stw	r4,-8(fp)
  8112f8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
  8112fc:	e0bffe17 	ldw	r2,-8(fp)
  811300:	10800204 	addi	r2,r2,8
  811304:	10800037 	ldwio	r2,0(r2)
  811308:	1007883a 	mov	r3,r2
  81130c:	e0bfff17 	ldw	r2,-4(fp)
  811310:	1884703a 	and	r2,r3,r2
}
  811314:	e037883a 	mov	sp,fp
  811318:	df000017 	ldw	fp,0(sp)
  81131c:	dec00104 	addi	sp,sp,4
  811320:	f800283a 	ret

00811324 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
  811324:	defffe04 	addi	sp,sp,-8
  811328:	df000115 	stw	fp,4(sp)
  81132c:	df000104 	addi	fp,sp,4
  811330:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
  811334:	e0bfff17 	ldw	r2,-4(fp)
  811338:	10800037 	ldwio	r2,0(r2)
}
  81133c:	e037883a 	mov	sp,fp
  811340:	df000017 	ldw	fp,0(sp)
  811344:	dec00104 	addi	sp,sp,4
  811348:	f800283a 	ret

0081134c <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
  81134c:	defffc04 	addi	sp,sp,-16
  811350:	df000315 	stw	fp,12(sp)
  811354:	df000304 	addi	fp,sp,12
  811358:	e13ffd15 	stw	r4,-12(fp)
  81135c:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
  811360:	e0bffd17 	ldw	r2,-12(fp)
  811364:	10800204 	addi	r2,r2,8
  811368:	e0fffe17 	ldw	r3,-8(fp)
  81136c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
  811370:	e0bffd17 	ldw	r2,-12(fp)
  811374:	10800204 	addi	r2,r2,8
  811378:	10800037 	ldwio	r2,0(r2)
  81137c:	1007883a 	mov	r3,r2
  811380:	e0bffe17 	ldw	r2,-8(fp)
  811384:	1884703a 	and	r2,r3,r2
  811388:	1004c03a 	cmpne	r2,r2,zero
  81138c:	1000021e 	bne	r2,zero,811398 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
  811390:	e03fff15 	stw	zero,-4(fp)
  811394:	00000206 	br	8113a0 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
  811398:	00bfffc4 	movi	r2,-1
  81139c:	e0bfff15 	stw	r2,-4(fp)
  8113a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8113a4:	e037883a 	mov	sp,fp
  8113a8:	df000017 	ldw	fp,0(sp)
  8113ac:	dec00104 	addi	sp,sp,4
  8113b0:	f800283a 	ret

008113b4 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
  8113b4:	defffc04 	addi	sp,sp,-16
  8113b8:	df000315 	stw	fp,12(sp)
  8113bc:	df000304 	addi	fp,sp,12
  8113c0:	e13ffd15 	stw	r4,-12(fp)
  8113c4:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
  8113c8:	e0bffd17 	ldw	r2,-12(fp)
  8113cc:	10800304 	addi	r2,r2,12
  8113d0:	e0fffe17 	ldw	r3,-8(fp)
  8113d4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
  8113d8:	e0bffd17 	ldw	r2,-12(fp)
  8113dc:	10800304 	addi	r2,r2,12
  8113e0:	10800037 	ldwio	r2,0(r2)
  8113e4:	1007883a 	mov	r3,r2
  8113e8:	e0bffe17 	ldw	r2,-8(fp)
  8113ec:	1880021e 	bne	r3,r2,8113f8 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
  8113f0:	e03fff15 	stw	zero,-4(fp)
  8113f4:	00000206 	br	811400 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
  8113f8:	00bfff84 	movi	r2,-2
  8113fc:	e0bfff15 	stw	r2,-4(fp)
  811400:	e0bfff17 	ldw	r2,-4(fp)
}
  811404:	e037883a 	mov	sp,fp
  811408:	df000017 	ldw	fp,0(sp)
  81140c:	dec00104 	addi	sp,sp,4
  811410:	f800283a 	ret

00811414 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
  811414:	defffc04 	addi	sp,sp,-16
  811418:	df000315 	stw	fp,12(sp)
  81141c:	df000304 	addi	fp,sp,12
  811420:	e13ffd15 	stw	r4,-12(fp)
  811424:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
  811428:	e0bffd17 	ldw	r2,-12(fp)
  81142c:	10800404 	addi	r2,r2,16
  811430:	e0fffe17 	ldw	r3,-8(fp)
  811434:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
  811438:	e0bffd17 	ldw	r2,-12(fp)
  81143c:	10800404 	addi	r2,r2,16
  811440:	10800037 	ldwio	r2,0(r2)
  811444:	1007883a 	mov	r3,r2
  811448:	e0bffe17 	ldw	r2,-8(fp)
  81144c:	1880021e 	bne	r3,r2,811458 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
  811450:	e03fff15 	stw	zero,-4(fp)
  811454:	00000206 	br	811460 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  811458:	00bfff44 	movi	r2,-3
  81145c:	e0bfff15 	stw	r2,-4(fp)
  811460:	e0bfff17 	ldw	r2,-4(fp)
}
  811464:	e037883a 	mov	sp,fp
  811468:	df000017 	ldw	fp,0(sp)
  81146c:	dec00104 	addi	sp,sp,4
  811470:	f800283a 	ret

00811474 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
  811474:	defffc04 	addi	sp,sp,-16
  811478:	df000315 	stw	fp,12(sp)
  81147c:	df000304 	addi	fp,sp,12
  811480:	e13ffd15 	stw	r4,-12(fp)
  811484:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
  811488:	e0bffd17 	ldw	r2,-12(fp)
  81148c:	10800504 	addi	r2,r2,20
  811490:	e0fffe17 	ldw	r3,-8(fp)
  811494:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
  811498:	e0bffd17 	ldw	r2,-12(fp)
  81149c:	10800504 	addi	r2,r2,20
  8114a0:	10800037 	ldwio	r2,0(r2)
  8114a4:	1007883a 	mov	r3,r2
  8114a8:	e0bffe17 	ldw	r2,-8(fp)
  8114ac:	1880021e 	bne	r3,r2,8114b8 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
  8114b0:	e03fff15 	stw	zero,-4(fp)
  8114b4:	00000206 	br	8114c0 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  8114b8:	00bfff44 	movi	r2,-3
  8114bc:	e0bfff15 	stw	r2,-4(fp)
  8114c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8114c4:	e037883a 	mov	sp,fp
  8114c8:	df000017 	ldw	fp,0(sp)
  8114cc:	dec00104 	addi	sp,sp,4
  8114d0:	f800283a 	ret

008114d4 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
  8114d4:	defffa04 	addi	sp,sp,-24
  8114d8:	dfc00515 	stw	ra,20(sp)
  8114dc:	df000415 	stw	fp,16(sp)
  8114e0:	df000404 	addi	fp,sp,16
  8114e4:	e13ffc15 	stw	r4,-16(fp)
  8114e8:	e17ffd15 	stw	r5,-12(fp)
  8114ec:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  8114f0:	e13ffd17 	ldw	r4,-12(fp)
  8114f4:	01400044 	movi	r5,1
  8114f8:	08112180 	call	811218 <altera_avalon_fifo_read_status>
  8114fc:	1004c03a 	cmpne	r2,r2,zero
  811500:	1000051e 	bne	r2,zero,811518 <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
  811504:	e0bffc17 	ldw	r2,-16(fp)
  811508:	e0fffe17 	ldw	r3,-8(fp)
  81150c:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
  811510:	e03fff15 	stw	zero,-4(fp)
  811514:	00000206 	br	811520 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
  811518:	00bfff04 	movi	r2,-4
  81151c:	e0bfff15 	stw	r2,-4(fp)
  811520:	e0bfff17 	ldw	r2,-4(fp)
    }
}
  811524:	e037883a 	mov	sp,fp
  811528:	dfc00117 	ldw	ra,4(sp)
  81152c:	df000017 	ldw	fp,0(sp)
  811530:	dec00204 	addi	sp,sp,8
  811534:	f800283a 	ret

00811538 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
  811538:	defffa04 	addi	sp,sp,-24
  81153c:	dfc00515 	stw	ra,20(sp)
  811540:	df000415 	stw	fp,16(sp)
  811544:	df000404 	addi	fp,sp,16
  811548:	e13ffd15 	stw	r4,-12(fp)
  81154c:	e17ffe15 	stw	r5,-8(fp)
  811550:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
  811554:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
  811558:	e0bfff17 	ldw	r2,-4(fp)
  81155c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  811560:	e13ffe17 	ldw	r4,-8(fp)
  811564:	01400084 	movi	r5,2
  811568:	08112180 	call	811218 <altera_avalon_fifo_read_status>
  81156c:	1004c03a 	cmpne	r2,r2,zero
  811570:	1000071e 	bne	r2,zero,811590 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
  811574:	e13ffe17 	ldw	r4,-8(fp)
  811578:	08113240 	call	811324 <altera_avalon_fifo_read_level>
  81157c:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  811580:	e0bffd17 	ldw	r2,-12(fp)
  811584:	10c00037 	ldwio	r3,0(r2)
  811588:	e0bfff17 	ldw	r2,-4(fp)
  81158c:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
  811590:	e0bffc17 	ldw	r2,-16(fp)
}
  811594:	e037883a 	mov	sp,fp
  811598:	dfc00117 	ldw	ra,4(sp)
  81159c:	df000017 	ldw	fp,0(sp)
  8115a0:	dec00204 	addi	sp,sp,8
  8115a4:	f800283a 	ret

008115a8 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
  8115a8:	defffb04 	addi	sp,sp,-20
  8115ac:	dfc00415 	stw	ra,16(sp)
  8115b0:	df000315 	stw	fp,12(sp)
  8115b4:	df000304 	addi	fp,sp,12
  8115b8:	e13ffd15 	stw	r4,-12(fp)
  8115bc:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  8115c0:	e13ffe17 	ldw	r4,-8(fp)
  8115c4:	01400084 	movi	r5,2
  8115c8:	08112180 	call	811218 <altera_avalon_fifo_read_status>
  8115cc:	1004c03a 	cmpne	r2,r2,zero
  8115d0:	1000041e 	bne	r2,zero,8115e4 <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  8115d4:	e0bffd17 	ldw	r2,-12(fp)
  8115d8:	10800037 	ldwio	r2,0(r2)
  8115dc:	e0bfff15 	stw	r2,-4(fp)
  8115e0:	00000106 	br	8115e8 <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
  8115e4:	e03fff15 	stw	zero,-4(fp)
  8115e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8115ec:	e037883a 	mov	sp,fp
  8115f0:	dfc00117 	ldw	ra,4(sp)
  8115f4:	df000017 	ldw	fp,0(sp)
  8115f8:	dec00204 	addi	sp,sp,8
  8115fc:	f800283a 	ret

00811600 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
  811600:	defffa04 	addi	sp,sp,-24
  811604:	dfc00515 	stw	ra,20(sp)
  811608:	df000415 	stw	fp,16(sp)
  81160c:	df000404 	addi	fp,sp,16
  811610:	e13ffc15 	stw	r4,-16(fp)
  811614:	e17ffd15 	stw	r5,-12(fp)
  811618:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  81161c:	e13ffd17 	ldw	r4,-12(fp)
  811620:	01400044 	movi	r5,1
  811624:	08112180 	call	811218 <altera_avalon_fifo_read_status>
  811628:	1004c03a 	cmpne	r2,r2,zero
  81162c:	1000061e 	bne	r2,zero,811648 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
  811630:	e0bffc17 	ldw	r2,-16(fp)
  811634:	10800104 	addi	r2,r2,4
  811638:	e0fffe17 	ldw	r3,-8(fp)
  81163c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
  811640:	e03fff15 	stw	zero,-4(fp)
  811644:	00000206 	br	811650 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
  811648:	00bfff04 	movi	r2,-4
  81164c:	e0bfff15 	stw	r2,-4(fp)
  811650:	e0bfff17 	ldw	r2,-4(fp)
    }
}
  811654:	e037883a 	mov	sp,fp
  811658:	dfc00117 	ldw	ra,4(sp)
  81165c:	df000017 	ldw	fp,0(sp)
  811660:	dec00204 	addi	sp,sp,8
  811664:	f800283a 	ret

00811668 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
  811668:	defffe04 	addi	sp,sp,-8
  81166c:	df000115 	stw	fp,4(sp)
  811670:	df000104 	addi	fp,sp,4
  811674:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
  811678:	e0bfff17 	ldw	r2,-4(fp)
  81167c:	10800104 	addi	r2,r2,4
  811680:	10800037 	ldwio	r2,0(r2)
}
  811684:	e037883a 	mov	sp,fp
  811688:	df000017 	ldw	fp,0(sp)
  81168c:	dec00104 	addi	sp,sp,4
  811690:	f800283a 	ret

00811694 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
  811694:	defffe04 	addi	sp,sp,-8
  811698:	df000115 	stw	fp,4(sp)
  81169c:	df000104 	addi	fp,sp,4
  8116a0:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
  8116a4:	e0bfff17 	ldw	r2,-4(fp)
  8116a8:	10800037 	ldwio	r2,0(r2)
}
  8116ac:	e037883a 	mov	sp,fp
  8116b0:	df000017 	ldw	fp,0(sp)
  8116b4:	dec00104 	addi	sp,sp,4
  8116b8:	f800283a 	ret

008116bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8116bc:	defffa04 	addi	sp,sp,-24
  8116c0:	dfc00515 	stw	ra,20(sp)
  8116c4:	df000415 	stw	fp,16(sp)
  8116c8:	df000404 	addi	fp,sp,16
  8116cc:	e13ffd15 	stw	r4,-12(fp)
  8116d0:	e17ffe15 	stw	r5,-8(fp)
  8116d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8116d8:	e0bffd17 	ldw	r2,-12(fp)
  8116dc:	10800017 	ldw	r2,0(r2)
  8116e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8116e4:	e0bffc17 	ldw	r2,-16(fp)
  8116e8:	11000a04 	addi	r4,r2,40
  8116ec:	e0bffd17 	ldw	r2,-12(fp)
  8116f0:	11c00217 	ldw	r7,8(r2)
  8116f4:	e17ffe17 	ldw	r5,-8(fp)
  8116f8:	e1bfff17 	ldw	r6,-4(fp)
  8116fc:	0811e7c0 	call	811e7c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811700:	e037883a 	mov	sp,fp
  811704:	dfc00117 	ldw	ra,4(sp)
  811708:	df000017 	ldw	fp,0(sp)
  81170c:	dec00204 	addi	sp,sp,8
  811710:	f800283a 	ret

00811714 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811714:	defffa04 	addi	sp,sp,-24
  811718:	dfc00515 	stw	ra,20(sp)
  81171c:	df000415 	stw	fp,16(sp)
  811720:	df000404 	addi	fp,sp,16
  811724:	e13ffd15 	stw	r4,-12(fp)
  811728:	e17ffe15 	stw	r5,-8(fp)
  81172c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811730:	e0bffd17 	ldw	r2,-12(fp)
  811734:	10800017 	ldw	r2,0(r2)
  811738:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  81173c:	e0bffc17 	ldw	r2,-16(fp)
  811740:	11000a04 	addi	r4,r2,40
  811744:	e0bffd17 	ldw	r2,-12(fp)
  811748:	11c00217 	ldw	r7,8(r2)
  81174c:	e17ffe17 	ldw	r5,-8(fp)
  811750:	e1bfff17 	ldw	r6,-4(fp)
  811754:	081213c0 	call	81213c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  811758:	e037883a 	mov	sp,fp
  81175c:	dfc00117 	ldw	ra,4(sp)
  811760:	df000017 	ldw	fp,0(sp)
  811764:	dec00204 	addi	sp,sp,8
  811768:	f800283a 	ret

0081176c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  81176c:	defffc04 	addi	sp,sp,-16
  811770:	dfc00315 	stw	ra,12(sp)
  811774:	df000215 	stw	fp,8(sp)
  811778:	df000204 	addi	fp,sp,8
  81177c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811780:	e0bfff17 	ldw	r2,-4(fp)
  811784:	10800017 	ldw	r2,0(r2)
  811788:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  81178c:	e0bffe17 	ldw	r2,-8(fp)
  811790:	11000a04 	addi	r4,r2,40
  811794:	e0bfff17 	ldw	r2,-4(fp)
  811798:	11400217 	ldw	r5,8(r2)
  81179c:	0811d140 	call	811d14 <altera_avalon_jtag_uart_close>
}
  8117a0:	e037883a 	mov	sp,fp
  8117a4:	dfc00117 	ldw	ra,4(sp)
  8117a8:	df000017 	ldw	fp,0(sp)
  8117ac:	dec00204 	addi	sp,sp,8
  8117b0:	f800283a 	ret

008117b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8117b4:	defffa04 	addi	sp,sp,-24
  8117b8:	dfc00515 	stw	ra,20(sp)
  8117bc:	df000415 	stw	fp,16(sp)
  8117c0:	df000404 	addi	fp,sp,16
  8117c4:	e13ffd15 	stw	r4,-12(fp)
  8117c8:	e17ffe15 	stw	r5,-8(fp)
  8117cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8117d0:	e0bffd17 	ldw	r2,-12(fp)
  8117d4:	10800017 	ldw	r2,0(r2)
  8117d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8117dc:	e0bffc17 	ldw	r2,-16(fp)
  8117e0:	11000a04 	addi	r4,r2,40
  8117e4:	e17ffe17 	ldw	r5,-8(fp)
  8117e8:	e1bfff17 	ldw	r6,-4(fp)
  8117ec:	0811d880 	call	811d88 <altera_avalon_jtag_uart_ioctl>
}
  8117f0:	e037883a 	mov	sp,fp
  8117f4:	dfc00117 	ldw	ra,4(sp)
  8117f8:	df000017 	ldw	fp,0(sp)
  8117fc:	dec00204 	addi	sp,sp,8
  811800:	f800283a 	ret

00811804 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811804:	defff404 	addi	sp,sp,-48
  811808:	dfc00b15 	stw	ra,44(sp)
  81180c:	df000a15 	stw	fp,40(sp)
  811810:	df000a04 	addi	fp,sp,40
  811814:	e13ffd15 	stw	r4,-12(fp)
  811818:	e17ffe15 	stw	r5,-8(fp)
  81181c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  811820:	e0bffd17 	ldw	r2,-12(fp)
  811824:	10800c04 	addi	r2,r2,48
  811828:	e0bffb15 	stw	r2,-20(fp)
  81182c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  811830:	e13ffc0b 	ldhu	r4,-16(fp)
  811834:	e17ffc84 	addi	r5,fp,-14
  811838:	080b3800 	call	80b380 <OSFlagCreate>
  81183c:	1007883a 	mov	r3,r2
  811840:	e0bffb17 	ldw	r2,-20(fp)
  811844:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  811848:	e0bffd17 	ldw	r2,-12(fp)
  81184c:	10800a04 	addi	r2,r2,40
  811850:	e0bff915 	stw	r2,-28(fp)
  811854:	00800044 	movi	r2,1
  811858:	e0bffa0d 	sth	r2,-24(fp)
  81185c:	e13ffa0b 	ldhu	r4,-24(fp)
  811860:	080e5840 	call	80e584 <OSSemCreate>
  811864:	1007883a 	mov	r3,r2
  811868:	e0bff917 	ldw	r2,-28(fp)
  81186c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  811870:	e0bffd17 	ldw	r2,-12(fp)
  811874:	10800b04 	addi	r2,r2,44
  811878:	e0bff715 	stw	r2,-36(fp)
  81187c:	00800044 	movi	r2,1
  811880:	e0bff80d 	sth	r2,-32(fp)
  811884:	e13ff80b 	ldhu	r4,-32(fp)
  811888:	080e5840 	call	80e584 <OSSemCreate>
  81188c:	1007883a 	mov	r3,r2
  811890:	e0bff717 	ldw	r2,-36(fp)
  811894:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811898:	e0fffd17 	ldw	r3,-12(fp)
  81189c:	00800044 	movi	r2,1
  8118a0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8118a4:	e0bffd17 	ldw	r2,-12(fp)
  8118a8:	10800017 	ldw	r2,0(r2)
  8118ac:	11000104 	addi	r4,r2,4
  8118b0:	e0bffd17 	ldw	r2,-12(fp)
  8118b4:	10800817 	ldw	r2,32(r2)
  8118b8:	1007883a 	mov	r3,r2
  8118bc:	2005883a 	mov	r2,r4
  8118c0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8118c4:	e13ffe17 	ldw	r4,-8(fp)
  8118c8:	e17fff17 	ldw	r5,-4(fp)
  8118cc:	d8000015 	stw	zero,0(sp)
  8118d0:	01802074 	movhi	r6,129
  8118d4:	31864f04 	addi	r6,r6,6460
  8118d8:	e1fffd17 	ldw	r7,-12(fp)
  8118dc:	0807e000 	call	807e00 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8118e0:	e0bffd17 	ldw	r2,-12(fp)
  8118e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8118e8:	e0bffd17 	ldw	r2,-12(fp)
  8118ec:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8118f0:	00802074 	movhi	r2,129
  8118f4:	109c3b04 	addi	r2,r2,28908
  8118f8:	10800017 	ldw	r2,0(r2)
  8118fc:	100b883a 	mov	r5,r2
  811900:	01802074 	movhi	r6,129
  811904:	31870004 	addi	r6,r6,7168
  811908:	e1fffd17 	ldw	r7,-12(fp)
  81190c:	08139dc0 	call	8139dc <alt_alarm_start>
  811910:	1004403a 	cmpge	r2,r2,zero
  811914:	1000041e 	bne	r2,zero,811928 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811918:	e0fffd17 	ldw	r3,-12(fp)
  81191c:	00a00034 	movhi	r2,32768
  811920:	10bfffc4 	addi	r2,r2,-1
  811924:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811928:	e037883a 	mov	sp,fp
  81192c:	dfc00117 	ldw	ra,4(sp)
  811930:	df000017 	ldw	fp,0(sp)
  811934:	dec00204 	addi	sp,sp,8
  811938:	f800283a 	ret

0081193c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81193c:	defff204 	addi	sp,sp,-56
  811940:	dfc00d15 	stw	ra,52(sp)
  811944:	df000c15 	stw	fp,48(sp)
  811948:	df000c04 	addi	fp,sp,48
  81194c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811950:	e0bfff17 	ldw	r2,-4(fp)
  811954:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  811958:	e0bffd17 	ldw	r2,-12(fp)
  81195c:	10800017 	ldw	r2,0(r2)
  811960:	e0bffc15 	stw	r2,-16(fp)
  811964:	00000006 	br	811968 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811968:	e0bffc17 	ldw	r2,-16(fp)
  81196c:	10800104 	addi	r2,r2,4
  811970:	10800037 	ldwio	r2,0(r2)
  811974:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811978:	e0bffb17 	ldw	r2,-20(fp)
  81197c:	1080c00c 	andi	r2,r2,768
  811980:	1005003a 	cmpeq	r2,r2,zero
  811984:	1000991e 	bne	r2,zero,811bec <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811988:	e0bffb17 	ldw	r2,-20(fp)
  81198c:	1080400c 	andi	r2,r2,256
  811990:	1005003a 	cmpeq	r2,r2,zero
  811994:	1000481e 	bne	r2,zero,811ab8 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811998:	00800074 	movhi	r2,1
  81199c:	e0bffa15 	stw	r2,-24(fp)
  8119a0:	00000006 	br	8119a4 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8119a4:	e0bffd17 	ldw	r2,-12(fp)
  8119a8:	10800d17 	ldw	r2,52(r2)
  8119ac:	10800044 	addi	r2,r2,1
  8119b0:	1081ffcc 	andi	r2,r2,2047
  8119b4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  8119b8:	e0bffd17 	ldw	r2,-12(fp)
  8119bc:	10c00e17 	ldw	r3,56(r2)
  8119c0:	e0bff917 	ldw	r2,-28(fp)
  8119c4:	18802826 	beq	r3,r2,811a68 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8119c8:	e0bffc17 	ldw	r2,-16(fp)
  8119cc:	10800037 	ldwio	r2,0(r2)
  8119d0:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8119d4:	e0bffa17 	ldw	r2,-24(fp)
  8119d8:	10a0000c 	andi	r2,r2,32768
  8119dc:	1005003a 	cmpeq	r2,r2,zero
  8119e0:	1000211e 	bne	r2,zero,811a68 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8119e4:	e0bffd17 	ldw	r2,-12(fp)
  8119e8:	10c00d17 	ldw	r3,52(r2)
  8119ec:	e0bffa17 	ldw	r2,-24(fp)
  8119f0:	1009883a 	mov	r4,r2
  8119f4:	e0bffd17 	ldw	r2,-12(fp)
  8119f8:	1885883a 	add	r2,r3,r2
  8119fc:	10801104 	addi	r2,r2,68
  811a00:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811a04:	e0bffd17 	ldw	r2,-12(fp)
  811a08:	10800d17 	ldw	r2,52(r2)
  811a0c:	10800044 	addi	r2,r2,1
  811a10:	10c1ffcc 	andi	r3,r2,2047
  811a14:	e0bffd17 	ldw	r2,-12(fp)
  811a18:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  811a1c:	e0bffd17 	ldw	r2,-12(fp)
  811a20:	10800c17 	ldw	r2,48(r2)
  811a24:	e0bff615 	stw	r2,-40(fp)
  811a28:	00800044 	movi	r2,1
  811a2c:	e0bff70d 	sth	r2,-36(fp)
  811a30:	00800044 	movi	r2,1
  811a34:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  811a38:	00802074 	movhi	r2,129
  811a3c:	109c2744 	addi	r2,r2,28829
  811a40:	10800003 	ldbu	r2,0(r2)
  811a44:	10803fcc 	andi	r2,r2,255
  811a48:	1005003a 	cmpeq	r2,r2,zero
  811a4c:	103fd51e 	bne	r2,zero,8119a4 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
  811a50:	e17ff70b 	ldhu	r5,-36(fp)
  811a54:	e1bff783 	ldbu	r6,-34(fp)
  811a58:	e1fffe04 	addi	r7,fp,-8
  811a5c:	e13ff617 	ldw	r4,-40(fp)
  811a60:	080c0a80 	call	80c0a8 <OSFlagPost>
    return err;
  811a64:	003fcf06 	br	8119a4 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811a68:	e0bffa17 	ldw	r2,-24(fp)
  811a6c:	10bfffec 	andhi	r2,r2,65535
  811a70:	1005003a 	cmpeq	r2,r2,zero
  811a74:	1000101e 	bne	r2,zero,811ab8 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811a78:	e0bffd17 	ldw	r2,-12(fp)
  811a7c:	10c00817 	ldw	r3,32(r2)
  811a80:	00bfff84 	movi	r2,-2
  811a84:	1886703a 	and	r3,r3,r2
  811a88:	e0bffd17 	ldw	r2,-12(fp)
  811a8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811a90:	e0bffc17 	ldw	r2,-16(fp)
  811a94:	11000104 	addi	r4,r2,4
  811a98:	e0bffd17 	ldw	r2,-12(fp)
  811a9c:	10800817 	ldw	r2,32(r2)
  811aa0:	1007883a 	mov	r3,r2
  811aa4:	2005883a 	mov	r2,r4
  811aa8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811aac:	e0bffc17 	ldw	r2,-16(fp)
  811ab0:	10800104 	addi	r2,r2,4
  811ab4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811ab8:	e0bffb17 	ldw	r2,-20(fp)
  811abc:	1080800c 	andi	r2,r2,512
  811ac0:	1005003a 	cmpeq	r2,r2,zero
  811ac4:	103fa81e 	bne	r2,zero,811968 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811ac8:	e0bffb17 	ldw	r2,-20(fp)
  811acc:	10bfffec 	andhi	r2,r2,65535
  811ad0:	1004d43a 	srli	r2,r2,16
  811ad4:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811ad8:	00002706 	br	811b78 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811adc:	e13ffc17 	ldw	r4,-16(fp)
  811ae0:	e0bffd17 	ldw	r2,-12(fp)
  811ae4:	10c01017 	ldw	r3,64(r2)
  811ae8:	e0bffd17 	ldw	r2,-12(fp)
  811aec:	1885883a 	add	r2,r3,r2
  811af0:	10821104 	addi	r2,r2,2116
  811af4:	10800003 	ldbu	r2,0(r2)
  811af8:	10c03fcc 	andi	r3,r2,255
  811afc:	18c0201c 	xori	r3,r3,128
  811b00:	18ffe004 	addi	r3,r3,-128
  811b04:	2005883a 	mov	r2,r4
  811b08:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811b0c:	e0bffd17 	ldw	r2,-12(fp)
  811b10:	10801017 	ldw	r2,64(r2)
  811b14:	10800044 	addi	r2,r2,1
  811b18:	10c1ffcc 	andi	r3,r2,2047
  811b1c:	e0bffd17 	ldw	r2,-12(fp)
  811b20:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  811b24:	e0bffd17 	ldw	r2,-12(fp)
  811b28:	10800c17 	ldw	r2,48(r2)
  811b2c:	e0bff415 	stw	r2,-48(fp)
  811b30:	00800084 	movi	r2,2
  811b34:	e0bff50d 	sth	r2,-44(fp)
  811b38:	00800044 	movi	r2,1
  811b3c:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  811b40:	00802074 	movhi	r2,129
  811b44:	109c2744 	addi	r2,r2,28829
  811b48:	10800003 	ldbu	r2,0(r2)
  811b4c:	10803fcc 	andi	r2,r2,255
  811b50:	1005003a 	cmpeq	r2,r2,zero
  811b54:	1000051e 	bne	r2,zero,811b6c <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
  811b58:	e17ff50b 	ldhu	r5,-44(fp)
  811b5c:	e1bff583 	ldbu	r6,-42(fp)
  811b60:	e1fffe44 	addi	r7,fp,-7
  811b64:	e13ff417 	ldw	r4,-48(fp)
  811b68:	080c0a80 	call	80c0a8 <OSFlagPost>

        space--;
  811b6c:	e0bff817 	ldw	r2,-32(fp)
  811b70:	10bfffc4 	addi	r2,r2,-1
  811b74:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  811b78:	e0bff817 	ldw	r2,-32(fp)
  811b7c:	1005003a 	cmpeq	r2,r2,zero
  811b80:	1000051e 	bne	r2,zero,811b98 <altera_avalon_jtag_uart_irq+0x25c>
  811b84:	e0bffd17 	ldw	r2,-12(fp)
  811b88:	10c01017 	ldw	r3,64(r2)
  811b8c:	e0bffd17 	ldw	r2,-12(fp)
  811b90:	10800f17 	ldw	r2,60(r2)
  811b94:	18bfd11e 	bne	r3,r2,811adc <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811b98:	e0bff817 	ldw	r2,-32(fp)
  811b9c:	1005003a 	cmpeq	r2,r2,zero
  811ba0:	103f711e 	bne	r2,zero,811968 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811ba4:	e0bffd17 	ldw	r2,-12(fp)
  811ba8:	10c00817 	ldw	r3,32(r2)
  811bac:	00bfff44 	movi	r2,-3
  811bb0:	1886703a 	and	r3,r3,r2
  811bb4:	e0bffd17 	ldw	r2,-12(fp)
  811bb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811bbc:	e0bffd17 	ldw	r2,-12(fp)
  811bc0:	10800017 	ldw	r2,0(r2)
  811bc4:	11000104 	addi	r4,r2,4
  811bc8:	e0bffd17 	ldw	r2,-12(fp)
  811bcc:	10800817 	ldw	r2,32(r2)
  811bd0:	1007883a 	mov	r3,r2
  811bd4:	2005883a 	mov	r2,r4
  811bd8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811bdc:	e0bffc17 	ldw	r2,-16(fp)
  811be0:	10800104 	addi	r2,r2,4
  811be4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811be8:	003f5f06 	br	811968 <altera_avalon_jtag_uart_irq+0x2c>
}
  811bec:	e037883a 	mov	sp,fp
  811bf0:	dfc00117 	ldw	ra,4(sp)
  811bf4:	df000017 	ldw	fp,0(sp)
  811bf8:	dec00204 	addi	sp,sp,8
  811bfc:	f800283a 	ret

00811c00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811c00:	defff804 	addi	sp,sp,-32
  811c04:	dfc00715 	stw	ra,28(sp)
  811c08:	df000615 	stw	fp,24(sp)
  811c0c:	df000604 	addi	fp,sp,24
  811c10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811c14:	e0bfff17 	ldw	r2,-4(fp)
  811c18:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811c1c:	e0bffd17 	ldw	r2,-12(fp)
  811c20:	10800017 	ldw	r2,0(r2)
  811c24:	10800104 	addi	r2,r2,4
  811c28:	10800037 	ldwio	r2,0(r2)
  811c2c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811c30:	e0bffc17 	ldw	r2,-16(fp)
  811c34:	1081000c 	andi	r2,r2,1024
  811c38:	1005003a 	cmpeq	r2,r2,zero
  811c3c:	10000c1e 	bne	r2,zero,811c70 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811c40:	e0bffd17 	ldw	r2,-12(fp)
  811c44:	10800017 	ldw	r2,0(r2)
  811c48:	11000104 	addi	r4,r2,4
  811c4c:	e0bffd17 	ldw	r2,-12(fp)
  811c50:	10800817 	ldw	r2,32(r2)
  811c54:	10810014 	ori	r2,r2,1024
  811c58:	1007883a 	mov	r3,r2
  811c5c:	2005883a 	mov	r2,r4
  811c60:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  811c64:	e0bffd17 	ldw	r2,-12(fp)
  811c68:	10000915 	stw	zero,36(r2)
  811c6c:	00002106 	br	811cf4 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811c70:	e0bffd17 	ldw	r2,-12(fp)
  811c74:	10c00917 	ldw	r3,36(r2)
  811c78:	00a00034 	movhi	r2,32768
  811c7c:	10bfff04 	addi	r2,r2,-4
  811c80:	10c01c36 	bltu	r2,r3,811cf4 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  811c84:	e0bffd17 	ldw	r2,-12(fp)
  811c88:	10800917 	ldw	r2,36(r2)
  811c8c:	10c00044 	addi	r3,r2,1
  811c90:	e0bffd17 	ldw	r2,-12(fp)
  811c94:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  811c98:	e0bffd17 	ldw	r2,-12(fp)
  811c9c:	10c00917 	ldw	r3,36(r2)
  811ca0:	e0bffd17 	ldw	r2,-12(fp)
  811ca4:	10800117 	ldw	r2,4(r2)
  811ca8:	18801236 	bltu	r3,r2,811cf4 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  811cac:	e0bffd17 	ldw	r2,-12(fp)
  811cb0:	10800c17 	ldw	r2,48(r2)
  811cb4:	e0bffa15 	stw	r2,-24(fp)
  811cb8:	00800104 	movi	r2,4
  811cbc:	e0bffb0d 	sth	r2,-20(fp)
  811cc0:	00800044 	movi	r2,1
  811cc4:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  811cc8:	00802074 	movhi	r2,129
  811ccc:	109c2744 	addi	r2,r2,28829
  811cd0:	10800003 	ldbu	r2,0(r2)
  811cd4:	10803fcc 	andi	r2,r2,255
  811cd8:	1005003a 	cmpeq	r2,r2,zero
  811cdc:	1000051e 	bne	r2,zero,811cf4 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  811ce0:	e17ffb0b 	ldhu	r5,-20(fp)
  811ce4:	e1bffb83 	ldbu	r6,-18(fp)
  811ce8:	e1fffe04 	addi	r7,fp,-8
  811cec:	e13ffa17 	ldw	r4,-24(fp)
  811cf0:	080c0a80 	call	80c0a8 <OSFlagPost>
  811cf4:	00802074 	movhi	r2,129
  811cf8:	109c3b04 	addi	r2,r2,28908
  811cfc:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  811d00:	e037883a 	mov	sp,fp
  811d04:	dfc00117 	ldw	ra,4(sp)
  811d08:	df000017 	ldw	fp,0(sp)
  811d0c:	dec00204 	addi	sp,sp,8
  811d10:	f800283a 	ret

00811d14 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811d14:	defffc04 	addi	sp,sp,-16
  811d18:	df000315 	stw	fp,12(sp)
  811d1c:	df000304 	addi	fp,sp,12
  811d20:	e13ffd15 	stw	r4,-12(fp)
  811d24:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811d28:	00000706 	br	811d48 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811d2c:	e0bffe17 	ldw	r2,-8(fp)
  811d30:	1090000c 	andi	r2,r2,16384
  811d34:	1005003a 	cmpeq	r2,r2,zero
  811d38:	1000031e 	bne	r2,zero,811d48 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  811d3c:	00bffd44 	movi	r2,-11
  811d40:	e0bfff15 	stw	r2,-4(fp)
  811d44:	00000b06 	br	811d74 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811d48:	e0bffd17 	ldw	r2,-12(fp)
  811d4c:	10c01017 	ldw	r3,64(r2)
  811d50:	e0bffd17 	ldw	r2,-12(fp)
  811d54:	10800f17 	ldw	r2,60(r2)
  811d58:	18800526 	beq	r3,r2,811d70 <altera_avalon_jtag_uart_close+0x5c>
  811d5c:	e0bffd17 	ldw	r2,-12(fp)
  811d60:	10c00917 	ldw	r3,36(r2)
  811d64:	e0bffd17 	ldw	r2,-12(fp)
  811d68:	10800117 	ldw	r2,4(r2)
  811d6c:	18bfef36 	bltu	r3,r2,811d2c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811d70:	e03fff15 	stw	zero,-4(fp)
  811d74:	e0bfff17 	ldw	r2,-4(fp)
}
  811d78:	e037883a 	mov	sp,fp
  811d7c:	df000017 	ldw	fp,0(sp)
  811d80:	dec00104 	addi	sp,sp,4
  811d84:	f800283a 	ret

00811d88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811d88:	defff804 	addi	sp,sp,-32
  811d8c:	df000715 	stw	fp,28(sp)
  811d90:	df000704 	addi	fp,sp,28
  811d94:	e13ffb15 	stw	r4,-20(fp)
  811d98:	e17ffc15 	stw	r5,-16(fp)
  811d9c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  811da0:	00bff9c4 	movi	r2,-25
  811da4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  811da8:	e0bffc17 	ldw	r2,-16(fp)
  811dac:	e0bfff15 	stw	r2,-4(fp)
  811db0:	e0ffff17 	ldw	r3,-4(fp)
  811db4:	189a8060 	cmpeqi	r2,r3,27137
  811db8:	1000041e 	bne	r2,zero,811dcc <altera_avalon_jtag_uart_ioctl+0x44>
  811dbc:	e0ffff17 	ldw	r3,-4(fp)
  811dc0:	189a80a0 	cmpeqi	r2,r3,27138
  811dc4:	10001b1e 	bne	r2,zero,811e34 <altera_avalon_jtag_uart_ioctl+0xac>
  811dc8:	00002706 	br	811e68 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  811dcc:	e0bffb17 	ldw	r2,-20(fp)
  811dd0:	10c00117 	ldw	r3,4(r2)
  811dd4:	00a00034 	movhi	r2,32768
  811dd8:	10bfffc4 	addi	r2,r2,-1
  811ddc:	18802226 	beq	r3,r2,811e68 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  811de0:	e0bffd17 	ldw	r2,-12(fp)
  811de4:	10800017 	ldw	r2,0(r2)
  811de8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811dec:	e0bff917 	ldw	r2,-28(fp)
  811df0:	10800090 	cmplti	r2,r2,2
  811df4:	1000071e 	bne	r2,zero,811e14 <altera_avalon_jtag_uart_ioctl+0x8c>
  811df8:	e0fff917 	ldw	r3,-28(fp)
  811dfc:	00a00034 	movhi	r2,32768
  811e00:	10bfffc4 	addi	r2,r2,-1
  811e04:	18800326 	beq	r3,r2,811e14 <altera_avalon_jtag_uart_ioctl+0x8c>
  811e08:	e0bff917 	ldw	r2,-28(fp)
  811e0c:	e0bffe15 	stw	r2,-8(fp)
  811e10:	00000306 	br	811e20 <altera_avalon_jtag_uart_ioctl+0x98>
  811e14:	00e00034 	movhi	r3,32768
  811e18:	18ffff84 	addi	r3,r3,-2
  811e1c:	e0fffe15 	stw	r3,-8(fp)
  811e20:	e0bffb17 	ldw	r2,-20(fp)
  811e24:	e0fffe17 	ldw	r3,-8(fp)
  811e28:	10c00115 	stw	r3,4(r2)
      rc = 0;
  811e2c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  811e30:	00000d06 	br	811e68 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811e34:	e0bffb17 	ldw	r2,-20(fp)
  811e38:	10c00117 	ldw	r3,4(r2)
  811e3c:	00a00034 	movhi	r2,32768
  811e40:	10bfffc4 	addi	r2,r2,-1
  811e44:	18800826 	beq	r3,r2,811e68 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811e48:	e13ffd17 	ldw	r4,-12(fp)
  811e4c:	e0bffb17 	ldw	r2,-20(fp)
  811e50:	10c00917 	ldw	r3,36(r2)
  811e54:	e0bffb17 	ldw	r2,-20(fp)
  811e58:	10800117 	ldw	r2,4(r2)
  811e5c:	1885803a 	cmpltu	r2,r3,r2
  811e60:	20800015 	stw	r2,0(r4)
      rc = 0;
  811e64:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  811e68:	e0bffa17 	ldw	r2,-24(fp)
}
  811e6c:	e037883a 	mov	sp,fp
  811e70:	df000017 	ldw	fp,0(sp)
  811e74:	dec00104 	addi	sp,sp,4
  811e78:	f800283a 	ret

00811e7c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811e7c:	deffeb04 	addi	sp,sp,-84
  811e80:	dfc01415 	stw	ra,80(sp)
  811e84:	df001315 	stw	fp,76(sp)
  811e88:	df001304 	addi	fp,sp,76
  811e8c:	e13ffb15 	stw	r4,-20(fp)
  811e90:	e17ffc15 	stw	r5,-16(fp)
  811e94:	e1bffd15 	stw	r6,-12(fp)
  811e98:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  811e9c:	e0bffc17 	ldw	r2,-16(fp)
  811ea0:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  811ea4:	e0bffb17 	ldw	r2,-20(fp)
  811ea8:	10800a17 	ldw	r2,40(r2)
  811eac:	e0bff315 	stw	r2,-52(fp)
  811eb0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  811eb4:	e17ff40b 	ldhu	r5,-48(fp)
  811eb8:	e1bffa44 	addi	r6,fp,-23
  811ebc:	e13ff317 	ldw	r4,-52(fp)
  811ec0:	080e9380 	call	80e938 <OSSemPend>

  while (space > 0)
  811ec4:	00006406 	br	812058 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811ec8:	e0bffb17 	ldw	r2,-20(fp)
  811ecc:	10800d17 	ldw	r2,52(r2)
  811ed0:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  811ed4:	e0bffb17 	ldw	r2,-20(fp)
  811ed8:	10800e17 	ldw	r2,56(r2)
  811edc:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  811ee0:	e0fff617 	ldw	r3,-40(fp)
  811ee4:	e0bff517 	ldw	r2,-44(fp)
  811ee8:	18800536 	bltu	r3,r2,811f00 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  811eec:	e0bff617 	ldw	r2,-40(fp)
  811ef0:	e0fff517 	ldw	r3,-44(fp)
  811ef4:	10c5c83a 	sub	r2,r2,r3
  811ef8:	e0bff715 	stw	r2,-36(fp)
  811efc:	00000406 	br	811f10 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  811f00:	00820004 	movi	r2,2048
  811f04:	e0fff517 	ldw	r3,-44(fp)
  811f08:	10c5c83a 	sub	r2,r2,r3
  811f0c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  811f10:	e0bff717 	ldw	r2,-36(fp)
  811f14:	1005003a 	cmpeq	r2,r2,zero
  811f18:	10001f1e 	bne	r2,zero,811f98 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  811f1c:	e0fffd17 	ldw	r3,-12(fp)
  811f20:	e0bff717 	ldw	r2,-36(fp)
  811f24:	1880022e 	bgeu	r3,r2,811f30 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  811f28:	e0bffd17 	ldw	r2,-12(fp)
  811f2c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811f30:	e0bffb17 	ldw	r2,-20(fp)
  811f34:	10c01104 	addi	r3,r2,68
  811f38:	e0bff517 	ldw	r2,-44(fp)
  811f3c:	1887883a 	add	r3,r3,r2
  811f40:	e0bff917 	ldw	r2,-28(fp)
  811f44:	1009883a 	mov	r4,r2
  811f48:	180b883a 	mov	r5,r3
  811f4c:	e1bff717 	ldw	r6,-36(fp)
  811f50:	0804ed80 	call	804ed8 <memcpy>
      ptr   += n;
  811f54:	e0fff717 	ldw	r3,-36(fp)
  811f58:	e0bff917 	ldw	r2,-28(fp)
  811f5c:	10c5883a 	add	r2,r2,r3
  811f60:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  811f64:	e0fffd17 	ldw	r3,-12(fp)
  811f68:	e0bff717 	ldw	r2,-36(fp)
  811f6c:	1885c83a 	sub	r2,r3,r2
  811f70:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811f74:	e0fff517 	ldw	r3,-44(fp)
  811f78:	e0bff717 	ldw	r2,-36(fp)
  811f7c:	1885883a 	add	r2,r3,r2
  811f80:	10c1ffcc 	andi	r3,r2,2047
  811f84:	e0bffb17 	ldw	r2,-20(fp)
  811f88:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  811f8c:	e0bffd17 	ldw	r2,-12(fp)
  811f90:	10800048 	cmpgei	r2,r2,1
  811f94:	103fcc1e 	bne	r2,zero,811ec8 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  811f98:	e0fff917 	ldw	r3,-28(fp)
  811f9c:	e0bffc17 	ldw	r2,-16(fp)
  811fa0:	1880301e 	bne	r3,r2,812064 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811fa4:	e0bffe17 	ldw	r2,-8(fp)
  811fa8:	1090000c 	andi	r2,r2,16384
  811fac:	1004c03a 	cmpne	r2,r2,zero
  811fb0:	10002c1e 	bne	r2,zero,812064 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  811fb4:	00802074 	movhi	r2,129
  811fb8:	109c2744 	addi	r2,r2,28829
  811fbc:	10800003 	ldbu	r2,0(r2)
  811fc0:	10803fcc 	andi	r2,r2,255
  811fc4:	10800058 	cmpnei	r2,r2,1
  811fc8:	1000161e 	bne	r2,zero,812024 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  811fcc:	e0bffb17 	ldw	r2,-20(fp)
  811fd0:	10800c17 	ldw	r2,48(r2)
  811fd4:	e0bff015 	stw	r2,-64(fp)
  811fd8:	00800144 	movi	r2,5
  811fdc:	e0bff10d 	sth	r2,-60(fp)
  811fe0:	00bfe0c4 	movi	r2,-125
  811fe4:	e0bff185 	stb	r2,-58(fp)
  811fe8:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  811fec:	00802074 	movhi	r2,129
  811ff0:	109c2744 	addi	r2,r2,28829
  811ff4:	10800003 	ldbu	r2,0(r2)
  811ff8:	10803fcc 	andi	r2,r2,255
  811ffc:	1005003a 	cmpeq	r2,r2,zero
  812000:	1000111e 	bne	r2,zero,812048 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  812004:	e17ff10b 	ldhu	r5,-60(fp)
  812008:	e1bff183 	ldbu	r6,-58(fp)
  81200c:	e1fff20b 	ldhu	r7,-56(fp)
  812010:	e0bffa04 	addi	r2,fp,-24
  812014:	d8800015 	stw	r2,0(sp)
  812018:	e13ff017 	ldw	r4,-64(fp)
  81201c:	080b9fc0 	call	80b9fc <OSFlagPend>
    return err;
  812020:	00000906 	br	812048 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  812024:	e0bffb17 	ldw	r2,-20(fp)
  812028:	10c00d17 	ldw	r3,52(r2)
  81202c:	e0bff617 	ldw	r2,-40(fp)
  812030:	1880051e 	bne	r3,r2,812048 <altera_avalon_jtag_uart_read+0x1cc>
  812034:	e0bffb17 	ldw	r2,-20(fp)
  812038:	10c00917 	ldw	r3,36(r2)
  81203c:	e0bffb17 	ldw	r2,-20(fp)
  812040:	10800117 	ldw	r2,4(r2)
  812044:	18bff736 	bltu	r3,r2,812024 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  812048:	e0bffb17 	ldw	r2,-20(fp)
  81204c:	10c00d17 	ldw	r3,52(r2)
  812050:	e0bff617 	ldw	r2,-40(fp)
  812054:	18800326 	beq	r3,r2,812064 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812058:	e0bffd17 	ldw	r2,-12(fp)
  81205c:	10800048 	cmpgei	r2,r2,1
  812060:	103f991e 	bne	r2,zero,811ec8 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  812064:	e0bffb17 	ldw	r2,-20(fp)
  812068:	11000a17 	ldw	r4,40(r2)
  81206c:	080ed300 	call	80ed30 <OSSemPost>

  if (ptr != buffer)
  812070:	e0fff917 	ldw	r3,-28(fp)
  812074:	e0bffc17 	ldw	r2,-16(fp)
  812078:	18801926 	beq	r3,r2,8120e0 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81207c:	0005303a 	rdctl	r2,status
  812080:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812084:	e0ffef17 	ldw	r3,-68(fp)
  812088:	00bfff84 	movi	r2,-2
  81208c:	1884703a 	and	r2,r3,r2
  812090:	1001703a 	wrctl	status,r2
  
  return context;
  812094:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  812098:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81209c:	e0bffb17 	ldw	r2,-20(fp)
  8120a0:	10800817 	ldw	r2,32(r2)
  8120a4:	10c00054 	ori	r3,r2,1
  8120a8:	e0bffb17 	ldw	r2,-20(fp)
  8120ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8120b0:	e0bffb17 	ldw	r2,-20(fp)
  8120b4:	10800017 	ldw	r2,0(r2)
  8120b8:	11000104 	addi	r4,r2,4
  8120bc:	e0bffb17 	ldw	r2,-20(fp)
  8120c0:	10800817 	ldw	r2,32(r2)
  8120c4:	1007883a 	mov	r3,r2
  8120c8:	2005883a 	mov	r2,r4
  8120cc:	10c00035 	stwio	r3,0(r2)
  8120d0:	e0bff817 	ldw	r2,-32(fp)
  8120d4:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8120d8:	e0bfee17 	ldw	r2,-72(fp)
  8120dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8120e0:	e0fff917 	ldw	r3,-28(fp)
  8120e4:	e0bffc17 	ldw	r2,-16(fp)
  8120e8:	18800526 	beq	r3,r2,812100 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  8120ec:	e0fff917 	ldw	r3,-28(fp)
  8120f0:	e0bffc17 	ldw	r2,-16(fp)
  8120f4:	1887c83a 	sub	r3,r3,r2
  8120f8:	e0ffff15 	stw	r3,-4(fp)
  8120fc:	00000906 	br	812124 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  812100:	e0bffe17 	ldw	r2,-8(fp)
  812104:	1090000c 	andi	r2,r2,16384
  812108:	1005003a 	cmpeq	r2,r2,zero
  81210c:	1000031e 	bne	r2,zero,81211c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  812110:	00bffd44 	movi	r2,-11
  812114:	e0bfff15 	stw	r2,-4(fp)
  812118:	00000206 	br	812124 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  81211c:	00bffec4 	movi	r2,-5
  812120:	e0bfff15 	stw	r2,-4(fp)
  812124:	e0bfff17 	ldw	r2,-4(fp)
}
  812128:	e037883a 	mov	sp,fp
  81212c:	dfc00117 	ldw	ra,4(sp)
  812130:	df000017 	ldw	fp,0(sp)
  812134:	dec00204 	addi	sp,sp,8
  812138:	f800283a 	ret

0081213c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  81213c:	deffeb04 	addi	sp,sp,-84
  812140:	dfc01415 	stw	ra,80(sp)
  812144:	df001315 	stw	fp,76(sp)
  812148:	df001304 	addi	fp,sp,76
  81214c:	e13ffb15 	stw	r4,-20(fp)
  812150:	e17ffc15 	stw	r5,-16(fp)
  812154:	e1bffd15 	stw	r6,-12(fp)
  812158:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81215c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  812160:	e0bffc17 	ldw	r2,-16(fp)
  812164:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  812168:	e0bffb17 	ldw	r2,-20(fp)
  81216c:	10800b17 	ldw	r2,44(r2)
  812170:	e0bff315 	stw	r2,-52(fp)
  812174:	e03ff40d 	sth	zero,-48(fp)
  812178:	e17ff40b 	ldhu	r5,-48(fp)
  81217c:	e1bffa04 	addi	r6,fp,-24
  812180:	e13ff317 	ldw	r4,-52(fp)
  812184:	080e9380 	call	80e938 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812188:	00003a06 	br	812274 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81218c:	e0bffb17 	ldw	r2,-20(fp)
  812190:	10800f17 	ldw	r2,60(r2)
  812194:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  812198:	e0bffb17 	ldw	r2,-20(fp)
  81219c:	10801017 	ldw	r2,64(r2)
  8121a0:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  8121a4:	e0fff917 	ldw	r3,-28(fp)
  8121a8:	e0bff817 	ldw	r2,-32(fp)
  8121ac:	1880062e 	bgeu	r3,r2,8121c8 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  8121b0:	e0fff817 	ldw	r3,-32(fp)
  8121b4:	e0bff917 	ldw	r2,-28(fp)
  8121b8:	1885c83a 	sub	r2,r3,r2
  8121bc:	10bfffc4 	addi	r2,r2,-1
  8121c0:	e0bff715 	stw	r2,-36(fp)
  8121c4:	00000c06 	br	8121f8 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  8121c8:	e0bff817 	ldw	r2,-32(fp)
  8121cc:	1005003a 	cmpeq	r2,r2,zero
  8121d0:	1000051e 	bne	r2,zero,8121e8 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8121d4:	00820004 	movi	r2,2048
  8121d8:	e0fff917 	ldw	r3,-28(fp)
  8121dc:	10c5c83a 	sub	r2,r2,r3
  8121e0:	e0bff715 	stw	r2,-36(fp)
  8121e4:	00000406 	br	8121f8 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8121e8:	0081ffc4 	movi	r2,2047
  8121ec:	e0fff917 	ldw	r3,-28(fp)
  8121f0:	10c5c83a 	sub	r2,r2,r3
  8121f4:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8121f8:	e0bff717 	ldw	r2,-36(fp)
  8121fc:	1005003a 	cmpeq	r2,r2,zero
  812200:	10001f1e 	bne	r2,zero,812280 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  812204:	e0fffd17 	ldw	r3,-12(fp)
  812208:	e0bff717 	ldw	r2,-36(fp)
  81220c:	1880022e 	bgeu	r3,r2,812218 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  812210:	e0bffd17 	ldw	r2,-12(fp)
  812214:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  812218:	e0bffb17 	ldw	r2,-20(fp)
  81221c:	10c21104 	addi	r3,r2,2116
  812220:	e0bff917 	ldw	r2,-28(fp)
  812224:	1885883a 	add	r2,r3,r2
  812228:	e0fffc17 	ldw	r3,-16(fp)
  81222c:	1009883a 	mov	r4,r2
  812230:	180b883a 	mov	r5,r3
  812234:	e1bff717 	ldw	r6,-36(fp)
  812238:	0804ed80 	call	804ed8 <memcpy>
      ptr   += n;
  81223c:	e0fff717 	ldw	r3,-36(fp)
  812240:	e0bffc17 	ldw	r2,-16(fp)
  812244:	10c5883a 	add	r2,r2,r3
  812248:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  81224c:	e0fffd17 	ldw	r3,-12(fp)
  812250:	e0bff717 	ldw	r2,-36(fp)
  812254:	1885c83a 	sub	r2,r3,r2
  812258:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81225c:	e0fff917 	ldw	r3,-28(fp)
  812260:	e0bff717 	ldw	r2,-36(fp)
  812264:	1885883a 	add	r2,r3,r2
  812268:	10c1ffcc 	andi	r3,r2,2047
  81226c:	e0bffb17 	ldw	r2,-20(fp)
  812270:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812274:	e0bffd17 	ldw	r2,-12(fp)
  812278:	10800048 	cmpgei	r2,r2,1
  81227c:	103fc31e 	bne	r2,zero,81218c <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812280:	0005303a 	rdctl	r2,status
  812284:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812288:	e0fff217 	ldw	r3,-56(fp)
  81228c:	00bfff84 	movi	r2,-2
  812290:	1884703a 	and	r2,r3,r2
  812294:	1001703a 	wrctl	status,r2
  
  return context;
  812298:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81229c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8122a0:	e0bffb17 	ldw	r2,-20(fp)
  8122a4:	10800817 	ldw	r2,32(r2)
  8122a8:	10c00094 	ori	r3,r2,2
  8122ac:	e0bffb17 	ldw	r2,-20(fp)
  8122b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8122b4:	e0bffb17 	ldw	r2,-20(fp)
  8122b8:	10800017 	ldw	r2,0(r2)
  8122bc:	11000104 	addi	r4,r2,4
  8122c0:	e0bffb17 	ldw	r2,-20(fp)
  8122c4:	10800817 	ldw	r2,32(r2)
  8122c8:	1007883a 	mov	r3,r2
  8122cc:	2005883a 	mov	r2,r4
  8122d0:	10c00035 	stwio	r3,0(r2)
  8122d4:	e0bff617 	ldw	r2,-40(fp)
  8122d8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8122dc:	e0bff117 	ldw	r2,-60(fp)
  8122e0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8122e4:	e0bffd17 	ldw	r2,-12(fp)
  8122e8:	10800050 	cmplti	r2,r2,1
  8122ec:	10002d1e 	bne	r2,zero,8123a4 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  8122f0:	e0bffe17 	ldw	r2,-8(fp)
  8122f4:	1090000c 	andi	r2,r2,16384
  8122f8:	1004c03a 	cmpne	r2,r2,zero
  8122fc:	10002c1e 	bne	r2,zero,8123b0 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  812300:	00802074 	movhi	r2,129
  812304:	109c2744 	addi	r2,r2,28829
  812308:	10800003 	ldbu	r2,0(r2)
  81230c:	10803fcc 	andi	r2,r2,255
  812310:	10800058 	cmpnei	r2,r2,1
  812314:	1000161e 	bne	r2,zero,812370 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  812318:	e0bffb17 	ldw	r2,-20(fp)
  81231c:	10800c17 	ldw	r2,48(r2)
  812320:	e0bfee15 	stw	r2,-72(fp)
  812324:	00800184 	movi	r2,6
  812328:	e0bfef0d 	sth	r2,-68(fp)
  81232c:	00bfe0c4 	movi	r2,-125
  812330:	e0bfef85 	stb	r2,-66(fp)
  812334:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  812338:	00802074 	movhi	r2,129
  81233c:	109c2744 	addi	r2,r2,28829
  812340:	10800003 	ldbu	r2,0(r2)
  812344:	10803fcc 	andi	r2,r2,255
  812348:	1005003a 	cmpeq	r2,r2,zero
  81234c:	1000111e 	bne	r2,zero,812394 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  812350:	e17fef0b 	ldhu	r5,-68(fp)
  812354:	e1bfef83 	ldbu	r6,-66(fp)
  812358:	e1fff00b 	ldhu	r7,-64(fp)
  81235c:	e0bffa44 	addi	r2,fp,-23
  812360:	d8800015 	stw	r2,0(sp)
  812364:	e13fee17 	ldw	r4,-72(fp)
  812368:	080b9fc0 	call	80b9fc <OSFlagPend>
    return err;
  81236c:	00000906 	br	812394 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  812370:	e0bffb17 	ldw	r2,-20(fp)
  812374:	10c01017 	ldw	r3,64(r2)
  812378:	e0bff817 	ldw	r2,-32(fp)
  81237c:	1880051e 	bne	r3,r2,812394 <altera_avalon_jtag_uart_write+0x258>
  812380:	e0bffb17 	ldw	r2,-20(fp)
  812384:	10c00917 	ldw	r3,36(r2)
  812388:	e0bffb17 	ldw	r2,-20(fp)
  81238c:	10800117 	ldw	r2,4(r2)
  812390:	18bff736 	bltu	r3,r2,812370 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  812394:	e0bffb17 	ldw	r2,-20(fp)
  812398:	10c01017 	ldw	r3,64(r2)
  81239c:	e0bff817 	ldw	r2,-32(fp)
  8123a0:	18800326 	beq	r3,r2,8123b0 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  8123a4:	e0bffd17 	ldw	r2,-12(fp)
  8123a8:	10800048 	cmpgei	r2,r2,1
  8123ac:	103fb11e 	bne	r2,zero,812274 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  8123b0:	e0bffb17 	ldw	r2,-20(fp)
  8123b4:	11000b17 	ldw	r4,44(r2)
  8123b8:	080ed300 	call	80ed30 <OSSemPost>

  if (ptr != start)
  8123bc:	e0fffc17 	ldw	r3,-16(fp)
  8123c0:	e0bff517 	ldw	r2,-44(fp)
  8123c4:	18800526 	beq	r3,r2,8123dc <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  8123c8:	e0fffc17 	ldw	r3,-16(fp)
  8123cc:	e0bff517 	ldw	r2,-44(fp)
  8123d0:	1887c83a 	sub	r3,r3,r2
  8123d4:	e0ffff15 	stw	r3,-4(fp)
  8123d8:	00000906 	br	812400 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  8123dc:	e0bffe17 	ldw	r2,-8(fp)
  8123e0:	1090000c 	andi	r2,r2,16384
  8123e4:	1005003a 	cmpeq	r2,r2,zero
  8123e8:	1000031e 	bne	r2,zero,8123f8 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  8123ec:	00bffd44 	movi	r2,-11
  8123f0:	e0bfff15 	stw	r2,-4(fp)
  8123f4:	00000206 	br	812400 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  8123f8:	00bffec4 	movi	r2,-5
  8123fc:	e0bfff15 	stw	r2,-4(fp)
  812400:	e0bfff17 	ldw	r2,-4(fp)
}
  812404:	e037883a 	mov	sp,fp
  812408:	dfc00117 	ldw	ra,4(sp)
  81240c:	df000017 	ldw	fp,0(sp)
  812410:	dec00204 	addi	sp,sp,8
  812414:	f800283a 	ret

00812418 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  812418:	defffa04 	addi	sp,sp,-24
  81241c:	dfc00515 	stw	ra,20(sp)
  812420:	df000415 	stw	fp,16(sp)
  812424:	df000404 	addi	fp,sp,16
  812428:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81242c:	e0bfff17 	ldw	r2,-4(fp)
  812430:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  812434:	e0bfff17 	ldw	r2,-4(fp)
  812438:	10800104 	addi	r2,r2,4
  81243c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812440:	0005303a 	rdctl	r2,status
  812444:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812448:	e0fffd17 	ldw	r3,-12(fp)
  81244c:	00bfff84 	movi	r2,-2
  812450:	1884703a 	and	r2,r3,r2
  812454:	1001703a 	wrctl	status,r2
  
  return context;
  812458:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81245c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  812460:	08142380 	call	814238 <alt_tick>
  812464:	e0bffe17 	ldw	r2,-8(fp)
  812468:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81246c:	e0bffc17 	ldw	r2,-16(fp)
  812470:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  812474:	e037883a 	mov	sp,fp
  812478:	dfc00117 	ldw	ra,4(sp)
  81247c:	df000017 	ldw	fp,0(sp)
  812480:	dec00204 	addi	sp,sp,8
  812484:	f800283a 	ret

00812488 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  812488:	defff804 	addi	sp,sp,-32
  81248c:	dfc00715 	stw	ra,28(sp)
  812490:	df000615 	stw	fp,24(sp)
  812494:	df000604 	addi	fp,sp,24
  812498:	e13ffc15 	stw	r4,-16(fp)
  81249c:	e17ffd15 	stw	r5,-12(fp)
  8124a0:	e1bffe15 	stw	r6,-8(fp)
  8124a4:	e1ffff15 	stw	r7,-4(fp)
  8124a8:	e0bfff17 	ldw	r2,-4(fp)
  8124ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8124b0:	00802074 	movhi	r2,129
  8124b4:	109c3b04 	addi	r2,r2,28908
  8124b8:	10800017 	ldw	r2,0(r2)
  8124bc:	1004c03a 	cmpne	r2,r2,zero
  8124c0:	1000041e 	bne	r2,zero,8124d4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8124c4:	00c02074 	movhi	r3,129
  8124c8:	18dc3b04 	addi	r3,r3,28908
  8124cc:	e0bffb17 	ldw	r2,-20(fp)
  8124d0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8124d4:	e0bffc17 	ldw	r2,-16(fp)
  8124d8:	10800104 	addi	r2,r2,4
  8124dc:	1007883a 	mov	r3,r2
  8124e0:	008001c4 	movi	r2,7
  8124e4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8124e8:	d8000015 	stw	zero,0(sp)
  8124ec:	e13ffd17 	ldw	r4,-12(fp)
  8124f0:	e17ffe17 	ldw	r5,-8(fp)
  8124f4:	01802074 	movhi	r6,129
  8124f8:	31890604 	addi	r6,r6,9240
  8124fc:	e1fffc17 	ldw	r7,-16(fp)
  812500:	0807e000 	call	807e00 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  812504:	e037883a 	mov	sp,fp
  812508:	dfc00117 	ldw	ra,4(sp)
  81250c:	df000017 	ldw	fp,0(sp)
  812510:	dec00204 	addi	sp,sp,8
  812514:	f800283a 	ret

00812518 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  812518:	defffc04 	addi	sp,sp,-16
  81251c:	dfc00315 	stw	ra,12(sp)
  812520:	df000215 	stw	fp,8(sp)
  812524:	df000204 	addi	fp,sp,8
  812528:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  81252c:	e13fff17 	ldw	r4,-4(fp)
  812530:	01402074 	movhi	r5,129
  812534:	295bed04 	addi	r5,r5,28596
  812538:	0813d0c0 	call	813d0c <alt_find_dev>
  81253c:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  812540:	e0bffe17 	ldw	r2,-8(fp)
}
  812544:	e037883a 	mov	sp,fp
  812548:	dfc00117 	ldw	ra,4(sp)
  81254c:	df000017 	ldw	fp,0(sp)
  812550:	dec00204 	addi	sp,sp,8
  812554:	f800283a 	ret

00812558 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  812558:	defffd04 	addi	sp,sp,-12
  81255c:	df000215 	stw	fp,8(sp)
  812560:	df000204 	addi	fp,sp,8
  812564:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  812568:	e0bfff17 	ldw	r2,-4(fp)
  81256c:	10800a17 	ldw	r2,40(r2)
  812570:	10800037 	ldwio	r2,0(r2)
  812574:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  812578:	e0bffe17 	ldw	r2,-8(fp)
  81257c:	10800054 	ori	r2,r2,1
  812580:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  812584:	e0bfff17 	ldw	r2,-4(fp)
  812588:	10800a17 	ldw	r2,40(r2)
  81258c:	e0fffe17 	ldw	r3,-8(fp)
  812590:	10c00035 	stwio	r3,0(r2)
}
  812594:	e037883a 	mov	sp,fp
  812598:	df000017 	ldw	fp,0(sp)
  81259c:	dec00104 	addi	sp,sp,4
  8125a0:	f800283a 	ret

008125a4 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  8125a4:	defffd04 	addi	sp,sp,-12
  8125a8:	df000215 	stw	fp,8(sp)
  8125ac:	df000204 	addi	fp,sp,8
  8125b0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8125b4:	e0bfff17 	ldw	r2,-4(fp)
  8125b8:	10800a17 	ldw	r2,40(r2)
  8125bc:	10800037 	ldwio	r2,0(r2)
  8125c0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  8125c4:	e0fffe17 	ldw	r3,-8(fp)
  8125c8:	00bfff84 	movi	r2,-2
  8125cc:	1884703a 	and	r2,r3,r2
  8125d0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8125d4:	e0bfff17 	ldw	r2,-4(fp)
  8125d8:	10800a17 	ldw	r2,40(r2)
  8125dc:	e0fffe17 	ldw	r3,-8(fp)
  8125e0:	10c00035 	stwio	r3,0(r2)
}
  8125e4:	e037883a 	mov	sp,fp
  8125e8:	df000017 	ldw	fp,0(sp)
  8125ec:	dec00104 	addi	sp,sp,4
  8125f0:	f800283a 	ret

008125f4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  8125f4:	defffd04 	addi	sp,sp,-12
  8125f8:	df000215 	stw	fp,8(sp)
  8125fc:	df000204 	addi	fp,sp,8
  812600:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  812604:	e0bfff17 	ldw	r2,-4(fp)
  812608:	10800a17 	ldw	r2,40(r2)
  81260c:	10800037 	ldwio	r2,0(r2)
  812610:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  812614:	e0bffe17 	ldw	r2,-8(fp)
  812618:	10800094 	ori	r2,r2,2
  81261c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  812620:	e0bfff17 	ldw	r2,-4(fp)
  812624:	10800a17 	ldw	r2,40(r2)
  812628:	e0fffe17 	ldw	r3,-8(fp)
  81262c:	10c00035 	stwio	r3,0(r2)
}
  812630:	e037883a 	mov	sp,fp
  812634:	df000017 	ldw	fp,0(sp)
  812638:	dec00104 	addi	sp,sp,4
  81263c:	f800283a 	ret

00812640 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  812640:	defffd04 	addi	sp,sp,-12
  812644:	df000215 	stw	fp,8(sp)
  812648:	df000204 	addi	fp,sp,8
  81264c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  812650:	e0bfff17 	ldw	r2,-4(fp)
  812654:	10800a17 	ldw	r2,40(r2)
  812658:	10800037 	ldwio	r2,0(r2)
  81265c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  812660:	e0fffe17 	ldw	r3,-8(fp)
  812664:	00bfff44 	movi	r2,-3
  812668:	1884703a 	and	r2,r3,r2
  81266c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  812670:	e0bfff17 	ldw	r2,-4(fp)
  812674:	10800a17 	ldw	r2,40(r2)
  812678:	e0fffe17 	ldw	r3,-8(fp)
  81267c:	10c00035 	stwio	r3,0(r2)
}
  812680:	e037883a 	mov	sp,fp
  812684:	df000017 	ldw	fp,0(sp)
  812688:	dec00104 	addi	sp,sp,4
  81268c:	f800283a 	ret

00812690 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  812690:	defffd04 	addi	sp,sp,-12
  812694:	df000215 	stw	fp,8(sp)
  812698:	df000204 	addi	fp,sp,8
  81269c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8126a0:	e0bfff17 	ldw	r2,-4(fp)
  8126a4:	10800a17 	ldw	r2,40(r2)
  8126a8:	10800037 	ldwio	r2,0(r2)
  8126ac:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  8126b0:	e0bffe17 	ldw	r2,-8(fp)
  8126b4:	1080400c 	andi	r2,r2,256
  8126b8:	1004c03a 	cmpne	r2,r2,zero
}
  8126bc:	e037883a 	mov	sp,fp
  8126c0:	df000017 	ldw	fp,0(sp)
  8126c4:	dec00104 	addi	sp,sp,4
  8126c8:	f800283a 	ret

008126cc <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  8126cc:	defffd04 	addi	sp,sp,-12
  8126d0:	df000215 	stw	fp,8(sp)
  8126d4:	df000204 	addi	fp,sp,8
  8126d8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8126dc:	e0bfff17 	ldw	r2,-4(fp)
  8126e0:	10800a17 	ldw	r2,40(r2)
  8126e4:	10800037 	ldwio	r2,0(r2)
  8126e8:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  8126ec:	e0bffe17 	ldw	r2,-8(fp)
  8126f0:	1080800c 	andi	r2,r2,512
  8126f4:	1004c03a 	cmpne	r2,r2,zero
}
  8126f8:	e037883a 	mov	sp,fp
  8126fc:	df000017 	ldw	fp,0(sp)
  812700:	dec00104 	addi	sp,sp,4
  812704:	f800283a 	ret

00812708 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  812708:	defffd04 	addi	sp,sp,-12
  81270c:	df000215 	stw	fp,8(sp)
  812710:	df000204 	addi	fp,sp,8
  812714:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  812718:	e0bfff17 	ldw	r2,-4(fp)
  81271c:	10800a17 	ldw	r2,40(r2)
  812720:	10800037 	ldwio	r2,0(r2)
  812724:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  812728:	e0bffe17 	ldw	r2,-8(fp)
  81272c:	10800114 	ori	r2,r2,4
  812730:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  812734:	e0bffe17 	ldw	r2,-8(fp)
  812738:	10800214 	ori	r2,r2,8
  81273c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  812740:	e0bfff17 	ldw	r2,-4(fp)
  812744:	10800a17 	ldw	r2,40(r2)
  812748:	e0fffe17 	ldw	r3,-8(fp)
  81274c:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  812750:	e0fffe17 	ldw	r3,-8(fp)
  812754:	00bffec4 	movi	r2,-5
  812758:	1884703a 	and	r2,r3,r2
  81275c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  812760:	e0fffe17 	ldw	r3,-8(fp)
  812764:	00bffdc4 	movi	r2,-9
  812768:	1884703a 	and	r2,r3,r2
  81276c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  812770:	e0bfff17 	ldw	r2,-4(fp)
  812774:	10800a17 	ldw	r2,40(r2)
  812778:	e0fffe17 	ldw	r3,-8(fp)
  81277c:	10c00035 	stwio	r3,0(r2)
}
  812780:	e037883a 	mov	sp,fp
  812784:	df000017 	ldw	fp,0(sp)
  812788:	dec00104 	addi	sp,sp,4
  81278c:	f800283a 	ret

00812790 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  812790:	defffb04 	addi	sp,sp,-20
  812794:	df000415 	stw	fp,16(sp)
  812798:	df000404 	addi	fp,sp,16
  81279c:	e13ffd15 	stw	r4,-12(fp)
  8127a0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8127a4:	e0bffd17 	ldw	r2,-12(fp)
  8127a8:	10800a17 	ldw	r2,40(r2)
  8127ac:	10800104 	addi	r2,r2,4
  8127b0:	10800037 	ldwio	r2,0(r2)
  8127b4:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8127b8:	e0bffe17 	ldw	r2,-8(fp)
  8127bc:	1004c03a 	cmpne	r2,r2,zero
  8127c0:	1000051e 	bne	r2,zero,8127d8 <alt_up_audio_read_fifo_avail+0x48>
  8127c4:	e0bffc17 	ldw	r2,-16(fp)
  8127c8:	10bfc00c 	andi	r2,r2,65280
  8127cc:	1004d23a 	srli	r2,r2,8
  8127d0:	e0bfff15 	stw	r2,-4(fp)
  8127d4:	00000306 	br	8127e4 <alt_up_audio_read_fifo_avail+0x54>
  8127d8:	e0bffc17 	ldw	r2,-16(fp)
  8127dc:	10803fcc 	andi	r2,r2,255
  8127e0:	e0bfff15 	stw	r2,-4(fp)
  8127e4:	e0bfff17 	ldw	r2,-4(fp)
  8127e8:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  8127ec:	e0bffc17 	ldw	r2,-16(fp)
}
  8127f0:	e037883a 	mov	sp,fp
  8127f4:	df000017 	ldw	fp,0(sp)
  8127f8:	dec00104 	addi	sp,sp,4
  8127fc:	f800283a 	ret

00812800 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  812800:	defff904 	addi	sp,sp,-28
  812804:	dfc00615 	stw	ra,24(sp)
  812808:	df000515 	stw	fp,20(sp)
  81280c:	df000504 	addi	fp,sp,20
  812810:	e13ffc15 	stw	r4,-16(fp)
  812814:	e17ffd15 	stw	r5,-12(fp)
  812818:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  81281c:	e13ffc17 	ldw	r4,-16(fp)
  812820:	01400044 	movi	r5,1
  812824:	08127900 	call	812790 <alt_up_audio_read_fifo_avail>
  812828:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  81282c:	e0bffb17 	ldw	r2,-20(fp)
  812830:	10801868 	cmpgeui	r2,r2,97
  812834:	1000021e 	bne	r2,zero,812840 <alt_up_audio_record_r+0x40>
		return 0;
  812838:	e03fff15 	stw	zero,-4(fp)
  81283c:	00000606 	br	812858 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  812840:	e13ffc17 	ldw	r4,-16(fp)
  812844:	e17ffd17 	ldw	r5,-12(fp)
  812848:	e1bffe17 	ldw	r6,-8(fp)
  81284c:	01c00044 	movi	r7,1
  812850:	0812a340 	call	812a34 <alt_up_audio_read_fifo>
  812854:	e0bfff15 	stw	r2,-4(fp)
  812858:	e0bfff17 	ldw	r2,-4(fp)
}
  81285c:	e037883a 	mov	sp,fp
  812860:	dfc00117 	ldw	ra,4(sp)
  812864:	df000017 	ldw	fp,0(sp)
  812868:	dec00204 	addi	sp,sp,8
  81286c:	f800283a 	ret

00812870 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  812870:	defff904 	addi	sp,sp,-28
  812874:	dfc00615 	stw	ra,24(sp)
  812878:	df000515 	stw	fp,20(sp)
  81287c:	df000504 	addi	fp,sp,20
  812880:	e13ffc15 	stw	r4,-16(fp)
  812884:	e17ffd15 	stw	r5,-12(fp)
  812888:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  81288c:	e13ffc17 	ldw	r4,-16(fp)
  812890:	000b883a 	mov	r5,zero
  812894:	08127900 	call	812790 <alt_up_audio_read_fifo_avail>
  812898:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  81289c:	e0bffb17 	ldw	r2,-20(fp)
  8128a0:	10801868 	cmpgeui	r2,r2,97
  8128a4:	1000021e 	bne	r2,zero,8128b0 <alt_up_audio_record_l+0x40>
		return 0;
  8128a8:	e03fff15 	stw	zero,-4(fp)
  8128ac:	00000606 	br	8128c8 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  8128b0:	e13ffc17 	ldw	r4,-16(fp)
  8128b4:	e17ffd17 	ldw	r5,-12(fp)
  8128b8:	e1bffe17 	ldw	r6,-8(fp)
  8128bc:	000f883a 	mov	r7,zero
  8128c0:	0812a340 	call	812a34 <alt_up_audio_read_fifo>
  8128c4:	e0bfff15 	stw	r2,-4(fp)
  8128c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8128cc:	e037883a 	mov	sp,fp
  8128d0:	dfc00117 	ldw	ra,4(sp)
  8128d4:	df000017 	ldw	fp,0(sp)
  8128d8:	dec00204 	addi	sp,sp,8
  8128dc:	f800283a 	ret

008128e0 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  8128e0:	defffb04 	addi	sp,sp,-20
  8128e4:	df000415 	stw	fp,16(sp)
  8128e8:	df000404 	addi	fp,sp,16
  8128ec:	e13ffd15 	stw	r4,-12(fp)
  8128f0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8128f4:	e0bffd17 	ldw	r2,-12(fp)
  8128f8:	10800a17 	ldw	r2,40(r2)
  8128fc:	10800104 	addi	r2,r2,4
  812900:	10800037 	ldwio	r2,0(r2)
  812904:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  812908:	e0bffe17 	ldw	r2,-8(fp)
  81290c:	1004c03a 	cmpne	r2,r2,zero
  812910:	1000051e 	bne	r2,zero,812928 <alt_up_audio_write_fifo_space+0x48>
  812914:	e0bffc17 	ldw	r2,-16(fp)
  812918:	10bfc02c 	andhi	r2,r2,65280
  81291c:	1004d63a 	srli	r2,r2,24
  812920:	e0bfff15 	stw	r2,-4(fp)
  812924:	00000406 	br	812938 <alt_up_audio_write_fifo_space+0x58>
  812928:	e0bffc17 	ldw	r2,-16(fp)
  81292c:	10803fec 	andhi	r2,r2,255
  812930:	1004d43a 	srli	r2,r2,16
  812934:	e0bfff15 	stw	r2,-4(fp)
  812938:	e0bfff17 	ldw	r2,-4(fp)
  81293c:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  812940:	e0bffc17 	ldw	r2,-16(fp)
}
  812944:	e037883a 	mov	sp,fp
  812948:	df000017 	ldw	fp,0(sp)
  81294c:	dec00104 	addi	sp,sp,4
  812950:	f800283a 	ret

00812954 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  812954:	defff904 	addi	sp,sp,-28
  812958:	dfc00615 	stw	ra,24(sp)
  81295c:	df000515 	stw	fp,20(sp)
  812960:	df000504 	addi	fp,sp,20
  812964:	e13ffc15 	stw	r4,-16(fp)
  812968:	e17ffd15 	stw	r5,-12(fp)
  81296c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  812970:	e13ffc17 	ldw	r4,-16(fp)
  812974:	01400044 	movi	r5,1
  812978:	08128e00 	call	8128e0 <alt_up_audio_write_fifo_space>
  81297c:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  812980:	e0bffb17 	ldw	r2,-20(fp)
  812984:	10801868 	cmpgeui	r2,r2,97
  812988:	1000021e 	bne	r2,zero,812994 <alt_up_audio_play_r+0x40>
		return 0;
  81298c:	e03fff15 	stw	zero,-4(fp)
  812990:	00000606 	br	8129ac <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  812994:	e13ffc17 	ldw	r4,-16(fp)
  812998:	e17ffd17 	ldw	r5,-12(fp)
  81299c:	e1bffe17 	ldw	r6,-8(fp)
  8129a0:	01c00044 	movi	r7,1
  8129a4:	0812b380 	call	812b38 <alt_up_audio_write_fifo>
  8129a8:	e0bfff15 	stw	r2,-4(fp)
  8129ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8129b0:	e037883a 	mov	sp,fp
  8129b4:	dfc00117 	ldw	ra,4(sp)
  8129b8:	df000017 	ldw	fp,0(sp)
  8129bc:	dec00204 	addi	sp,sp,8
  8129c0:	f800283a 	ret

008129c4 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8129c4:	defff904 	addi	sp,sp,-28
  8129c8:	dfc00615 	stw	ra,24(sp)
  8129cc:	df000515 	stw	fp,20(sp)
  8129d0:	df000504 	addi	fp,sp,20
  8129d4:	e13ffc15 	stw	r4,-16(fp)
  8129d8:	e17ffd15 	stw	r5,-12(fp)
  8129dc:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  8129e0:	e13ffc17 	ldw	r4,-16(fp)
  8129e4:	000b883a 	mov	r5,zero
  8129e8:	08128e00 	call	8128e0 <alt_up_audio_write_fifo_space>
  8129ec:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  8129f0:	e0bffb17 	ldw	r2,-20(fp)
  8129f4:	10801868 	cmpgeui	r2,r2,97
  8129f8:	1000021e 	bne	r2,zero,812a04 <alt_up_audio_play_l+0x40>
		return 0;
  8129fc:	e03fff15 	stw	zero,-4(fp)
  812a00:	00000606 	br	812a1c <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  812a04:	e13ffc17 	ldw	r4,-16(fp)
  812a08:	e17ffd17 	ldw	r5,-12(fp)
  812a0c:	e1bffe17 	ldw	r6,-8(fp)
  812a10:	000f883a 	mov	r7,zero
  812a14:	0812b380 	call	812b38 <alt_up_audio_write_fifo>
  812a18:	e0bfff15 	stw	r2,-4(fp)
  812a1c:	e0bfff17 	ldw	r2,-4(fp)
}
  812a20:	e037883a 	mov	sp,fp
  812a24:	dfc00117 	ldw	ra,4(sp)
  812a28:	df000017 	ldw	fp,0(sp)
  812a2c:	dec00204 	addi	sp,sp,8
  812a30:	f800283a 	ret

00812a34 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  812a34:	defff604 	addi	sp,sp,-40
  812a38:	df000915 	stw	fp,36(sp)
  812a3c:	df000904 	addi	fp,sp,36
  812a40:	e13ff915 	stw	r4,-28(fp)
  812a44:	e17ffa15 	stw	r5,-24(fp)
  812a48:	e1bffb15 	stw	r6,-20(fp)
  812a4c:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  812a50:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  812a54:	00003006 	br	812b18 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  812a58:	e0bff917 	ldw	r2,-28(fp)
  812a5c:	10800a17 	ldw	r2,40(r2)
  812a60:	10800104 	addi	r2,r2,4
  812a64:	10800037 	ldwio	r2,0(r2)
  812a68:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  812a6c:	e0bffc17 	ldw	r2,-16(fp)
  812a70:	1004c03a 	cmpne	r2,r2,zero
  812a74:	1000051e 	bne	r2,zero,812a8c <alt_up_audio_read_fifo+0x58>
  812a78:	e0bff817 	ldw	r2,-32(fp)
  812a7c:	10bfc00c 	andi	r2,r2,65280
  812a80:	1004d23a 	srli	r2,r2,8
  812a84:	e0bfff15 	stw	r2,-4(fp)
  812a88:	00000306 	br	812a98 <alt_up_audio_read_fifo+0x64>
  812a8c:	e0bff817 	ldw	r2,-32(fp)
  812a90:	10803fcc 	andi	r2,r2,255
  812a94:	e0bfff15 	stw	r2,-4(fp)
  812a98:	e0bfff17 	ldw	r2,-4(fp)
  812a9c:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  812aa0:	e0bff817 	ldw	r2,-32(fp)
  812aa4:	1005003a 	cmpeq	r2,r2,zero
  812aa8:	10001e1e 	bne	r2,zero,812b24 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  812aac:	e0bff717 	ldw	r2,-36(fp)
  812ab0:	1085883a 	add	r2,r2,r2
  812ab4:	1085883a 	add	r2,r2,r2
  812ab8:	1007883a 	mov	r3,r2
  812abc:	e0bffa17 	ldw	r2,-24(fp)
  812ac0:	1887883a 	add	r3,r3,r2
  812ac4:	e0fffe15 	stw	r3,-8(fp)
  812ac8:	e0bffc17 	ldw	r2,-16(fp)
  812acc:	1004c03a 	cmpne	r2,r2,zero
  812ad0:	1000061e 	bne	r2,zero,812aec <alt_up_audio_read_fifo+0xb8>
  812ad4:	e0bff917 	ldw	r2,-28(fp)
  812ad8:	10800a17 	ldw	r2,40(r2)
  812adc:	10800204 	addi	r2,r2,8
  812ae0:	10800037 	ldwio	r2,0(r2)
  812ae4:	e0bffd15 	stw	r2,-12(fp)
  812ae8:	00000506 	br	812b00 <alt_up_audio_read_fifo+0xcc>
  812aec:	e0bff917 	ldw	r2,-28(fp)
  812af0:	10800a17 	ldw	r2,40(r2)
  812af4:	10800304 	addi	r2,r2,12
  812af8:	10800037 	ldwio	r2,0(r2)
  812afc:	e0bffd15 	stw	r2,-12(fp)
  812b00:	e0fffd17 	ldw	r3,-12(fp)
  812b04:	e0bffe17 	ldw	r2,-8(fp)
  812b08:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  812b0c:	e0bff717 	ldw	r2,-36(fp)
  812b10:	10800044 	addi	r2,r2,1
  812b14:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  812b18:	e0fff717 	ldw	r3,-36(fp)
  812b1c:	e0bffb17 	ldw	r2,-20(fp)
  812b20:	18bfcd16 	blt	r3,r2,812a58 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  812b24:	e0bff717 	ldw	r2,-36(fp)
}
  812b28:	e037883a 	mov	sp,fp
  812b2c:	df000017 	ldw	fp,0(sp)
  812b30:	dec00104 	addi	sp,sp,4
  812b34:	f800283a 	ret

00812b38 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  812b38:	defff804 	addi	sp,sp,-32
  812b3c:	df000715 	stw	fp,28(sp)
  812b40:	df000704 	addi	fp,sp,28
  812b44:	e13ffb15 	stw	r4,-20(fp)
  812b48:	e17ffc15 	stw	r5,-16(fp)
  812b4c:	e1bffd15 	stw	r6,-12(fp)
  812b50:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  812b54:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  812b58:	00003a06 	br	812c44 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  812b5c:	e0bffb17 	ldw	r2,-20(fp)
  812b60:	10800a17 	ldw	r2,40(r2)
  812b64:	10800104 	addi	r2,r2,4
  812b68:	10800037 	ldwio	r2,0(r2)
  812b6c:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  812b70:	e0bffe17 	ldw	r2,-8(fp)
  812b74:	1004c03a 	cmpne	r2,r2,zero
  812b78:	1000051e 	bne	r2,zero,812b90 <alt_up_audio_write_fifo+0x58>
  812b7c:	e0bffa17 	ldw	r2,-24(fp)
  812b80:	10bfc02c 	andhi	r2,r2,65280
  812b84:	1004d63a 	srli	r2,r2,24
  812b88:	e0bfff15 	stw	r2,-4(fp)
  812b8c:	00000406 	br	812ba0 <alt_up_audio_write_fifo+0x68>
  812b90:	e0bffa17 	ldw	r2,-24(fp)
  812b94:	10803fec 	andhi	r2,r2,255
  812b98:	1004d43a 	srli	r2,r2,16
  812b9c:	e0bfff15 	stw	r2,-4(fp)
  812ba0:	e0bfff17 	ldw	r2,-4(fp)
  812ba4:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  812ba8:	e0bffa17 	ldw	r2,-24(fp)
  812bac:	1005003a 	cmpeq	r2,r2,zero
  812bb0:	1000271e 	bne	r2,zero,812c50 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  812bb4:	e0bffe17 	ldw	r2,-8(fp)
  812bb8:	1004c03a 	cmpne	r2,r2,zero
  812bbc:	1000111e 	bne	r2,zero,812c04 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  812bc0:	e0bffb17 	ldw	r2,-20(fp)
  812bc4:	10800a17 	ldw	r2,40(r2)
  812bc8:	11000204 	addi	r4,r2,8
  812bcc:	e0bff917 	ldw	r2,-28(fp)
  812bd0:	1085883a 	add	r2,r2,r2
  812bd4:	1085883a 	add	r2,r2,r2
  812bd8:	1007883a 	mov	r3,r2
  812bdc:	e0bffc17 	ldw	r2,-16(fp)
  812be0:	1885883a 	add	r2,r3,r2
  812be4:	10800017 	ldw	r2,0(r2)
  812be8:	1007883a 	mov	r3,r2
  812bec:	e0bff917 	ldw	r2,-28(fp)
  812bf0:	10800044 	addi	r2,r2,1
  812bf4:	e0bff915 	stw	r2,-28(fp)
  812bf8:	2005883a 	mov	r2,r4
  812bfc:	10c00035 	stwio	r3,0(r2)
  812c00:	00001006 	br	812c44 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  812c04:	e0bffb17 	ldw	r2,-20(fp)
  812c08:	10800a17 	ldw	r2,40(r2)
  812c0c:	11000304 	addi	r4,r2,12
  812c10:	e0bff917 	ldw	r2,-28(fp)
  812c14:	1085883a 	add	r2,r2,r2
  812c18:	1085883a 	add	r2,r2,r2
  812c1c:	1007883a 	mov	r3,r2
  812c20:	e0bffc17 	ldw	r2,-16(fp)
  812c24:	1885883a 	add	r2,r3,r2
  812c28:	10800017 	ldw	r2,0(r2)
  812c2c:	1007883a 	mov	r3,r2
  812c30:	e0bff917 	ldw	r2,-28(fp)
  812c34:	10800044 	addi	r2,r2,1
  812c38:	e0bff915 	stw	r2,-28(fp)
  812c3c:	2005883a 	mov	r2,r4
  812c40:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  812c44:	e0fff917 	ldw	r3,-28(fp)
  812c48:	e0bffd17 	ldw	r2,-12(fp)
  812c4c:	18bfc316 	blt	r3,r2,812b5c <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  812c50:	e0bff917 	ldw	r2,-28(fp)
}
  812c54:	e037883a 	mov	sp,fp
  812c58:	df000017 	ldw	fp,0(sp)
  812c5c:	dec00104 	addi	sp,sp,4
  812c60:	f800283a 	ret

00812c64 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  812c64:	defffc04 	addi	sp,sp,-16
  812c68:	df000315 	stw	fp,12(sp)
  812c6c:	df000304 	addi	fp,sp,12
  812c70:	e13ffd15 	stw	r4,-12(fp)
  812c74:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  812c78:	e0bffe17 	ldw	r2,-8(fp)
  812c7c:	1004c03a 	cmpne	r2,r2,zero
  812c80:	1000061e 	bne	r2,zero,812c9c <alt_up_audio_read_fifo_head+0x38>
  812c84:	e0bffd17 	ldw	r2,-12(fp)
  812c88:	10800a17 	ldw	r2,40(r2)
  812c8c:	10800204 	addi	r2,r2,8
  812c90:	10800037 	ldwio	r2,0(r2)
  812c94:	e0bfff15 	stw	r2,-4(fp)
  812c98:	00000506 	br	812cb0 <alt_up_audio_read_fifo_head+0x4c>
  812c9c:	e0bffd17 	ldw	r2,-12(fp)
  812ca0:	10800a17 	ldw	r2,40(r2)
  812ca4:	10800304 	addi	r2,r2,12
  812ca8:	10800037 	ldwio	r2,0(r2)
  812cac:	e0bfff15 	stw	r2,-4(fp)
  812cb0:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  812cb4:	e037883a 	mov	sp,fp
  812cb8:	df000017 	ldw	fp,0(sp)
  812cbc:	dec00104 	addi	sp,sp,4
  812cc0:	f800283a 	ret

00812cc4 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  812cc4:	defffc04 	addi	sp,sp,-16
  812cc8:	df000315 	stw	fp,12(sp)
  812ccc:	df000304 	addi	fp,sp,12
  812cd0:	e13ffd15 	stw	r4,-12(fp)
  812cd4:	e17ffe15 	stw	r5,-8(fp)
  812cd8:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  812cdc:	e0bfff17 	ldw	r2,-4(fp)
  812ce0:	1004c03a 	cmpne	r2,r2,zero
  812ce4:	1000061e 	bne	r2,zero,812d00 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  812ce8:	e0bffd17 	ldw	r2,-12(fp)
  812cec:	10800a17 	ldw	r2,40(r2)
  812cf0:	10800204 	addi	r2,r2,8
  812cf4:	e0fffe17 	ldw	r3,-8(fp)
  812cf8:	10c00035 	stwio	r3,0(r2)
  812cfc:	00000506 	br	812d14 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  812d00:	e0bffd17 	ldw	r2,-12(fp)
  812d04:	10800a17 	ldw	r2,40(r2)
  812d08:	10800304 	addi	r2,r2,12
  812d0c:	e0fffe17 	ldw	r3,-8(fp)
  812d10:	10c00035 	stwio	r3,0(r2)
}
  812d14:	e037883a 	mov	sp,fp
  812d18:	df000017 	ldw	fp,0(sp)
  812d1c:	dec00104 	addi	sp,sp,4
  812d20:	f800283a 	ret

00812d24 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  812d24:	defffc04 	addi	sp,sp,-16
  812d28:	dfc00315 	stw	ra,12(sp)
  812d2c:	df000215 	stw	fp,8(sp)
  812d30:	df000204 	addi	fp,sp,8
  812d34:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  812d38:	e13fff17 	ldw	r4,-4(fp)
  812d3c:	01402074 	movhi	r5,129
  812d40:	295bed04 	addi	r5,r5,28596
  812d44:	0813d0c0 	call	813d0c <alt_find_dev>
  812d48:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  812d4c:	e0bffe17 	ldw	r2,-8(fp)
  812d50:	10800a17 	ldw	r2,40(r2)
  812d54:	10800104 	addi	r2,r2,4
  812d58:	10800037 	ldwio	r2,0(r2)
  812d5c:	10803fec 	andhi	r2,r2,255
  812d60:	1005d43a 	srai	r2,r2,16
  812d64:	1007883a 	mov	r3,r2
  812d68:	e0bffe17 	ldw	r2,-8(fp)
  812d6c:	10c00b15 	stw	r3,44(r2)

  return dev;
  812d70:	e0bffe17 	ldw	r2,-8(fp)
}
  812d74:	e037883a 	mov	sp,fp
  812d78:	dfc00117 	ldw	ra,4(sp)
  812d7c:	df000017 	ldw	fp,0(sp)
  812d80:	dec00204 	addi	sp,sp,8
  812d84:	f800283a 	ret

00812d88 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  812d88:	defffc04 	addi	sp,sp,-16
  812d8c:	df000315 	stw	fp,12(sp)
  812d90:	df000304 	addi	fp,sp,12
  812d94:	e13ffd15 	stw	r4,-12(fp)
  812d98:	e17ffe15 	stw	r5,-8(fp)
  812d9c:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  812da0:	e0bffd17 	ldw	r2,-12(fp)
  812da4:	10800a17 	ldw	r2,40(r2)
  812da8:	11000204 	addi	r4,r2,8
  812dac:	e0bffe17 	ldw	r2,-8(fp)
  812db0:	10c03fcc 	andi	r3,r2,255
  812db4:	2005883a 	mov	r2,r4
  812db8:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  812dbc:	e0bffd17 	ldw	r2,-12(fp)
  812dc0:	10800a17 	ldw	r2,40(r2)
  812dc4:	11000304 	addi	r4,r2,12
  812dc8:	e0bfff17 	ldw	r2,-4(fp)
  812dcc:	10ffffcc 	andi	r3,r2,65535
  812dd0:	2005883a 	mov	r2,r4
  812dd4:	10c00035 	stwio	r3,0(r2)

	return 0;
  812dd8:	0005883a 	mov	r2,zero
}
  812ddc:	e037883a 	mov	sp,fp
  812de0:	df000017 	ldw	fp,0(sp)
  812de4:	dec00104 	addi	sp,sp,4
  812de8:	f800283a 	ret

00812dec <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  812dec:	defffa04 	addi	sp,sp,-24
  812df0:	dfc00515 	stw	ra,20(sp)
  812df4:	df000415 	stw	fp,16(sp)
  812df8:	df000404 	addi	fp,sp,16
  812dfc:	e13ffc15 	stw	r4,-16(fp)
  812e00:	e17ffd15 	stw	r5,-12(fp)
  812e04:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  812e08:	e0bffc17 	ldw	r2,-16(fp)
  812e0c:	10800a17 	ldw	r2,40(r2)
  812e10:	11000204 	addi	r4,r2,8
  812e14:	e0bffd17 	ldw	r2,-12(fp)
  812e18:	10c03fcc 	andi	r3,r2,255
  812e1c:	2005883a 	mov	r2,r4
  812e20:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  812e24:	e0bffc17 	ldw	r2,-16(fp)
  812e28:	10800a17 	ldw	r2,40(r2)
  812e2c:	10800304 	addi	r2,r2,12
  812e30:	10800037 	ldwio	r2,0(r2)
  812e34:	1007883a 	mov	r3,r2
  812e38:	e0bffe17 	ldw	r2,-8(fp)
  812e3c:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  812e40:	e13ffc17 	ldw	r4,-16(fp)
  812e44:	0812f180 	call	812f18 <alt_up_av_config_read_acknowledge>
  812e48:	1005003a 	cmpeq	r2,r2,zero
  812e4c:	1000031e 	bne	r2,zero,812e5c <alt_up_av_config_read_data+0x70>
		return -1;
  812e50:	00bfffc4 	movi	r2,-1
  812e54:	e0bfff15 	stw	r2,-4(fp)
  812e58:	00000106 	br	812e60 <alt_up_av_config_read_data+0x74>

	return 0;
  812e5c:	e03fff15 	stw	zero,-4(fp)
  812e60:	e0bfff17 	ldw	r2,-4(fp)
}
  812e64:	e037883a 	mov	sp,fp
  812e68:	dfc00117 	ldw	ra,4(sp)
  812e6c:	df000017 	ldw	fp,0(sp)
  812e70:	dec00204 	addi	sp,sp,8
  812e74:	f800283a 	ret

00812e78 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  812e78:	defffe04 	addi	sp,sp,-8
  812e7c:	df000115 	stw	fp,4(sp)
  812e80:	df000104 	addi	fp,sp,4
  812e84:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  812e88:	e0bfff17 	ldw	r2,-4(fp)
  812e8c:	10800a17 	ldw	r2,40(r2)
  812e90:	1007883a 	mov	r3,r2
  812e94:	00800044 	movi	r2,1
  812e98:	18800025 	stbio	r2,0(r3)
	return 0;
  812e9c:	0005883a 	mov	r2,zero
}
  812ea0:	e037883a 	mov	sp,fp
  812ea4:	df000017 	ldw	fp,0(sp)
  812ea8:	dec00104 	addi	sp,sp,4
  812eac:	f800283a 	ret

00812eb0 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  812eb0:	defffe04 	addi	sp,sp,-8
  812eb4:	df000115 	stw	fp,4(sp)
  812eb8:	df000104 	addi	fp,sp,4
  812ebc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  812ec0:	e0bfff17 	ldw	r2,-4(fp)
  812ec4:	10800a17 	ldw	r2,40(r2)
  812ec8:	1007883a 	mov	r3,r2
  812ecc:	00800084 	movi	r2,2
  812ed0:	18800025 	stbio	r2,0(r3)
	return 0;
  812ed4:	0005883a 	mov	r2,zero
}
  812ed8:	e037883a 	mov	sp,fp
  812edc:	df000017 	ldw	fp,0(sp)
  812ee0:	dec00104 	addi	sp,sp,4
  812ee4:	f800283a 	ret

00812ee8 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  812ee8:	defffe04 	addi	sp,sp,-8
  812eec:	df000115 	stw	fp,4(sp)
  812ef0:	df000104 	addi	fp,sp,4
  812ef4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  812ef8:	e0bfff17 	ldw	r2,-4(fp)
  812efc:	10800a17 	ldw	r2,40(r2)
  812f00:	10000025 	stbio	zero,0(r2)
	return 0;
  812f04:	0005883a 	mov	r2,zero
}
  812f08:	e037883a 	mov	sp,fp
  812f0c:	df000017 	ldw	fp,0(sp)
  812f10:	dec00104 	addi	sp,sp,4
  812f14:	f800283a 	ret

00812f18 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  812f18:	defffd04 	addi	sp,sp,-12
  812f1c:	df000215 	stw	fp,8(sp)
  812f20:	df000204 	addi	fp,sp,8
  812f24:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  812f28:	e0bffe17 	ldw	r2,-8(fp)
  812f2c:	10800a17 	ldw	r2,40(r2)
  812f30:	10800104 	addi	r2,r2,4
  812f34:	10800037 	ldwio	r2,0(r2)
  812f38:	1080008c 	andi	r2,r2,2
  812f3c:	1005d07a 	srai	r2,r2,1
  812f40:	1005003a 	cmpeq	r2,r2,zero
  812f44:	1000071e 	bne	r2,zero,812f64 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  812f48:	e0bffe17 	ldw	r2,-8(fp)
  812f4c:	10800a17 	ldw	r2,40(r2)
  812f50:	10800104 	addi	r2,r2,4
  812f54:	10800037 	ldwio	r2,0(r2)
  812f58:	1080004c 	andi	r2,r2,1
  812f5c:	e0bfff15 	stw	r2,-4(fp)
  812f60:	00000206 	br	812f6c <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  812f64:	00bfffc4 	movi	r2,-1
  812f68:	e0bfff15 	stw	r2,-4(fp)
  812f6c:	e0bfff17 	ldw	r2,-4(fp)
}
  812f70:	e037883a 	mov	sp,fp
  812f74:	df000017 	ldw	fp,0(sp)
  812f78:	dec00104 	addi	sp,sp,4
  812f7c:	f800283a 	ret

00812f80 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  812f80:	defffe04 	addi	sp,sp,-8
  812f84:	df000115 	stw	fp,4(sp)
  812f88:	df000104 	addi	fp,sp,4
  812f8c:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  812f90:	e0bfff17 	ldw	r2,-4(fp)
  812f94:	10800a17 	ldw	r2,40(r2)
  812f98:	10800104 	addi	r2,r2,4
  812f9c:	10800037 	ldwio	r2,0(r2)
  812fa0:	1080008c 	andi	r2,r2,2
  812fa4:	1005d07a 	srai	r2,r2,1
}
  812fa8:	e037883a 	mov	sp,fp
  812fac:	df000017 	ldw	fp,0(sp)
  812fb0:	dec00104 	addi	sp,sp,4
  812fb4:	f800283a 	ret

00812fb8 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  812fb8:	defff904 	addi	sp,sp,-28
  812fbc:	dfc00615 	stw	ra,24(sp)
  812fc0:	df000515 	stw	fp,20(sp)
  812fc4:	df000504 	addi	fp,sp,20
  812fc8:	e13ffc15 	stw	r4,-16(fp)
  812fcc:	e17ffd15 	stw	r5,-12(fp)
  812fd0:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  812fd4:	e0bffc17 	ldw	r2,-16(fp)
  812fd8:	10800b17 	ldw	r2,44(r2)
  812fdc:	10800060 	cmpeqi	r2,r2,1
  812fe0:	10000f1e 	bne	r2,zero,813020 <alt_up_av_config_write_audio_cfg_register+0x68>
  812fe4:	e0bffc17 	ldw	r2,-16(fp)
  812fe8:	10800b17 	ldw	r2,44(r2)
  812fec:	108000a0 	cmpeqi	r2,r2,2
  812ff0:	10000b1e 	bne	r2,zero,813020 <alt_up_av_config_write_audio_cfg_register+0x68>
  812ff4:	e0bffc17 	ldw	r2,-16(fp)
  812ff8:	10800b17 	ldw	r2,44(r2)
  812ffc:	108000e0 	cmpeqi	r2,r2,3
  813000:	1000071e 	bne	r2,zero,813020 <alt_up_av_config_write_audio_cfg_register+0x68>
  813004:	e0bffc17 	ldw	r2,-16(fp)
  813008:	10800b17 	ldw	r2,44(r2)
  81300c:	10800120 	cmpeqi	r2,r2,4
  813010:	1000031e 	bne	r2,zero,813020 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  813014:	00bffa84 	movi	r2,-22
  813018:	e0bfff15 	stw	r2,-4(fp)
  81301c:	00000b06 	br	81304c <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  813020:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  813024:	e0bffc17 	ldw	r2,-16(fp)
  813028:	10800a17 	ldw	r2,40(r2)
  81302c:	10800084 	addi	r2,r2,2
  813030:	e0fffb17 	ldw	r3,-20(fp)
  813034:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  813038:	e13ffc17 	ldw	r4,-16(fp)
  81303c:	e17ffd17 	ldw	r5,-12(fp)
  813040:	e1bffe17 	ldw	r6,-8(fp)
  813044:	0812d880 	call	812d88 <alt_up_av_config_write_data>
  813048:	e0bfff15 	stw	r2,-4(fp)
  81304c:	e0bfff17 	ldw	r2,-4(fp)
}
  813050:	e037883a 	mov	sp,fp
  813054:	dfc00117 	ldw	ra,4(sp)
  813058:	df000017 	ldw	fp,0(sp)
  81305c:	dec00204 	addi	sp,sp,8
  813060:	f800283a 	ret

00813064 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  813064:	defff904 	addi	sp,sp,-28
  813068:	dfc00615 	stw	ra,24(sp)
  81306c:	df000515 	stw	fp,20(sp)
  813070:	df000504 	addi	fp,sp,20
  813074:	e13ffb15 	stw	r4,-20(fp)
  813078:	e17ffc15 	stw	r5,-16(fp)
  81307c:	e1bffd15 	stw	r6,-12(fp)
  813080:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  813084:	e0bffb17 	ldw	r2,-20(fp)
  813088:	10800b17 	ldw	r2,44(r2)
  81308c:	108000a0 	cmpeqi	r2,r2,2
  813090:	10000b1e 	bne	r2,zero,8130c0 <alt_up_av_config_read_video_cfg_register+0x5c>
  813094:	e0bffb17 	ldw	r2,-20(fp)
  813098:	10800b17 	ldw	r2,44(r2)
  81309c:	108000e0 	cmpeqi	r2,r2,3
  8130a0:	1000071e 	bne	r2,zero,8130c0 <alt_up_av_config_read_video_cfg_register+0x5c>
  8130a4:	e0bffb17 	ldw	r2,-20(fp)
  8130a8:	10800b17 	ldw	r2,44(r2)
  8130ac:	10800120 	cmpeqi	r2,r2,4
  8130b0:	1000031e 	bne	r2,zero,8130c0 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  8130b4:	00bffa84 	movi	r2,-22
  8130b8:	e0bfff15 	stw	r2,-4(fp)
  8130bc:	00002106 	br	813144 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  8130c0:	e0bffb17 	ldw	r2,-20(fp)
  8130c4:	10800b17 	ldw	r2,44(r2)
  8130c8:	108000a0 	cmpeqi	r2,r2,2
  8130cc:	1000041e 	bne	r2,zero,8130e0 <alt_up_av_config_read_video_cfg_register+0x7c>
  8130d0:	e0bffb17 	ldw	r2,-20(fp)
  8130d4:	10800b17 	ldw	r2,44(r2)
  8130d8:	10800118 	cmpnei	r2,r2,4
  8130dc:	1000061e 	bne	r2,zero,8130f8 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8130e0:	e0bffe17 	ldw	r2,-8(fp)
  8130e4:	10800060 	cmpeqi	r2,r2,1
  8130e8:	10000c1e 	bne	r2,zero,81311c <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  8130ec:	00bffa84 	movi	r2,-22
  8130f0:	e0bfff15 	stw	r2,-4(fp)
  8130f4:	00001306 	br	813144 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8130f8:	e0bffe17 	ldw	r2,-8(fp)
  8130fc:	10800060 	cmpeqi	r2,r2,1
  813100:	1000061e 	bne	r2,zero,81311c <alt_up_av_config_read_video_cfg_register+0xb8>
  813104:	e0bffe17 	ldw	r2,-8(fp)
  813108:	108000a0 	cmpeqi	r2,r2,2
  81310c:	1000031e 	bne	r2,zero,81311c <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  813110:	00bffa84 	movi	r2,-22
  813114:	e0bfff15 	stw	r2,-4(fp)
  813118:	00000a06 	br	813144 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  81311c:	e0bffb17 	ldw	r2,-20(fp)
  813120:	10800a17 	ldw	r2,40(r2)
  813124:	10800084 	addi	r2,r2,2
  813128:	e0fffe17 	ldw	r3,-8(fp)
  81312c:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  813130:	e13ffb17 	ldw	r4,-20(fp)
  813134:	e17ffc17 	ldw	r5,-16(fp)
  813138:	e1bffd17 	ldw	r6,-12(fp)
  81313c:	0812dec0 	call	812dec <alt_up_av_config_read_data>
  813140:	e0bfff15 	stw	r2,-4(fp)
  813144:	e0bfff17 	ldw	r2,-4(fp)
}
  813148:	e037883a 	mov	sp,fp
  81314c:	dfc00117 	ldw	ra,4(sp)
  813150:	df000017 	ldw	fp,0(sp)
  813154:	dec00204 	addi	sp,sp,8
  813158:	f800283a 	ret

0081315c <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  81315c:	defff904 	addi	sp,sp,-28
  813160:	dfc00615 	stw	ra,24(sp)
  813164:	df000515 	stw	fp,20(sp)
  813168:	df000504 	addi	fp,sp,20
  81316c:	e13ffb15 	stw	r4,-20(fp)
  813170:	e17ffc15 	stw	r5,-16(fp)
  813174:	e1bffd15 	stw	r6,-12(fp)
  813178:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  81317c:	e0bffb17 	ldw	r2,-20(fp)
  813180:	10800b17 	ldw	r2,44(r2)
  813184:	108000a0 	cmpeqi	r2,r2,2
  813188:	10000b1e 	bne	r2,zero,8131b8 <alt_up_av_config_write_video_cfg_register+0x5c>
  81318c:	e0bffb17 	ldw	r2,-20(fp)
  813190:	10800b17 	ldw	r2,44(r2)
  813194:	108000e0 	cmpeqi	r2,r2,3
  813198:	1000071e 	bne	r2,zero,8131b8 <alt_up_av_config_write_video_cfg_register+0x5c>
  81319c:	e0bffb17 	ldw	r2,-20(fp)
  8131a0:	10800b17 	ldw	r2,44(r2)
  8131a4:	10800120 	cmpeqi	r2,r2,4
  8131a8:	1000031e 	bne	r2,zero,8131b8 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  8131ac:	00bffa84 	movi	r2,-22
  8131b0:	e0bfff15 	stw	r2,-4(fp)
  8131b4:	00002106 	br	81323c <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  8131b8:	e0bffb17 	ldw	r2,-20(fp)
  8131bc:	10800b17 	ldw	r2,44(r2)
  8131c0:	108000a0 	cmpeqi	r2,r2,2
  8131c4:	1000041e 	bne	r2,zero,8131d8 <alt_up_av_config_write_video_cfg_register+0x7c>
  8131c8:	e0bffb17 	ldw	r2,-20(fp)
  8131cc:	10800b17 	ldw	r2,44(r2)
  8131d0:	10800118 	cmpnei	r2,r2,4
  8131d4:	1000061e 	bne	r2,zero,8131f0 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8131d8:	e0bffe17 	ldw	r2,-8(fp)
  8131dc:	10800060 	cmpeqi	r2,r2,1
  8131e0:	10000c1e 	bne	r2,zero,813214 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  8131e4:	00bffa84 	movi	r2,-22
  8131e8:	e0bfff15 	stw	r2,-4(fp)
  8131ec:	00001306 	br	81323c <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8131f0:	e0bffe17 	ldw	r2,-8(fp)
  8131f4:	10800060 	cmpeqi	r2,r2,1
  8131f8:	1000061e 	bne	r2,zero,813214 <alt_up_av_config_write_video_cfg_register+0xb8>
  8131fc:	e0bffe17 	ldw	r2,-8(fp)
  813200:	108000a0 	cmpeqi	r2,r2,2
  813204:	1000031e 	bne	r2,zero,813214 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  813208:	00bffa84 	movi	r2,-22
  81320c:	e0bfff15 	stw	r2,-4(fp)
  813210:	00000a06 	br	81323c <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  813214:	e0bffb17 	ldw	r2,-20(fp)
  813218:	10800a17 	ldw	r2,40(r2)
  81321c:	10800084 	addi	r2,r2,2
  813220:	e0fffe17 	ldw	r3,-8(fp)
  813224:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  813228:	e13ffb17 	ldw	r4,-20(fp)
  81322c:	e17ffc17 	ldw	r5,-16(fp)
  813230:	e1bffd17 	ldw	r6,-12(fp)
  813234:	0812d880 	call	812d88 <alt_up_av_config_write_data>
  813238:	e0bfff15 	stw	r2,-4(fp)
  81323c:	e0bfff17 	ldw	r2,-4(fp)
}
  813240:	e037883a 	mov	sp,fp
  813244:	dfc00117 	ldw	ra,4(sp)
  813248:	df000017 	ldw	fp,0(sp)
  81324c:	dec00204 	addi	sp,sp,8
  813250:	f800283a 	ret

00813254 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  813254:	defffa04 	addi	sp,sp,-24
  813258:	dfc00515 	stw	ra,20(sp)
  81325c:	df000415 	stw	fp,16(sp)
  813260:	df000404 	addi	fp,sp,16
  813264:	e13ffc15 	stw	r4,-16(fp)
  813268:	e17ffd15 	stw	r5,-12(fp)
  81326c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  813270:	e0bffc17 	ldw	r2,-16(fp)
  813274:	10800b17 	ldw	r2,44(r2)
  813278:	10800220 	cmpeqi	r2,r2,8
  81327c:	1000031e 	bne	r2,zero,81328c <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  813280:	00bffa84 	movi	r2,-22
  813284:	e0bfff15 	stw	r2,-4(fp)
  813288:	00000506 	br	8132a0 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  81328c:	e13ffc17 	ldw	r4,-16(fp)
  813290:	e17ffd17 	ldw	r5,-12(fp)
  813294:	e1bffe17 	ldw	r6,-8(fp)
  813298:	0812dec0 	call	812dec <alt_up_av_config_read_data>
  81329c:	e0bfff15 	stw	r2,-4(fp)
  8132a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8132a4:	e037883a 	mov	sp,fp
  8132a8:	dfc00117 	ldw	ra,4(sp)
  8132ac:	df000017 	ldw	fp,0(sp)
  8132b0:	dec00204 	addi	sp,sp,8
  8132b4:	f800283a 	ret

008132b8 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8132b8:	defffa04 	addi	sp,sp,-24
  8132bc:	dfc00515 	stw	ra,20(sp)
  8132c0:	df000415 	stw	fp,16(sp)
  8132c4:	df000404 	addi	fp,sp,16
  8132c8:	e13ffc15 	stw	r4,-16(fp)
  8132cc:	e17ffd15 	stw	r5,-12(fp)
  8132d0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  8132d4:	e0bffc17 	ldw	r2,-16(fp)
  8132d8:	10800b17 	ldw	r2,44(r2)
  8132dc:	10800220 	cmpeqi	r2,r2,8
  8132e0:	1000031e 	bne	r2,zero,8132f0 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  8132e4:	00bffa84 	movi	r2,-22
  8132e8:	e0bfff15 	stw	r2,-4(fp)
  8132ec:	00000506 	br	813304 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  8132f0:	e13ffc17 	ldw	r4,-16(fp)
  8132f4:	e17ffd17 	ldw	r5,-12(fp)
  8132f8:	e1bffe17 	ldw	r6,-8(fp)
  8132fc:	0812d880 	call	812d88 <alt_up_av_config_write_data>
  813300:	e0bfff15 	stw	r2,-4(fp)
  813304:	e0bfff17 	ldw	r2,-4(fp)
}
  813308:	e037883a 	mov	sp,fp
  81330c:	dfc00117 	ldw	ra,4(sp)
  813310:	df000017 	ldw	fp,0(sp)
  813314:	dec00204 	addi	sp,sp,8
  813318:	f800283a 	ret

0081331c <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  81331c:	defffa04 	addi	sp,sp,-24
  813320:	dfc00515 	stw	ra,20(sp)
  813324:	df000415 	stw	fp,16(sp)
  813328:	df000404 	addi	fp,sp,16
  81332c:	e13ffc15 	stw	r4,-16(fp)
  813330:	e17ffd15 	stw	r5,-12(fp)
  813334:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  813338:	e0bffc17 	ldw	r2,-16(fp)
  81333c:	10800b17 	ldw	r2,44(r2)
  813340:	10800260 	cmpeqi	r2,r2,9
  813344:	1000031e 	bne	r2,zero,813354 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  813348:	00bffa84 	movi	r2,-22
  81334c:	e0bfff15 	stw	r2,-4(fp)
  813350:	00000506 	br	813368 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  813354:	e13ffc17 	ldw	r4,-16(fp)
  813358:	e17ffd17 	ldw	r5,-12(fp)
  81335c:	e1bffe17 	ldw	r6,-8(fp)
  813360:	0812dec0 	call	812dec <alt_up_av_config_read_data>
  813364:	e0bfff15 	stw	r2,-4(fp)
  813368:	e0bfff17 	ldw	r2,-4(fp)
}
  81336c:	e037883a 	mov	sp,fp
  813370:	dfc00117 	ldw	ra,4(sp)
  813374:	df000017 	ldw	fp,0(sp)
  813378:	dec00204 	addi	sp,sp,8
  81337c:	f800283a 	ret

00813380 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  813380:	defffa04 	addi	sp,sp,-24
  813384:	dfc00515 	stw	ra,20(sp)
  813388:	df000415 	stw	fp,16(sp)
  81338c:	df000404 	addi	fp,sp,16
  813390:	e13ffc15 	stw	r4,-16(fp)
  813394:	e17ffd15 	stw	r5,-12(fp)
  813398:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  81339c:	e0bffc17 	ldw	r2,-16(fp)
  8133a0:	10800b17 	ldw	r2,44(r2)
  8133a4:	10800260 	cmpeqi	r2,r2,9
  8133a8:	1000031e 	bne	r2,zero,8133b8 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  8133ac:	00bffa84 	movi	r2,-22
  8133b0:	e0bfff15 	stw	r2,-4(fp)
  8133b4:	00000506 	br	8133cc <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  8133b8:	e13ffc17 	ldw	r4,-16(fp)
  8133bc:	e17ffd17 	ldw	r5,-12(fp)
  8133c0:	e1bffe17 	ldw	r6,-8(fp)
  8133c4:	0812d880 	call	812d88 <alt_up_av_config_write_data>
  8133c8:	e0bfff15 	stw	r2,-4(fp)
  8133cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8133d0:	e037883a 	mov	sp,fp
  8133d4:	dfc00117 	ldw	ra,4(sp)
  8133d8:	df000017 	ldw	fp,0(sp)
  8133dc:	dec00204 	addi	sp,sp,8
  8133e0:	f800283a 	ret

008133e4 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8133e4:	defffa04 	addi	sp,sp,-24
  8133e8:	dfc00515 	stw	ra,20(sp)
  8133ec:	df000415 	stw	fp,16(sp)
  8133f0:	df000404 	addi	fp,sp,16
  8133f4:	e13ffc15 	stw	r4,-16(fp)
  8133f8:	e17ffd15 	stw	r5,-12(fp)
  8133fc:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  813400:	e0bffc17 	ldw	r2,-16(fp)
  813404:	10800b17 	ldw	r2,44(r2)
  813408:	108002a0 	cmpeqi	r2,r2,10
  81340c:	1000031e 	bne	r2,zero,81341c <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  813410:	00bffa84 	movi	r2,-22
  813414:	e0bfff15 	stw	r2,-4(fp)
  813418:	00000506 	br	813430 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  81341c:	e13ffc17 	ldw	r4,-16(fp)
  813420:	e17ffd17 	ldw	r5,-12(fp)
  813424:	e1bffe17 	ldw	r6,-8(fp)
  813428:	0812dec0 	call	812dec <alt_up_av_config_read_data>
  81342c:	e0bfff15 	stw	r2,-4(fp)
  813430:	e0bfff17 	ldw	r2,-4(fp)
}
  813434:	e037883a 	mov	sp,fp
  813438:	dfc00117 	ldw	ra,4(sp)
  81343c:	df000017 	ldw	fp,0(sp)
  813440:	dec00204 	addi	sp,sp,8
  813444:	f800283a 	ret

00813448 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  813448:	defffa04 	addi	sp,sp,-24
  81344c:	dfc00515 	stw	ra,20(sp)
  813450:	df000415 	stw	fp,16(sp)
  813454:	df000404 	addi	fp,sp,16
  813458:	e13ffc15 	stw	r4,-16(fp)
  81345c:	e17ffd15 	stw	r5,-12(fp)
  813460:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  813464:	e0bffc17 	ldw	r2,-16(fp)
  813468:	10800b17 	ldw	r2,44(r2)
  81346c:	108002a0 	cmpeqi	r2,r2,10
  813470:	1000031e 	bne	r2,zero,813480 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  813474:	00bffa84 	movi	r2,-22
  813478:	e0bfff15 	stw	r2,-4(fp)
  81347c:	00000506 	br	813494 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  813480:	e13ffc17 	ldw	r4,-16(fp)
  813484:	e17ffd17 	ldw	r5,-12(fp)
  813488:	e1bffe17 	ldw	r6,-8(fp)
  81348c:	0812d880 	call	812d88 <alt_up_av_config_write_data>
  813490:	e0bfff15 	stw	r2,-4(fp)
  813494:	e0bfff17 	ldw	r2,-4(fp)
}
  813498:	e037883a 	mov	sp,fp
  81349c:	dfc00117 	ldw	ra,4(sp)
  8134a0:	df000017 	ldw	fp,0(sp)
  8134a4:	dec00204 	addi	sp,sp,8
  8134a8:	f800283a 	ret

008134ac <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  8134ac:	defffc04 	addi	sp,sp,-16
  8134b0:	df000315 	stw	fp,12(sp)
  8134b4:	df000304 	addi	fp,sp,12
  8134b8:	e13ffe15 	stw	r4,-8(fp)
  8134bc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  8134c0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  8134c4:	e0bfff17 	ldw	r2,-4(fp)
  8134c8:	1004c03a 	cmpne	r2,r2,zero
  8134cc:	1000061e 	bne	r2,zero,8134e8 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  8134d0:	e0bffe17 	ldw	r2,-8(fp)
  8134d4:	1007883a 	mov	r3,r2
  8134d8:	e0bffd03 	ldbu	r2,-12(fp)
  8134dc:	10c4b03a 	or	r2,r2,r3
  8134e0:	e0bffd05 	stb	r2,-12(fp)
  8134e4:	00000806 	br	813508 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  8134e8:	e0bffe17 	ldw	r2,-8(fp)
  8134ec:	1007883a 	mov	r3,r2
  8134f0:	e0bffd03 	ldbu	r2,-12(fp)
  8134f4:	10c4b03a 	or	r2,r2,r3
  8134f8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  8134fc:	e0bffd03 	ldbu	r2,-12(fp)
  813500:	10801014 	ori	r2,r2,64
  813504:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  813508:	e0fffd03 	ldbu	r3,-12(fp)
  81350c:	00bfe004 	movi	r2,-128
  813510:	1884b03a 	or	r2,r3,r2
  813514:	10803fcc 	andi	r2,r2,255
}
  813518:	e037883a 	mov	sp,fp
  81351c:	df000017 	ldw	fp,0(sp)
  813520:	dec00104 	addi	sp,sp,4
  813524:	f800283a 	ret

00813528 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  813528:	defffd04 	addi	sp,sp,-12
  81352c:	df000215 	stw	fp,8(sp)
  813530:	df000204 	addi	fp,sp,8
  813534:	e13ffe15 	stw	r4,-8(fp)
  813538:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  81353c:	e0bffe17 	ldw	r2,-8(fp)
  813540:	10800a17 	ldw	r2,40(r2)
  813544:	e0ffff03 	ldbu	r3,-4(fp)
  813548:	10c00025 	stbio	r3,0(r2)
}
  81354c:	e037883a 	mov	sp,fp
  813550:	df000017 	ldw	fp,0(sp)
  813554:	dec00104 	addi	sp,sp,4
  813558:	f800283a 	ret

0081355c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  81355c:	defffe04 	addi	sp,sp,-8
  813560:	df000115 	stw	fp,4(sp)
  813564:	df000104 	addi	fp,sp,4
  813568:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  81356c:	e0bfff17 	ldw	r2,-4(fp)
  813570:	10800a17 	ldw	r2,40(r2)
  813574:	1007883a 	mov	r3,r2
  813578:	00800044 	movi	r2,1
  81357c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  813580:	e037883a 	mov	sp,fp
  813584:	df000017 	ldw	fp,0(sp)
  813588:	dec00104 	addi	sp,sp,4
  81358c:	f800283a 	ret

00813590 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  813590:	defffc04 	addi	sp,sp,-16
  813594:	dfc00315 	stw	ra,12(sp)
  813598:	df000215 	stw	fp,8(sp)
  81359c:	df000204 	addi	fp,sp,8
  8135a0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  8135a4:	e13fff17 	ldw	r4,-4(fp)
  8135a8:	01402074 	movhi	r5,129
  8135ac:	295bed04 	addi	r5,r5,28596
  8135b0:	0813d0c0 	call	813d0c <alt_find_dev>
  8135b4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8135b8:	e0bffe17 	ldw	r2,-8(fp)
}
  8135bc:	e037883a 	mov	sp,fp
  8135c0:	dfc00117 	ldw	ra,4(sp)
  8135c4:	df000017 	ldw	fp,0(sp)
  8135c8:	dec00204 	addi	sp,sp,8
  8135cc:	f800283a 	ret

008135d0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  8135d0:	defffb04 	addi	sp,sp,-20
  8135d4:	df000415 	stw	fp,16(sp)
  8135d8:	df000404 	addi	fp,sp,16
  8135dc:	e13ffd15 	stw	r4,-12(fp)
  8135e0:	e17ffe15 	stw	r5,-8(fp)
  8135e4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  8135e8:	e03ffc15 	stw	zero,-16(fp)
  8135ec:	00000f06 	br	81362c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  8135f0:	e0bffd17 	ldw	r2,-12(fp)
  8135f4:	10800a17 	ldw	r2,40(r2)
  8135f8:	11000044 	addi	r4,r2,1
  8135fc:	e0fffc17 	ldw	r3,-16(fp)
  813600:	e0bffe17 	ldw	r2,-8(fp)
  813604:	1885883a 	add	r2,r3,r2
  813608:	10800003 	ldbu	r2,0(r2)
  81360c:	10c03fcc 	andi	r3,r2,255
  813610:	18c0201c 	xori	r3,r3,128
  813614:	18ffe004 	addi	r3,r3,-128
  813618:	2005883a 	mov	r2,r4
  81361c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  813620:	e0bffc17 	ldw	r2,-16(fp)
  813624:	10800044 	addi	r2,r2,1
  813628:	e0bffc15 	stw	r2,-16(fp)
  81362c:	e0fffc17 	ldw	r3,-16(fp)
  813630:	e0bfff17 	ldw	r2,-4(fp)
  813634:	18bfee36 	bltu	r3,r2,8135f0 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  813638:	e037883a 	mov	sp,fp
  81363c:	df000017 	ldw	fp,0(sp)
  813640:	dec00104 	addi	sp,sp,4
  813644:	f800283a 	ret

00813648 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  813648:	defffd04 	addi	sp,sp,-12
  81364c:	df000215 	stw	fp,8(sp)
  813650:	df000204 	addi	fp,sp,8
  813654:	e13ffe15 	stw	r4,-8(fp)
  813658:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  81365c:	00000d06 	br	813694 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  813660:	e0bffe17 	ldw	r2,-8(fp)
  813664:	10800a17 	ldw	r2,40(r2)
  813668:	11000044 	addi	r4,r2,1
  81366c:	e0bfff17 	ldw	r2,-4(fp)
  813670:	10800003 	ldbu	r2,0(r2)
  813674:	10c03fcc 	andi	r3,r2,255
  813678:	18c0201c 	xori	r3,r3,128
  81367c:	18ffe004 	addi	r3,r3,-128
  813680:	2005883a 	mov	r2,r4
  813684:	10c00025 	stbio	r3,0(r2)
		++ptr;
  813688:	e0bfff17 	ldw	r2,-4(fp)
  81368c:	10800044 	addi	r2,r2,1
  813690:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  813694:	e0bfff17 	ldw	r2,-4(fp)
  813698:	10800003 	ldbu	r2,0(r2)
  81369c:	10803fcc 	andi	r2,r2,255
  8136a0:	1080201c 	xori	r2,r2,128
  8136a4:	10bfe004 	addi	r2,r2,-128
  8136a8:	1004c03a 	cmpne	r2,r2,zero
  8136ac:	103fec1e 	bne	r2,zero,813660 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  8136b0:	e037883a 	mov	sp,fp
  8136b4:	df000017 	ldw	fp,0(sp)
  8136b8:	dec00104 	addi	sp,sp,4
  8136bc:	f800283a 	ret

008136c0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  8136c0:	defffb04 	addi	sp,sp,-20
  8136c4:	dfc00415 	stw	ra,16(sp)
  8136c8:	df000315 	stw	fp,12(sp)
  8136cc:	df000304 	addi	fp,sp,12
  8136d0:	e13ffd15 	stw	r4,-12(fp)
  8136d4:	e17ffe15 	stw	r5,-8(fp)
  8136d8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  8136dc:	e0bffd17 	ldw	r2,-12(fp)
  8136e0:	10800017 	ldw	r2,0(r2)
  8136e4:	1009883a 	mov	r4,r2
  8136e8:	e1bfff17 	ldw	r6,-4(fp)
  8136ec:	e17ffe17 	ldw	r5,-8(fp)
  8136f0:	08135d00 	call	8135d0 <alt_up_character_lcd_write>
	return 0;
  8136f4:	0005883a 	mov	r2,zero
}
  8136f8:	e037883a 	mov	sp,fp
  8136fc:	dfc00117 	ldw	ra,4(sp)
  813700:	df000017 	ldw	fp,0(sp)
  813704:	dec00204 	addi	sp,sp,8
  813708:	f800283a 	ret

0081370c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  81370c:	defff904 	addi	sp,sp,-28
  813710:	dfc00615 	stw	ra,24(sp)
  813714:	df000515 	stw	fp,20(sp)
  813718:	df000504 	addi	fp,sp,20
  81371c:	e13ffc15 	stw	r4,-16(fp)
  813720:	e17ffd15 	stw	r5,-12(fp)
  813724:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  813728:	e0bffd17 	ldw	r2,-12(fp)
  81372c:	10800a28 	cmpgeui	r2,r2,40
  813730:	1000031e 	bne	r2,zero,813740 <alt_up_character_lcd_set_cursor_pos+0x34>
  813734:	e0bffe17 	ldw	r2,-8(fp)
  813738:	108000b0 	cmpltui	r2,r2,2
  81373c:	1000031e 	bne	r2,zero,81374c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  813740:	00bfffc4 	movi	r2,-1
  813744:	e0bfff15 	stw	r2,-4(fp)
  813748:	00000806 	br	81376c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  81374c:	e13ffd17 	ldw	r4,-12(fp)
  813750:	e17ffe17 	ldw	r5,-8(fp)
  813754:	08134ac0 	call	8134ac <get_DDRAM_addr>
  813758:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  81375c:	e17ffb03 	ldbu	r5,-20(fp)
  813760:	e13ffc17 	ldw	r4,-16(fp)
  813764:	08135280 	call	813528 <alt_up_character_lcd_send_cmd>
	return 0;
  813768:	e03fff15 	stw	zero,-4(fp)
  81376c:	e0bfff17 	ldw	r2,-4(fp)
}
  813770:	e037883a 	mov	sp,fp
  813774:	dfc00117 	ldw	ra,4(sp)
  813778:	df000017 	ldw	fp,0(sp)
  81377c:	dec00204 	addi	sp,sp,8
  813780:	f800283a 	ret

00813784 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  813784:	defff904 	addi	sp,sp,-28
  813788:	dfc00615 	stw	ra,24(sp)
  81378c:	df000515 	stw	fp,20(sp)
  813790:	df000504 	addi	fp,sp,20
  813794:	e13ffc15 	stw	r4,-16(fp)
  813798:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  81379c:	e0bffd17 	ldw	r2,-12(fp)
  8137a0:	1005003a 	cmpeq	r2,r2,zero
  8137a4:	10001e1e 	bne	r2,zero,813820 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  8137a8:	e0bffd17 	ldw	r2,-12(fp)
  8137ac:	10800050 	cmplti	r2,r2,1
  8137b0:	1000031e 	bne	r2,zero,8137c0 <alt_up_character_lcd_shift_cursor+0x3c>
  8137b4:	00800504 	movi	r2,20
  8137b8:	e0bfff05 	stb	r2,-4(fp)
  8137bc:	00000206 	br	8137c8 <alt_up_character_lcd_shift_cursor+0x44>
  8137c0:	00c00404 	movi	r3,16
  8137c4:	e0ffff05 	stb	r3,-4(fp)
  8137c8:	e0bfff03 	ldbu	r2,-4(fp)
  8137cc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8137d0:	e0fffd17 	ldw	r3,-12(fp)
  8137d4:	e0fffe15 	stw	r3,-8(fp)
  8137d8:	e0fffe17 	ldw	r3,-8(fp)
  8137dc:	1804403a 	cmpge	r2,r3,zero
  8137e0:	1000031e 	bne	r2,zero,8137f0 <alt_up_character_lcd_shift_cursor+0x6c>
  8137e4:	e0bffe17 	ldw	r2,-8(fp)
  8137e8:	0085c83a 	sub	r2,zero,r2
  8137ec:	e0bffe15 	stw	r2,-8(fp)
  8137f0:	e0fffe17 	ldw	r3,-8(fp)
  8137f4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8137f8:	00000306 	br	813808 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8137fc:	e17ffb43 	ldbu	r5,-19(fp)
  813800:	e13ffc17 	ldw	r4,-16(fp)
  813804:	08135280 	call	813528 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  813808:	e0bffb03 	ldbu	r2,-20(fp)
  81380c:	10bfffc4 	addi	r2,r2,-1
  813810:	e0bffb05 	stb	r2,-20(fp)
  813814:	e0bffb03 	ldbu	r2,-20(fp)
  813818:	10803fd8 	cmpnei	r2,r2,255
  81381c:	103ff71e 	bne	r2,zero,8137fc <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  813820:	e037883a 	mov	sp,fp
  813824:	dfc00117 	ldw	ra,4(sp)
  813828:	df000017 	ldw	fp,0(sp)
  81382c:	dec00204 	addi	sp,sp,8
  813830:	f800283a 	ret

00813834 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  813834:	defff904 	addi	sp,sp,-28
  813838:	dfc00615 	stw	ra,24(sp)
  81383c:	df000515 	stw	fp,20(sp)
  813840:	df000504 	addi	fp,sp,20
  813844:	e13ffc15 	stw	r4,-16(fp)
  813848:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  81384c:	e0bffd17 	ldw	r2,-12(fp)
  813850:	1005003a 	cmpeq	r2,r2,zero
  813854:	10001e1e 	bne	r2,zero,8138d0 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  813858:	e0bffd17 	ldw	r2,-12(fp)
  81385c:	10800050 	cmplti	r2,r2,1
  813860:	1000031e 	bne	r2,zero,813870 <alt_up_character_lcd_shift_display+0x3c>
  813864:	00800704 	movi	r2,28
  813868:	e0bfff05 	stb	r2,-4(fp)
  81386c:	00000206 	br	813878 <alt_up_character_lcd_shift_display+0x44>
  813870:	00c00604 	movi	r3,24
  813874:	e0ffff05 	stb	r3,-4(fp)
  813878:	e0bfff03 	ldbu	r2,-4(fp)
  81387c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  813880:	e0fffd17 	ldw	r3,-12(fp)
  813884:	e0fffe15 	stw	r3,-8(fp)
  813888:	e0fffe17 	ldw	r3,-8(fp)
  81388c:	1804403a 	cmpge	r2,r3,zero
  813890:	1000031e 	bne	r2,zero,8138a0 <alt_up_character_lcd_shift_display+0x6c>
  813894:	e0bffe17 	ldw	r2,-8(fp)
  813898:	0085c83a 	sub	r2,zero,r2
  81389c:	e0bffe15 	stw	r2,-8(fp)
  8138a0:	e0fffe17 	ldw	r3,-8(fp)
  8138a4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8138a8:	00000306 	br	8138b8 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8138ac:	e17ffb43 	ldbu	r5,-19(fp)
  8138b0:	e13ffc17 	ldw	r4,-16(fp)
  8138b4:	08135280 	call	813528 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  8138b8:	e0bffb03 	ldbu	r2,-20(fp)
  8138bc:	10bfffc4 	addi	r2,r2,-1
  8138c0:	e0bffb05 	stb	r2,-20(fp)
  8138c4:	e0bffb03 	ldbu	r2,-20(fp)
  8138c8:	10803fd8 	cmpnei	r2,r2,255
  8138cc:	103ff71e 	bne	r2,zero,8138ac <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  8138d0:	e037883a 	mov	sp,fp
  8138d4:	dfc00117 	ldw	ra,4(sp)
  8138d8:	df000017 	ldw	fp,0(sp)
  8138dc:	dec00204 	addi	sp,sp,8
  8138e0:	f800283a 	ret

008138e4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  8138e4:	defff904 	addi	sp,sp,-28
  8138e8:	dfc00615 	stw	ra,24(sp)
  8138ec:	df000515 	stw	fp,20(sp)
  8138f0:	df000504 	addi	fp,sp,20
  8138f4:	e13ffc15 	stw	r4,-16(fp)
  8138f8:	e17ffd15 	stw	r5,-12(fp)
  8138fc:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  813900:	e0bffd17 	ldw	r2,-12(fp)
  813904:	10800a28 	cmpgeui	r2,r2,40
  813908:	1000031e 	bne	r2,zero,813918 <alt_up_character_lcd_erase_pos+0x34>
  81390c:	e0bffe17 	ldw	r2,-8(fp)
  813910:	108000b0 	cmpltui	r2,r2,2
  813914:	1000031e 	bne	r2,zero,813924 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  813918:	00bfffc4 	movi	r2,-1
  81391c:	e0bfff15 	stw	r2,-4(fp)
  813920:	00000e06 	br	81395c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  813924:	e13ffd17 	ldw	r4,-12(fp)
  813928:	e17ffe17 	ldw	r5,-8(fp)
  81392c:	08134ac0 	call	8134ac <get_DDRAM_addr>
  813930:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  813934:	e17ffb03 	ldbu	r5,-20(fp)
  813938:	e13ffc17 	ldw	r4,-16(fp)
  81393c:	08135280 	call	813528 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	// NEM Bug Fix. Next loc sends | to the LCD instead of erase
	// Changed to send a simple space. Not really erase but good enough
	//IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, ' ');
  813940:	e0bffc17 	ldw	r2,-16(fp)
  813944:	10800a17 	ldw	r2,40(r2)
  813948:	10800044 	addi	r2,r2,1
  81394c:	1007883a 	mov	r3,r2
  813950:	00800804 	movi	r2,32
  813954:	18800025 	stbio	r2,0(r3)
	// END NEM Bug Fixs
	return 0;
  813958:	e03fff15 	stw	zero,-4(fp)
  81395c:	e0bfff17 	ldw	r2,-4(fp)
}
  813960:	e037883a 	mov	sp,fp
  813964:	dfc00117 	ldw	ra,4(sp)
  813968:	df000017 	ldw	fp,0(sp)
  81396c:	dec00204 	addi	sp,sp,8
  813970:	f800283a 	ret

00813974 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  813974:	defffd04 	addi	sp,sp,-12
  813978:	dfc00215 	stw	ra,8(sp)
  81397c:	df000115 	stw	fp,4(sp)
  813980:	df000104 	addi	fp,sp,4
  813984:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  813988:	e13fff17 	ldw	r4,-4(fp)
  81398c:	01400304 	movi	r5,12
  813990:	08135280 	call	813528 <alt_up_character_lcd_send_cmd>
}
  813994:	e037883a 	mov	sp,fp
  813998:	dfc00117 	ldw	ra,4(sp)
  81399c:	df000017 	ldw	fp,0(sp)
  8139a0:	dec00204 	addi	sp,sp,8
  8139a4:	f800283a 	ret

008139a8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  8139a8:	defffd04 	addi	sp,sp,-12
  8139ac:	dfc00215 	stw	ra,8(sp)
  8139b0:	df000115 	stw	fp,4(sp)
  8139b4:	df000104 	addi	fp,sp,4
  8139b8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  8139bc:	e13fff17 	ldw	r4,-4(fp)
  8139c0:	014003c4 	movi	r5,15
  8139c4:	08135280 	call	813528 <alt_up_character_lcd_send_cmd>
}
  8139c8:	e037883a 	mov	sp,fp
  8139cc:	dfc00117 	ldw	ra,4(sp)
  8139d0:	df000017 	ldw	fp,0(sp)
  8139d4:	dec00204 	addi	sp,sp,8
  8139d8:	f800283a 	ret

008139dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8139dc:	defff404 	addi	sp,sp,-48
  8139e0:	df000b15 	stw	fp,44(sp)
  8139e4:	df000b04 	addi	fp,sp,44
  8139e8:	e13ffb15 	stw	r4,-20(fp)
  8139ec:	e17ffc15 	stw	r5,-16(fp)
  8139f0:	e1bffd15 	stw	r6,-12(fp)
  8139f4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8139f8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8139fc:	00802074 	movhi	r2,129
  813a00:	109c3b04 	addi	r2,r2,28908
  813a04:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  813a08:	1005003a 	cmpeq	r2,r2,zero
  813a0c:	1000411e 	bne	r2,zero,813b14 <alt_alarm_start+0x138>
  {
    if (alarm)
  813a10:	e0bffb17 	ldw	r2,-20(fp)
  813a14:	1005003a 	cmpeq	r2,r2,zero
  813a18:	10003b1e 	bne	r2,zero,813b08 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  813a1c:	e0fffb17 	ldw	r3,-20(fp)
  813a20:	e0bffd17 	ldw	r2,-12(fp)
  813a24:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  813a28:	e0fffb17 	ldw	r3,-20(fp)
  813a2c:	e0bffe17 	ldw	r2,-8(fp)
  813a30:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813a34:	0005303a 	rdctl	r2,status
  813a38:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813a3c:	e0fff817 	ldw	r3,-32(fp)
  813a40:	00bfff84 	movi	r2,-2
  813a44:	1884703a 	and	r2,r3,r2
  813a48:	1001703a 	wrctl	status,r2
  
  return context;
  813a4c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  813a50:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  813a54:	00802074 	movhi	r2,129
  813a58:	109c3c04 	addi	r2,r2,28912
  813a5c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  813a60:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  813a64:	e0fffc17 	ldw	r3,-16(fp)
  813a68:	e0bff917 	ldw	r2,-28(fp)
  813a6c:	1885883a 	add	r2,r3,r2
  813a70:	10c00044 	addi	r3,r2,1
  813a74:	e0bffb17 	ldw	r2,-20(fp)
  813a78:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  813a7c:	e0bffb17 	ldw	r2,-20(fp)
  813a80:	10c00217 	ldw	r3,8(r2)
  813a84:	e0bff917 	ldw	r2,-28(fp)
  813a88:	1880042e 	bgeu	r3,r2,813a9c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  813a8c:	e0fffb17 	ldw	r3,-20(fp)
  813a90:	00800044 	movi	r2,1
  813a94:	18800405 	stb	r2,16(r3)
  813a98:	00000206 	br	813aa4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  813a9c:	e0bffb17 	ldw	r2,-20(fp)
  813aa0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  813aa4:	e0fffb17 	ldw	r3,-20(fp)
  813aa8:	00802074 	movhi	r2,129
  813aac:	109c1204 	addi	r2,r2,28744
  813ab0:	e0bff615 	stw	r2,-40(fp)
  813ab4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813ab8:	e0fff717 	ldw	r3,-36(fp)
  813abc:	e0bff617 	ldw	r2,-40(fp)
  813ac0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813ac4:	e0bff617 	ldw	r2,-40(fp)
  813ac8:	10c00017 	ldw	r3,0(r2)
  813acc:	e0bff717 	ldw	r2,-36(fp)
  813ad0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813ad4:	e0bff617 	ldw	r2,-40(fp)
  813ad8:	10c00017 	ldw	r3,0(r2)
  813adc:	e0bff717 	ldw	r2,-36(fp)
  813ae0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813ae4:	e0fff617 	ldw	r3,-40(fp)
  813ae8:	e0bff717 	ldw	r2,-36(fp)
  813aec:	18800015 	stw	r2,0(r3)
  813af0:	e0bffa17 	ldw	r2,-24(fp)
  813af4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813af8:	e0bff517 	ldw	r2,-44(fp)
  813afc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  813b00:	e03fff15 	stw	zero,-4(fp)
  813b04:	00000506 	br	813b1c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  813b08:	00bffa84 	movi	r2,-22
  813b0c:	e0bfff15 	stw	r2,-4(fp)
  813b10:	00000206 	br	813b1c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  813b14:	00bfde84 	movi	r2,-134
  813b18:	e0bfff15 	stw	r2,-4(fp)
  813b1c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  813b20:	e037883a 	mov	sp,fp
  813b24:	df000017 	ldw	fp,0(sp)
  813b28:	dec00104 	addi	sp,sp,4
  813b2c:	f800283a 	ret

00813b30 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813b30:	defff904 	addi	sp,sp,-28
  813b34:	dfc00615 	stw	ra,24(sp)
  813b38:	df000515 	stw	fp,20(sp)
  813b3c:	df000504 	addi	fp,sp,20
  813b40:	e13ffd15 	stw	r4,-12(fp)
  813b44:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813b48:	e0bffd17 	ldw	r2,-12(fp)
  813b4c:	1005003a 	cmpeq	r2,r2,zero
  813b50:	1000041e 	bne	r2,zero,813b64 <alt_dev_llist_insert+0x34>
  813b54:	e0bffd17 	ldw	r2,-12(fp)
  813b58:	10800217 	ldw	r2,8(r2)
  813b5c:	1004c03a 	cmpne	r2,r2,zero
  813b60:	1000071e 	bne	r2,zero,813b80 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813b64:	0813be40 	call	813be4 <alt_get_errno>
  813b68:	1007883a 	mov	r3,r2
  813b6c:	00800584 	movi	r2,22
  813b70:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813b74:	00bffa84 	movi	r2,-22
  813b78:	e0bfff15 	stw	r2,-4(fp)
  813b7c:	00001306 	br	813bcc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813b80:	e0fffd17 	ldw	r3,-12(fp)
  813b84:	e0bffe17 	ldw	r2,-8(fp)
  813b88:	e0bffb15 	stw	r2,-20(fp)
  813b8c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813b90:	e0fffc17 	ldw	r3,-16(fp)
  813b94:	e0bffb17 	ldw	r2,-20(fp)
  813b98:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813b9c:	e0bffb17 	ldw	r2,-20(fp)
  813ba0:	10c00017 	ldw	r3,0(r2)
  813ba4:	e0bffc17 	ldw	r2,-16(fp)
  813ba8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813bac:	e0bffb17 	ldw	r2,-20(fp)
  813bb0:	10c00017 	ldw	r3,0(r2)
  813bb4:	e0bffc17 	ldw	r2,-16(fp)
  813bb8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813bbc:	e0fffb17 	ldw	r3,-20(fp)
  813bc0:	e0bffc17 	ldw	r2,-16(fp)
  813bc4:	18800015 	stw	r2,0(r3)

  return 0;  
  813bc8:	e03fff15 	stw	zero,-4(fp)
  813bcc:	e0bfff17 	ldw	r2,-4(fp)
}
  813bd0:	e037883a 	mov	sp,fp
  813bd4:	dfc00117 	ldw	ra,4(sp)
  813bd8:	df000017 	ldw	fp,0(sp)
  813bdc:	dec00204 	addi	sp,sp,8
  813be0:	f800283a 	ret

00813be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813be4:	defffd04 	addi	sp,sp,-12
  813be8:	dfc00215 	stw	ra,8(sp)
  813bec:	df000115 	stw	fp,4(sp)
  813bf0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813bf4:	00802074 	movhi	r2,129
  813bf8:	109bf004 	addi	r2,r2,28608
  813bfc:	10800017 	ldw	r2,0(r2)
  813c00:	1005003a 	cmpeq	r2,r2,zero
  813c04:	1000061e 	bne	r2,zero,813c20 <alt_get_errno+0x3c>
  813c08:	00802074 	movhi	r2,129
  813c0c:	109bf004 	addi	r2,r2,28608
  813c10:	10800017 	ldw	r2,0(r2)
  813c14:	103ee83a 	callr	r2
  813c18:	e0bfff15 	stw	r2,-4(fp)
  813c1c:	00000306 	br	813c2c <alt_get_errno+0x48>
  813c20:	00802074 	movhi	r2,129
  813c24:	109c1d04 	addi	r2,r2,28788
  813c28:	e0bfff15 	stw	r2,-4(fp)
  813c2c:	e0bfff17 	ldw	r2,-4(fp)
}
  813c30:	e037883a 	mov	sp,fp
  813c34:	dfc00117 	ldw	ra,4(sp)
  813c38:	df000017 	ldw	fp,0(sp)
  813c3c:	dec00204 	addi	sp,sp,8
  813c40:	f800283a 	ret

00813c44 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813c44:	defffd04 	addi	sp,sp,-12
  813c48:	dfc00215 	stw	ra,8(sp)
  813c4c:	df000115 	stw	fp,4(sp)
  813c50:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813c54:	00bfff04 	movi	r2,-4
  813c58:	00c02074 	movhi	r3,129
  813c5c:	18d3f204 	addi	r3,r3,20424
  813c60:	1885883a 	add	r2,r3,r2
  813c64:	e0bfff15 	stw	r2,-4(fp)
  813c68:	00000606 	br	813c84 <_do_ctors+0x40>
        (*ctor) (); 
  813c6c:	e0bfff17 	ldw	r2,-4(fp)
  813c70:	10800017 	ldw	r2,0(r2)
  813c74:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813c78:	e0bfff17 	ldw	r2,-4(fp)
  813c7c:	10bfff04 	addi	r2,r2,-4
  813c80:	e0bfff15 	stw	r2,-4(fp)
  813c84:	e0ffff17 	ldw	r3,-4(fp)
  813c88:	00802074 	movhi	r2,129
  813c8c:	1093f104 	addi	r2,r2,20420
  813c90:	18bff62e 	bgeu	r3,r2,813c6c <_do_ctors+0x28>
        (*ctor) (); 
}
  813c94:	e037883a 	mov	sp,fp
  813c98:	dfc00117 	ldw	ra,4(sp)
  813c9c:	df000017 	ldw	fp,0(sp)
  813ca0:	dec00204 	addi	sp,sp,8
  813ca4:	f800283a 	ret

00813ca8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813ca8:	defffd04 	addi	sp,sp,-12
  813cac:	dfc00215 	stw	ra,8(sp)
  813cb0:	df000115 	stw	fp,4(sp)
  813cb4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813cb8:	00bfff04 	movi	r2,-4
  813cbc:	00c02074 	movhi	r3,129
  813cc0:	18d3f204 	addi	r3,r3,20424
  813cc4:	1885883a 	add	r2,r3,r2
  813cc8:	e0bfff15 	stw	r2,-4(fp)
  813ccc:	00000606 	br	813ce8 <_do_dtors+0x40>
        (*dtor) (); 
  813cd0:	e0bfff17 	ldw	r2,-4(fp)
  813cd4:	10800017 	ldw	r2,0(r2)
  813cd8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813cdc:	e0bfff17 	ldw	r2,-4(fp)
  813ce0:	10bfff04 	addi	r2,r2,-4
  813ce4:	e0bfff15 	stw	r2,-4(fp)
  813ce8:	e0ffff17 	ldw	r3,-4(fp)
  813cec:	00802074 	movhi	r2,129
  813cf0:	1093f204 	addi	r2,r2,20424
  813cf4:	18bff62e 	bgeu	r3,r2,813cd0 <_do_dtors+0x28>
        (*dtor) (); 
}
  813cf8:	e037883a 	mov	sp,fp
  813cfc:	dfc00117 	ldw	ra,4(sp)
  813d00:	df000017 	ldw	fp,0(sp)
  813d04:	dec00204 	addi	sp,sp,8
  813d08:	f800283a 	ret

00813d0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813d0c:	defff904 	addi	sp,sp,-28
  813d10:	dfc00615 	stw	ra,24(sp)
  813d14:	df000515 	stw	fp,20(sp)
  813d18:	df000504 	addi	fp,sp,20
  813d1c:	e13ffd15 	stw	r4,-12(fp)
  813d20:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813d24:	e0bffe17 	ldw	r2,-8(fp)
  813d28:	10800017 	ldw	r2,0(r2)
  813d2c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813d30:	e13ffd17 	ldw	r4,-12(fp)
  813d34:	08050500 	call	805050 <strlen>
  813d38:	10800044 	addi	r2,r2,1
  813d3c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813d40:	00000d06 	br	813d78 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813d44:	e0bffc17 	ldw	r2,-16(fp)
  813d48:	11000217 	ldw	r4,8(r2)
  813d4c:	e1bffb17 	ldw	r6,-20(fp)
  813d50:	e17ffd17 	ldw	r5,-12(fp)
  813d54:	0814ab00 	call	814ab0 <memcmp>
  813d58:	1004c03a 	cmpne	r2,r2,zero
  813d5c:	1000031e 	bne	r2,zero,813d6c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813d60:	e0bffc17 	ldw	r2,-16(fp)
  813d64:	e0bfff15 	stw	r2,-4(fp)
  813d68:	00000706 	br	813d88 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813d6c:	e0bffc17 	ldw	r2,-16(fp)
  813d70:	10800017 	ldw	r2,0(r2)
  813d74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813d78:	e0fffe17 	ldw	r3,-8(fp)
  813d7c:	e0bffc17 	ldw	r2,-16(fp)
  813d80:	10fff01e 	bne	r2,r3,813d44 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  813d84:	e03fff15 	stw	zero,-4(fp)
  813d88:	e0bfff17 	ldw	r2,-4(fp)
}
  813d8c:	e037883a 	mov	sp,fp
  813d90:	dfc00117 	ldw	ra,4(sp)
  813d94:	df000017 	ldw	fp,0(sp)
  813d98:	dec00204 	addi	sp,sp,8
  813d9c:	f800283a 	ret

00813da0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  813da0:	defff904 	addi	sp,sp,-28
  813da4:	dfc00615 	stw	ra,24(sp)
  813da8:	df000515 	stw	fp,20(sp)
  813dac:	df000504 	addi	fp,sp,20
  813db0:	e13ffc15 	stw	r4,-16(fp)
  813db4:	e17ffd15 	stw	r5,-12(fp)
  813db8:	e1bffe15 	stw	r6,-8(fp)
  813dbc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  813dc0:	e13ffd17 	ldw	r4,-12(fp)
  813dc4:	e17ffe17 	ldw	r5,-8(fp)
  813dc8:	e1bfff17 	ldw	r6,-4(fp)
  813dcc:	0813fb80 	call	813fb8 <open>
  813dd0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  813dd4:	e0bffb17 	ldw	r2,-20(fp)
  813dd8:	1004803a 	cmplt	r2,r2,zero
  813ddc:	10001c1e 	bne	r2,zero,813e50 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  813de0:	e0bffb17 	ldw	r2,-20(fp)
  813de4:	00c02074 	movhi	r3,129
  813de8:	18d74804 	addi	r3,r3,23840
  813dec:	10800324 	muli	r2,r2,12
  813df0:	10c5883a 	add	r2,r2,r3
  813df4:	10c00017 	ldw	r3,0(r2)
  813df8:	e0bffc17 	ldw	r2,-16(fp)
  813dfc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  813e00:	e0bffb17 	ldw	r2,-20(fp)
  813e04:	00c02074 	movhi	r3,129
  813e08:	18d74804 	addi	r3,r3,23840
  813e0c:	10800324 	muli	r2,r2,12
  813e10:	10c5883a 	add	r2,r2,r3
  813e14:	10800104 	addi	r2,r2,4
  813e18:	10c00017 	ldw	r3,0(r2)
  813e1c:	e0bffc17 	ldw	r2,-16(fp)
  813e20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  813e24:	e0bffb17 	ldw	r2,-20(fp)
  813e28:	00c02074 	movhi	r3,129
  813e2c:	18d74804 	addi	r3,r3,23840
  813e30:	10800324 	muli	r2,r2,12
  813e34:	10c5883a 	add	r2,r2,r3
  813e38:	10800204 	addi	r2,r2,8
  813e3c:	10c00017 	ldw	r3,0(r2)
  813e40:	e0bffc17 	ldw	r2,-16(fp)
  813e44:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  813e48:	e13ffb17 	ldw	r4,-20(fp)
  813e4c:	080881c0 	call	80881c <alt_release_fd>
  }
} 
  813e50:	e037883a 	mov	sp,fp
  813e54:	dfc00117 	ldw	ra,4(sp)
  813e58:	df000017 	ldw	fp,0(sp)
  813e5c:	dec00204 	addi	sp,sp,8
  813e60:	f800283a 	ret

00813e64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813e64:	defffb04 	addi	sp,sp,-20
  813e68:	dfc00415 	stw	ra,16(sp)
  813e6c:	df000315 	stw	fp,12(sp)
  813e70:	df000304 	addi	fp,sp,12
  813e74:	e13ffd15 	stw	r4,-12(fp)
  813e78:	e17ffe15 	stw	r5,-8(fp)
  813e7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  813e80:	01002074 	movhi	r4,129
  813e84:	21174b04 	addi	r4,r4,23852
  813e88:	e17ffd17 	ldw	r5,-12(fp)
  813e8c:	01800044 	movi	r6,1
  813e90:	01c07fc4 	movi	r7,511
  813e94:	0813da00 	call	813da0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  813e98:	01002074 	movhi	r4,129
  813e9c:	21174804 	addi	r4,r4,23840
  813ea0:	e17ffe17 	ldw	r5,-8(fp)
  813ea4:	000d883a 	mov	r6,zero
  813ea8:	01c07fc4 	movi	r7,511
  813eac:	0813da00 	call	813da0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  813eb0:	01002074 	movhi	r4,129
  813eb4:	21174e04 	addi	r4,r4,23864
  813eb8:	e17fff17 	ldw	r5,-4(fp)
  813ebc:	01800044 	movi	r6,1
  813ec0:	01c07fc4 	movi	r7,511
  813ec4:	0813da00 	call	813da0 <alt_open_fd>
}  
  813ec8:	e037883a 	mov	sp,fp
  813ecc:	dfc00117 	ldw	ra,4(sp)
  813ed0:	df000017 	ldw	fp,0(sp)
  813ed4:	dec00204 	addi	sp,sp,8
  813ed8:	f800283a 	ret

00813edc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  813edc:	defffc04 	addi	sp,sp,-16
  813ee0:	df000315 	stw	fp,12(sp)
  813ee4:	df000304 	addi	fp,sp,12
  813ee8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  813eec:	e0bffe17 	ldw	r2,-8(fp)
  813ef0:	10800217 	ldw	r2,8(r2)
  813ef4:	10d00034 	orhi	r3,r2,16384
  813ef8:	e0bffe17 	ldw	r2,-8(fp)
  813efc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813f00:	e03ffd15 	stw	zero,-12(fp)
  813f04:	00002006 	br	813f88 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813f08:	e0bffd17 	ldw	r2,-12(fp)
  813f0c:	00c02074 	movhi	r3,129
  813f10:	18d74804 	addi	r3,r3,23840
  813f14:	10800324 	muli	r2,r2,12
  813f18:	10c5883a 	add	r2,r2,r3
  813f1c:	10c00017 	ldw	r3,0(r2)
  813f20:	e0bffe17 	ldw	r2,-8(fp)
  813f24:	10800017 	ldw	r2,0(r2)
  813f28:	1880141e 	bne	r3,r2,813f7c <alt_file_locked+0xa0>
  813f2c:	e0bffd17 	ldw	r2,-12(fp)
  813f30:	00c02074 	movhi	r3,129
  813f34:	18d74804 	addi	r3,r3,23840
  813f38:	10800324 	muli	r2,r2,12
  813f3c:	10c5883a 	add	r2,r2,r3
  813f40:	10800204 	addi	r2,r2,8
  813f44:	10800017 	ldw	r2,0(r2)
  813f48:	1004403a 	cmpge	r2,r2,zero
  813f4c:	10000b1e 	bne	r2,zero,813f7c <alt_file_locked+0xa0>
  813f50:	e0bffd17 	ldw	r2,-12(fp)
  813f54:	10800324 	muli	r2,r2,12
  813f58:	1007883a 	mov	r3,r2
  813f5c:	00802074 	movhi	r2,129
  813f60:	10974804 	addi	r2,r2,23840
  813f64:	1887883a 	add	r3,r3,r2
  813f68:	e0bffe17 	ldw	r2,-8(fp)
  813f6c:	18800326 	beq	r3,r2,813f7c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  813f70:	00bffcc4 	movi	r2,-13
  813f74:	e0bfff15 	stw	r2,-4(fp)
  813f78:	00000a06 	br	813fa4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813f7c:	e0bffd17 	ldw	r2,-12(fp)
  813f80:	10800044 	addi	r2,r2,1
  813f84:	e0bffd15 	stw	r2,-12(fp)
  813f88:	00802074 	movhi	r2,129
  813f8c:	109bef04 	addi	r2,r2,28604
  813f90:	10800017 	ldw	r2,0(r2)
  813f94:	1007883a 	mov	r3,r2
  813f98:	e0bffd17 	ldw	r2,-12(fp)
  813f9c:	18bfda2e 	bgeu	r3,r2,813f08 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  813fa0:	e03fff15 	stw	zero,-4(fp)
  813fa4:	e0bfff17 	ldw	r2,-4(fp)
}
  813fa8:	e037883a 	mov	sp,fp
  813fac:	df000017 	ldw	fp,0(sp)
  813fb0:	dec00104 	addi	sp,sp,4
  813fb4:	f800283a 	ret

00813fb8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813fb8:	defff404 	addi	sp,sp,-48
  813fbc:	dfc00b15 	stw	ra,44(sp)
  813fc0:	df000a15 	stw	fp,40(sp)
  813fc4:	df000a04 	addi	fp,sp,40
  813fc8:	e13ffb15 	stw	r4,-20(fp)
  813fcc:	e17ffc15 	stw	r5,-16(fp)
  813fd0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  813fd4:	00bfffc4 	movi	r2,-1
  813fd8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  813fdc:	00bffb44 	movi	r2,-19
  813fe0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  813fe4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813fe8:	e13ffb17 	ldw	r4,-20(fp)
  813fec:	01402074 	movhi	r5,129
  813ff0:	295bed04 	addi	r5,r5,28596
  813ff4:	0813d0c0 	call	813d0c <alt_find_dev>
  813ff8:	e0bffa15 	stw	r2,-24(fp)
  813ffc:	e0bffa17 	ldw	r2,-24(fp)
  814000:	1004c03a 	cmpne	r2,r2,zero
  814004:	1000051e 	bne	r2,zero,81401c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  814008:	e13ffb17 	ldw	r4,-20(fp)
  81400c:	08148500 	call	814850 <alt_find_file>
  814010:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  814014:	00800044 	movi	r2,1
  814018:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81401c:	e0bffa17 	ldw	r2,-24(fp)
  814020:	1005003a 	cmpeq	r2,r2,zero
  814024:	1000301e 	bne	r2,zero,8140e8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  814028:	e13ffa17 	ldw	r4,-24(fp)
  81402c:	08149700 	call	814970 <alt_get_fd>
  814030:	e0bff815 	stw	r2,-32(fp)
  814034:	e0bff817 	ldw	r2,-32(fp)
  814038:	1004403a 	cmpge	r2,r2,zero
  81403c:	1000031e 	bne	r2,zero,81404c <open+0x94>
    {
      status = index;
  814040:	e0bff817 	ldw	r2,-32(fp)
  814044:	e0bff715 	stw	r2,-36(fp)
  814048:	00002906 	br	8140f0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81404c:	e0bff817 	ldw	r2,-32(fp)
  814050:	10800324 	muli	r2,r2,12
  814054:	1007883a 	mov	r3,r2
  814058:	00802074 	movhi	r2,129
  81405c:	10974804 	addi	r2,r2,23840
  814060:	1885883a 	add	r2,r3,r2
  814064:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  814068:	e0fffc17 	ldw	r3,-16(fp)
  81406c:	00900034 	movhi	r2,16384
  814070:	10bfffc4 	addi	r2,r2,-1
  814074:	1886703a 	and	r3,r3,r2
  814078:	e0bff917 	ldw	r2,-28(fp)
  81407c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  814080:	e0bff617 	ldw	r2,-40(fp)
  814084:	1004c03a 	cmpne	r2,r2,zero
  814088:	1000061e 	bne	r2,zero,8140a4 <open+0xec>
  81408c:	e13ff917 	ldw	r4,-28(fp)
  814090:	0813edc0 	call	813edc <alt_file_locked>
  814094:	e0bff715 	stw	r2,-36(fp)
  814098:	e0bff717 	ldw	r2,-36(fp)
  81409c:	1004803a 	cmplt	r2,r2,zero
  8140a0:	1000131e 	bne	r2,zero,8140f0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8140a4:	e0bffa17 	ldw	r2,-24(fp)
  8140a8:	10800317 	ldw	r2,12(r2)
  8140ac:	1005003a 	cmpeq	r2,r2,zero
  8140b0:	1000091e 	bne	r2,zero,8140d8 <open+0x120>
  8140b4:	e0bffa17 	ldw	r2,-24(fp)
  8140b8:	10800317 	ldw	r2,12(r2)
  8140bc:	e13ff917 	ldw	r4,-28(fp)
  8140c0:	e17ffb17 	ldw	r5,-20(fp)
  8140c4:	e1bffc17 	ldw	r6,-16(fp)
  8140c8:	e1fffd17 	ldw	r7,-12(fp)
  8140cc:	103ee83a 	callr	r2
  8140d0:	e0bfff15 	stw	r2,-4(fp)
  8140d4:	00000106 	br	8140dc <open+0x124>
  8140d8:	e03fff15 	stw	zero,-4(fp)
  8140dc:	e0bfff17 	ldw	r2,-4(fp)
  8140e0:	e0bff715 	stw	r2,-36(fp)
  8140e4:	00000206 	br	8140f0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8140e8:	00bffb44 	movi	r2,-19
  8140ec:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8140f0:	e0bff717 	ldw	r2,-36(fp)
  8140f4:	1004403a 	cmpge	r2,r2,zero
  8140f8:	1000091e 	bne	r2,zero,814120 <open+0x168>
  {
    alt_release_fd (index);  
  8140fc:	e13ff817 	ldw	r4,-32(fp)
  814100:	080881c0 	call	80881c <alt_release_fd>
    ALT_ERRNO = -status;
  814104:	08141400 	call	814140 <alt_get_errno>
  814108:	e0fff717 	ldw	r3,-36(fp)
  81410c:	00c7c83a 	sub	r3,zero,r3
  814110:	10c00015 	stw	r3,0(r2)
    return -1;
  814114:	00bfffc4 	movi	r2,-1
  814118:	e0bffe15 	stw	r2,-8(fp)
  81411c:	00000206 	br	814128 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  814120:	e0bff817 	ldw	r2,-32(fp)
  814124:	e0bffe15 	stw	r2,-8(fp)
  814128:	e0bffe17 	ldw	r2,-8(fp)
}
  81412c:	e037883a 	mov	sp,fp
  814130:	dfc00117 	ldw	ra,4(sp)
  814134:	df000017 	ldw	fp,0(sp)
  814138:	dec00204 	addi	sp,sp,8
  81413c:	f800283a 	ret

00814140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814140:	defffd04 	addi	sp,sp,-12
  814144:	dfc00215 	stw	ra,8(sp)
  814148:	df000115 	stw	fp,4(sp)
  81414c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  814150:	00802074 	movhi	r2,129
  814154:	109bf004 	addi	r2,r2,28608
  814158:	10800017 	ldw	r2,0(r2)
  81415c:	1005003a 	cmpeq	r2,r2,zero
  814160:	1000061e 	bne	r2,zero,81417c <alt_get_errno+0x3c>
  814164:	00802074 	movhi	r2,129
  814168:	109bf004 	addi	r2,r2,28608
  81416c:	10800017 	ldw	r2,0(r2)
  814170:	103ee83a 	callr	r2
  814174:	e0bfff15 	stw	r2,-4(fp)
  814178:	00000306 	br	814188 <alt_get_errno+0x48>
  81417c:	00802074 	movhi	r2,129
  814180:	109c1d04 	addi	r2,r2,28788
  814184:	e0bfff15 	stw	r2,-4(fp)
  814188:	e0bfff17 	ldw	r2,-4(fp)
}
  81418c:	e037883a 	mov	sp,fp
  814190:	dfc00117 	ldw	ra,4(sp)
  814194:	df000017 	ldw	fp,0(sp)
  814198:	dec00204 	addi	sp,sp,8
  81419c:	f800283a 	ret

008141a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8141a0:	defffa04 	addi	sp,sp,-24
  8141a4:	df000515 	stw	fp,20(sp)
  8141a8:	df000504 	addi	fp,sp,20
  8141ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8141b0:	0005303a 	rdctl	r2,status
  8141b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8141b8:	e0fffd17 	ldw	r3,-12(fp)
  8141bc:	00bfff84 	movi	r2,-2
  8141c0:	1884703a 	and	r2,r3,r2
  8141c4:	1001703a 	wrctl	status,r2
  
  return context;
  8141c8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8141cc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8141d0:	e0bfff17 	ldw	r2,-4(fp)
  8141d4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8141d8:	e0bffc17 	ldw	r2,-16(fp)
  8141dc:	10c00017 	ldw	r3,0(r2)
  8141e0:	e0bffc17 	ldw	r2,-16(fp)
  8141e4:	10800117 	ldw	r2,4(r2)
  8141e8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8141ec:	e0bffc17 	ldw	r2,-16(fp)
  8141f0:	10c00117 	ldw	r3,4(r2)
  8141f4:	e0bffc17 	ldw	r2,-16(fp)
  8141f8:	10800017 	ldw	r2,0(r2)
  8141fc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  814200:	e0fffc17 	ldw	r3,-16(fp)
  814204:	e0bffc17 	ldw	r2,-16(fp)
  814208:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81420c:	e0fffc17 	ldw	r3,-16(fp)
  814210:	e0bffc17 	ldw	r2,-16(fp)
  814214:	18800015 	stw	r2,0(r3)
  814218:	e0bffe17 	ldw	r2,-8(fp)
  81421c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814220:	e0bffb17 	ldw	r2,-20(fp)
  814224:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  814228:	e037883a 	mov	sp,fp
  81422c:	df000017 	ldw	fp,0(sp)
  814230:	dec00104 	addi	sp,sp,4
  814234:	f800283a 	ret

00814238 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  814238:	defffb04 	addi	sp,sp,-20
  81423c:	dfc00415 	stw	ra,16(sp)
  814240:	df000315 	stw	fp,12(sp)
  814244:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  814248:	d0a02c17 	ldw	r2,-32592(gp)
  81424c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  814250:	d0a05617 	ldw	r2,-32424(gp)
  814254:	10800044 	addi	r2,r2,1
  814258:	d0a05615 	stw	r2,-32424(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81425c:	00003106 	br	814324 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  814260:	e0bffe17 	ldw	r2,-8(fp)
  814264:	10800017 	ldw	r2,0(r2)
  814268:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81426c:	e0bffe17 	ldw	r2,-8(fp)
  814270:	10800403 	ldbu	r2,16(r2)
  814274:	10803fcc 	andi	r2,r2,255
  814278:	1005003a 	cmpeq	r2,r2,zero
  81427c:	1000051e 	bne	r2,zero,814294 <alt_tick+0x5c>
  814280:	d0a05617 	ldw	r2,-32424(gp)
  814284:	1004c03a 	cmpne	r2,r2,zero
  814288:	1000021e 	bne	r2,zero,814294 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81428c:	e0bffe17 	ldw	r2,-8(fp)
  814290:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  814294:	e0bffe17 	ldw	r2,-8(fp)
  814298:	10c00217 	ldw	r3,8(r2)
  81429c:	d0a05617 	ldw	r2,-32424(gp)
  8142a0:	10c01e36 	bltu	r2,r3,81431c <alt_tick+0xe4>
  8142a4:	e0bffe17 	ldw	r2,-8(fp)
  8142a8:	10800403 	ldbu	r2,16(r2)
  8142ac:	10803fcc 	andi	r2,r2,255
  8142b0:	1004c03a 	cmpne	r2,r2,zero
  8142b4:	1000191e 	bne	r2,zero,81431c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8142b8:	e0bffe17 	ldw	r2,-8(fp)
  8142bc:	10c00317 	ldw	r3,12(r2)
  8142c0:	e0bffe17 	ldw	r2,-8(fp)
  8142c4:	11000517 	ldw	r4,20(r2)
  8142c8:	183ee83a 	callr	r3
  8142cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8142d0:	e0bffd17 	ldw	r2,-12(fp)
  8142d4:	1004c03a 	cmpne	r2,r2,zero
  8142d8:	1000031e 	bne	r2,zero,8142e8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8142dc:	e13ffe17 	ldw	r4,-8(fp)
  8142e0:	08141a00 	call	8141a0 <alt_alarm_stop>
  8142e4:	00000d06 	br	81431c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8142e8:	e0bffe17 	ldw	r2,-8(fp)
  8142ec:	10c00217 	ldw	r3,8(r2)
  8142f0:	e0bffd17 	ldw	r2,-12(fp)
  8142f4:	1887883a 	add	r3,r3,r2
  8142f8:	e0bffe17 	ldw	r2,-8(fp)
  8142fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  814300:	e0bffe17 	ldw	r2,-8(fp)
  814304:	10c00217 	ldw	r3,8(r2)
  814308:	d0a05617 	ldw	r2,-32424(gp)
  81430c:	1880032e 	bgeu	r3,r2,81431c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  814310:	e0fffe17 	ldw	r3,-8(fp)
  814314:	00800044 	movi	r2,1
  814318:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  81431c:	e0bfff17 	ldw	r2,-4(fp)
  814320:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814324:	d0e02c04 	addi	r3,gp,-32592
  814328:	e0bffe17 	ldw	r2,-8(fp)
  81432c:	10ffcc1e 	bne	r2,r3,814260 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  814330:	0809b1c0 	call	809b1c <OSTimeTick>
}
  814334:	e037883a 	mov	sp,fp
  814338:	dfc00117 	ldw	ra,4(sp)
  81433c:	df000017 	ldw	fp,0(sp)
  814340:	dec00204 	addi	sp,sp,8
  814344:	f800283a 	ret

00814348 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  814348:	deffff04 	addi	sp,sp,-4
  81434c:	df000015 	stw	fp,0(sp)
  814350:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814354:	000170fa 	wrctl	ienable,zero
}
  814358:	e037883a 	mov	sp,fp
  81435c:	df000017 	ldw	fp,0(sp)
  814360:	dec00104 	addi	sp,sp,4
  814364:	f800283a 	ret

00814368 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  814368:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  81436c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  814370:	d1205017 	ldw	r4,-32448(gp)

      stw ra,  0(sp)
  814374:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  814378:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  81437c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  814380:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  814384:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  814388:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  81438c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  814390:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  814394:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  814398:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  81439c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  8143a0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  8143a4:	08147880 	call	814788 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  8143a8:	d1204b17 	ldw	r4,-32468(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  8143ac:	d1604307 	ldb	r5,-32500(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  8143b0:	d1205015 	stw	r4,-32448(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  8143b4:	d1604345 	stb	r5,-32499(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  8143b8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  8143bc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  8143c0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  8143c4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  8143c8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  8143cc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  8143d0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  8143d4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  8143d8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  8143dc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  8143e0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  8143e4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  8143e8:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  8143ec:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  8143f0:	f800283a 	ret

008143f4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  8143f4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  8143f8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  8143fc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  814400:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  814404:	08147880 	call	814788 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  814408:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  81440c:	d4a04145 	stb	r18,-32507(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  814410:	003fe506 	br	8143a8 <OSCtxSw+0x40>

00814414 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  814414:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  814418:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  81441c:	10800054 	ori	r2,r2,1
      wrctl status, r2
  814420:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  814424:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  814428:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  81442c:	dec00204 	addi	sp,sp,8

      callr r2
  814430:	103ee83a 	callr	r2

      nop
  814434:	0001883a 	nop

00814438 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  814438:	defff704 	addi	sp,sp,-36
  81443c:	dfc00815 	stw	ra,32(sp)
  814440:	df000715 	stw	fp,28(sp)
  814444:	df000704 	addi	fp,sp,28
  814448:	e13ffc15 	stw	r4,-16(fp)
  81444c:	e17ffd15 	stw	r5,-12(fp)
  814450:	e1bffe15 	stw	r6,-8(fp)
  814454:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  814458:	e0bffe17 	ldw	r2,-8(fp)
  81445c:	1007883a 	mov	r3,r2
  814460:	00bfff04 	movi	r2,-4
  814464:	1884703a 	and	r2,r3,r2
  814468:	10bf0004 	addi	r2,r2,-1024
  81446c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  814470:	e0bff917 	ldw	r2,-28(fp)
  814474:	10000015 	stw	zero,0(r2)
  814478:	e0bff917 	ldw	r2,-28(fp)
  81447c:	10c0bb04 	addi	r3,r2,748
  814480:	e0bff917 	ldw	r2,-28(fp)
  814484:	10c00115 	stw	r3,4(r2)
  814488:	e0bff917 	ldw	r2,-28(fp)
  81448c:	1080bb04 	addi	r2,r2,748
  814490:	10c01704 	addi	r3,r2,92
  814494:	e0bff917 	ldw	r2,-28(fp)
  814498:	10c00215 	stw	r3,8(r2)
  81449c:	e0bff917 	ldw	r2,-28(fp)
  8144a0:	1080bb04 	addi	r2,r2,748
  8144a4:	10c02e04 	addi	r3,r2,184
  8144a8:	e0bff917 	ldw	r2,-28(fp)
  8144ac:	10c00315 	stw	r3,12(r2)
  8144b0:	e0bff917 	ldw	r2,-28(fp)
  8144b4:	10000415 	stw	zero,16(r2)
  8144b8:	e0bff917 	ldw	r2,-28(fp)
  8144bc:	10800504 	addi	r2,r2,20
  8144c0:	1009883a 	mov	r4,r2
  8144c4:	01800644 	movi	r6,25
  8144c8:	000b883a 	mov	r5,zero
  8144cc:	08075800 	call	807580 <memset>
  8144d0:	e0bff917 	ldw	r2,-28(fp)
  8144d4:	10000c15 	stw	zero,48(r2)
  8144d8:	e0fff917 	ldw	r3,-28(fp)
  8144dc:	00802074 	movhi	r2,129
  8144e0:	10953b04 	addi	r2,r2,21740
  8144e4:	18800d15 	stw	r2,52(r3)
  8144e8:	e0bff917 	ldw	r2,-28(fp)
  8144ec:	10000e15 	stw	zero,56(r2)
  8144f0:	e0bff917 	ldw	r2,-28(fp)
  8144f4:	10000f15 	stw	zero,60(r2)
  8144f8:	e0bff917 	ldw	r2,-28(fp)
  8144fc:	10001015 	stw	zero,64(r2)
  814500:	e0bff917 	ldw	r2,-28(fp)
  814504:	10001115 	stw	zero,68(r2)
  814508:	e0bff917 	ldw	r2,-28(fp)
  81450c:	10001215 	stw	zero,72(r2)
  814510:	e0bff917 	ldw	r2,-28(fp)
  814514:	10001315 	stw	zero,76(r2)
  814518:	e0bff917 	ldw	r2,-28(fp)
  81451c:	10001415 	stw	zero,80(r2)
  814520:	e0bff917 	ldw	r2,-28(fp)
  814524:	10001515 	stw	zero,84(r2)
  814528:	e0bff917 	ldw	r2,-28(fp)
  81452c:	10001615 	stw	zero,88(r2)
  814530:	e0bff917 	ldw	r2,-28(fp)
  814534:	10001715 	stw	zero,92(r2)
  814538:	e0bff917 	ldw	r2,-28(fp)
  81453c:	10001805 	stb	zero,96(r2)
  814540:	e0bff917 	ldw	r2,-28(fp)
  814544:	10801f04 	addi	r2,r2,124
  814548:	10000015 	stw	zero,0(r2)
  81454c:	10000115 	stw	zero,4(r2)
  814550:	10000215 	stw	zero,8(r2)
  814554:	10000315 	stw	zero,12(r2)
  814558:	10000415 	stw	zero,16(r2)
  81455c:	10000515 	stw	zero,20(r2)
  814560:	10000615 	stw	zero,24(r2)
  814564:	10000715 	stw	zero,28(r2)
  814568:	10000815 	stw	zero,32(r2)
  81456c:	e0bff917 	ldw	r2,-28(fp)
  814570:	10002815 	stw	zero,160(r2)
  814574:	e0fff917 	ldw	r3,-28(fp)
  814578:	00800044 	movi	r2,1
  81457c:	18802915 	stw	r2,164(r3)
  814580:	18002a15 	stw	zero,168(r3)
  814584:	e0fff917 	ldw	r3,-28(fp)
  814588:	008cc384 	movi	r2,13070
  81458c:	18802b0d 	sth	r2,172(r3)
  814590:	e0fff917 	ldw	r3,-28(fp)
  814594:	00aaf344 	movi	r2,-21555
  814598:	18802b8d 	sth	r2,174(r3)
  81459c:	e0fff917 	ldw	r3,-28(fp)
  8145a0:	00848d04 	movi	r2,4660
  8145a4:	18802c0d 	sth	r2,176(r3)
  8145a8:	e0fff917 	ldw	r3,-28(fp)
  8145ac:	00b99b44 	movi	r2,-6547
  8145b0:	18802c8d 	sth	r2,178(r3)
  8145b4:	e0fff917 	ldw	r3,-28(fp)
  8145b8:	00b7bb04 	movi	r2,-8468
  8145bc:	18802d0d 	sth	r2,180(r3)
  8145c0:	e0fff917 	ldw	r3,-28(fp)
  8145c4:	00800144 	movi	r2,5
  8145c8:	18802d8d 	sth	r2,182(r3)
  8145cc:	e0fff917 	ldw	r3,-28(fp)
  8145d0:	008002c4 	movi	r2,11
  8145d4:	18802e0d 	sth	r2,184(r3)
  8145d8:	e0bff917 	ldw	r2,-28(fp)
  8145dc:	10002f15 	stw	zero,188(r2)
  8145e0:	e0bff917 	ldw	r2,-28(fp)
  8145e4:	10003015 	stw	zero,192(r2)
  8145e8:	e0bff917 	ldw	r2,-28(fp)
  8145ec:	10003115 	stw	zero,196(r2)
  8145f0:	e0bff917 	ldw	r2,-28(fp)
  8145f4:	10003215 	stw	zero,200(r2)
  8145f8:	e0bff917 	ldw	r2,-28(fp)
  8145fc:	10003315 	stw	zero,204(r2)
  814600:	e0bff917 	ldw	r2,-28(fp)
  814604:	10003415 	stw	zero,208(r2)
  814608:	e0bff917 	ldw	r2,-28(fp)
  81460c:	10003e15 	stw	zero,248(r2)
  814610:	e0bff917 	ldw	r2,-28(fp)
  814614:	10003f15 	stw	zero,252(r2)
  814618:	e0bff917 	ldw	r2,-28(fp)
  81461c:	10004015 	stw	zero,256(r2)
  814620:	e0bff917 	ldw	r2,-28(fp)
  814624:	10004115 	stw	zero,260(r2)
  814628:	e0bff917 	ldw	r2,-28(fp)
  81462c:	10004215 	stw	zero,264(r2)
  814630:	e0bff917 	ldw	r2,-28(fp)
  814634:	10004315 	stw	zero,268(r2)
  814638:	e0bff917 	ldw	r2,-28(fp)
  81463c:	10004415 	stw	zero,272(r2)
  814640:	e0bff917 	ldw	r2,-28(fp)
  814644:	10004515 	stw	zero,276(r2)
  814648:	e0bff917 	ldw	r2,-28(fp)
  81464c:	10004615 	stw	zero,280(r2)
  814650:	e0bff917 	ldw	r2,-28(fp)
  814654:	10004715 	stw	zero,284(r2)
  814658:	e0bff917 	ldw	r2,-28(fp)
  81465c:	10003505 	stb	zero,212(r2)
  814660:	e0bff917 	ldw	r2,-28(fp)
  814664:	10003705 	stb	zero,220(r2)
  814668:	e0bff917 	ldw	r2,-28(fp)
  81466c:	10003d15 	stw	zero,244(r2)
  814670:	e0bff917 	ldw	r2,-28(fp)
  814674:	10005215 	stw	zero,328(r2)
  814678:	e0bff917 	ldw	r2,-28(fp)
  81467c:	10005315 	stw	zero,332(r2)
  814680:	e0bff917 	ldw	r2,-28(fp)
  814684:	10005415 	stw	zero,336(r2)
  814688:	e0bff917 	ldw	r2,-28(fp)
  81468c:	10005515 	stw	zero,340(r2)
  814690:	e0bff917 	ldw	r2,-28(fp)
  814694:	1000b515 	stw	zero,724(r2)
  814698:	e0bff917 	ldw	r2,-28(fp)
  81469c:	10007515 	stw	zero,468(r2)
  8146a0:	e0bff917 	ldw	r2,-28(fp)
  8146a4:	1000b715 	stw	zero,732(r2)
  8146a8:	e0bff917 	ldw	r2,-28(fp)
  8146ac:	1000b815 	stw	zero,736(r2)
  8146b0:	e0bff917 	ldw	r2,-28(fp)
  8146b4:	1000b915 	stw	zero,740(r2)
  8146b8:	e0bff917 	ldw	r2,-28(fp)
  8146bc:	1000ba15 	stw	zero,744(r2)
  8146c0:	e0bff917 	ldw	r2,-28(fp)
  8146c4:	1080bb04 	addi	r2,r2,748
  8146c8:	1009883a 	mov	r4,r2
  8146cc:	01804504 	movi	r6,276
  8146d0:	000b883a 	mov	r5,zero
  8146d4:	08075800 	call	807580 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  8146d8:	e0bff917 	ldw	r2,-28(fp)
  8146dc:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  8146e0:	e0bffb17 	ldw	r2,-20(fp)
  8146e4:	10bff304 	addi	r2,r2,-52
  8146e8:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  8146ec:	e0bffa17 	ldw	r2,-24(fp)
  8146f0:	10c00c04 	addi	r3,r2,48
  8146f4:	e0bffc17 	ldw	r2,-16(fp)
  8146f8:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  8146fc:	e0bffa17 	ldw	r2,-24(fp)
  814700:	10c00b04 	addi	r3,r2,44
  814704:	e0bffd17 	ldw	r2,-12(fp)
  814708:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  81470c:	e0bffa17 	ldw	r2,-24(fp)
  814710:	10c00a04 	addi	r3,r2,40
  814714:	e0bff917 	ldw	r2,-28(fp)
  814718:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  81471c:	00802074 	movhi	r2,129
  814720:	10910504 	addi	r2,r2,17428
  814724:	10c00104 	addi	r3,r2,4
  814728:	e0bffa17 	ldw	r2,-24(fp)
  81472c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  814730:	e0bffa17 	ldw	r2,-24(fp)
}
  814734:	e037883a 	mov	sp,fp
  814738:	dfc00117 	ldw	ra,4(sp)
  81473c:	df000017 	ldw	fp,0(sp)
  814740:	dec00204 	addi	sp,sp,8
  814744:	f800283a 	ret

00814748 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  814748:	defffe04 	addi	sp,sp,-8
  81474c:	df000115 	stw	fp,4(sp)
  814750:	df000104 	addi	fp,sp,4
  814754:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  814758:	e037883a 	mov	sp,fp
  81475c:	df000017 	ldw	fp,0(sp)
  814760:	dec00104 	addi	sp,sp,4
  814764:	f800283a 	ret

00814768 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  814768:	defffe04 	addi	sp,sp,-8
  81476c:	df000115 	stw	fp,4(sp)
  814770:	df000104 	addi	fp,sp,4
  814774:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  814778:	e037883a 	mov	sp,fp
  81477c:	df000017 	ldw	fp,0(sp)
  814780:	dec00104 	addi	sp,sp,4
  814784:	f800283a 	ret

00814788 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  814788:	deffff04 	addi	sp,sp,-4
  81478c:	df000015 	stw	fp,0(sp)
  814790:	d839883a 	mov	fp,sp
}
  814794:	e037883a 	mov	sp,fp
  814798:	df000017 	ldw	fp,0(sp)
  81479c:	dec00104 	addi	sp,sp,4
  8147a0:	f800283a 	ret

008147a4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  8147a4:	deffff04 	addi	sp,sp,-4
  8147a8:	df000015 	stw	fp,0(sp)
  8147ac:	d839883a 	mov	fp,sp
}
  8147b0:	e037883a 	mov	sp,fp
  8147b4:	df000017 	ldw	fp,0(sp)
  8147b8:	dec00104 	addi	sp,sp,4
  8147bc:	f800283a 	ret

008147c0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  8147c0:	deffff04 	addi	sp,sp,-4
  8147c4:	df000015 	stw	fp,0(sp)
  8147c8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  8147cc:	e037883a 	mov	sp,fp
  8147d0:	df000017 	ldw	fp,0(sp)
  8147d4:	dec00104 	addi	sp,sp,4
  8147d8:	f800283a 	ret

008147dc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  8147dc:	deffff04 	addi	sp,sp,-4
  8147e0:	df000015 	stw	fp,0(sp)
  8147e4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  8147e8:	e037883a 	mov	sp,fp
  8147ec:	df000017 	ldw	fp,0(sp)
  8147f0:	dec00104 	addi	sp,sp,4
  8147f4:	f800283a 	ret

008147f8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  8147f8:	deffff04 	addi	sp,sp,-4
  8147fc:	df000015 	stw	fp,0(sp)
  814800:	d839883a 	mov	fp,sp
}
  814804:	e037883a 	mov	sp,fp
  814808:	df000017 	ldw	fp,0(sp)
  81480c:	dec00104 	addi	sp,sp,4
  814810:	f800283a 	ret

00814814 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  814814:	deffff04 	addi	sp,sp,-4
  814818:	df000015 	stw	fp,0(sp)
  81481c:	d839883a 	mov	fp,sp
}
  814820:	e037883a 	mov	sp,fp
  814824:	df000017 	ldw	fp,0(sp)
  814828:	dec00104 	addi	sp,sp,4
  81482c:	f800283a 	ret

00814830 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  814830:	defffe04 	addi	sp,sp,-8
  814834:	df000115 	stw	fp,4(sp)
  814838:	df000104 	addi	fp,sp,4
  81483c:	e13fff15 	stw	r4,-4(fp)
}
  814840:	e037883a 	mov	sp,fp
  814844:	df000017 	ldw	fp,0(sp)
  814848:	dec00104 	addi	sp,sp,4
  81484c:	f800283a 	ret

00814850 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  814850:	defffa04 	addi	sp,sp,-24
  814854:	dfc00515 	stw	ra,20(sp)
  814858:	df000415 	stw	fp,16(sp)
  81485c:	df000404 	addi	fp,sp,16
  814860:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  814864:	00802074 	movhi	r2,129
  814868:	109beb04 	addi	r2,r2,28588
  81486c:	10800017 	ldw	r2,0(r2)
  814870:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814874:	00003306 	br	814944 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  814878:	e0bffd17 	ldw	r2,-12(fp)
  81487c:	11000217 	ldw	r4,8(r2)
  814880:	08050500 	call	805050 <strlen>
  814884:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  814888:	e0bffd17 	ldw	r2,-12(fp)
  81488c:	10c00217 	ldw	r3,8(r2)
  814890:	e0bffc17 	ldw	r2,-16(fp)
  814894:	1885883a 	add	r2,r3,r2
  814898:	10bfffc4 	addi	r2,r2,-1
  81489c:	10800003 	ldbu	r2,0(r2)
  8148a0:	10803fcc 	andi	r2,r2,255
  8148a4:	1080201c 	xori	r2,r2,128
  8148a8:	10bfe004 	addi	r2,r2,-128
  8148ac:	10800bd8 	cmpnei	r2,r2,47
  8148b0:	1000031e 	bne	r2,zero,8148c0 <alt_find_file+0x70>
    {
      len -= 1;
  8148b4:	e0bffc17 	ldw	r2,-16(fp)
  8148b8:	10bfffc4 	addi	r2,r2,-1
  8148bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8148c0:	e0bffc17 	ldw	r2,-16(fp)
  8148c4:	1007883a 	mov	r3,r2
  8148c8:	e0bffe17 	ldw	r2,-8(fp)
  8148cc:	1885883a 	add	r2,r3,r2
  8148d0:	10800003 	ldbu	r2,0(r2)
  8148d4:	10803fcc 	andi	r2,r2,255
  8148d8:	1080201c 	xori	r2,r2,128
  8148dc:	10bfe004 	addi	r2,r2,-128
  8148e0:	10800be0 	cmpeqi	r2,r2,47
  8148e4:	10000a1e 	bne	r2,zero,814910 <alt_find_file+0xc0>
  8148e8:	e0bffc17 	ldw	r2,-16(fp)
  8148ec:	1007883a 	mov	r3,r2
  8148f0:	e0bffe17 	ldw	r2,-8(fp)
  8148f4:	1885883a 	add	r2,r3,r2
  8148f8:	10800003 	ldbu	r2,0(r2)
  8148fc:	10803fcc 	andi	r2,r2,255
  814900:	1080201c 	xori	r2,r2,128
  814904:	10bfe004 	addi	r2,r2,-128
  814908:	1004c03a 	cmpne	r2,r2,zero
  81490c:	10000a1e 	bne	r2,zero,814938 <alt_find_file+0xe8>
  814910:	e0bffd17 	ldw	r2,-12(fp)
  814914:	11000217 	ldw	r4,8(r2)
  814918:	e1bffc17 	ldw	r6,-16(fp)
  81491c:	e17ffe17 	ldw	r5,-8(fp)
  814920:	0814ab00 	call	814ab0 <memcmp>
  814924:	1004c03a 	cmpne	r2,r2,zero
  814928:	1000031e 	bne	r2,zero,814938 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81492c:	e0bffd17 	ldw	r2,-12(fp)
  814930:	e0bfff15 	stw	r2,-4(fp)
  814934:	00000806 	br	814958 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  814938:	e0bffd17 	ldw	r2,-12(fp)
  81493c:	10800017 	ldw	r2,0(r2)
  814940:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814944:	00c02074 	movhi	r3,129
  814948:	18dbeb04 	addi	r3,r3,28588
  81494c:	e0bffd17 	ldw	r2,-12(fp)
  814950:	10ffc91e 	bne	r2,r3,814878 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  814954:	e03fff15 	stw	zero,-4(fp)
  814958:	e0bfff17 	ldw	r2,-4(fp)
}
  81495c:	e037883a 	mov	sp,fp
  814960:	dfc00117 	ldw	ra,4(sp)
  814964:	df000017 	ldw	fp,0(sp)
  814968:	dec00204 	addi	sp,sp,8
  81496c:	f800283a 	ret

00814970 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  814970:	defff804 	addi	sp,sp,-32
  814974:	dfc00715 	stw	ra,28(sp)
  814978:	df000615 	stw	fp,24(sp)
  81497c:	df000604 	addi	fp,sp,24
  814980:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  814984:	00bffa04 	movi	r2,-24
  814988:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  81498c:	00802074 	movhi	r2,129
  814990:	109c1e04 	addi	r2,r2,28792
  814994:	10800017 	ldw	r2,0(r2)
  814998:	e0bffa15 	stw	r2,-24(fp)
  81499c:	e03ffb0d 	sth	zero,-20(fp)
  8149a0:	e17ffb0b 	ldhu	r5,-20(fp)
  8149a4:	e1bffe04 	addi	r6,fp,-8
  8149a8:	e13ffa17 	ldw	r4,-24(fp)
  8149ac:	080e9380 	call	80e938 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8149b0:	e03ffd15 	stw	zero,-12(fp)
  8149b4:	00001e06 	br	814a30 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  8149b8:	e0bffd17 	ldw	r2,-12(fp)
  8149bc:	00c02074 	movhi	r3,129
  8149c0:	18d74804 	addi	r3,r3,23840
  8149c4:	10800324 	muli	r2,r2,12
  8149c8:	10c5883a 	add	r2,r2,r3
  8149cc:	10800017 	ldw	r2,0(r2)
  8149d0:	1004c03a 	cmpne	r2,r2,zero
  8149d4:	1000131e 	bne	r2,zero,814a24 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  8149d8:	e0bffd17 	ldw	r2,-12(fp)
  8149dc:	00c02074 	movhi	r3,129
  8149e0:	18d74804 	addi	r3,r3,23840
  8149e4:	10800324 	muli	r2,r2,12
  8149e8:	10c7883a 	add	r3,r2,r3
  8149ec:	e0bfff17 	ldw	r2,-4(fp)
  8149f0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8149f4:	00802074 	movhi	r2,129
  8149f8:	109bef04 	addi	r2,r2,28604
  8149fc:	10c00017 	ldw	r3,0(r2)
  814a00:	e0bffd17 	ldw	r2,-12(fp)
  814a04:	1880040e 	bge	r3,r2,814a18 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  814a08:	00c02074 	movhi	r3,129
  814a0c:	18dbef04 	addi	r3,r3,28604
  814a10:	e0bffd17 	ldw	r2,-12(fp)
  814a14:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  814a18:	e0bffd17 	ldw	r2,-12(fp)
  814a1c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  814a20:	00000606 	br	814a3c <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814a24:	e0bffd17 	ldw	r2,-12(fp)
  814a28:	10800044 	addi	r2,r2,1
  814a2c:	e0bffd15 	stw	r2,-12(fp)
  814a30:	e0bffd17 	ldw	r2,-12(fp)
  814a34:	10800810 	cmplti	r2,r2,32
  814a38:	103fdf1e 	bne	r2,zero,8149b8 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  814a3c:	00802074 	movhi	r2,129
  814a40:	109c1e04 	addi	r2,r2,28792
  814a44:	11000017 	ldw	r4,0(r2)
  814a48:	080ed300 	call	80ed30 <OSSemPost>

  return rc;
  814a4c:	e0bffc17 	ldw	r2,-16(fp)
}
  814a50:	e037883a 	mov	sp,fp
  814a54:	dfc00117 	ldw	ra,4(sp)
  814a58:	df000017 	ldw	fp,0(sp)
  814a5c:	dec00204 	addi	sp,sp,8
  814a60:	f800283a 	ret

00814a64 <atexit>:
  814a64:	200b883a 	mov	r5,r4
  814a68:	000d883a 	mov	r6,zero
  814a6c:	0009883a 	mov	r4,zero
  814a70:	000f883a 	mov	r7,zero
  814a74:	0814b241 	jmpi	814b24 <__register_exitproc>

00814a78 <exit>:
  814a78:	defffe04 	addi	sp,sp,-8
  814a7c:	000b883a 	mov	r5,zero
  814a80:	dc000015 	stw	r16,0(sp)
  814a84:	dfc00115 	stw	ra,4(sp)
  814a88:	2021883a 	mov	r16,r4
  814a8c:	0814c5c0 	call	814c5c <__call_exitprocs>
  814a90:	00802074 	movhi	r2,129
  814a94:	109be804 	addi	r2,r2,28576
  814a98:	11000017 	ldw	r4,0(r2)
  814a9c:	20800f17 	ldw	r2,60(r4)
  814aa0:	10000126 	beq	r2,zero,814aa8 <exit+0x30>
  814aa4:	103ee83a 	callr	r2
  814aa8:	8009883a 	mov	r4,r16
  814aac:	0814f980 	call	814f98 <_exit>

00814ab0 <memcmp>:
  814ab0:	00c000c4 	movi	r3,3
  814ab4:	1980032e 	bgeu	r3,r6,814ac4 <memcmp+0x14>
  814ab8:	2144b03a 	or	r2,r4,r5
  814abc:	10c4703a 	and	r2,r2,r3
  814ac0:	10000f26 	beq	r2,zero,814b00 <memcmp+0x50>
  814ac4:	31ffffc4 	addi	r7,r6,-1
  814ac8:	3000061e 	bne	r6,zero,814ae4 <memcmp+0x34>
  814acc:	00000a06 	br	814af8 <memcmp+0x48>
  814ad0:	39ffffc4 	addi	r7,r7,-1
  814ad4:	00bfffc4 	movi	r2,-1
  814ad8:	21000044 	addi	r4,r4,1
  814adc:	29400044 	addi	r5,r5,1
  814ae0:	38800526 	beq	r7,r2,814af8 <memcmp+0x48>
  814ae4:	20c00003 	ldbu	r3,0(r4)
  814ae8:	28800003 	ldbu	r2,0(r5)
  814aec:	18bff826 	beq	r3,r2,814ad0 <memcmp+0x20>
  814af0:	1885c83a 	sub	r2,r3,r2
  814af4:	f800283a 	ret
  814af8:	0005883a 	mov	r2,zero
  814afc:	f800283a 	ret
  814b00:	180f883a 	mov	r7,r3
  814b04:	20c00017 	ldw	r3,0(r4)
  814b08:	28800017 	ldw	r2,0(r5)
  814b0c:	18bfed1e 	bne	r3,r2,814ac4 <memcmp+0x14>
  814b10:	31bfff04 	addi	r6,r6,-4
  814b14:	21000104 	addi	r4,r4,4
  814b18:	29400104 	addi	r5,r5,4
  814b1c:	39bff936 	bltu	r7,r6,814b04 <memcmp+0x54>
  814b20:	003fe806 	br	814ac4 <memcmp+0x14>

00814b24 <__register_exitproc>:
  814b24:	defffa04 	addi	sp,sp,-24
  814b28:	00802074 	movhi	r2,129
  814b2c:	109be804 	addi	r2,r2,28576
  814b30:	dc000015 	stw	r16,0(sp)
  814b34:	14000017 	ldw	r16,0(r2)
  814b38:	dd000415 	stw	r20,16(sp)
  814b3c:	2829883a 	mov	r20,r5
  814b40:	81405217 	ldw	r5,328(r16)
  814b44:	dcc00315 	stw	r19,12(sp)
  814b48:	dc800215 	stw	r18,8(sp)
  814b4c:	dc400115 	stw	r17,4(sp)
  814b50:	dfc00515 	stw	ra,20(sp)
  814b54:	2023883a 	mov	r17,r4
  814b58:	3027883a 	mov	r19,r6
  814b5c:	3825883a 	mov	r18,r7
  814b60:	28002526 	beq	r5,zero,814bf8 <__register_exitproc+0xd4>
  814b64:	29000117 	ldw	r4,4(r5)
  814b68:	008007c4 	movi	r2,31
  814b6c:	11002716 	blt	r2,r4,814c0c <__register_exitproc+0xe8>
  814b70:	8800101e 	bne	r17,zero,814bb4 <__register_exitproc+0x90>
  814b74:	2105883a 	add	r2,r4,r4
  814b78:	1085883a 	add	r2,r2,r2
  814b7c:	20c00044 	addi	r3,r4,1
  814b80:	1145883a 	add	r2,r2,r5
  814b84:	0009883a 	mov	r4,zero
  814b88:	15000215 	stw	r20,8(r2)
  814b8c:	28c00115 	stw	r3,4(r5)
  814b90:	2005883a 	mov	r2,r4
  814b94:	dfc00517 	ldw	ra,20(sp)
  814b98:	dd000417 	ldw	r20,16(sp)
  814b9c:	dcc00317 	ldw	r19,12(sp)
  814ba0:	dc800217 	ldw	r18,8(sp)
  814ba4:	dc400117 	ldw	r17,4(sp)
  814ba8:	dc000017 	ldw	r16,0(sp)
  814bac:	dec00604 	addi	sp,sp,24
  814bb0:	f800283a 	ret
  814bb4:	29802204 	addi	r6,r5,136
  814bb8:	00800044 	movi	r2,1
  814bbc:	110e983a 	sll	r7,r2,r4
  814bc0:	30c04017 	ldw	r3,256(r6)
  814bc4:	2105883a 	add	r2,r4,r4
  814bc8:	1085883a 	add	r2,r2,r2
  814bcc:	1185883a 	add	r2,r2,r6
  814bd0:	19c6b03a 	or	r3,r3,r7
  814bd4:	14802015 	stw	r18,128(r2)
  814bd8:	14c00015 	stw	r19,0(r2)
  814bdc:	00800084 	movi	r2,2
  814be0:	30c04015 	stw	r3,256(r6)
  814be4:	88bfe31e 	bne	r17,r2,814b74 <__register_exitproc+0x50>
  814be8:	30804117 	ldw	r2,260(r6)
  814bec:	11c4b03a 	or	r2,r2,r7
  814bf0:	30804115 	stw	r2,260(r6)
  814bf4:	003fdf06 	br	814b74 <__register_exitproc+0x50>
  814bf8:	00802234 	movhi	r2,136
  814bfc:	1096c004 	addi	r2,r2,23296
  814c00:	100b883a 	mov	r5,r2
  814c04:	80805215 	stw	r2,328(r16)
  814c08:	003fd606 	br	814b64 <__register_exitproc+0x40>
  814c0c:	00800034 	movhi	r2,0
  814c10:	10800004 	addi	r2,r2,0
  814c14:	1000021e 	bne	r2,zero,814c20 <__register_exitproc+0xfc>
  814c18:	013fffc4 	movi	r4,-1
  814c1c:	003fdc06 	br	814b90 <__register_exitproc+0x6c>
  814c20:	01006404 	movi	r4,400
  814c24:	103ee83a 	callr	r2
  814c28:	1007883a 	mov	r3,r2
  814c2c:	103ffa26 	beq	r2,zero,814c18 <__register_exitproc+0xf4>
  814c30:	80805217 	ldw	r2,328(r16)
  814c34:	180b883a 	mov	r5,r3
  814c38:	18000115 	stw	zero,4(r3)
  814c3c:	18800015 	stw	r2,0(r3)
  814c40:	80c05215 	stw	r3,328(r16)
  814c44:	18006215 	stw	zero,392(r3)
  814c48:	18006315 	stw	zero,396(r3)
  814c4c:	0009883a 	mov	r4,zero
  814c50:	883fc826 	beq	r17,zero,814b74 <__register_exitproc+0x50>
  814c54:	003fd706 	br	814bb4 <__register_exitproc+0x90>

00814c58 <register_fini>:
  814c58:	f800283a 	ret

00814c5c <__call_exitprocs>:
  814c5c:	00802074 	movhi	r2,129
  814c60:	109be804 	addi	r2,r2,28576
  814c64:	10800017 	ldw	r2,0(r2)
  814c68:	defff304 	addi	sp,sp,-52
  814c6c:	df000b15 	stw	fp,44(sp)
  814c70:	d8800115 	stw	r2,4(sp)
  814c74:	00800034 	movhi	r2,0
  814c78:	10800004 	addi	r2,r2,0
  814c7c:	1005003a 	cmpeq	r2,r2,zero
  814c80:	d8800215 	stw	r2,8(sp)
  814c84:	d8800117 	ldw	r2,4(sp)
  814c88:	dd400815 	stw	r21,32(sp)
  814c8c:	dd000715 	stw	r20,28(sp)
  814c90:	10805204 	addi	r2,r2,328
  814c94:	dfc00c15 	stw	ra,48(sp)
  814c98:	ddc00a15 	stw	r23,40(sp)
  814c9c:	dd800915 	stw	r22,36(sp)
  814ca0:	dcc00615 	stw	r19,24(sp)
  814ca4:	dc800515 	stw	r18,20(sp)
  814ca8:	dc400415 	stw	r17,16(sp)
  814cac:	dc000315 	stw	r16,12(sp)
  814cb0:	282b883a 	mov	r21,r5
  814cb4:	2039883a 	mov	fp,r4
  814cb8:	d8800015 	stw	r2,0(sp)
  814cbc:	2829003a 	cmpeq	r20,r5,zero
  814cc0:	d8800117 	ldw	r2,4(sp)
  814cc4:	14405217 	ldw	r17,328(r2)
  814cc8:	88001026 	beq	r17,zero,814d0c <__call_exitprocs+0xb0>
  814ccc:	ddc00017 	ldw	r23,0(sp)
  814cd0:	88800117 	ldw	r2,4(r17)
  814cd4:	8c802204 	addi	r18,r17,136
  814cd8:	143fffc4 	addi	r16,r2,-1
  814cdc:	80000916 	blt	r16,zero,814d04 <__call_exitprocs+0xa8>
  814ce0:	05bfffc4 	movi	r22,-1
  814ce4:	a000151e 	bne	r20,zero,814d3c <__call_exitprocs+0xe0>
  814ce8:	8409883a 	add	r4,r16,r16
  814cec:	2105883a 	add	r2,r4,r4
  814cf0:	1485883a 	add	r2,r2,r18
  814cf4:	10c02017 	ldw	r3,128(r2)
  814cf8:	a8c01126 	beq	r21,r3,814d40 <__call_exitprocs+0xe4>
  814cfc:	843fffc4 	addi	r16,r16,-1
  814d00:	85bff81e 	bne	r16,r22,814ce4 <__call_exitprocs+0x88>
  814d04:	d8800217 	ldw	r2,8(sp)
  814d08:	10003126 	beq	r2,zero,814dd0 <__call_exitprocs+0x174>
  814d0c:	dfc00c17 	ldw	ra,48(sp)
  814d10:	df000b17 	ldw	fp,44(sp)
  814d14:	ddc00a17 	ldw	r23,40(sp)
  814d18:	dd800917 	ldw	r22,36(sp)
  814d1c:	dd400817 	ldw	r21,32(sp)
  814d20:	dd000717 	ldw	r20,28(sp)
  814d24:	dcc00617 	ldw	r19,24(sp)
  814d28:	dc800517 	ldw	r18,20(sp)
  814d2c:	dc400417 	ldw	r17,16(sp)
  814d30:	dc000317 	ldw	r16,12(sp)
  814d34:	dec00d04 	addi	sp,sp,52
  814d38:	f800283a 	ret
  814d3c:	8409883a 	add	r4,r16,r16
  814d40:	88c00117 	ldw	r3,4(r17)
  814d44:	2105883a 	add	r2,r4,r4
  814d48:	1445883a 	add	r2,r2,r17
  814d4c:	18ffffc4 	addi	r3,r3,-1
  814d50:	11800217 	ldw	r6,8(r2)
  814d54:	1c001526 	beq	r3,r16,814dac <__call_exitprocs+0x150>
  814d58:	10000215 	stw	zero,8(r2)
  814d5c:	303fe726 	beq	r6,zero,814cfc <__call_exitprocs+0xa0>
  814d60:	00c00044 	movi	r3,1
  814d64:	1c06983a 	sll	r3,r3,r16
  814d68:	90804017 	ldw	r2,256(r18)
  814d6c:	8cc00117 	ldw	r19,4(r17)
  814d70:	1884703a 	and	r2,r3,r2
  814d74:	10001426 	beq	r2,zero,814dc8 <__call_exitprocs+0x16c>
  814d78:	90804117 	ldw	r2,260(r18)
  814d7c:	1884703a 	and	r2,r3,r2
  814d80:	10000c1e 	bne	r2,zero,814db4 <__call_exitprocs+0x158>
  814d84:	2105883a 	add	r2,r4,r4
  814d88:	1485883a 	add	r2,r2,r18
  814d8c:	11400017 	ldw	r5,0(r2)
  814d90:	e009883a 	mov	r4,fp
  814d94:	303ee83a 	callr	r6
  814d98:	88800117 	ldw	r2,4(r17)
  814d9c:	98bfc81e 	bne	r19,r2,814cc0 <__call_exitprocs+0x64>
  814da0:	b8800017 	ldw	r2,0(r23)
  814da4:	147fd526 	beq	r2,r17,814cfc <__call_exitprocs+0xa0>
  814da8:	003fc506 	br	814cc0 <__call_exitprocs+0x64>
  814dac:	8c000115 	stw	r16,4(r17)
  814db0:	003fea06 	br	814d5c <__call_exitprocs+0x100>
  814db4:	2105883a 	add	r2,r4,r4
  814db8:	1485883a 	add	r2,r2,r18
  814dbc:	11000017 	ldw	r4,0(r2)
  814dc0:	303ee83a 	callr	r6
  814dc4:	003ff406 	br	814d98 <__call_exitprocs+0x13c>
  814dc8:	303ee83a 	callr	r6
  814dcc:	003ff206 	br	814d98 <__call_exitprocs+0x13c>
  814dd0:	88800117 	ldw	r2,4(r17)
  814dd4:	1000081e 	bne	r2,zero,814df8 <__call_exitprocs+0x19c>
  814dd8:	89000017 	ldw	r4,0(r17)
  814ddc:	20000726 	beq	r4,zero,814dfc <__call_exitprocs+0x1a0>
  814de0:	b9000015 	stw	r4,0(r23)
  814de4:	8809883a 	mov	r4,r17
  814de8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  814dec:	bc400017 	ldw	r17,0(r23)
  814df0:	883fb71e 	bne	r17,zero,814cd0 <__call_exitprocs+0x74>
  814df4:	003fc506 	br	814d0c <__call_exitprocs+0xb0>
  814df8:	89000017 	ldw	r4,0(r17)
  814dfc:	882f883a 	mov	r23,r17
  814e00:	2023883a 	mov	r17,r4
  814e04:	883fb21e 	bne	r17,zero,814cd0 <__call_exitprocs+0x74>
  814e08:	003fc006 	br	814d0c <__call_exitprocs+0xb0>

00814e0c <udivmodsi4>:
  814e0c:	29001b2e 	bgeu	r5,r4,814e7c <udivmodsi4+0x70>
  814e10:	28001a16 	blt	r5,zero,814e7c <udivmodsi4+0x70>
  814e14:	00800044 	movi	r2,1
  814e18:	0007883a 	mov	r3,zero
  814e1c:	01c007c4 	movi	r7,31
  814e20:	00000306 	br	814e30 <udivmodsi4+0x24>
  814e24:	19c01326 	beq	r3,r7,814e74 <udivmodsi4+0x68>
  814e28:	18c00044 	addi	r3,r3,1
  814e2c:	28000416 	blt	r5,zero,814e40 <udivmodsi4+0x34>
  814e30:	294b883a 	add	r5,r5,r5
  814e34:	1085883a 	add	r2,r2,r2
  814e38:	293ffa36 	bltu	r5,r4,814e24 <udivmodsi4+0x18>
  814e3c:	10000d26 	beq	r2,zero,814e74 <udivmodsi4+0x68>
  814e40:	0007883a 	mov	r3,zero
  814e44:	21400236 	bltu	r4,r5,814e50 <udivmodsi4+0x44>
  814e48:	2149c83a 	sub	r4,r4,r5
  814e4c:	1886b03a 	or	r3,r3,r2
  814e50:	1004d07a 	srli	r2,r2,1
  814e54:	280ad07a 	srli	r5,r5,1
  814e58:	103ffa1e 	bne	r2,zero,814e44 <udivmodsi4+0x38>
  814e5c:	30000226 	beq	r6,zero,814e68 <udivmodsi4+0x5c>
  814e60:	2005883a 	mov	r2,r4
  814e64:	f800283a 	ret
  814e68:	1809883a 	mov	r4,r3
  814e6c:	2005883a 	mov	r2,r4
  814e70:	f800283a 	ret
  814e74:	0007883a 	mov	r3,zero
  814e78:	003ff806 	br	814e5c <udivmodsi4+0x50>
  814e7c:	00800044 	movi	r2,1
  814e80:	0007883a 	mov	r3,zero
  814e84:	003fef06 	br	814e44 <udivmodsi4+0x38>

00814e88 <__divsi3>:
  814e88:	defffe04 	addi	sp,sp,-8
  814e8c:	dc000015 	stw	r16,0(sp)
  814e90:	dfc00115 	stw	ra,4(sp)
  814e94:	0021883a 	mov	r16,zero
  814e98:	20000c16 	blt	r4,zero,814ecc <__divsi3+0x44>
  814e9c:	000d883a 	mov	r6,zero
  814ea0:	28000e16 	blt	r5,zero,814edc <__divsi3+0x54>
  814ea4:	0814e0c0 	call	814e0c <udivmodsi4>
  814ea8:	1007883a 	mov	r3,r2
  814eac:	8005003a 	cmpeq	r2,r16,zero
  814eb0:	1000011e 	bne	r2,zero,814eb8 <__divsi3+0x30>
  814eb4:	00c7c83a 	sub	r3,zero,r3
  814eb8:	1805883a 	mov	r2,r3
  814ebc:	dfc00117 	ldw	ra,4(sp)
  814ec0:	dc000017 	ldw	r16,0(sp)
  814ec4:	dec00204 	addi	sp,sp,8
  814ec8:	f800283a 	ret
  814ecc:	0109c83a 	sub	r4,zero,r4
  814ed0:	04000044 	movi	r16,1
  814ed4:	000d883a 	mov	r6,zero
  814ed8:	283ff20e 	bge	r5,zero,814ea4 <__divsi3+0x1c>
  814edc:	014bc83a 	sub	r5,zero,r5
  814ee0:	8021003a 	cmpeq	r16,r16,zero
  814ee4:	003fef06 	br	814ea4 <__divsi3+0x1c>

00814ee8 <__modsi3>:
  814ee8:	deffff04 	addi	sp,sp,-4
  814eec:	dfc00015 	stw	ra,0(sp)
  814ef0:	01800044 	movi	r6,1
  814ef4:	2807883a 	mov	r3,r5
  814ef8:	20000416 	blt	r4,zero,814f0c <__modsi3+0x24>
  814efc:	28000c16 	blt	r5,zero,814f30 <__modsi3+0x48>
  814f00:	dfc00017 	ldw	ra,0(sp)
  814f04:	dec00104 	addi	sp,sp,4
  814f08:	0814e0c1 	jmpi	814e0c <udivmodsi4>
  814f0c:	0109c83a 	sub	r4,zero,r4
  814f10:	28000b16 	blt	r5,zero,814f40 <__modsi3+0x58>
  814f14:	180b883a 	mov	r5,r3
  814f18:	01800044 	movi	r6,1
  814f1c:	0814e0c0 	call	814e0c <udivmodsi4>
  814f20:	0085c83a 	sub	r2,zero,r2
  814f24:	dfc00017 	ldw	ra,0(sp)
  814f28:	dec00104 	addi	sp,sp,4
  814f2c:	f800283a 	ret
  814f30:	014bc83a 	sub	r5,zero,r5
  814f34:	dfc00017 	ldw	ra,0(sp)
  814f38:	dec00104 	addi	sp,sp,4
  814f3c:	0814e0c1 	jmpi	814e0c <udivmodsi4>
  814f40:	0147c83a 	sub	r3,zero,r5
  814f44:	003ff306 	br	814f14 <__modsi3+0x2c>

00814f48 <__udivsi3>:
  814f48:	000d883a 	mov	r6,zero
  814f4c:	0814e0c1 	jmpi	814e0c <udivmodsi4>

00814f50 <__umodsi3>:
  814f50:	01800044 	movi	r6,1
  814f54:	0814e0c1 	jmpi	814e0c <udivmodsi4>

00814f58 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814f58:	defffd04 	addi	sp,sp,-12
  814f5c:	df000215 	stw	fp,8(sp)
  814f60:	df000204 	addi	fp,sp,8
  814f64:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814f68:	e0bfff17 	ldw	r2,-4(fp)
  814f6c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814f70:	e0bffe17 	ldw	r2,-8(fp)
  814f74:	1005003a 	cmpeq	r2,r2,zero
  814f78:	1000021e 	bne	r2,zero,814f84 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  814f7c:	002af070 	cmpltui	zero,zero,43969
  814f80:	00000106 	br	814f88 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  814f84:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814f88:	e037883a 	mov	sp,fp
  814f8c:	df000017 	ldw	fp,0(sp)
  814f90:	dec00104 	addi	sp,sp,4
  814f94:	f800283a 	ret

00814f98 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814f98:	defffd04 	addi	sp,sp,-12
  814f9c:	dfc00215 	stw	ra,8(sp)
  814fa0:	df000115 	stw	fp,4(sp)
  814fa4:	df000104 	addi	fp,sp,4
  814fa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  814fac:	00802074 	movhi	r2,129
  814fb0:	109c2744 	addi	r2,r2,28829
  814fb4:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  814fb8:	e13fff17 	ldw	r4,-4(fp)
  814fbc:	0814f580 	call	814f58 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814fc0:	003fff06 	br	814fc0 <_exit+0x28>
  814fc4:	00814c58 	cmpnei	r2,zero,1329
